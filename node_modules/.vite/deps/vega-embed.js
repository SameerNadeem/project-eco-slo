var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target2, all) => {
  for (var name4 in all)
    __defProp(target2, name4, { get: all[name4], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key2 of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key2) && key2 !== except)
        __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2,
  mod
));

// node_modules/json-stringify-pretty-compact/index.js
var require_json_stringify_pretty_compact = __commonJS({
  "node_modules/json-stringify-pretty-compact/index.js"(exports, module4) {
    "use strict";
    var stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;
    module4.exports = function stringify4(passedObj, options) {
      var indent, maxLength, replacer2;
      options = options || {};
      indent = JSON.stringify(
        [1],
        void 0,
        options.indent === void 0 ? 2 : options.indent
      ).slice(2, -3);
      maxLength = indent === "" ? Infinity : options.maxLength === void 0 ? 80 : options.maxLength;
      replacer2 = options.replacer;
      return function _stringify(obj, currentIndent, reserved) {
        var end, index5, items, key2, keyPart, keys5, length2, nextIndent, prettified, start, string, value3;
        if (obj && typeof obj.toJSON === "function") {
          obj = obj.toJSON();
        }
        string = JSON.stringify(obj, replacer2);
        if (string === void 0) {
          return string;
        }
        length2 = maxLength - currentIndent.length - reserved;
        if (string.length <= length2) {
          prettified = string.replace(
            stringOrChar,
            function(match2, stringLiteral) {
              return stringLiteral || match2 + " ";
            }
          );
          if (prettified.length <= length2) {
            return prettified;
          }
        }
        if (replacer2 != null) {
          obj = JSON.parse(string);
          replacer2 = void 0;
        }
        if (typeof obj === "object" && obj !== null) {
          nextIndent = currentIndent + indent;
          items = [];
          index5 = 0;
          if (Array.isArray(obj)) {
            start = "[";
            end = "]";
            length2 = obj.length;
            for (; index5 < length2; index5++) {
              items.push(
                _stringify(obj[index5], nextIndent, index5 === length2 - 1 ? 0 : 1) || "null"
              );
            }
          } else {
            start = "{";
            end = "}";
            keys5 = Object.keys(obj);
            length2 = keys5.length;
            for (; index5 < length2; index5++) {
              key2 = keys5[index5];
              keyPart = JSON.stringify(key2) + ": ";
              value3 = _stringify(
                obj[key2],
                nextIndent,
                keyPart.length + (index5 === length2 - 1 ? 0 : 1)
              );
              if (value3 !== void 0) {
                items.push(keyPart + value3);
              }
            }
          }
          if (items.length > 0) {
            return [start, indent + items.join(",\n" + nextIndent), end].join(
              "\n" + currentIndent
            );
          }
        }
        return string;
      }(passedObj, "", 0);
    };
  }
});

// node_modules/clone/clone.js
var require_clone = __commonJS({
  "node_modules/clone/clone.js"(exports, module4) {
    var clone = function() {
      "use strict";
      function _instanceof(obj, type3) {
        return type3 != null && obj instanceof type3;
      }
      var nativeMap;
      try {
        nativeMap = Map;
      } catch (_) {
        nativeMap = function() {
        };
      }
      var nativeSet;
      try {
        nativeSet = Set;
      } catch (_) {
        nativeSet = function() {
        };
      }
      var nativePromise;
      try {
        nativePromise = Promise;
      } catch (_) {
        nativePromise = function() {
        };
      }
      function clone2(parent, circular, depth, prototype2, includeNonEnumerable) {
        if (typeof circular === "object") {
          depth = circular.depth;
          prototype2 = circular.prototype;
          includeNonEnumerable = circular.includeNonEnumerable;
          circular = circular.circular;
        }
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != "undefined";
        if (typeof circular == "undefined")
          circular = true;
        if (typeof depth == "undefined")
          depth = Infinity;
        function _clone(parent2, depth2) {
          if (parent2 === null)
            return null;
          if (depth2 === 0)
            return parent2;
          var child;
          var proto;
          if (typeof parent2 != "object") {
            return parent2;
          }
          if (_instanceof(parent2, nativeMap)) {
            child = new nativeMap();
          } else if (_instanceof(parent2, nativeSet)) {
            child = new nativeSet();
          } else if (_instanceof(parent2, nativePromise)) {
            child = new nativePromise(function(resolve2, reject) {
              parent2.then(function(value3) {
                resolve2(_clone(value3, depth2 - 1));
              }, function(err) {
                reject(_clone(err, depth2 - 1));
              });
            });
          } else if (clone2.__isArray(parent2)) {
            child = [];
          } else if (clone2.__isRegExp(parent2)) {
            child = new RegExp(parent2.source, __getRegExpFlags(parent2));
            if (parent2.lastIndex)
              child.lastIndex = parent2.lastIndex;
          } else if (clone2.__isDate(parent2)) {
            child = new Date(parent2.getTime());
          } else if (useBuffer && Buffer.isBuffer(parent2)) {
            if (Buffer.allocUnsafe) {
              child = Buffer.allocUnsafe(parent2.length);
            } else {
              child = new Buffer(parent2.length);
            }
            parent2.copy(child);
            return child;
          } else if (_instanceof(parent2, Error)) {
            child = Object.create(parent2);
          } else {
            if (typeof prototype2 == "undefined") {
              proto = Object.getPrototypeOf(parent2);
              child = Object.create(proto);
            } else {
              child = Object.create(prototype2);
              proto = prototype2;
            }
          }
          if (circular) {
            var index5 = allParents.indexOf(parent2);
            if (index5 != -1) {
              return allChildren[index5];
            }
            allParents.push(parent2);
            allChildren.push(child);
          }
          if (_instanceof(parent2, nativeMap)) {
            parent2.forEach(function(value3, key2) {
              var keyChild = _clone(key2, depth2 - 1);
              var valueChild = _clone(value3, depth2 - 1);
              child.set(keyChild, valueChild);
            });
          }
          if (_instanceof(parent2, nativeSet)) {
            parent2.forEach(function(value3) {
              var entryChild = _clone(value3, depth2 - 1);
              child.add(entryChild);
            });
          }
          for (var i in parent2) {
            var attrs;
            if (proto) {
              attrs = Object.getOwnPropertyDescriptor(proto, i);
            }
            if (attrs && attrs.set == null) {
              continue;
            }
            child[i] = _clone(parent2[i], depth2 - 1);
          }
          if (Object.getOwnPropertySymbols) {
            var symbols4 = Object.getOwnPropertySymbols(parent2);
            for (var i = 0; i < symbols4.length; i++) {
              var symbol2 = symbols4[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol2);
              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                continue;
              }
              child[symbol2] = _clone(parent2[symbol2], depth2 - 1);
              if (!descriptor.enumerable) {
                Object.defineProperty(child, symbol2, {
                  enumerable: false
                });
              }
            }
          }
          if (includeNonEnumerable) {
            var allPropertyNames = Object.getOwnPropertyNames(parent2);
            for (var i = 0; i < allPropertyNames.length; i++) {
              var propertyName = allPropertyNames[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
              if (descriptor && descriptor.enumerable) {
                continue;
              }
              child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
              Object.defineProperty(child, propertyName, {
                enumerable: false
              });
            }
          }
          return child;
        }
        return _clone(parent, depth);
      }
      clone2.clonePrototype = function clonePrototype(parent) {
        if (parent === null)
          return null;
        var c3 = function() {
        };
        c3.prototype = parent;
        return new c3();
      };
      function __objToStr(o) {
        return Object.prototype.toString.call(o);
      }
      clone2.__objToStr = __objToStr;
      function __isDate(o) {
        return typeof o === "object" && __objToStr(o) === "[object Date]";
      }
      clone2.__isDate = __isDate;
      function __isArray(o) {
        return typeof o === "object" && __objToStr(o) === "[object Array]";
      }
      clone2.__isArray = __isArray;
      function __isRegExp(o) {
        return typeof o === "object" && __objToStr(o) === "[object RegExp]";
      }
      clone2.__isRegExp = __isRegExp;
      function __getRegExpFlags(re3) {
        var flags = "";
        if (re3.global)
          flags += "g";
        if (re3.ignoreCase)
          flags += "i";
        if (re3.multiline)
          flags += "m";
        return flags;
      }
      clone2.__getRegExpFlags = __getRegExpFlags;
      return clone2;
    }();
    if (typeof module4 === "object" && module4.exports) {
      module4.exports = clone;
    }
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module4) {
    "use strict";
    module4.exports = function equal2(a4, b2) {
      if (a4 === b2)
        return true;
      if (a4 && b2 && typeof a4 == "object" && typeof b2 == "object") {
        if (a4.constructor !== b2.constructor)
          return false;
        var length2, i, keys5;
        if (Array.isArray(a4)) {
          length2 = a4.length;
          if (length2 != b2.length)
            return false;
          for (i = length2; i-- !== 0; )
            if (!equal2(a4[i], b2[i]))
              return false;
          return true;
        }
        if (a4.constructor === RegExp)
          return a4.source === b2.source && a4.flags === b2.flags;
        if (a4.valueOf !== Object.prototype.valueOf)
          return a4.valueOf() === b2.valueOf();
        if (a4.toString !== Object.prototype.toString)
          return a4.toString() === b2.toString();
        keys5 = Object.keys(a4);
        length2 = keys5.length;
        if (length2 !== Object.keys(b2).length)
          return false;
        for (i = length2; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys5[i]))
            return false;
        for (i = length2; i-- !== 0; ) {
          var key2 = keys5[i];
          if (!equal2(a4[key2], b2[key2]))
            return false;
        }
        return true;
      }
      return a4 !== a4 && b2 !== b2;
    };
  }
});

// node_modules/fast-json-stable-stringify/index.js
var require_fast_json_stable_stringify = __commonJS({
  "node_modules/fast-json-stable-stringify/index.js"(exports, module4) {
    "use strict";
    module4.exports = function(data3, opts2) {
      if (!opts2)
        opts2 = {};
      if (typeof opts2 === "function")
        opts2 = { cmp: opts2 };
      var cycles = typeof opts2.cycles === "boolean" ? opts2.cycles : false;
      var cmp2 = opts2.cmp && function(f) {
        return function(node) {
          return function(a4, b2) {
            var aobj = { key: a4, value: node[a4] };
            var bobj = { key: b2, value: node[b2] };
            return f(aobj, bobj);
          };
        };
      }(opts2.cmp);
      var seen = [];
      return function stringify4(node) {
        if (node && node.toJSON && typeof node.toJSON === "function") {
          node = node.toJSON();
        }
        if (node === void 0)
          return;
        if (typeof node == "number")
          return isFinite(node) ? "" + node : "null";
        if (typeof node !== "object")
          return JSON.stringify(node);
        var i, out;
        if (Array.isArray(node)) {
          out = "[";
          for (i = 0; i < node.length; i++) {
            if (i)
              out += ",";
            out += stringify4(node[i]) || "null";
          }
          return out + "]";
        }
        if (node === null)
          return "null";
        if (seen.indexOf(node) !== -1) {
          if (cycles)
            return JSON.stringify("__cycle__");
          throw new TypeError("Converting circular structure to JSON");
        }
        var seenIndex = seen.push(node) - 1;
        var keys5 = Object.keys(node).sort(cmp2 && cmp2(node));
        out = "";
        for (i = 0; i < keys5.length; i++) {
          var key2 = keys5[i];
          var value3 = stringify4(node[key2]);
          if (!value3)
            continue;
          if (out)
            out += ",";
          out += JSON.stringify(key2) + ":" + value3;
        }
        seen.splice(seenIndex, 1);
        return "{" + out + "}";
      }(data3);
    };
  }
});

// node_modules/fast-json-patch/module/core.mjs
var core_exports = {};
__export(core_exports, {
  JsonPatchError: () => JsonPatchError,
  _areEquals: () => _areEquals,
  applyOperation: () => applyOperation,
  applyPatch: () => applyPatch,
  applyReducer: () => applyReducer,
  deepClone: () => deepClone,
  getValueByPointer: () => getValueByPointer,
  validate: () => validate,
  validator: () => validator
});

// node_modules/fast-json-patch/module/helpers.mjs
var __extends = function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var _hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwnProperty(obj, key2) {
  return _hasOwnProperty.call(obj, key2);
}
function _objectKeys(obj) {
  if (Array.isArray(obj)) {
    var keys_1 = new Array(obj.length);
    for (var k3 = 0; k3 < keys_1.length; k3++) {
      keys_1[k3] = "" + k3;
    }
    return keys_1;
  }
  if (Object.keys) {
    return Object.keys(obj);
  }
  var keys5 = [];
  for (var i in obj) {
    if (hasOwnProperty(obj, i)) {
      keys5.push(i);
    }
  }
  return keys5;
}
function _deepClone(obj) {
  switch (typeof obj) {
    case "object":
      return JSON.parse(JSON.stringify(obj));
    case "undefined":
      return null;
    default:
      return obj;
  }
}
function isInteger(str) {
  var i = 0;
  var len = str.length;
  var charCode;
  while (i < len) {
    charCode = str.charCodeAt(i);
    if (charCode >= 48 && charCode <= 57) {
      i++;
      continue;
    }
    return false;
  }
  return true;
}
function escapePathComponent(path3) {
  if (path3.indexOf("/") === -1 && path3.indexOf("~") === -1)
    return path3;
  return path3.replace(/~/g, "~0").replace(/\//g, "~1");
}
function unescapePathComponent(path3) {
  return path3.replace(/~1/g, "/").replace(/~0/g, "~");
}
function hasUndefined(obj) {
  if (obj === void 0) {
    return true;
  }
  if (obj) {
    if (Array.isArray(obj)) {
      for (var i_1 = 0, len = obj.length; i_1 < len; i_1++) {
        if (hasUndefined(obj[i_1])) {
          return true;
        }
      }
    } else if (typeof obj === "object") {
      var objKeys = _objectKeys(obj);
      var objKeysLength = objKeys.length;
      for (var i = 0; i < objKeysLength; i++) {
        if (hasUndefined(obj[objKeys[i]])) {
          return true;
        }
      }
    }
  }
  return false;
}
function patchErrorMessageFormatter(message, args) {
  var messageParts = [message];
  for (var key2 in args) {
    var value3 = typeof args[key2] === "object" ? JSON.stringify(args[key2], null, 2) : args[key2];
    if (typeof value3 !== "undefined") {
      messageParts.push(key2 + ": " + value3);
    }
  }
  return messageParts.join("\n");
}
var PatchError = function(_super) {
  __extends(PatchError2, _super);
  function PatchError2(message, name4, index5, operation, tree) {
    var _newTarget = this.constructor;
    var _this = _super.call(this, patchErrorMessageFormatter(message, { name: name4, index: index5, operation, tree })) || this;
    _this.name = name4;
    _this.index = index5;
    _this.operation = operation;
    _this.tree = tree;
    Object.setPrototypeOf(_this, _newTarget.prototype);
    _this.message = patchErrorMessageFormatter(message, { name: name4, index: index5, operation, tree });
    return _this;
  }
  return PatchError2;
}(Error);

// node_modules/fast-json-patch/module/core.mjs
var JsonPatchError = PatchError;
var deepClone = _deepClone;
var objOps = {
  add: function(obj, key2, document2) {
    obj[key2] = this.value;
    return { newDocument: document2 };
  },
  remove: function(obj, key2, document2) {
    var removed = obj[key2];
    delete obj[key2];
    return { newDocument: document2, removed };
  },
  replace: function(obj, key2, document2) {
    var removed = obj[key2];
    obj[key2] = this.value;
    return { newDocument: document2, removed };
  },
  move: function(obj, key2, document2) {
    var removed = getValueByPointer(document2, this.path);
    if (removed) {
      removed = _deepClone(removed);
    }
    var originalValue = applyOperation(document2, { op: "remove", path: this.from }).removed;
    applyOperation(document2, { op: "add", path: this.path, value: originalValue });
    return { newDocument: document2, removed };
  },
  copy: function(obj, key2, document2) {
    var valueToCopy = getValueByPointer(document2, this.from);
    applyOperation(document2, { op: "add", path: this.path, value: _deepClone(valueToCopy) });
    return { newDocument: document2 };
  },
  test: function(obj, key2, document2) {
    return { newDocument: document2, test: _areEquals(obj[key2], this.value) };
  },
  _get: function(obj, key2, document2) {
    this.value = obj[key2];
    return { newDocument: document2 };
  }
};
var arrOps = {
  add: function(arr, i, document2) {
    if (isInteger(i)) {
      arr.splice(i, 0, this.value);
    } else {
      arr[i] = this.value;
    }
    return { newDocument: document2, index: i };
  },
  remove: function(arr, i, document2) {
    var removedList = arr.splice(i, 1);
    return { newDocument: document2, removed: removedList[0] };
  },
  replace: function(arr, i, document2) {
    var removed = arr[i];
    arr[i] = this.value;
    return { newDocument: document2, removed };
  },
  move: objOps.move,
  copy: objOps.copy,
  test: objOps.test,
  _get: objOps._get
};
function getValueByPointer(document2, pointer) {
  if (pointer == "") {
    return document2;
  }
  var getOriginalDestination = { op: "_get", path: pointer };
  applyOperation(document2, getOriginalDestination);
  return getOriginalDestination.value;
}
function applyOperation(document2, operation, validateOperation, mutateDocument, banPrototypeModifications, index5) {
  if (validateOperation === void 0) {
    validateOperation = false;
  }
  if (mutateDocument === void 0) {
    mutateDocument = true;
  }
  if (banPrototypeModifications === void 0) {
    banPrototypeModifications = true;
  }
  if (index5 === void 0) {
    index5 = 0;
  }
  if (validateOperation) {
    if (typeof validateOperation == "function") {
      validateOperation(operation, 0, document2, operation.path);
    } else {
      validator(operation, 0);
    }
  }
  if (operation.path === "") {
    var returnValue = { newDocument: document2 };
    if (operation.op === "add") {
      returnValue.newDocument = operation.value;
      return returnValue;
    } else if (operation.op === "replace") {
      returnValue.newDocument = operation.value;
      returnValue.removed = document2;
      return returnValue;
    } else if (operation.op === "move" || operation.op === "copy") {
      returnValue.newDocument = getValueByPointer(document2, operation.from);
      if (operation.op === "move") {
        returnValue.removed = document2;
      }
      return returnValue;
    } else if (operation.op === "test") {
      returnValue.test = _areEquals(document2, operation.value);
      if (returnValue.test === false) {
        throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index5, operation, document2);
      }
      returnValue.newDocument = document2;
      return returnValue;
    } else if (operation.op === "remove") {
      returnValue.removed = document2;
      returnValue.newDocument = null;
      return returnValue;
    } else if (operation.op === "_get") {
      operation.value = document2;
      return returnValue;
    } else {
      if (validateOperation) {
        throw new JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index5, operation, document2);
      } else {
        return returnValue;
      }
    }
  } else {
    if (!mutateDocument) {
      document2 = _deepClone(document2);
    }
    var path3 = operation.path || "";
    var keys5 = path3.split("/");
    var obj = document2;
    var t4 = 1;
    var len = keys5.length;
    var existingPathFragment = void 0;
    var key2 = void 0;
    var validateFunction = void 0;
    if (typeof validateOperation == "function") {
      validateFunction = validateOperation;
    } else {
      validateFunction = validator;
    }
    while (true) {
      key2 = keys5[t4];
      if (key2 && key2.indexOf("~") != -1) {
        key2 = unescapePathComponent(key2);
      }
      if (banPrototypeModifications && (key2 == "__proto__" || key2 == "prototype" && t4 > 0 && keys5[t4 - 1] == "constructor")) {
        throw new TypeError("JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");
      }
      if (validateOperation) {
        if (existingPathFragment === void 0) {
          if (obj[key2] === void 0) {
            existingPathFragment = keys5.slice(0, t4).join("/");
          } else if (t4 == len - 1) {
            existingPathFragment = operation.path;
          }
          if (existingPathFragment !== void 0) {
            validateFunction(operation, 0, document2, existingPathFragment);
          }
        }
      }
      t4++;
      if (Array.isArray(obj)) {
        if (key2 === "-") {
          key2 = obj.length;
        } else {
          if (validateOperation && !isInteger(key2)) {
            throw new JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index5, operation, document2);
          } else if (isInteger(key2)) {
            key2 = ~~key2;
          }
        }
        if (t4 >= len) {
          if (validateOperation && operation.op === "add" && key2 > obj.length) {
            throw new JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index5, operation, document2);
          }
          var returnValue = arrOps[operation.op].call(operation, obj, key2, document2);
          if (returnValue.test === false) {
            throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index5, operation, document2);
          }
          return returnValue;
        }
      } else {
        if (t4 >= len) {
          var returnValue = objOps[operation.op].call(operation, obj, key2, document2);
          if (returnValue.test === false) {
            throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index5, operation, document2);
          }
          return returnValue;
        }
      }
      obj = obj[key2];
      if (validateOperation && t4 < len && (!obj || typeof obj !== "object")) {
        throw new JsonPatchError("Cannot perform operation at the desired path", "OPERATION_PATH_UNRESOLVABLE", index5, operation, document2);
      }
    }
  }
}
function applyPatch(document2, patch2, validateOperation, mutateDocument, banPrototypeModifications) {
  if (mutateDocument === void 0) {
    mutateDocument = true;
  }
  if (banPrototypeModifications === void 0) {
    banPrototypeModifications = true;
  }
  if (validateOperation) {
    if (!Array.isArray(patch2)) {
      throw new JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
    }
  }
  if (!mutateDocument) {
    document2 = _deepClone(document2);
  }
  var results = new Array(patch2.length);
  for (var i = 0, length_1 = patch2.length; i < length_1; i++) {
    results[i] = applyOperation(document2, patch2[i], validateOperation, true, banPrototypeModifications, i);
    document2 = results[i].newDocument;
  }
  results.newDocument = document2;
  return results;
}
function applyReducer(document2, operation, index5) {
  var operationResult = applyOperation(document2, operation);
  if (operationResult.test === false) {
    throw new JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index5, operation, document2);
  }
  return operationResult.newDocument;
}
function validator(operation, index5, document2, existingPathFragment) {
  if (typeof operation !== "object" || operation === null || Array.isArray(operation)) {
    throw new JsonPatchError("Operation is not an object", "OPERATION_NOT_AN_OBJECT", index5, operation, document2);
  } else if (!objOps[operation.op]) {
    throw new JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index5, operation, document2);
  } else if (typeof operation.path !== "string") {
    throw new JsonPatchError("Operation `path` property is not a string", "OPERATION_PATH_INVALID", index5, operation, document2);
  } else if (operation.path.indexOf("/") !== 0 && operation.path.length > 0) {
    throw new JsonPatchError('Operation `path` property must start with "/"', "OPERATION_PATH_INVALID", index5, operation, document2);
  } else if ((operation.op === "move" || operation.op === "copy") && typeof operation.from !== "string") {
    throw new JsonPatchError("Operation `from` property is not present (applicable in `move` and `copy` operations)", "OPERATION_FROM_REQUIRED", index5, operation, document2);
  } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && operation.value === void 0) {
    throw new JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_REQUIRED", index5, operation, document2);
  } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && hasUndefined(operation.value)) {
    throw new JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED", index5, operation, document2);
  } else if (document2) {
    if (operation.op == "add") {
      var pathLen = operation.path.split("/").length;
      var existingPathLen = existingPathFragment.split("/").length;
      if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
        throw new JsonPatchError("Cannot perform an `add` operation at the desired path", "OPERATION_PATH_CANNOT_ADD", index5, operation, document2);
      }
    } else if (operation.op === "replace" || operation.op === "remove" || operation.op === "_get") {
      if (operation.path !== existingPathFragment) {
        throw new JsonPatchError("Cannot perform the operation at a path that does not exist", "OPERATION_PATH_UNRESOLVABLE", index5, operation, document2);
      }
    } else if (operation.op === "move" || operation.op === "copy") {
      var existingValue = { op: "_get", path: operation.from, value: void 0 };
      var error2 = validate([existingValue], document2);
      if (error2 && error2.name === "OPERATION_PATH_UNRESOLVABLE") {
        throw new JsonPatchError("Cannot perform the operation from a path that does not exist", "OPERATION_FROM_UNRESOLVABLE", index5, operation, document2);
      }
    }
  }
}
function validate(sequence3, document2, externalValidator) {
  try {
    if (!Array.isArray(sequence3)) {
      throw new JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
    }
    if (document2) {
      applyPatch(_deepClone(document2), _deepClone(sequence3), externalValidator || true);
    } else {
      externalValidator = externalValidator || validator;
      for (var i = 0; i < sequence3.length; i++) {
        externalValidator(sequence3[i], i, document2, void 0);
      }
    }
  } catch (e3) {
    if (e3 instanceof JsonPatchError) {
      return e3;
    } else {
      throw e3;
    }
  }
}
function _areEquals(a4, b2) {
  if (a4 === b2)
    return true;
  if (a4 && b2 && typeof a4 == "object" && typeof b2 == "object") {
    var arrA = Array.isArray(a4), arrB = Array.isArray(b2), i, length2, key2;
    if (arrA && arrB) {
      length2 = a4.length;
      if (length2 != b2.length)
        return false;
      for (i = length2; i-- !== 0; )
        if (!_areEquals(a4[i], b2[i]))
          return false;
      return true;
    }
    if (arrA != arrB)
      return false;
    var keys5 = Object.keys(a4);
    length2 = keys5.length;
    if (length2 !== Object.keys(b2).length)
      return false;
    for (i = length2; i-- !== 0; )
      if (!b2.hasOwnProperty(keys5[i]))
        return false;
    for (i = length2; i-- !== 0; ) {
      key2 = keys5[i];
      if (!_areEquals(a4[key2], b2[key2]))
        return false;
    }
    return true;
  }
  return a4 !== a4 && b2 !== b2;
}

// node_modules/fast-json-patch/module/duplex.mjs
var duplex_exports = {};
__export(duplex_exports, {
  compare: () => compare,
  generate: () => generate,
  observe: () => observe,
  unobserve: () => unobserve
});
var beforeDict = /* @__PURE__ */ new WeakMap();
var Mirror = function() {
  function Mirror2(obj) {
    this.observers = /* @__PURE__ */ new Map();
    this.obj = obj;
  }
  return Mirror2;
}();
var ObserverInfo = function() {
  function ObserverInfo2(callback, observer) {
    this.callback = callback;
    this.observer = observer;
  }
  return ObserverInfo2;
}();
function getMirror(obj) {
  return beforeDict.get(obj);
}
function getObserverFromMirror(mirror, callback) {
  return mirror.observers.get(callback);
}
function removeObserverFromMirror(mirror, observer) {
  mirror.observers.delete(observer.callback);
}
function unobserve(root, observer) {
  observer.unobserve();
}
function observe(obj, callback) {
  var patches = [];
  var observer;
  var mirror = getMirror(obj);
  if (!mirror) {
    mirror = new Mirror(obj);
    beforeDict.set(obj, mirror);
  } else {
    var observerInfo = getObserverFromMirror(mirror, callback);
    observer = observerInfo && observerInfo.observer;
  }
  if (observer) {
    return observer;
  }
  observer = {};
  mirror.value = _deepClone(obj);
  if (callback) {
    observer.callback = callback;
    observer.next = null;
    var dirtyCheck = function() {
      generate(observer);
    };
    var fastCheck = function() {
      clearTimeout(observer.next);
      observer.next = setTimeout(dirtyCheck);
    };
    if (typeof window !== "undefined") {
      window.addEventListener("mouseup", fastCheck);
      window.addEventListener("keyup", fastCheck);
      window.addEventListener("mousedown", fastCheck);
      window.addEventListener("keydown", fastCheck);
      window.addEventListener("change", fastCheck);
    }
  }
  observer.patches = patches;
  observer.object = obj;
  observer.unobserve = function() {
    generate(observer);
    clearTimeout(observer.next);
    removeObserverFromMirror(mirror, observer);
    if (typeof window !== "undefined") {
      window.removeEventListener("mouseup", fastCheck);
      window.removeEventListener("keyup", fastCheck);
      window.removeEventListener("mousedown", fastCheck);
      window.removeEventListener("keydown", fastCheck);
      window.removeEventListener("change", fastCheck);
    }
  };
  mirror.observers.set(callback, new ObserverInfo(callback, observer));
  return observer;
}
function generate(observer, invertible) {
  if (invertible === void 0) {
    invertible = false;
  }
  var mirror = beforeDict.get(observer.object);
  _generate(mirror.value, observer.object, observer.patches, "", invertible);
  if (observer.patches.length) {
    applyPatch(mirror.value, observer.patches);
  }
  var temp2 = observer.patches;
  if (temp2.length > 0) {
    observer.patches = [];
    if (observer.callback) {
      observer.callback(temp2);
    }
  }
  return temp2;
}
function _generate(mirror, obj, patches, path3, invertible) {
  if (obj === mirror) {
    return;
  }
  if (typeof obj.toJSON === "function") {
    obj = obj.toJSON();
  }
  var newKeys = _objectKeys(obj);
  var oldKeys = _objectKeys(mirror);
  var changed = false;
  var deleted = false;
  for (var t4 = oldKeys.length - 1; t4 >= 0; t4--) {
    var key2 = oldKeys[t4];
    var oldVal = mirror[key2];
    if (hasOwnProperty(obj, key2) && !(obj[key2] === void 0 && oldVal !== void 0 && Array.isArray(obj) === false)) {
      var newVal = obj[key2];
      if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {
        _generate(oldVal, newVal, patches, path3 + "/" + escapePathComponent(key2), invertible);
      } else {
        if (oldVal !== newVal) {
          changed = true;
          if (invertible) {
            patches.push({ op: "test", path: path3 + "/" + escapePathComponent(key2), value: _deepClone(oldVal) });
          }
          patches.push({ op: "replace", path: path3 + "/" + escapePathComponent(key2), value: _deepClone(newVal) });
        }
      }
    } else if (Array.isArray(mirror) === Array.isArray(obj)) {
      if (invertible) {
        patches.push({ op: "test", path: path3 + "/" + escapePathComponent(key2), value: _deepClone(oldVal) });
      }
      patches.push({ op: "remove", path: path3 + "/" + escapePathComponent(key2) });
      deleted = true;
    } else {
      if (invertible) {
        patches.push({ op: "test", path: path3, value: mirror });
      }
      patches.push({ op: "replace", path: path3, value: obj });
      changed = true;
    }
  }
  if (!deleted && newKeys.length == oldKeys.length) {
    return;
  }
  for (var t4 = 0; t4 < newKeys.length; t4++) {
    var key2 = newKeys[t4];
    if (!hasOwnProperty(mirror, key2) && obj[key2] !== void 0) {
      patches.push({ op: "add", path: path3 + "/" + escapePathComponent(key2), value: _deepClone(obj[key2]) });
    }
  }
}
function compare(tree1, tree2, invertible) {
  if (invertible === void 0) {
    invertible = false;
  }
  var patches = [];
  _generate(tree1, tree2, patches, "", invertible);
  return patches;
}

// node_modules/fast-json-patch/index.mjs
var fast_json_patch_default = Object.assign({}, core_exports, duplex_exports, {
  JsonPatchError: PatchError,
  deepClone: _deepClone,
  escapePathComponent,
  unescapePathComponent
});

// node_modules/vega-embed/build/vega-embed.module.js
var import_json_stringify_pretty_compact = __toESM(require_json_stringify_pretty_compact());

// node_modules/vega/build/vega.module.js
var vega_module_exports = {};
__export(vega_module_exports, {
  Bounds: () => Bounds,
  CanvasHandler: () => CanvasHandler,
  CanvasRenderer: () => CanvasRenderer,
  DATE: () => DATE,
  DAY: () => DAY,
  DAYOFYEAR: () => DAYOFYEAR,
  Dataflow: () => Dataflow,
  Debug: () => Debug,
  Error: () => Error$1,
  EventStream: () => EventStream,
  Gradient: () => Gradient,
  GroupItem: () => GroupItem,
  HOURS: () => HOURS,
  Handler: () => Handler,
  Info: () => Info,
  Item: () => Item,
  MILLISECONDS: () => MILLISECONDS,
  MINUTES: () => MINUTES,
  MONTH: () => MONTH,
  Marks: () => Marks,
  MultiPulse: () => MultiPulse,
  None: () => None,
  Operator: () => Operator,
  Parameters: () => Parameters,
  Pulse: () => Pulse,
  QUARTER: () => QUARTER,
  RenderType: () => RenderType,
  Renderer: () => Renderer,
  ResourceLoader: () => ResourceLoader,
  SECONDS: () => SECONDS,
  SVGHandler: () => SVGHandler,
  SVGRenderer: () => SVGRenderer,
  SVGStringRenderer: () => SVGStringRenderer,
  Scenegraph: () => Scenegraph,
  TIME_UNITS: () => TIME_UNITS,
  Transform: () => Transform,
  View: () => View,
  WEEK: () => WEEK,
  Warn: () => Warn,
  YEAR: () => YEAR,
  accessor: () => accessor,
  accessorFields: () => accessorFields,
  accessorName: () => accessorName,
  array: () => array,
  ascending: () => ascending,
  bandwidthNRD: () => estimateBandwidth,
  bin: () => bin3,
  bootstrapCI: () => bootstrapCI,
  boundClip: () => boundClip,
  boundContext: () => boundContext,
  boundItem: () => boundItem,
  boundMark: () => boundMark,
  boundStroke: () => boundStroke,
  changeset: () => changeset,
  clampRange: () => clampRange,
  codegenExpression: () => codegen,
  compare: () => compare2,
  constant: () => constant,
  cumulativeLogNormal: () => cumulativeLogNormal,
  cumulativeNormal: () => cumulativeNormal,
  cumulativeUniform: () => cumulativeUniform,
  dayofyear: () => dayofyear,
  debounce: () => debounce,
  defaultLocale: () => defaultLocale3,
  definition: () => definition,
  densityLogNormal: () => densityLogNormal,
  densityNormal: () => densityNormal,
  densityUniform: () => densityUniform,
  domChild: () => domChild,
  domClear: () => domClear,
  domCreate: () => domCreate,
  domFind: () => domFind,
  dotbin: () => dotbin,
  error: () => error,
  expressionFunction: () => expressionFunction,
  extend: () => extend,
  extent: () => extent,
  extentIndex: () => extentIndex,
  falsy: () => falsy,
  fastmap: () => fastmap,
  field: () => field,
  flush: () => flush,
  font: () => font,
  fontFamily: () => fontFamily,
  fontSize: () => fontSize,
  format: () => format2,
  formatLocale: () => numberFormatDefaultLocale,
  formats: () => formats,
  hasOwnProperty: () => has,
  id: () => id,
  identity: () => identity,
  inferType: () => inferType,
  inferTypes: () => inferTypes,
  ingest: () => ingest$1,
  inherits: () => inherits,
  inrange: () => inrange,
  interpolate: () => interpolate,
  interpolateColors: () => interpolateColors,
  interpolateRange: () => interpolateRange,
  intersect: () => intersect2,
  intersectBoxLine: () => intersectBoxLine,
  intersectPath: () => intersectPath,
  intersectPoint: () => intersectPoint,
  intersectRule: () => intersectRule,
  isArray: () => isArray,
  isBoolean: () => isBoolean,
  isDate: () => isDate,
  isFunction: () => isFunction,
  isIterable: () => isIterable,
  isNumber: () => isNumber,
  isObject: () => isObject,
  isRegExp: () => isRegExp,
  isString: () => isString,
  isTuple: () => isTuple,
  key: () => key,
  lerp: () => lerp,
  lineHeight: () => lineHeight,
  loader: () => loader,
  locale: () => locale3,
  logger: () => logger,
  lruCache: () => lruCache,
  markup: () => markup,
  merge: () => merge,
  mergeConfig: () => mergeConfig,
  multiLineOffset: () => multiLineOffset,
  one: () => one,
  pad: () => pad,
  panLinear: () => panLinear,
  panLog: () => panLog,
  panPow: () => panPow,
  panSymlog: () => panSymlog,
  parse: () => parse6,
  parseExpression: () => parser,
  parseSelector: () => eventSelector,
  path: () => path_default,
  pathCurves: () => curves,
  pathEqual: () => pathEqual,
  pathParse: () => parse4,
  pathRectangle: () => vg_rect,
  pathRender: () => pathRender,
  pathSymbols: () => symbols2,
  pathTrail: () => vg_trail,
  peek: () => peek,
  point: () => point7,
  projection: () => projection2,
  quantileLogNormal: () => quantileLogNormal,
  quantileNormal: () => quantileNormal,
  quantileUniform: () => quantileUniform,
  quantiles: () => quantiles,
  quantizeInterpolator: () => quantizeInterpolator,
  quarter: () => quarter,
  quartiles: () => quartiles,
  random: () => random,
  randomInteger: () => integer,
  randomKDE: () => kde,
  randomLCG: () => lcg,
  randomLogNormal: () => lognormal,
  randomMixture: () => mixture,
  randomNormal: () => gaussian,
  randomUniform: () => uniform,
  read: () => read,
  regressionExp: () => exp2,
  regressionLinear: () => linear,
  regressionLoess: () => loess,
  regressionLog: () => log2,
  regressionPoly: () => poly,
  regressionPow: () => pow2,
  regressionQuad: () => quad,
  renderModule: () => renderModule,
  repeat: () => repeat,
  resetDefaultLocale: () => resetDefaultLocale,
  resetSVGClipId: () => resetSVGClipId,
  resetSVGDefIds: () => resetSVGDefIds,
  responseType: () => responseType,
  runtimeContext: () => context2,
  sampleCurve: () => sampleCurve,
  sampleLogNormal: () => sampleLogNormal,
  sampleNormal: () => sampleNormal,
  sampleUniform: () => sampleUniform,
  scale: () => scale,
  sceneEqual: () => sceneEqual,
  sceneFromJSON: () => sceneFromJSON,
  scenePickVisit: () => pickVisit,
  sceneToJSON: () => sceneToJSON,
  sceneVisit: () => visit,
  sceneZOrder: () => zorder,
  scheme: () => scheme,
  serializeXML: () => serializeXML,
  setRandom: () => setRandom,
  span: () => span,
  splitAccessPath: () => splitAccessPath,
  stringValue: () => $,
  textMetrics: () => textMetrics,
  timeBin: () => bin2,
  timeFloor: () => timeFloor,
  timeFormatLocale: () => timeFormatDefaultLocale,
  timeInterval: () => timeInterval,
  timeOffset: () => timeOffset,
  timeSequence: () => timeSequence,
  timeUnitSpecifier: () => timeUnitSpecifier,
  timeUnits: () => timeUnits,
  toBoolean: () => toBoolean,
  toDate: () => toDate,
  toNumber: () => toNumber,
  toSet: () => toSet,
  toString: () => toString,
  transform: () => transform,
  transforms: () => transforms,
  truncate: () => truncate,
  truthy: () => truthy,
  tupleid: () => tupleid,
  typeParsers: () => typeParsers,
  utcFloor: () => utcFloor,
  utcInterval: () => utcInterval,
  utcOffset: () => utcOffset,
  utcSequence: () => utcSequence,
  utcdayofyear: () => utcdayofyear,
  utcquarter: () => utcquarter,
  utcweek: () => utcweek,
  version: () => version,
  visitArray: () => visitArray,
  week: () => week,
  writeConfig: () => writeConfig,
  zero: () => zero,
  zoomLinear: () => zoomLinear,
  zoomLog: () => zoomLog,
  zoomPow: () => zoomPow,
  zoomSymlog: () => zoomSymlog
});

// node_modules/vega-util/build/vega-util.module.js
function accessor(fn, fields, name4) {
  fn.fields = fields || [];
  fn.fname = name4;
  return fn;
}
function accessorName(fn) {
  return fn == null ? null : fn.fname;
}
function accessorFields(fn) {
  return fn == null ? null : fn.fields;
}
function getter(path3) {
  return path3.length === 1 ? get1(path3[0]) : getN(path3);
}
var get1 = (field3) => function(obj) {
  return obj[field3];
};
var getN = (path3) => {
  const len = path3.length;
  return function(obj) {
    for (let i = 0; i < len; ++i) {
      obj = obj[path3[i]];
    }
    return obj;
  };
};
function error(message) {
  throw Error(message);
}
function splitAccessPath(p) {
  const path3 = [], n = p.length;
  let q = null, b2 = 0, s2 = "", i, j, c3;
  p = p + "";
  function push2() {
    path3.push(s2 + p.substring(i, j));
    s2 = "";
    i = j + 1;
  }
  for (i = j = 0; j < n; ++j) {
    c3 = p[j];
    if (c3 === "\\") {
      s2 += p.substring(i, j);
      s2 += p.substring(++j, ++j);
      i = j;
    } else if (c3 === q) {
      push2();
      q = null;
      b2 = -1;
    } else if (q) {
      continue;
    } else if (i === b2 && c3 === '"') {
      i = j + 1;
      q = c3;
    } else if (i === b2 && c3 === "'") {
      i = j + 1;
      q = c3;
    } else if (c3 === "." && !b2) {
      if (j > i) {
        push2();
      } else {
        i = j + 1;
      }
    } else if (c3 === "[") {
      if (j > i)
        push2();
      b2 = i = j + 1;
    } else if (c3 === "]") {
      if (!b2)
        error("Access path missing open bracket: " + p);
      if (b2 > 0)
        push2();
      b2 = 0;
      i = j + 1;
    }
  }
  if (b2)
    error("Access path missing closing bracket: " + p);
  if (q)
    error("Access path missing closing quote: " + p);
  if (j > i) {
    j++;
    push2();
  }
  return path3;
}
function field(field3, name4, opt) {
  const path3 = splitAccessPath(field3);
  field3 = path3.length === 1 ? path3[0] : field3;
  return accessor((opt && opt.get || getter)(path3), [field3], name4 || field3);
}
var id = field("id");
var identity = accessor((_) => _, [], "identity");
var zero = accessor(() => 0, [], "zero");
var one = accessor(() => 1, [], "one");
var truthy = accessor(() => true, [], "true");
var falsy = accessor(() => false, [], "false");
function log$1(method2, level, input) {
  const args = [level].concat([].slice.call(input));
  console[method2].apply(console, args);
}
var None = 0;
var Error$1 = 1;
var Warn = 2;
var Info = 3;
var Debug = 4;
function logger(_, method2, handler = log$1) {
  let level = _ || None;
  return {
    level(_2) {
      if (arguments.length) {
        level = +_2;
        return this;
      } else {
        return level;
      }
    },
    error() {
      if (level >= Error$1)
        handler(method2 || "error", "ERROR", arguments);
      return this;
    },
    warn() {
      if (level >= Warn)
        handler(method2 || "warn", "WARN", arguments);
      return this;
    },
    info() {
      if (level >= Info)
        handler(method2 || "log", "INFO", arguments);
      return this;
    },
    debug() {
      if (level >= Debug)
        handler(method2 || "log", "DEBUG", arguments);
      return this;
    }
  };
}
var isArray = Array.isArray;
function isObject(_) {
  return _ === Object(_);
}
var isLegalKey = (key2) => key2 !== "__proto__";
function mergeConfig(...configs) {
  return configs.reduce((out, source3) => {
    for (const key2 in source3) {
      if (key2 === "signals") {
        out.signals = mergeNamed(out.signals, source3.signals);
      } else {
        const r = key2 === "legend" ? {
          layout: 1
        } : key2 === "style" ? true : null;
        writeConfig(out, key2, source3[key2], r);
      }
    }
    return out;
  }, {});
}
function writeConfig(output3, key2, value3, recurse2) {
  if (!isLegalKey(key2))
    return;
  let k3, o;
  if (isObject(value3) && !isArray(value3)) {
    o = isObject(output3[key2]) ? output3[key2] : output3[key2] = {};
    for (k3 in value3) {
      if (recurse2 && (recurse2 === true || recurse2[k3])) {
        writeConfig(o, k3, value3[k3]);
      } else if (isLegalKey(k3)) {
        o[k3] = value3[k3];
      }
    }
  } else {
    output3[key2] = value3;
  }
}
function mergeNamed(a4, b2) {
  if (a4 == null)
    return b2;
  const map7 = {}, out = [];
  function add6(_) {
    if (!map7[_.name]) {
      map7[_.name] = 1;
      out.push(_);
    }
  }
  b2.forEach(add6);
  a4.forEach(add6);
  return out;
}
function peek(array6) {
  return array6[array6.length - 1];
}
function toNumber(_) {
  return _ == null || _ === "" ? null : +_;
}
var exp = (sign4) => (x5) => sign4 * Math.exp(x5);
var log = (sign4) => (x5) => Math.log(sign4 * x5);
var symlog = (c3) => (x5) => Math.sign(x5) * Math.log1p(Math.abs(x5 / c3));
var symexp = (c3) => (x5) => Math.sign(x5) * Math.expm1(Math.abs(x5)) * c3;
var pow = (exponent) => (x5) => x5 < 0 ? -Math.pow(-x5, exponent) : Math.pow(x5, exponent);
function pan(domain4, delta, lift, ground) {
  const d0 = lift(domain4[0]), d1 = lift(peek(domain4)), dd = (d1 - d0) * delta;
  return [ground(d0 - dd), ground(d1 - dd)];
}
function panLinear(domain4, delta) {
  return pan(domain4, delta, toNumber, identity);
}
function panLog(domain4, delta) {
  var sign4 = Math.sign(domain4[0]);
  return pan(domain4, delta, log(sign4), exp(sign4));
}
function panPow(domain4, delta, exponent) {
  return pan(domain4, delta, pow(exponent), pow(1 / exponent));
}
function panSymlog(domain4, delta, constant4) {
  return pan(domain4, delta, symlog(constant4), symexp(constant4));
}
function zoom(domain4, anchor, scale7, lift, ground) {
  const d0 = lift(domain4[0]), d1 = lift(peek(domain4)), da2 = anchor != null ? lift(anchor) : (d0 + d1) / 2;
  return [ground(da2 + (d0 - da2) * scale7), ground(da2 + (d1 - da2) * scale7)];
}
function zoomLinear(domain4, anchor, scale7) {
  return zoom(domain4, anchor, scale7, toNumber, identity);
}
function zoomLog(domain4, anchor, scale7) {
  const sign4 = Math.sign(domain4[0]);
  return zoom(domain4, anchor, scale7, log(sign4), exp(sign4));
}
function zoomPow(domain4, anchor, scale7, exponent) {
  return zoom(domain4, anchor, scale7, pow(exponent), pow(1 / exponent));
}
function zoomSymlog(domain4, anchor, scale7, constant4) {
  return zoom(domain4, anchor, scale7, symlog(constant4), symexp(constant4));
}
function quarter(date2) {
  return 1 + ~~(new Date(date2).getMonth() / 3);
}
function utcquarter(date2) {
  return 1 + ~~(new Date(date2).getUTCMonth() / 3);
}
function array(_) {
  return _ != null ? isArray(_) ? _ : [_] : [];
}
function clampRange(range8, min6, max6) {
  let lo = range8[0], hi = range8[1], span2;
  if (hi < lo) {
    span2 = hi;
    hi = lo;
    lo = span2;
  }
  span2 = hi - lo;
  return span2 >= max6 - min6 ? [min6, max6] : [lo = Math.min(Math.max(lo, min6), max6 - span2), lo + span2];
}
function isFunction(_) {
  return typeof _ === "function";
}
var DESCENDING = "descending";
function compare2(fields, orders, opt) {
  opt = opt || {};
  orders = array(orders) || [];
  const ord = [], get7 = [], fmap = {}, gen = opt.comparator || comparator;
  array(fields).forEach((f, i) => {
    if (f == null)
      return;
    ord.push(orders[i] === DESCENDING ? -1 : 1);
    get7.push(f = isFunction(f) ? f : field(f, null, opt));
    (accessorFields(f) || []).forEach((_) => fmap[_] = 1);
  });
  return get7.length === 0 ? null : accessor(gen(get7, ord), Object.keys(fmap));
}
var ascending = (u4, v2) => (u4 < v2 || u4 == null) && v2 != null ? -1 : (u4 > v2 || v2 == null) && u4 != null ? 1 : (v2 = v2 instanceof Date ? +v2 : v2, u4 = u4 instanceof Date ? +u4 : u4) !== u4 && v2 === v2 ? -1 : v2 !== v2 && u4 === u4 ? 1 : 0;
var comparator = (fields, orders) => fields.length === 1 ? compare1(fields[0], orders[0]) : compareN(fields, orders, fields.length);
var compare1 = (field3, order) => function(a4, b2) {
  return ascending(field3(a4), field3(b2)) * order;
};
var compareN = (fields, orders, n) => {
  orders.push(0);
  return function(a4, b2) {
    let f, c3 = 0, i = -1;
    while (c3 === 0 && ++i < n) {
      f = fields[i];
      c3 = ascending(f(a4), f(b2));
    }
    return c3 * orders[i];
  };
};
function constant(_) {
  return isFunction(_) ? _ : () => _;
}
function debounce(delay, handler) {
  let tid;
  return (e3) => {
    if (tid)
      clearTimeout(tid);
    tid = setTimeout(() => (handler(e3), tid = null), delay);
  };
}
function extend(_) {
  for (let x5, k3, i = 1, len = arguments.length; i < len; ++i) {
    x5 = arguments[i];
    for (k3 in x5) {
      _[k3] = x5[k3];
    }
  }
  return _;
}
function extent(array6, f) {
  let i = 0, n, v2, min6, max6;
  if (array6 && (n = array6.length)) {
    if (f == null) {
      for (v2 = array6[i]; i < n && (v2 == null || v2 !== v2); v2 = array6[++i])
        ;
      min6 = max6 = v2;
      for (; i < n; ++i) {
        v2 = array6[i];
        if (v2 != null) {
          if (v2 < min6)
            min6 = v2;
          if (v2 > max6)
            max6 = v2;
        }
      }
    } else {
      for (v2 = f(array6[i]); i < n && (v2 == null || v2 !== v2); v2 = f(array6[++i]))
        ;
      min6 = max6 = v2;
      for (; i < n; ++i) {
        v2 = f(array6[i]);
        if (v2 != null) {
          if (v2 < min6)
            min6 = v2;
          if (v2 > max6)
            max6 = v2;
        }
      }
    }
  }
  return [min6, max6];
}
function extentIndex(array6, f) {
  const n = array6.length;
  let i = -1, a4, b2, c3, u4, v2;
  if (f == null) {
    while (++i < n) {
      b2 = array6[i];
      if (b2 != null && b2 >= b2) {
        a4 = c3 = b2;
        break;
      }
    }
    if (i === n)
      return [-1, -1];
    u4 = v2 = i;
    while (++i < n) {
      b2 = array6[i];
      if (b2 != null) {
        if (a4 > b2) {
          a4 = b2;
          u4 = i;
        }
        if (c3 < b2) {
          c3 = b2;
          v2 = i;
        }
      }
    }
  } else {
    while (++i < n) {
      b2 = f(array6[i], i, array6);
      if (b2 != null && b2 >= b2) {
        a4 = c3 = b2;
        break;
      }
    }
    if (i === n)
      return [-1, -1];
    u4 = v2 = i;
    while (++i < n) {
      b2 = f(array6[i], i, array6);
      if (b2 != null) {
        if (a4 > b2) {
          a4 = b2;
          u4 = i;
        }
        if (c3 < b2) {
          c3 = b2;
          v2 = i;
        }
      }
    }
  }
  return [u4, v2];
}
var hop = Object.prototype.hasOwnProperty;
function has(object2, property2) {
  return hop.call(object2, property2);
}
var NULL = {};
function fastmap(input) {
  let obj = {}, test2;
  function has$1(key2) {
    return has(obj, key2) && obj[key2] !== NULL;
  }
  const map7 = {
    size: 0,
    empty: 0,
    object: obj,
    has: has$1,
    get(key2) {
      return has$1(key2) ? obj[key2] : void 0;
    },
    set(key2, value3) {
      if (!has$1(key2)) {
        ++map7.size;
        if (obj[key2] === NULL)
          --map7.empty;
      }
      obj[key2] = value3;
      return this;
    },
    delete(key2) {
      if (has$1(key2)) {
        --map7.size;
        ++map7.empty;
        obj[key2] = NULL;
      }
      return this;
    },
    clear() {
      map7.size = map7.empty = 0;
      map7.object = obj = {};
    },
    test(_) {
      if (arguments.length) {
        test2 = _;
        return map7;
      } else {
        return test2;
      }
    },
    clean() {
      const next = {};
      let size = 0;
      for (const key2 in obj) {
        const value3 = obj[key2];
        if (value3 !== NULL && (!test2 || !test2(value3))) {
          next[key2] = value3;
          ++size;
        }
      }
      map7.size = size;
      map7.empty = 0;
      map7.object = obj = next;
    }
  };
  if (input)
    Object.keys(input).forEach((key2) => {
      map7.set(key2, input[key2]);
    });
  return map7;
}
function flush(range8, value3, threshold2, left, right, center) {
  if (!threshold2 && threshold2 !== 0)
    return center;
  const t4 = +threshold2;
  let a4 = range8[0], b2 = peek(range8), l;
  if (b2 < a4) {
    l = a4;
    a4 = b2;
    b2 = l;
  }
  l = Math.abs(value3 - a4);
  const r = Math.abs(b2 - value3);
  return l < r && l <= t4 ? left : r <= t4 ? right : center;
}
function inherits(child, parent, members) {
  const proto = child.prototype = Object.create(parent.prototype);
  Object.defineProperty(proto, "constructor", {
    value: child,
    writable: true,
    enumerable: true,
    configurable: true
  });
  return extend(proto, members);
}
function inrange(value3, range8, left, right) {
  let r0 = range8[0], r1 = range8[range8.length - 1], t4;
  if (r0 > r1) {
    t4 = r0;
    r0 = r1;
    r1 = t4;
  }
  left = left === void 0 || left;
  right = right === void 0 || right;
  return (left ? r0 <= value3 : r0 < value3) && (right ? value3 <= r1 : value3 < r1);
}
function isBoolean(_) {
  return typeof _ === "boolean";
}
function isDate(_) {
  return Object.prototype.toString.call(_) === "[object Date]";
}
function isIterable(_) {
  return _ && isFunction(_[Symbol.iterator]);
}
function isNumber(_) {
  return typeof _ === "number";
}
function isRegExp(_) {
  return Object.prototype.toString.call(_) === "[object RegExp]";
}
function isString(_) {
  return typeof _ === "string";
}
function key(fields, flat, opt) {
  if (fields) {
    fields = flat ? array(fields).map((f) => f.replace(/\\(.)/g, "$1")) : array(fields);
  }
  const len = fields && fields.length, gen = opt && opt.get || getter, map7 = (f) => gen(flat ? [f] : splitAccessPath(f));
  let fn;
  if (!len) {
    fn = function() {
      return "";
    };
  } else if (len === 1) {
    const get7 = map7(fields[0]);
    fn = function(_) {
      return "" + get7(_);
    };
  } else {
    const get7 = fields.map(map7);
    fn = function(_) {
      let s2 = "" + get7[0](_), i = 0;
      while (++i < len)
        s2 += "|" + get7[i](_);
      return s2;
    };
  }
  return accessor(fn, fields, "key");
}
function lerp(array6, frac) {
  const lo = array6[0], hi = peek(array6), f = +frac;
  return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
}
var DEFAULT_MAX_SIZE = 1e4;
function lruCache(maxsize) {
  maxsize = +maxsize || DEFAULT_MAX_SIZE;
  let curr, prev, size;
  const clear2 = () => {
    curr = {};
    prev = {};
    size = 0;
  };
  const update3 = (key2, value3) => {
    if (++size > maxsize) {
      prev = curr;
      curr = {};
      size = 1;
    }
    return curr[key2] = value3;
  };
  clear2();
  return {
    clear: clear2,
    has: (key2) => has(curr, key2) || has(prev, key2),
    get: (key2) => has(curr, key2) ? curr[key2] : has(prev, key2) ? update3(key2, prev[key2]) : void 0,
    set: (key2, value3) => has(curr, key2) ? curr[key2] = value3 : update3(key2, value3)
  };
}
function merge(compare5, array0, array1, output3) {
  const n0 = array0.length, n1 = array1.length;
  if (!n1)
    return array0;
  if (!n0)
    return array1;
  const merged = output3 || new array0.constructor(n0 + n1);
  let i0 = 0, i1 = 0, i = 0;
  for (; i0 < n0 && i1 < n1; ++i) {
    merged[i] = compare5(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
  }
  for (; i0 < n0; ++i0, ++i) {
    merged[i] = array0[i0];
  }
  for (; i1 < n1; ++i1, ++i) {
    merged[i] = array1[i1];
  }
  return merged;
}
function repeat(str, reps) {
  let s2 = "";
  while (--reps >= 0)
    s2 += str;
  return s2;
}
function pad(str, length2, padchar, align2) {
  const c3 = padchar || " ", s2 = str + "", n = length2 - s2.length;
  return n <= 0 ? s2 : align2 === "left" ? repeat(c3, n) + s2 : align2 === "center" ? repeat(c3, ~~(n / 2)) + s2 + repeat(c3, Math.ceil(n / 2)) : s2 + repeat(c3, n);
}
function span(array6) {
  return array6 && peek(array6) - array6[0] || 0;
}
function $(x5) {
  return isArray(x5) ? "[" + x5.map($) + "]" : isObject(x5) || isString(x5) ? JSON.stringify(x5).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029") : x5;
}
function toBoolean(_) {
  return _ == null || _ === "" ? null : !_ || _ === "false" || _ === "0" ? false : !!_;
}
var defaultParser = (_) => isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
function toDate(_, parser3) {
  parser3 = parser3 || defaultParser;
  return _ == null || _ === "" ? null : parser3(_);
}
function toString(_) {
  return _ == null || _ === "" ? null : _ + "";
}
function toSet(_) {
  const s2 = {}, n = _.length;
  for (let i = 0; i < n; ++i)
    s2[_[i]] = true;
  return s2;
}
function truncate(str, length2, align2, ellipsis) {
  const e3 = ellipsis != null ? ellipsis : "\u2026", s2 = str + "", n = s2.length, l = Math.max(0, length2 - e3.length);
  return n <= length2 ? s2 : align2 === "left" ? e3 + s2.slice(n - l) : align2 === "center" ? s2.slice(0, Math.ceil(l / 2)) + e3 + s2.slice(n - ~~(l / 2)) : s2.slice(0, l) + e3;
}
function visitArray(array6, filter5, visitor) {
  if (array6) {
    if (filter5) {
      const n = array6.length;
      for (let i = 0; i < n; ++i) {
        const t4 = filter5(array6[i]);
        if (t4)
          visitor(t4, i, array6);
      }
    } else {
      array6.forEach(visitor);
    }
  }
}

// node_modules/d3-dsv/src/dsv.js
var EOL = {};
var EOF = {};
var QUOTE = 34;
var NEWLINE = 10;
var RETURN = 13;
function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name4, i) {
    return JSON.stringify(name4) + ": d[" + i + '] || ""';
  }).join(",") + "}");
}
function customConverter(columns, f) {
  var object2 = objectConverter(columns);
  return function(row, i) {
    return f(object2(row), i, columns);
  };
}
function inferColumns(rows) {
  var columnSet = /* @__PURE__ */ Object.create(null), columns = [];
  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}
function pad2(value3, width2) {
  var s2 = value3 + "", length2 = s2.length;
  return length2 < width2 ? new Array(width2 - length2 + 1).join(0) + s2 : s2;
}
function formatYear(year2) {
  return year2 < 0 ? "-" + pad2(-year2, 6) : year2 > 9999 ? "+" + pad2(year2, 6) : pad2(year2, 4);
}
function formatDate(date2) {
  var hours2 = date2.getUTCHours(), minutes2 = date2.getUTCMinutes(), seconds2 = date2.getUTCSeconds(), milliseconds2 = date2.getUTCMilliseconds();
  return isNaN(date2) ? "Invalid Date" : formatYear(date2.getUTCFullYear(), 4) + "-" + pad2(date2.getUTCMonth() + 1, 2) + "-" + pad2(date2.getUTCDate(), 2) + (milliseconds2 ? "T" + pad2(hours2, 2) + ":" + pad2(minutes2, 2) + ":" + pad2(seconds2, 2) + "." + pad2(milliseconds2, 3) + "Z" : seconds2 ? "T" + pad2(hours2, 2) + ":" + pad2(minutes2, 2) + ":" + pad2(seconds2, 2) + "Z" : minutes2 || hours2 ? "T" + pad2(hours2, 2) + ":" + pad2(minutes2, 2) + "Z" : "");
}
function dsv_default(delimiter) {
  var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
  function parse7(text4, f) {
    var convert, columns, rows = parseRows(text4, function(row, i) {
      if (convert)
        return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }
  function parseRows(text4, f) {
    var rows = [], N = text4.length, I = 0, n = 0, t4, eof = N <= 0, eol = false;
    if (text4.charCodeAt(N - 1) === NEWLINE)
      --N;
    if (text4.charCodeAt(N - 1) === RETURN)
      --N;
    function token() {
      if (eof)
        return EOF;
      if (eol)
        return eol = false, EOL;
      var i, j = I, c3;
      if (text4.charCodeAt(j) === QUOTE) {
        while (I++ < N && text4.charCodeAt(I) !== QUOTE || text4.charCodeAt(++I) === QUOTE)
          ;
        if ((i = I) >= N)
          eof = true;
        else if ((c3 = text4.charCodeAt(I++)) === NEWLINE)
          eol = true;
        else if (c3 === RETURN) {
          eol = true;
          if (text4.charCodeAt(I) === NEWLINE)
            ++I;
        }
        return text4.slice(j + 1, i - 1).replace(/""/g, '"');
      }
      while (I < N) {
        if ((c3 = text4.charCodeAt(i = I++)) === NEWLINE)
          eol = true;
        else if (c3 === RETURN) {
          eol = true;
          if (text4.charCodeAt(I) === NEWLINE)
            ++I;
        } else if (c3 !== DELIMITER)
          continue;
        return text4.slice(j, i);
      }
      return eof = true, text4.slice(j, N);
    }
    while ((t4 = token()) !== EOF) {
      var row = [];
      while (t4 !== EOL && t4 !== EOF)
        row.push(t4), t4 = token();
      if (f && (row = f(row, n++)) == null)
        continue;
      rows.push(row);
    }
    return rows;
  }
  function preformatBody(rows, columns) {
    return rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue4(row[column]);
      }).join(delimiter);
    });
  }
  function format5(rows, columns) {
    if (columns == null)
      columns = inferColumns(rows);
    return [columns.map(formatValue4).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }
  function formatBody(rows, columns) {
    if (columns == null)
      columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }
  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }
  function formatRow(row) {
    return row.map(formatValue4).join(delimiter);
  }
  function formatValue4(value3) {
    return value3 == null ? "" : value3 instanceof Date ? formatDate(value3) : reFormat.test(value3 += "") ? '"' + value3.replace(/"/g, '""') + '"' : value3;
  }
  return {
    parse: parse7,
    parseRows,
    format: format5,
    formatBody,
    formatRows,
    formatRow,
    formatValue: formatValue4
  };
}

// node_modules/d3-dsv/src/csv.js
var csv = dsv_default(",");
var csvParse = csv.parse;
var csvParseRows = csv.parseRows;
var csvFormat = csv.format;
var csvFormatBody = csv.formatBody;
var csvFormatRows = csv.formatRows;
var csvFormatRow = csv.formatRow;
var csvFormatValue = csv.formatValue;

// node_modules/d3-dsv/src/tsv.js
var tsv = dsv_default("	");
var tsvParse = tsv.parse;
var tsvParseRows = tsv.parseRows;
var tsvFormat = tsv.format;
var tsvFormatBody = tsv.formatBody;
var tsvFormatRows = tsv.formatRows;
var tsvFormatRow = tsv.formatRow;
var tsvFormatValue = tsv.formatValue;

// node_modules/d3-dsv/src/autoType.js
var fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

// node_modules/topojson-client/src/identity.js
function identity_default(x5) {
  return x5;
}

// node_modules/topojson-client/src/transform.js
function transform_default(transform4) {
  if (transform4 == null)
    return identity_default;
  var x07, y07, kx3 = transform4.scale[0], ky2 = transform4.scale[1], dx = transform4.translate[0], dy = transform4.translate[1];
  return function(input, i) {
    if (!i)
      x07 = y07 = 0;
    var j = 2, n = input.length, output3 = new Array(n);
    output3[0] = (x07 += input[0]) * kx3 + dx;
    output3[1] = (y07 += input[1]) * ky2 + dy;
    while (j < n)
      output3[j] = input[j], ++j;
    return output3;
  };
}

// node_modules/topojson-client/src/reverse.js
function reverse_default(array6, n) {
  var t4, j = array6.length, i = j - n;
  while (i < --j)
    t4 = array6[i], array6[i++] = array6[j], array6[j] = t4;
}

// node_modules/topojson-client/src/feature.js
function feature_default(topology, o) {
  if (typeof o === "string")
    o = topology.objects[o];
  return o.type === "GeometryCollection" ? { type: "FeatureCollection", features: o.geometries.map(function(o2) {
    return feature(topology, o2);
  }) } : feature(topology, o);
}
function feature(topology, o) {
  var id2 = o.id, bbox = o.bbox, properties = o.properties == null ? {} : o.properties, geometry = object(topology, o);
  return id2 == null && bbox == null ? { type: "Feature", properties, geometry } : bbox == null ? { type: "Feature", id: id2, properties, geometry } : { type: "Feature", id: id2, bbox, properties, geometry };
}
function object(topology, o) {
  var transformPoint = transform_default(topology.transform), arcs = topology.arcs;
  function arc4(i, points2) {
    if (points2.length)
      points2.pop();
    for (var a4 = arcs[i < 0 ? ~i : i], k3 = 0, n = a4.length; k3 < n; ++k3) {
      points2.push(transformPoint(a4[k3], k3));
    }
    if (i < 0)
      reverse_default(points2, n);
  }
  function point10(p) {
    return transformPoint(p);
  }
  function line4(arcs2) {
    var points2 = [];
    for (var i = 0, n = arcs2.length; i < n; ++i)
      arc4(arcs2[i], points2);
    if (points2.length < 2)
      points2.push(points2[0]);
    return points2;
  }
  function ring(arcs2) {
    var points2 = line4(arcs2);
    while (points2.length < 4)
      points2.push(points2[0]);
    return points2;
  }
  function polygon(arcs2) {
    return arcs2.map(ring);
  }
  function geometry(o2) {
    var type3 = o2.type, coordinates;
    switch (type3) {
      case "GeometryCollection":
        return { type: type3, geometries: o2.geometries.map(geometry) };
      case "Point":
        coordinates = point10(o2.coordinates);
        break;
      case "MultiPoint":
        coordinates = o2.coordinates.map(point10);
        break;
      case "LineString":
        coordinates = line4(o2.arcs);
        break;
      case "MultiLineString":
        coordinates = o2.arcs.map(line4);
        break;
      case "Polygon":
        coordinates = polygon(o2.arcs);
        break;
      case "MultiPolygon":
        coordinates = o2.arcs.map(polygon);
        break;
      default:
        return null;
    }
    return { type: type3, coordinates };
  }
  return geometry(o);
}

// node_modules/topojson-client/src/stitch.js
function stitch_default(topology, arcs) {
  var stitchedArcs = {}, fragmentByStart = {}, fragmentByEnd = {}, fragments = [], emptyIndex = -1;
  arcs.forEach(function(i, j) {
    var arc4 = topology.arcs[i < 0 ? ~i : i], t4;
    if (arc4.length < 3 && !arc4[1][0] && !arc4[1][1]) {
      t4 = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t4;
    }
  });
  arcs.forEach(function(i) {
    var e3 = ends(i), start = e3[0], end = e3[1], f, g;
    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;
      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;
      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });
  function ends(i) {
    var arc4 = topology.arcs[i < 0 ? ~i : i], p02 = arc4[0], p1;
    if (topology.transform)
      p1 = [0, 0], arc4.forEach(function(dp) {
        p1[0] += dp[0], p1[1] += dp[1];
      });
    else
      p1 = arc4[arc4.length - 1];
    return i < 0 ? [p1, p02] : [p02, p1];
  }
  function flush2(fragmentByEnd2, fragmentByStart2) {
    for (var k3 in fragmentByEnd2) {
      var f = fragmentByEnd2[k3];
      delete fragmentByStart2[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function(i) {
        stitchedArcs[i < 0 ? ~i : i] = 1;
      });
      fragments.push(f);
    }
  }
  flush2(fragmentByEnd, fragmentByStart);
  flush2(fragmentByStart, fragmentByEnd);
  arcs.forEach(function(i) {
    if (!stitchedArcs[i < 0 ? ~i : i])
      fragments.push([i]);
  });
  return fragments;
}

// node_modules/topojson-client/src/mesh.js
function mesh_default(topology) {
  return object(topology, meshArcs.apply(this, arguments));
}
function meshArcs(topology, object2, filter5) {
  var arcs, i, n;
  if (arguments.length > 1)
    arcs = extractArcs(topology, object2, filter5);
  else
    for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i)
      arcs[i] = i;
  return { type: "MultiLineString", arcs: stitch_default(topology, arcs) };
}
function extractArcs(topology, object2, filter5) {
  var arcs = [], geomsByArc = [], geom;
  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({ i, g: geom });
  }
  function extract1(arcs2) {
    arcs2.forEach(extract0);
  }
  function extract2(arcs2) {
    arcs2.forEach(extract1);
  }
  function extract3(arcs2) {
    arcs2.forEach(extract2);
  }
  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection":
        o.geometries.forEach(geometry);
        break;
      case "LineString":
        extract1(o.arcs);
        break;
      case "MultiLineString":
      case "Polygon":
        extract2(o.arcs);
        break;
      case "MultiPolygon":
        extract3(o.arcs);
        break;
    }
  }
  geometry(object2);
  geomsByArc.forEach(filter5 == null ? function(geoms) {
    arcs.push(geoms[0].i);
  } : function(geoms) {
    if (filter5(geoms[0].g, geoms[geoms.length - 1].g))
      arcs.push(geoms[0].i);
  });
  return arcs;
}

// node_modules/d3-array/src/ascending.js
function ascending2(a4, b2) {
  return a4 == null || b2 == null ? NaN : a4 < b2 ? -1 : a4 > b2 ? 1 : a4 >= b2 ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a4, b2) {
  return a4 == null || b2 == null ? NaN : b2 < a4 ? -1 : b2 > a4 ? 1 : b2 >= a4 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare12, compare22, delta;
  if (f.length !== 2) {
    compare12 = ascending2;
    compare22 = (d, x5) => ascending2(f(d), x5);
    delta = (d, x5) => f(d) - x5;
  } else {
    compare12 = f === ascending2 || f === descending ? f : zero2;
    compare22 = f;
    delta = f;
  }
  function left(a4, x5, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare12(x5, x5) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare22(a4[mid], x5) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a4, x5, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare12(x5, x5) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare22(a4[mid], x5) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a4, x5, lo = 0, hi = a4.length) {
    const i = left(a4, x5, lo, hi - 1);
    return i > lo && delta(a4[i - 1], x5) > -delta(a4[i], x5) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero2() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x5) {
  return x5 === null ? NaN : +x5;
}
function* numbers(values5, valueof) {
  if (valueof === void 0) {
    for (let value3 of values5) {
      if (value3 != null && (value3 = +value3) >= value3) {
        yield value3;
      }
    }
  } else {
    let index5 = -1;
    for (let value3 of values5) {
      if ((value3 = valueof(value3, ++index5, values5)) != null && (value3 = +value3) >= value3) {
        yield value3;
      }
    }
  }
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending2);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default2 = bisectRight;

// node_modules/d3-array/src/blur.js
var blur2 = Blur2(blurf);
var blurImage = Blur2(blurfImage);
function Blur2(blur3) {
  return function(data3, rx, ry = rx) {
    if (!((rx = +rx) >= 0))
      throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0))
      throw new RangeError("invalid ry");
    let { data: values5, width: width2, height: height2 } = data3;
    if (!((width2 = Math.floor(width2)) >= 0))
      throw new RangeError("invalid width");
    if (!((height2 = Math.floor(height2 !== void 0 ? height2 : values5.length / width2)) >= 0))
      throw new RangeError("invalid height");
    if (!width2 || !height2 || !rx && !ry)
      return data3;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp2 = values5.slice();
    if (blurx && blury) {
      blurh(blurx, temp2, values5, width2, height2);
      blurh(blurx, values5, temp2, width2, height2);
      blurh(blurx, temp2, values5, width2, height2);
      blurv(blury, values5, temp2, width2, height2);
      blurv(blury, temp2, values5, width2, height2);
      blurv(blury, values5, temp2, width2, height2);
    } else if (blurx) {
      blurh(blurx, values5, temp2, width2, height2);
      blurh(blurx, temp2, values5, width2, height2);
      blurh(blurx, values5, temp2, width2, height2);
    } else if (blury) {
      blurv(blury, values5, temp2, width2, height2);
      blurv(blury, temp2, values5, width2, height2);
      blurv(blury, values5, temp2, width2, height2);
    }
    return data3;
  };
}
function blurh(blur3, T, S, w4, h2) {
  for (let y5 = 0, n = w4 * h2; y5 < n; ) {
    blur3(T, S, y5, y5 += w4, 1);
  }
}
function blurv(blur3, T, S, w4, h2) {
  for (let x5 = 0, n = w4 * h2; x5 < w4; ++x5) {
    blur3(T, S, x5, x5 + n, w4);
  }
}
function blurfImage(radius2) {
  const blur3 = blurf(radius2);
  return (T, S, start, stop3, step) => {
    start <<= 2, stop3 <<= 2, step <<= 2;
    blur3(T, S, start + 0, stop3 + 0, step);
    blur3(T, S, start + 1, stop3 + 1, step);
    blur3(T, S, start + 2, stop3 + 2, step);
    blur3(T, S, start + 3, stop3 + 3, step);
  };
}
function blurf(radius2) {
  const radius0 = Math.floor(radius2);
  if (radius0 === radius2)
    return bluri(radius2);
  const t4 = radius2 - radius0;
  const w4 = 2 * radius2 + 1;
  return (T, S, start, stop3, step) => {
    if (!((stop3 -= step) >= start))
      return;
    let sum5 = radius0 * S[start];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i = start, j = start + s0; i < j; i += step) {
      sum5 += S[Math.min(stop3, i)];
    }
    for (let i = start, j = stop3; i <= j; i += step) {
      sum5 += S[Math.min(stop3, i + s0)];
      T[i] = (sum5 + t4 * (S[Math.max(start, i - s1)] + S[Math.min(stop3, i + s1)])) / w4;
      sum5 -= S[Math.max(start, i - s0)];
    }
  };
}
function bluri(radius2) {
  const w4 = 2 * radius2 + 1;
  return (T, S, start, stop3, step) => {
    if (!((stop3 -= step) >= start))
      return;
    let sum5 = radius2 * S[start];
    const s2 = step * radius2;
    for (let i = start, j = start + s2; i < j; i += step) {
      sum5 += S[Math.min(stop3, i)];
    }
    for (let i = start, j = stop3; i <= j; i += step) {
      sum5 += S[Math.min(stop3, i + s2)];
      T[i] = sum5 / w4;
      sum5 -= S[Math.max(start, i - s2)];
    }
  };
}

// node_modules/d3-array/src/variance.js
function variance(values5, valueof) {
  let count4 = 0;
  let delta;
  let mean3 = 0;
  let sum5 = 0;
  if (valueof === void 0) {
    for (let value3 of values5) {
      if (value3 != null && (value3 = +value3) >= value3) {
        delta = value3 - mean3;
        mean3 += delta / ++count4;
        sum5 += delta * (value3 - mean3);
      }
    }
  } else {
    let index5 = -1;
    for (let value3 of values5) {
      if ((value3 = valueof(value3, ++index5, values5)) != null && (value3 = +value3) >= value3) {
        delta = value3 - mean3;
        mean3 += delta / ++count4;
        sum5 += delta * (value3 - mean3);
      }
    }
  }
  if (count4 > 1)
    return sum5 / (count4 - 1);
}

// node_modules/d3-array/src/deviation.js
function deviation(values5, valueof) {
  const v2 = variance(values5, valueof);
  return v2 ? Math.sqrt(v2) : v2;
}

// node_modules/d3-array/src/fsum.js
var Adder = class {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x5) {
    const p = this._partials;
    let i = 0;
    for (let j = 0; j < this._n && j < 32; j++) {
      const y5 = p[j], hi = x5 + y5, lo = Math.abs(x5) < Math.abs(y5) ? x5 - (hi - y5) : y5 - (hi - x5);
      if (lo)
        p[i++] = lo;
      x5 = hi;
    }
    p[i] = x5;
    this._n = i + 1;
    return this;
  }
  valueOf() {
    const p = this._partials;
    let n = this._n, x5, y5, lo, hi = 0;
    if (n > 0) {
      hi = p[--n];
      while (n > 0) {
        x5 = hi;
        y5 = p[--n];
        hi = x5 + y5;
        lo = y5 - (hi - x5);
        if (lo)
          break;
      }
      if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
        y5 = lo * 2;
        x5 = hi + y5;
        if (y5 == x5 - hi)
          hi = x5;
      }
    }
    return hi;
  }
};

// node_modules/internmap/src/index.js
var InternMap = class extends Map {
  constructor(entries3, key2 = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
    if (entries3 != null)
      for (const [key3, value3] of entries3)
        this.set(key3, value3);
  }
  get(key2) {
    return super.get(intern_get(this, key2));
  }
  has(key2) {
    return super.has(intern_get(this, key2));
  }
  set(key2, value3) {
    return super.set(intern_set(this, key2), value3);
  }
  delete(key2) {
    return super.delete(intern_delete(this, key2));
  }
};
var InternSet = class extends Set {
  constructor(values5, key2 = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
    if (values5 != null)
      for (const value3 of values5)
        this.add(value3);
  }
  has(value3) {
    return super.has(intern_get(this, value3));
  }
  add(value3) {
    return super.add(intern_set(this, value3));
  }
  delete(value3) {
    return super.delete(intern_delete(this, value3));
  }
};
function intern_get({ _intern, _key }, value3) {
  const key2 = _key(value3);
  return _intern.has(key2) ? _intern.get(key2) : value3;
}
function intern_set({ _intern, _key }, value3) {
  const key2 = _key(value3);
  if (_intern.has(key2))
    return _intern.get(key2);
  _intern.set(key2, value3);
  return value3;
}
function intern_delete({ _intern, _key }, value3) {
  const key2 = _key(value3);
  if (_intern.has(key2)) {
    value3 = _intern.get(key2);
    _intern.delete(key2);
  }
  return value3;
}
function keyof(value3) {
  return value3 !== null && typeof value3 === "object" ? value3.valueOf() : value3;
}

// node_modules/d3-array/src/permute.js
function permute(source3, keys5) {
  return Array.from(keys5, (key2) => source3[key2]);
}

// node_modules/d3-array/src/sort.js
function compareDefined(compare5 = ascending2) {
  if (compare5 === ascending2)
    return ascendingDefined;
  if (typeof compare5 !== "function")
    throw new TypeError("compare is not a function");
  return (a4, b2) => {
    const x5 = compare5(a4, b2);
    if (x5 || x5 === 0)
      return x5;
    return (compare5(b2, b2) === 0) - (compare5(a4, a4) === 0);
  };
}
function ascendingDefined(a4, b2) {
  return (a4 == null || !(a4 >= a4)) - (b2 == null || !(b2 >= b2)) || (a4 < b2 ? -1 : a4 > b2 ? 1 : 0);
}

// node_modules/d3-array/src/array.js
var array2 = Array.prototype;
var slice = array2.slice;
var map = array2.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks(start, stop3, count4) {
  var reverse5, i = -1, n, ticks3, step;
  stop3 = +stop3, start = +start, count4 = +count4;
  if (start === stop3 && count4 > 0)
    return [start];
  if (reverse5 = stop3 < start)
    n = start, start = stop3, stop3 = n;
  if ((step = tickIncrement(start, stop3, count4)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop3 / step);
    if (r0 * step < start)
      ++r0;
    if (r1 * step > stop3)
      --r1;
    ticks3 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks3[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop3 * step);
    if (r0 / step < start)
      ++r0;
    if (r1 / step > stop3)
      --r1;
    ticks3 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks3[i] = (r0 + i) / step;
  }
  if (reverse5)
    ticks3.reverse();
  return ticks3;
}
function tickIncrement(start, stop3, count4) {
  var step = (stop3 - start) / Math.max(0, count4), power = Math.floor(Math.log(step) / Math.LN10), error2 = step / Math.pow(10, power);
  return power >= 0 ? (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1);
}
function tickStep(start, stop3, count4) {
  var step0 = Math.abs(stop3 - start) / Math.max(0, count4), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error2 = step0 / step1;
  if (error2 >= e10)
    step1 *= 10;
  else if (error2 >= e5)
    step1 *= 5;
  else if (error2 >= e2)
    step1 *= 2;
  return stop3 < start ? -step1 : step1;
}

// node_modules/d3-array/src/max.js
function max(values5, valueof) {
  let max6;
  if (valueof === void 0) {
    for (const value3 of values5) {
      if (value3 != null && (max6 < value3 || max6 === void 0 && value3 >= value3)) {
        max6 = value3;
      }
    }
  } else {
    let index5 = -1;
    for (let value3 of values5) {
      if ((value3 = valueof(value3, ++index5, values5)) != null && (max6 < value3 || max6 === void 0 && value3 >= value3)) {
        max6 = value3;
      }
    }
  }
  return max6;
}

// node_modules/d3-array/src/min.js
function min(values5, valueof) {
  let min6;
  if (valueof === void 0) {
    for (const value3 of values5) {
      if (value3 != null && (min6 > value3 || min6 === void 0 && value3 >= value3)) {
        min6 = value3;
      }
    }
  } else {
    let index5 = -1;
    for (let value3 of values5) {
      if ((value3 = valueof(value3, ++index5, values5)) != null && (min6 > value3 || min6 === void 0 && value3 >= value3)) {
        min6 = value3;
      }
    }
  }
  return min6;
}

// node_modules/d3-array/src/quickselect.js
function quickselect(array6, k3, left = 0, right = array6.length - 1, compare5) {
  compare5 = compare5 === void 0 ? ascendingDefined : compareDefined(compare5);
  while (right > left) {
    if (right - left > 600) {
      const n = right - left + 1;
      const m3 = k3 - left + 1;
      const z = Math.log(n);
      const s2 = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s2 * (n - s2) / n) * (m3 - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k3 - m3 * s2 / n + sd));
      const newRight = Math.min(right, Math.floor(k3 + (n - m3) * s2 / n + sd));
      quickselect(array6, k3, newLeft, newRight, compare5);
    }
    const t4 = array6[k3];
    let i = left;
    let j = right;
    swap(array6, left, k3);
    if (compare5(array6[right], t4) > 0)
      swap(array6, left, right);
    while (i < j) {
      swap(array6, i, j), ++i, --j;
      while (compare5(array6[i], t4) < 0)
        ++i;
      while (compare5(array6[j], t4) > 0)
        --j;
    }
    if (compare5(array6[left], t4) === 0)
      swap(array6, left, j);
    else
      ++j, swap(array6, j, right);
    if (j <= k3)
      left = j + 1;
    if (k3 <= j)
      right = j - 1;
  }
  return array6;
}
function swap(array6, i, j) {
  const t4 = array6[i];
  array6[i] = array6[j];
  array6[j] = t4;
}

// node_modules/d3-array/src/quantile.js
function quantile(values5, p, valueof) {
  values5 = Float64Array.from(numbers(values5, valueof));
  if (!(n = values5.length))
    return;
  if ((p = +p) <= 0 || n < 2)
    return min(values5);
  if (p >= 1)
    return max(values5);
  var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = max(quickselect(values5, i0).subarray(0, i0 + 1)), value1 = min(values5.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i - i0);
}
function quantileSorted(values5, p, valueof = number) {
  if (!(n = values5.length))
    return;
  if ((p = +p) <= 0 || n < 2)
    return +valueof(values5[0], 0, values5);
  if (p >= 1)
    return +valueof(values5[n - 1], n - 1, values5);
  var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values5[i0], i0, values5), value1 = +valueof(values5[i0 + 1], i0 + 1, values5);
  return value0 + (value1 - value0) * (i - i0);
}

// node_modules/d3-array/src/mean.js
function mean(values5, valueof) {
  let count4 = 0;
  let sum5 = 0;
  if (valueof === void 0) {
    for (let value3 of values5) {
      if (value3 != null && (value3 = +value3) >= value3) {
        ++count4, sum5 += value3;
      }
    }
  } else {
    let index5 = -1;
    for (let value3 of values5) {
      if ((value3 = valueof(value3, ++index5, values5)) != null && (value3 = +value3) >= value3) {
        ++count4, sum5 += value3;
      }
    }
  }
  if (count4)
    return sum5 / count4;
}

// node_modules/d3-array/src/median.js
function median(values5, valueof) {
  return quantile(values5, 0.5, valueof);
}

// node_modules/d3-array/src/merge.js
function* flatten(arrays) {
  for (const array6 of arrays) {
    yield* array6;
  }
}
function merge2(arrays) {
  return Array.from(flatten(arrays));
}

// node_modules/d3-array/src/range.js
function range(start, stop3, step) {
  start = +start, stop3 = +stop3, step = (n = arguments.length) < 2 ? (stop3 = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop3 - start) / step)) | 0, range8 = new Array(n);
  while (++i < n) {
    range8[i] = start + i * step;
  }
  return range8;
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random2) {
  return function shuffle2(array6, i0 = 0, i1 = array6.length) {
    let m3 = i1 - (i0 = +i0);
    while (m3) {
      const i = random2() * m3-- | 0, t4 = array6[m3 + i0];
      array6[m3 + i0] = array6[i + i0];
      array6[i + i0] = t4;
    }
    return array6;
  };
}

// node_modules/d3-array/src/sum.js
function sum(values5, valueof) {
  let sum5 = 0;
  if (valueof === void 0) {
    for (let value3 of values5) {
      if (value3 = +value3) {
        sum5 += value3;
      }
    }
  } else {
    let index5 = -1;
    for (let value3 of values5) {
      if (value3 = +valueof(value3, ++index5, values5)) {
        sum5 += value3;
      }
    }
  }
  return sum5;
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x5) {
  return Math.abs(x5 = Math.round(x5)) >= 1e21 ? x5.toLocaleString("en").replace(/,/g, "") : x5.toString(10);
}
function formatDecimalParts(x5, p) {
  if ((i = (x5 = p ? x5.toExponential(p - 1) : x5.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x5.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x5.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x5) {
  return x5 = formatDecimalParts(Math.abs(x5)), x5 ? x5[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value3, width2) {
    var i = value3.length, t4 = [], j = 0, g = grouping[0], length2 = 0;
    while (i > 0 && g > 0) {
      if (length2 + g + 1 > width2)
        g = Math.max(1, width2 - length2);
      t4.push(value3.substring(i -= g, i + g));
      if ((length2 += g + 1) > width2)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t4.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value3) {
    return value3.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match2 = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match2;
  return new FormatSpecifier({
    fill: match2[1],
    align: match2[2],
    sign: match2[3],
    symbol: match2[4],
    zero: match2[5],
    width: match2[6],
    comma: match2[7],
    precision: match2[8] && match2[8].slice(1),
    trim: match2[9],
    type: match2[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out:
    for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s2[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s2[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x5, p) {
  var d = formatDecimalParts(x5, p);
  if (!d)
    return x5 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x5, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x5, p) {
  var d = formatDecimalParts(x5, p);
  if (!d)
    return x5 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x5, p) => (x5 * 100).toFixed(p),
  "b": (x5) => Math.round(x5).toString(2),
  "c": (x5) => x5 + "",
  "d": formatDecimal_default,
  "e": (x5, p) => x5.toExponential(p),
  "f": (x5, p) => x5.toFixed(p),
  "g": (x5, p) => x5.toPrecision(p),
  "o": (x5) => Math.round(x5).toString(8),
  "p": (x5, p) => formatRounded_default(x5 * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x5) => Math.round(x5).toString(16).toUpperCase(),
  "x": (x5) => Math.round(x5).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default2(x5) {
  return x5;
}

// node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale4) {
  var group4 = locale4.grouping === void 0 || locale4.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale4.grouping, Number), locale4.thousands + ""), currencyPrefix = locale4.currency === void 0 ? "" : locale4.currency[0] + "", currencySuffix = locale4.currency === void 0 ? "" : locale4.currency[1] + "", decimal = locale4.decimal === void 0 ? "." : locale4.decimal + "", numerals = locale4.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale4.numerals, String)), percent = locale4.percent === void 0 ? "%" : locale4.percent + "", minus = locale4.minus === void 0 ? "\u2212" : locale4.minus + "", nan = locale4.nan === void 0 ? "NaN" : locale4.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill2 = specifier.fill, align2 = specifier.align, sign4 = specifier.sign, symbol2 = specifier.symbol, zero6 = specifier.zero, width2 = specifier.width, comma = specifier.comma, precision = specifier.precision, trim2 = specifier.trim, type3 = specifier.type;
    if (type3 === "n")
      comma = true, type3 = "g";
    else if (!formatTypes_default[type3])
      precision === void 0 && (precision = 12), trim2 = true, type3 = "g";
    if (zero6 || fill2 === "0" && align2 === "=")
      zero6 = true, fill2 = "0", align2 = "=";
    var prefix = symbol2 === "$" ? currencyPrefix : symbol2 === "#" && /[boxX]/.test(type3) ? "0" + type3.toLowerCase() : "", suffix = symbol2 === "$" ? currencySuffix : /[%p]/.test(type3) ? percent : "";
    var formatType = formatTypes_default[type3], maybeSuffix = /[defgprs%]/.test(type3);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type3) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format5(value3) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c3;
      if (type3 === "c") {
        valueSuffix = formatType(value3) + valueSuffix;
        value3 = "";
      } else {
        value3 = +value3;
        var valueNegative = value3 < 0 || 1 / value3 < 0;
        value3 = isNaN(value3) ? nan : formatType(Math.abs(value3), precision);
        if (trim2)
          value3 = formatTrim_default(value3);
        if (valueNegative && +value3 === 0 && sign4 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign4 === "(" ? sign4 : minus : sign4 === "-" || sign4 === "(" ? "" : sign4) + valuePrefix;
        valueSuffix = (type3 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign4 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value3.length;
          while (++i < n) {
            if (c3 = value3.charCodeAt(i), 48 > c3 || c3 > 57) {
              valueSuffix = (c3 === 46 ? decimal + value3.slice(i + 1) : value3.slice(i)) + valueSuffix;
              value3 = value3.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero6)
        value3 = group4(value3, Infinity);
      var length2 = valuePrefix.length + value3.length + valueSuffix.length, padding3 = length2 < width2 ? new Array(width2 - length2 + 1).join(fill2) : "";
      if (comma && zero6)
        value3 = group4(padding3 + value3, padding3.length ? width2 - valueSuffix.length : Infinity), padding3 = "";
      switch (align2) {
        case "<":
          value3 = valuePrefix + value3 + valueSuffix + padding3;
          break;
        case "=":
          value3 = valuePrefix + padding3 + value3 + valueSuffix;
          break;
        case "^":
          value3 = padding3.slice(0, length2 = padding3.length >> 1) + valuePrefix + value3 + valueSuffix + padding3.slice(length2);
          break;
        default:
          value3 = padding3 + valuePrefix + value3 + valueSuffix;
          break;
      }
      return numerals(value3);
    }
    format5.toString = function() {
      return specifier + "";
    };
    return format5;
  }
  function formatPrefix2(specifier, value3) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value3) / 3))) * 3, k3 = Math.pow(10, -e3), prefix = prefixes[8 + e3 / 3];
    return function(value4) {
      return f(k3 * value4) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition3) {
  locale = locale_default(definition3);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value3) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value3) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max6) {
  step = Math.abs(step), max6 = Math.abs(max6) - step;
  return Math.max(0, exponent_default(max6) - exponent_default(step)) + 1;
}

// node_modules/d3-time/src/interval.js
var t0 = new Date();
var t1 = new Date();
function newInterval(floori, offseti, count4, field3) {
  function interval3(date2) {
    return floori(date2 = arguments.length === 0 ? new Date() : new Date(+date2)), date2;
  }
  interval3.floor = function(date2) {
    return floori(date2 = new Date(+date2)), date2;
  };
  interval3.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval3.round = function(date2) {
    var d0 = interval3(date2), d1 = interval3.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval3.offset = function(date2, step) {
    return offseti(date2 = new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval3.range = function(start, stop3, step) {
    var range8 = [], previous;
    start = interval3.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop3) || !(step > 0))
      return range8;
    do
      range8.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop3);
    return range8;
  };
  interval3.filter = function(test2) {
    return newInterval(function(date2) {
      if (date2 >= date2)
        while (floori(date2), !test2(date2))
          date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test2(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test2(date2)) {
            }
          }
      }
    });
  };
  if (count4) {
    interval3.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count4(t0, t1));
    };
    interval3.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval3 : interval3.filter(field3 ? function(d) {
        return field3(d) % step === 0;
      } : function(d) {
        return interval3.count(0, d) % step === 0;
      });
    };
  }
  return interval3;
}

// node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date2, step) {
  date2.setTime(+date2 + step);
}, function(start, end) {
  return end - start;
});
millisecond.every = function(k3) {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0))
    return null;
  if (!(k3 > 1))
    return millisecond;
  return newInterval(function(date2) {
    date2.setTime(Math.floor(date2 / k3) * k3);
  }, function(date2, step) {
    date2.setTime(+date2 + step * k3);
  }, function(start, end) {
    return (end - start) / k3;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-time/src/second.js
var second = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds());
}, function(date2, step) {
  date2.setTime(+date2 + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date2) {
  return date2.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// node_modules/d3-time/src/minute.js
var minute = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date2) {
  return date2.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/d3-time/src/hour.js
var hour = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date2) {
  return date2.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/d3-time/src/day.js
var day = newInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
var day_default = day;
var days = day.range;

// node_modules/d3-time/src/week.js
function weekday(i) {
  return newInterval(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/d3-time/src/month.js
var month = newInterval(function(date2) {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setMonth(date2.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date2) {
  return date2.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/d3-time/src/year.js
var year = newInterval(function(date2) {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setFullYear(date2.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date2) {
  return date2.getFullYear();
});
year.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date2) {
    date2.setFullYear(Math.floor(date2.getFullYear() / k3) * k3);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setFullYear(date2.getFullYear() + step * k3);
  });
};
var year_default = year;
var years = year.range;

// node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date2) {
  date2.setUTCSeconds(0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date2) {
  return date2.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date2) {
  date2.setUTCMinutes(0, 0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date2) {
  return date2.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date2) {
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCDate(date2.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date2) {
  return date2.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// node_modules/d3-time/src/utcWeek.js
function utcWeekday(i) {
  return newInterval(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date2) {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date2) {
  return date2.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date2) {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date2) {
  return date2.getUTCFullYear();
});
utcYear.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date2) {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k3) * k3);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k3);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// node_modules/d3-time/src/ticks.js
function ticker(year2, month2, week2, day2, hour2, minute2) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute2, 1, durationMinute],
    [minute2, 5, 5 * durationMinute],
    [minute2, 15, 15 * durationMinute],
    [minute2, 30, 30 * durationMinute],
    [hour2, 1, durationHour],
    [hour2, 3, 3 * durationHour],
    [hour2, 6, 6 * durationHour],
    [hour2, 12, 12 * durationHour],
    [day2, 1, durationDay],
    [day2, 2, 2 * durationDay],
    [week2, 1, durationWeek],
    [month2, 1, durationMonth],
    [month2, 3, 3 * durationMonth],
    [year2, 1, durationYear]
  ];
  function ticks3(start, stop3, count4) {
    const reverse5 = stop3 < start;
    if (reverse5)
      [start, stop3] = [stop3, start];
    const interval3 = count4 && typeof count4.range === "function" ? count4 : tickInterval(start, stop3, count4);
    const ticks4 = interval3 ? interval3.range(start, +stop3 + 1) : [];
    return reverse5 ? ticks4.reverse() : ticks4;
  }
  function tickInterval(start, stop3, count4) {
    const target2 = Math.abs(stop3 - start) / count4;
    const i = bisector(([, , step2]) => step2).right(tickIntervals, target2);
    if (i === tickIntervals.length)
      return year2.every(tickStep(start / durationYear, stop3 / durationYear, count4));
    if (i === 0)
      return millisecond_default.every(Math.max(tickStep(start, stop3, count4), 1));
    const [t4, step] = tickIntervals[target2 / tickIntervals[i - 1][2] < tickIntervals[i][2] / target2 ? i - 1 : i];
    return t4.every(step);
  }
  return [ticks3, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

// node_modules/vega-time/build/vega-time.module.js
var YEAR = "year";
var QUARTER = "quarter";
var MONTH = "month";
var WEEK = "week";
var DATE = "date";
var DAY = "day";
var DAYOFYEAR = "dayofyear";
var HOURS = "hours";
var MINUTES = "minutes";
var SECONDS = "seconds";
var MILLISECONDS = "milliseconds";
var TIME_UNITS = [YEAR, QUARTER, MONTH, WEEK, DATE, DAY, DAYOFYEAR, HOURS, MINUTES, SECONDS, MILLISECONDS];
var UNITS = TIME_UNITS.reduce((o, u4, i) => (o[u4] = 1 + i, o), {});
function timeUnits(units) {
  const u4 = array(units).slice(), m3 = {};
  if (!u4.length)
    error("Missing time unit.");
  u4.forEach((unit2) => {
    if (has(UNITS, unit2)) {
      m3[unit2] = 1;
    } else {
      error("Invalid time unit: ".concat(unit2, "."));
    }
  });
  const numTypes = (m3[WEEK] || m3[DAY] ? 1 : 0) + (m3[QUARTER] || m3[MONTH] || m3[DATE] ? 1 : 0) + (m3[DAYOFYEAR] ? 1 : 0);
  if (numTypes > 1) {
    error("Incompatible time units: ".concat(units));
  }
  u4.sort((a4, b2) => UNITS[a4] - UNITS[b2]);
  return u4;
}
var defaultSpecifiers = {
  [YEAR]: "%Y ",
  [QUARTER]: "Q%q ",
  [MONTH]: "%b ",
  [DATE]: "%d ",
  [WEEK]: "W%U ",
  [DAY]: "%a ",
  [DAYOFYEAR]: "%j ",
  [HOURS]: "%H:00",
  [MINUTES]: "00:%M",
  [SECONDS]: ":%S",
  [MILLISECONDS]: ".%L",
  ["".concat(YEAR, "-").concat(MONTH)]: "%Y-%m ",
  ["".concat(YEAR, "-").concat(MONTH, "-").concat(DATE)]: "%Y-%m-%d ",
  ["".concat(HOURS, "-").concat(MINUTES)]: "%H:%M"
};
function timeUnitSpecifier(units, specifiers) {
  const s2 = extend({}, defaultSpecifiers, specifiers), u4 = timeUnits(units), n = u4.length;
  let fmt = "", start = 0, end, key2;
  for (start = 0; start < n; ) {
    for (end = u4.length; end > start; --end) {
      key2 = u4.slice(start, end).join("-");
      if (s2[key2] != null) {
        fmt += s2[key2];
        start = end;
        break;
      }
    }
  }
  return fmt.trim();
}
var t02 = new Date();
function localYear(y5) {
  t02.setFullYear(y5);
  t02.setMonth(0);
  t02.setDate(1);
  t02.setHours(0, 0, 0, 0);
  return t02;
}
function dayofyear(d) {
  return localDayOfYear(new Date(d));
}
function week(d) {
  return localWeekNum(new Date(d));
}
function localDayOfYear(d) {
  return day_default.count(localYear(d.getFullYear()) - 1, d);
}
function localWeekNum(d) {
  return sunday.count(localYear(d.getFullYear()) - 1, d);
}
function localFirst(y5) {
  return localYear(y5).getDay();
}
function localDate(y5, m3, d, H, M2, S, L) {
  if (0 <= y5 && y5 < 100) {
    const date2 = new Date(-1, m3, d, H, M2, S, L);
    date2.setFullYear(y5);
    return date2;
  }
  return new Date(y5, m3, d, H, M2, S, L);
}
function utcdayofyear(d) {
  return utcDayOfYear(new Date(d));
}
function utcweek(d) {
  return utcWeekNum(new Date(d));
}
function utcDayOfYear(d) {
  const y5 = Date.UTC(d.getUTCFullYear(), 0, 1);
  return utcDay_default.count(y5 - 1, d);
}
function utcWeekNum(d) {
  const y5 = Date.UTC(d.getUTCFullYear(), 0, 1);
  return utcSunday.count(y5 - 1, d);
}
function utcFirst(y5) {
  t02.setTime(Date.UTC(y5, 0, 1));
  return t02.getUTCDay();
}
function utcDate(y5, m3, d, H, M2, S, L) {
  if (0 <= y5 && y5 < 100) {
    const date2 = new Date(Date.UTC(-1, m3, d, H, M2, S, L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(y5, m3, d, H, M2, S, L));
}
function floor(units, step, get7, inv, newDate2) {
  const s2 = step || 1, b2 = peek(units), _ = (unit2, p, key2) => {
    key2 = key2 || unit2;
    return getUnit(get7[key2], inv[key2], unit2 === b2 && s2, p);
  };
  const t4 = new Date(), u4 = toSet(units), y5 = u4[YEAR] ? _(YEAR) : constant(2012), m3 = u4[MONTH] ? _(MONTH) : u4[QUARTER] ? _(QUARTER) : zero, d = u4[WEEK] && u4[DAY] ? _(DAY, 1, WEEK + DAY) : u4[WEEK] ? _(WEEK, 1) : u4[DAY] ? _(DAY, 1) : u4[DATE] ? _(DATE, 1) : u4[DAYOFYEAR] ? _(DAYOFYEAR, 1) : one, H = u4[HOURS] ? _(HOURS) : zero, M2 = u4[MINUTES] ? _(MINUTES) : zero, S = u4[SECONDS] ? _(SECONDS) : zero, L = u4[MILLISECONDS] ? _(MILLISECONDS) : zero;
  return function(v2) {
    t4.setTime(+v2);
    const year2 = y5(t4);
    return newDate2(year2, m3(t4), d(t4, year2), H(t4), M2(t4), S(t4), L(t4));
  };
}
function getUnit(f, inv, step, phase) {
  const u4 = step <= 1 ? f : phase ? (d, y5) => phase + step * Math.floor((f(d, y5) - phase) / step) : (d, y5) => step * Math.floor(f(d, y5) / step);
  return inv ? (d, y5) => inv(u4(d, y5), y5) : u4;
}
function weekday2(week2, day2, firstDay) {
  return day2 + week2 * 7 - (firstDay + 6) % 7;
}
var localGet = {
  [YEAR]: (d) => d.getFullYear(),
  [QUARTER]: (d) => Math.floor(d.getMonth() / 3),
  [MONTH]: (d) => d.getMonth(),
  [DATE]: (d) => d.getDate(),
  [HOURS]: (d) => d.getHours(),
  [MINUTES]: (d) => d.getMinutes(),
  [SECONDS]: (d) => d.getSeconds(),
  [MILLISECONDS]: (d) => d.getMilliseconds(),
  [DAYOFYEAR]: (d) => localDayOfYear(d),
  [WEEK]: (d) => localWeekNum(d),
  [WEEK + DAY]: (d, y5) => weekday2(localWeekNum(d), d.getDay(), localFirst(y5)),
  [DAY]: (d, y5) => weekday2(1, d.getDay(), localFirst(y5))
};
var localInv = {
  [QUARTER]: (q) => 3 * q,
  [WEEK]: (w4, y5) => weekday2(w4, 0, localFirst(y5))
};
function timeFloor(units, step) {
  return floor(units, step || 1, localGet, localInv, localDate);
}
var utcGet = {
  [YEAR]: (d) => d.getUTCFullYear(),
  [QUARTER]: (d) => Math.floor(d.getUTCMonth() / 3),
  [MONTH]: (d) => d.getUTCMonth(),
  [DATE]: (d) => d.getUTCDate(),
  [HOURS]: (d) => d.getUTCHours(),
  [MINUTES]: (d) => d.getUTCMinutes(),
  [SECONDS]: (d) => d.getUTCSeconds(),
  [MILLISECONDS]: (d) => d.getUTCMilliseconds(),
  [DAYOFYEAR]: (d) => utcDayOfYear(d),
  [WEEK]: (d) => utcWeekNum(d),
  [DAY]: (d, y5) => weekday2(1, d.getUTCDay(), utcFirst(y5)),
  [WEEK + DAY]: (d, y5) => weekday2(utcWeekNum(d), d.getUTCDay(), utcFirst(y5))
};
var utcInv = {
  [QUARTER]: (q) => 3 * q,
  [WEEK]: (w4, y5) => weekday2(w4, 0, utcFirst(y5))
};
function utcFloor(units, step) {
  return floor(units, step || 1, utcGet, utcInv, utcDate);
}
var timeIntervals = {
  [YEAR]: year_default,
  [QUARTER]: month_default.every(3),
  [MONTH]: month_default,
  [WEEK]: sunday,
  [DATE]: day_default,
  [DAY]: day_default,
  [DAYOFYEAR]: day_default,
  [HOURS]: hour_default,
  [MINUTES]: minute_default,
  [SECONDS]: second_default,
  [MILLISECONDS]: millisecond_default
};
var utcIntervals = {
  [YEAR]: utcYear_default,
  [QUARTER]: utcMonth_default.every(3),
  [MONTH]: utcMonth_default,
  [WEEK]: utcSunday,
  [DATE]: utcDay_default,
  [DAY]: utcDay_default,
  [DAYOFYEAR]: utcDay_default,
  [HOURS]: utcHour_default,
  [MINUTES]: utcMinute_default,
  [SECONDS]: second_default,
  [MILLISECONDS]: millisecond_default
};
function timeInterval(unit2) {
  return timeIntervals[unit2];
}
function utcInterval(unit2) {
  return utcIntervals[unit2];
}
function offset(ival, date2, step) {
  return ival ? ival.offset(date2, step) : void 0;
}
function timeOffset(unit2, date2, step) {
  return offset(timeInterval(unit2), date2, step);
}
function utcOffset(unit2, date2, step) {
  return offset(utcInterval(unit2), date2, step);
}
function sequence(ival, start, stop3, step) {
  return ival ? ival.range(start, stop3, step) : void 0;
}
function timeSequence(unit2, start, stop3, step) {
  return sequence(timeInterval(unit2), start, stop3, step);
}
function utcSequence(unit2, start, stop3, step) {
  return sequence(utcInterval(unit2), start, stop3, step);
}
var durationSecond2 = 1e3;
var durationMinute2 = durationSecond2 * 60;
var durationHour2 = durationMinute2 * 60;
var durationDay2 = durationHour2 * 24;
var durationWeek2 = durationDay2 * 7;
var durationMonth2 = durationDay2 * 30;
var durationYear2 = durationDay2 * 365;
var Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS];
var Seconds = Milli.slice(0, -1);
var Minutes = Seconds.slice(0, -1);
var Hours = Minutes.slice(0, -1);
var Day = Hours.slice(0, -1);
var Week = [YEAR, WEEK];
var Month = [YEAR, MONTH];
var Year = [YEAR];
var intervals = [[Seconds, 1, durationSecond2], [Seconds, 5, 5 * durationSecond2], [Seconds, 15, 15 * durationSecond2], [Seconds, 30, 30 * durationSecond2], [Minutes, 1, durationMinute2], [Minutes, 5, 5 * durationMinute2], [Minutes, 15, 15 * durationMinute2], [Minutes, 30, 30 * durationMinute2], [Hours, 1, durationHour2], [Hours, 3, 3 * durationHour2], [Hours, 6, 6 * durationHour2], [Hours, 12, 12 * durationHour2], [Day, 1, durationDay2], [Week, 1, durationWeek2], [Month, 1, durationMonth2], [Month, 3, 3 * durationMonth2], [Year, 1, durationYear2]];
function bin2(opt) {
  const ext = opt.extent, max6 = opt.maxbins || 40, target2 = Math.abs(span(ext)) / max6;
  let i = bisector((i2) => i2[2]).right(intervals, target2), units, step;
  if (i === intervals.length) {
    units = Year, step = tickStep(ext[0] / durationYear2, ext[1] / durationYear2, max6);
  } else if (i) {
    i = intervals[target2 / intervals[i - 1][2] < intervals[i][2] / target2 ? i - 1 : i];
    units = i[0];
    step = i[1];
  } else {
    units = Milli;
    step = Math.max(tickStep(ext[0], ext[1], max6), 1);
  }
  return {
    units,
    step
  };
}

// node_modules/d3-time-format/src/locale.js
function localDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate2(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y5, m3, d) {
  return { y: y5, m: m3, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale4) {
  var locale_dateTime = locale4.dateTime, locale_date = locale4.date, locale_time = locale4.time, locale_periods = locale4.periods, locale_weekdays = locale4.days, locale_shortWeekdays = locale4.shortDays, locale_months = locale4.months, locale_shortMonths = locale4.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats3 = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats3.x = newFormat(locale_date, formats3);
  formats3.X = newFormat(locale_time, formats3);
  formats3.c = newFormat(locale_dateTime, formats3);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats4) {
    return function(date2) {
      var string = [], i = -1, j = 0, n = specifier.length, c3, pad4, format5;
      if (!(date2 instanceof Date))
        date2 = new Date(+date2);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad4 = pads[c3 = specifier.charAt(++i)]) != null)
            c3 = specifier.charAt(++i);
          else
            pad4 = c3 === "e" ? " " : "0";
          if (format5 = formats4[c3])
            c3 = format5(date2, pad4);
          string.push(c3);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week2, day2;
      if (i != string.length)
        return null;
      if ("Q" in d)
        return new Date(d.Q);
      if ("s" in d)
        return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d))
        d.Z = 0;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0)
        d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53)
          return null;
        if (!("w" in d))
          d.w = 1;
        if ("Z" in d) {
          week2 = utcDate2(newDate(d.y, 0, 1)), day2 = week2.getUTCDay();
          week2 = day2 > 4 || day2 === 0 ? utcMonday.ceil(week2) : utcMonday(week2);
          week2 = utcDay_default.offset(week2, (d.V - 1) * 7);
          d.y = week2.getUTCFullYear();
          d.m = week2.getUTCMonth();
          d.d = week2.getUTCDate() + (d.w + 6) % 7;
        } else {
          week2 = localDate2(newDate(d.y, 0, 1)), day2 = week2.getDay();
          week2 = day2 > 4 || day2 === 0 ? monday.ceil(week2) : monday(week2);
          week2 = day_default.offset(week2, (d.V - 1) * 7);
          d.y = week2.getFullYear();
          d.m = week2.getMonth();
          d.d = week2.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day2 = "Z" in d ? utcDate2(newDate(d.y, 0, 1)).getUTCDay() : localDate2(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day2 + 5) % 7 : d.w + d.U * 7 - (day2 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate2(d);
      }
      return localDate2(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m3 = string.length, c3, parse7;
    while (i < n) {
      if (j >= m3)
        return -1;
      c3 = specifier.charCodeAt(i++);
      if (c3 === 37) {
        c3 = specifier.charAt(i++);
        parse7 = parses[c3 in pads ? specifier.charAt(i++) : c3];
        if (!parse7 || (j = parse7(d, string, j)) < 0)
          return -1;
      } else if (c3 != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats3);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad3(value3, fill2, width2) {
  var sign4 = value3 < 0 ? "-" : "", string = (sign4 ? -value3 : value3) + "", length2 = string.length;
  return sign4 + (length2 < width2 ? new Array(width2 - length2 + 1).join(fill2) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name4, i) => [name4.toLowerCase(), i]));
}
function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad3(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad3(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad3(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad3(1 + day_default.count(year_default(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad3(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad3(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad3(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad3(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day2 = d.getDay();
  return day2 === 0 ? 7 : day2;
}
function formatWeekNumberSunday(d, p) {
  return pad3(sunday.count(year_default(d) - 1, d), p, 2);
}
function dISO(d) {
  var day2 = d.getDay();
  return day2 >= 4 || day2 === 0 ? thursday(d) : thursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad3(thursday.count(year_default(d), d) + (year_default(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad3(monday.count(year_default(d) - 1, d), p, 2);
}
function formatYear2(d, p) {
  return pad3(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad3(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad3(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day2 = d.getDay();
  d = day2 >= 4 || day2 === 0 ? thursday(d) : thursday.ceil(d);
  return pad3(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad3(z / 60 | 0, "0", 2) + pad3(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad3(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad3(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad3(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad3(1 + utcDay_default.count(utcYear_default(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad3(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad3(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad3(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad3(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad3(utcSunday.count(utcYear_default(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day2 = d.getUTCDay();
  return day2 >= 4 || day2 === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad3(utcThursday.count(utcYear_default(d), d) + (utcYear_default(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad3(utcMonday.count(utcYear_default(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad3(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad3(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad3(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day2 = d.getUTCDay();
  d = day2 >= 4 || day2 === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad3(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition3) {
  locale2 = formatLocale(definition3);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date2) {
  return date2.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date2 = new Date(string);
  return isNaN(date2) ? null : date2;
}
var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/vega-format/build/vega-format.module.js
function memoize(method2) {
  const cache2 = {};
  return (spec) => cache2[spec] || (cache2[spec] = method2(spec));
}
function trimZeroes(numberFormat2, decimalChar) {
  return (x5) => {
    const str = numberFormat2(x5), dec = str.indexOf(decimalChar);
    if (dec < 0)
      return str;
    let idx = rightmostDigit(str, dec);
    const end = idx < str.length ? str.slice(idx) : "";
    while (--idx > dec)
      if (str[idx] !== "0") {
        ++idx;
        break;
      }
    return str.slice(0, idx) + end;
  };
}
function rightmostDigit(str, dec) {
  let i = str.lastIndexOf("e"), c3;
  if (i > 0)
    return i;
  for (i = str.length; --i > dec; ) {
    c3 = str.charCodeAt(i);
    if (c3 >= 48 && c3 <= 57)
      return i + 1;
  }
}
function numberLocale(locale4) {
  const format5 = memoize(locale4.format), formatPrefix2 = locale4.formatPrefix;
  return {
    format: format5,
    formatPrefix: formatPrefix2,
    formatFloat(spec) {
      const s2 = formatSpecifier(spec || ",");
      if (s2.precision == null) {
        s2.precision = 12;
        switch (s2.type) {
          case "%":
            s2.precision -= 2;
            break;
          case "e":
            s2.precision -= 1;
            break;
        }
        return trimZeroes(
          format5(s2),
          format5(".1f")(1)[1]
        );
      } else {
        return format5(s2);
      }
    },
    formatSpan(start, stop3, count4, specifier) {
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      const step = tickStep(start, stop3, count4), value3 = Math.max(Math.abs(start), Math.abs(stop3));
      let precision;
      if (specifier.precision == null) {
        switch (specifier.type) {
          case "s": {
            if (!isNaN(precision = precisionPrefix_default(step, value3))) {
              specifier.precision = precision;
            }
            return formatPrefix2(specifier, value3);
          }
          case "":
          case "e":
          case "g":
          case "p":
          case "r": {
            if (!isNaN(precision = precisionRound_default(step, value3))) {
              specifier.precision = precision - (specifier.type === "e");
            }
            break;
          }
          case "f":
          case "%": {
            if (!isNaN(precision = precisionFixed_default(step))) {
              specifier.precision = precision - (specifier.type === "%") * 2;
            }
            break;
          }
        }
      }
      return format5(specifier);
    }
  };
}
var defaultNumberLocale;
resetNumberFormatDefaultLocale();
function resetNumberFormatDefaultLocale() {
  return defaultNumberLocale = numberLocale({
    format,
    formatPrefix
  });
}
function numberFormatLocale(definition3) {
  return numberLocale(locale_default(definition3));
}
function numberFormatDefaultLocale(definition3) {
  return arguments.length ? defaultNumberLocale = numberFormatLocale(definition3) : defaultNumberLocale;
}
function timeMultiFormat(format5, interval3, spec) {
  spec = spec || {};
  if (!isObject(spec)) {
    error("Invalid time multi-format specifier: ".concat(spec));
  }
  const second2 = interval3(SECONDS), minute2 = interval3(MINUTES), hour2 = interval3(HOURS), day2 = interval3(DATE), week2 = interval3(WEEK), month2 = interval3(MONTH), quarter2 = interval3(QUARTER), year2 = interval3(YEAR), L = format5(spec[MILLISECONDS] || ".%L"), S = format5(spec[SECONDS] || ":%S"), M2 = format5(spec[MINUTES] || "%I:%M"), H = format5(spec[HOURS] || "%I %p"), d = format5(spec[DATE] || spec[DAY] || "%a %d"), w4 = format5(spec[WEEK] || "%b %d"), m3 = format5(spec[MONTH] || "%B"), q = format5(spec[QUARTER] || "%B"), y5 = format5(spec[YEAR] || "%Y");
  return (date2) => (second2(date2) < date2 ? L : minute2(date2) < date2 ? S : hour2(date2) < date2 ? M2 : day2(date2) < date2 ? H : month2(date2) < date2 ? week2(date2) < date2 ? d : w4 : year2(date2) < date2 ? quarter2(date2) < date2 ? m3 : q : y5)(date2);
}
function timeLocale(locale4) {
  const timeFormat4 = memoize(locale4.format), utcFormat3 = memoize(locale4.utcFormat);
  return {
    timeFormat: (spec) => isString(spec) ? timeFormat4(spec) : timeMultiFormat(timeFormat4, timeInterval, spec),
    utcFormat: (spec) => isString(spec) ? utcFormat3(spec) : timeMultiFormat(utcFormat3, utcInterval, spec),
    timeParse: memoize(locale4.parse),
    utcParse: memoize(locale4.utcParse)
  };
}
var defaultTimeLocale;
resetTimeFormatDefaultLocale();
function resetTimeFormatDefaultLocale() {
  return defaultTimeLocale = timeLocale({
    format: timeFormat,
    parse: timeParse,
    utcFormat,
    utcParse
  });
}
function timeFormatLocale(definition3) {
  return timeLocale(formatLocale(definition3));
}
function timeFormatDefaultLocale(definition3) {
  return arguments.length ? defaultTimeLocale = timeFormatLocale(definition3) : defaultTimeLocale;
}
var createLocale = (number9, time3) => extend({}, number9, time3);
function locale3(numberSpec, timeSpec) {
  const number9 = numberSpec ? numberFormatLocale(numberSpec) : numberFormatDefaultLocale();
  const time3 = timeSpec ? timeFormatLocale(timeSpec) : timeFormatDefaultLocale();
  return createLocale(number9, time3);
}
function defaultLocale3(numberSpec, timeSpec) {
  const args = arguments.length;
  if (args && args !== 2) {
    error("defaultLocale expects either zero or two arguments.");
  }
  return args ? createLocale(numberFormatDefaultLocale(numberSpec), timeFormatDefaultLocale(timeSpec)) : createLocale(numberFormatDefaultLocale(), timeFormatDefaultLocale());
}
function resetDefaultLocale() {
  resetNumberFormatDefaultLocale();
  resetTimeFormatDefaultLocale();
  return defaultLocale3();
}

// node_modules/vega-loader/build/vega-loader.browser.module.js
var protocol_re = /^(data:|([A-Za-z]+:)?\/\/)/;
var allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i;
var whitespace_re = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g;
var fileProtocol = "file://";
function loaderFactory(fetch2, fs) {
  return (options) => ({
    options: options || {},
    sanitize,
    load,
    fileAccess: !!fs,
    file: fileLoader(fs),
    http: httpLoader(fetch2)
  });
}
async function load(uri, options) {
  const opt = await this.sanitize(uri, options), url = opt.href;
  return opt.localFile ? this.file(url) : this.http(url, options);
}
async function sanitize(uri, options) {
  options = extend({}, this.options, options);
  const fileAccess = this.fileAccess, result = {
    href: null
  };
  let isFile, loadFile, base2;
  const isAllowed = allowed_re.test(uri.replace(whitespace_re, ""));
  if (uri == null || typeof uri !== "string" || !isAllowed) {
    error("Sanitize failure, invalid URI: " + $(uri));
  }
  const hasProtocol = protocol_re.test(uri);
  if ((base2 = options.baseURL) && !hasProtocol) {
    if (!uri.startsWith("/") && !base2.endsWith("/")) {
      uri = "/" + uri;
    }
    uri = base2 + uri;
  }
  loadFile = (isFile = uri.startsWith(fileProtocol)) || options.mode === "file" || options.mode !== "http" && !hasProtocol && fileAccess;
  if (isFile) {
    uri = uri.slice(fileProtocol.length);
  } else if (uri.startsWith("//")) {
    if (options.defaultProtocol === "file") {
      uri = uri.slice(2);
      loadFile = true;
    } else {
      uri = (options.defaultProtocol || "http") + ":" + uri;
    }
  }
  Object.defineProperty(result, "localFile", {
    value: !!loadFile
  });
  result.href = uri;
  if (options.target) {
    result.target = options.target + "";
  }
  if (options.rel) {
    result.rel = options.rel + "";
  }
  if (options.context === "image" && options.crossOrigin) {
    result.crossOrigin = options.crossOrigin + "";
  }
  return result;
}
function fileLoader(fs) {
  return fs ? (filename) => new Promise((accept, reject) => {
    fs.readFile(filename, (error2, data3) => {
      if (error2)
        reject(error2);
      else
        accept(data3);
    });
  }) : fileReject;
}
async function fileReject() {
  error("No file system access.");
}
function httpLoader(fetch2) {
  return fetch2 ? async function(url, options) {
    const opt = extend({}, this.options.http, options), type3 = options && options.response, response = await fetch2(url, opt);
    return !response.ok ? error(response.status + "" + response.statusText) : isFunction(response[type3]) ? response[type3]() : response.text();
  } : httpReject;
}
async function httpReject() {
  error("No HTTP fetch method available.");
}
var isValid = (_) => _ != null && _ === _;
var isBoolean2 = (_) => _ === "true" || _ === "false" || _ === true || _ === false;
var isDate2 = (_) => !Number.isNaN(Date.parse(_));
var isNumber2 = (_) => !Number.isNaN(+_) && !(_ instanceof Date);
var isInteger2 = (_) => isNumber2(_) && Number.isInteger(+_);
var typeParsers = {
  boolean: toBoolean,
  integer: toNumber,
  number: toNumber,
  date: toDate,
  string: toString,
  unknown: identity
};
var typeTests = [isBoolean2, isInteger2, isNumber2, isDate2];
var typeList = ["boolean", "integer", "number", "date"];
function inferType(values5, field3) {
  if (!values5 || !values5.length)
    return "unknown";
  const n = values5.length, m3 = typeTests.length, a4 = typeTests.map((_, i) => i + 1);
  for (let i = 0, t4 = 0, j, value3; i < n; ++i) {
    value3 = field3 ? values5[i][field3] : values5[i];
    for (j = 0; j < m3; ++j) {
      if (a4[j] && isValid(value3) && !typeTests[j](value3)) {
        a4[j] = 0;
        ++t4;
        if (t4 === typeTests.length)
          return "string";
      }
    }
  }
  return typeList[a4.reduce((u4, v2) => u4 === 0 ? v2 : u4, 0) - 1];
}
function inferTypes(data3, fields) {
  return fields.reduce((types4, field3) => {
    types4[field3] = inferType(data3, field3);
    return types4;
  }, {});
}
function delimitedFormat(delimiter) {
  const parse7 = function(data3, format5) {
    const delim = {
      delimiter
    };
    return dsv(data3, format5 ? extend(format5, delim) : delim);
  };
  parse7.responseType = "text";
  return parse7;
}
function dsv(data3, format5) {
  if (format5.header) {
    data3 = format5.header.map($).join(format5.delimiter) + "\n" + data3;
  }
  return dsv_default(format5.delimiter).parse(data3 + "");
}
dsv.responseType = "text";
function isBuffer(_) {
  return typeof Buffer === "function" && isFunction(Buffer.isBuffer) ? Buffer.isBuffer(_) : false;
}
function json(data3, format5) {
  const prop = format5 && format5.property ? field(format5.property) : identity;
  return isObject(data3) && !isBuffer(data3) ? parseJSON(prop(data3), format5) : prop(JSON.parse(data3));
}
json.responseType = "json";
function parseJSON(data3, format5) {
  if (!isArray(data3) && isIterable(data3)) {
    data3 = [...data3];
  }
  return format5 && format5.copy ? JSON.parse(JSON.stringify(data3)) : data3;
}
var filters = {
  interior: (a4, b2) => a4 !== b2,
  exterior: (a4, b2) => a4 === b2
};
function topojson(data3, format5) {
  let method2, object2, property2, filter5;
  data3 = json(data3, format5);
  if (format5 && format5.feature) {
    method2 = feature_default;
    property2 = format5.feature;
  } else if (format5 && format5.mesh) {
    method2 = mesh_default;
    property2 = format5.mesh;
    filter5 = filters[format5.filter];
  } else {
    error("Missing TopoJSON feature or mesh parameter.");
  }
  object2 = (object2 = data3.objects[property2]) ? method2(data3, object2, filter5) : error("Invalid TopoJSON object: " + property2);
  return object2 && object2.features || [object2];
}
topojson.responseType = "json";
var format2 = {
  dsv,
  csv: delimitedFormat(","),
  tsv: delimitedFormat("	"),
  json,
  topojson
};
function formats(name4, reader) {
  if (arguments.length > 1) {
    format2[name4] = reader;
    return this;
  } else {
    return has(format2, name4) ? format2[name4] : null;
  }
}
function responseType(type3) {
  const f = formats(type3);
  return f && f.responseType || "text";
}
function read(data3, schema, timeParser, utcParser) {
  schema = schema || {};
  const reader = formats(schema.type || "json");
  if (!reader)
    error("Unknown data format type: " + schema.type);
  data3 = reader(data3, schema);
  if (schema.parse)
    parse(data3, schema.parse, timeParser, utcParser);
  if (has(data3, "columns"))
    delete data3.columns;
  return data3;
}
function parse(data3, types4, timeParser, utcParser) {
  if (!data3.length)
    return;
  const locale4 = timeFormatDefaultLocale();
  timeParser = timeParser || locale4.timeParse;
  utcParser = utcParser || locale4.utcParse;
  let fields = data3.columns || Object.keys(data3[0]), datum2, field3, i, j, n, m3;
  if (types4 === "auto")
    types4 = inferTypes(data3, fields);
  fields = Object.keys(types4);
  const parsers = fields.map((field4) => {
    const type3 = types4[field4];
    let parts, pattern;
    if (type3 && (type3.startsWith("date:") || type3.startsWith("utc:"))) {
      parts = type3.split(/:(.+)?/, 2);
      pattern = parts[1];
      if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
        pattern = pattern.slice(1, -1);
      }
      const parse7 = parts[0] === "utc" ? utcParser : timeParser;
      return parse7(pattern);
    }
    if (!typeParsers[type3]) {
      throw Error("Illegal format pattern: " + field4 + ":" + type3);
    }
    return typeParsers[type3];
  });
  for (i = 0, n = data3.length, m3 = fields.length; i < n; ++i) {
    datum2 = data3[i];
    for (j = 0; j < m3; ++j) {
      field3 = fields[j];
      datum2[field3] = parsers[j](datum2[field3]);
    }
  }
}
var loader = loaderFactory(
  typeof fetch !== "undefined" && fetch,
  null
);

// node_modules/vega-dataflow/build/vega-dataflow.module.js
function UniqueList(idFunc) {
  const $2 = idFunc || identity, list = [], ids = {};
  list.add = (_) => {
    const id2 = $2(_);
    if (!ids[id2]) {
      ids[id2] = 1;
      list.push(_);
    }
    return list;
  };
  list.remove = (_) => {
    const id2 = $2(_);
    if (ids[id2]) {
      ids[id2] = 0;
      const idx = list.indexOf(_);
      if (idx >= 0)
        list.splice(idx, 1);
    }
    return list;
  };
  return list;
}
async function asyncCallback(df, callback) {
  try {
    await callback(df);
  } catch (err) {
    df.error(err);
  }
}
var TUPLE_ID_KEY = Symbol("vega_id");
var TUPLE_ID = 1;
function isTuple(t4) {
  return !!(t4 && tupleid(t4));
}
function tupleid(t4) {
  return t4[TUPLE_ID_KEY];
}
function setid(t4, id2) {
  t4[TUPLE_ID_KEY] = id2;
  return t4;
}
function ingest$1(datum2) {
  const t4 = datum2 === Object(datum2) ? datum2 : {
    data: datum2
  };
  return tupleid(t4) ? t4 : setid(t4, TUPLE_ID++);
}
function derive(t4) {
  return rederive(t4, ingest$1({}));
}
function rederive(t4, d) {
  for (const k3 in t4)
    d[k3] = t4[k3];
  return d;
}
function replace(t4, d) {
  return setid(d, tupleid(t4));
}
function stableCompare(cmp2, f) {
  return !cmp2 ? null : f ? (a4, b2) => cmp2(a4, b2) || tupleid(f(a4)) - tupleid(f(b2)) : (a4, b2) => cmp2(a4, b2) || tupleid(a4) - tupleid(b2);
}
function isChangeSet(v2) {
  return v2 && v2.constructor === changeset;
}
function changeset() {
  const add6 = [], rem2 = [], mod = [], remp = [], modp = [];
  let clean = null, reflow2 = false;
  return {
    constructor: changeset,
    insert(t4) {
      const d = array(t4), n = d.length;
      for (let i = 0; i < n; ++i)
        add6.push(d[i]);
      return this;
    },
    remove(t4) {
      const a4 = isFunction(t4) ? remp : rem2, d = array(t4), n = d.length;
      for (let i = 0; i < n; ++i)
        a4.push(d[i]);
      return this;
    },
    modify(t4, field3, value3) {
      const m3 = {
        field: field3,
        value: constant(value3)
      };
      if (isFunction(t4)) {
        m3.filter = t4;
        modp.push(m3);
      } else {
        m3.tuple = t4;
        mod.push(m3);
      }
      return this;
    },
    encode(t4, set7) {
      if (isFunction(t4))
        modp.push({
          filter: t4,
          field: set7
        });
      else
        mod.push({
          tuple: t4,
          field: set7
        });
      return this;
    },
    clean(value3) {
      clean = value3;
      return this;
    },
    reflow() {
      reflow2 = true;
      return this;
    },
    pulse(pulse2, tuples) {
      const cur = {}, out = {};
      let i, n, m3, f, t4, id2;
      for (i = 0, n = tuples.length; i < n; ++i) {
        cur[tupleid(tuples[i])] = 1;
      }
      for (i = 0, n = rem2.length; i < n; ++i) {
        t4 = rem2[i];
        cur[tupleid(t4)] = -1;
      }
      for (i = 0, n = remp.length; i < n; ++i) {
        f = remp[i];
        tuples.forEach((t5) => {
          if (f(t5))
            cur[tupleid(t5)] = -1;
        });
      }
      for (i = 0, n = add6.length; i < n; ++i) {
        t4 = add6[i];
        id2 = tupleid(t4);
        if (cur[id2]) {
          cur[id2] = 1;
        } else {
          pulse2.add.push(ingest$1(add6[i]));
        }
      }
      for (i = 0, n = tuples.length; i < n; ++i) {
        t4 = tuples[i];
        if (cur[tupleid(t4)] < 0)
          pulse2.rem.push(t4);
      }
      function modify2(t5, f2, v2) {
        if (v2) {
          t5[f2] = v2(t5);
        } else {
          pulse2.encode = f2;
        }
        if (!reflow2)
          out[tupleid(t5)] = t5;
      }
      for (i = 0, n = mod.length; i < n; ++i) {
        m3 = mod[i];
        t4 = m3.tuple;
        f = m3.field;
        id2 = cur[tupleid(t4)];
        if (id2 > 0) {
          modify2(t4, f, m3.value);
          pulse2.modifies(f);
        }
      }
      for (i = 0, n = modp.length; i < n; ++i) {
        m3 = modp[i];
        f = m3.filter;
        tuples.forEach((t5) => {
          if (f(t5) && cur[tupleid(t5)] > 0) {
            modify2(t5, m3.field, m3.value);
          }
        });
        pulse2.modifies(m3.field);
      }
      if (reflow2) {
        pulse2.mod = rem2.length || remp.length ? tuples.filter((t5) => cur[tupleid(t5)] > 0) : tuples.slice();
      } else {
        for (id2 in out)
          pulse2.mod.push(out[id2]);
      }
      if (clean || clean == null && (rem2.length || remp.length)) {
        pulse2.clean(true);
      }
      return pulse2;
    }
  };
}
var CACHE = "_:mod:_";
function Parameters() {
  Object.defineProperty(this, CACHE, {
    writable: true,
    value: {}
  });
}
Parameters.prototype = {
  set(name4, index5, value3, force) {
    const o = this, v2 = o[name4], mod = o[CACHE];
    if (index5 != null && index5 >= 0) {
      if (v2[index5] !== value3 || force) {
        v2[index5] = value3;
        mod[index5 + ":" + name4] = -1;
        mod[name4] = -1;
      }
    } else if (v2 !== value3 || force) {
      o[name4] = value3;
      mod[name4] = isArray(value3) ? 1 + value3.length : -1;
    }
    return o;
  },
  modified(name4, index5) {
    const mod = this[CACHE];
    if (!arguments.length) {
      for (const k3 in mod) {
        if (mod[k3])
          return true;
      }
      return false;
    } else if (isArray(name4)) {
      for (let k3 = 0; k3 < name4.length; ++k3) {
        if (mod[name4[k3]])
          return true;
      }
      return false;
    }
    return index5 != null && index5 >= 0 ? index5 + 1 < mod[name4] || !!mod[index5 + ":" + name4] : !!mod[name4];
  },
  clear() {
    this[CACHE] = {};
    return this;
  }
};
var OP_ID = 0;
var PULSE = "pulse";
var NO_PARAMS = new Parameters();
var SKIP$1 = 1;
var MODIFIED = 2;
function Operator(init2, update3, params2, react) {
  this.id = ++OP_ID;
  this.value = init2;
  this.stamp = -1;
  this.rank = -1;
  this.qrank = -1;
  this.flags = 0;
  if (update3) {
    this._update = update3;
  }
  if (params2)
    this.parameters(params2, react);
}
function flag(bit) {
  return function(state) {
    const f = this.flags;
    if (arguments.length === 0)
      return !!(f & bit);
    this.flags = state ? f | bit : f & ~bit;
    return this;
  };
}
Operator.prototype = {
  targets() {
    return this._targets || (this._targets = UniqueList(id));
  },
  set(value3) {
    if (this.value !== value3) {
      this.value = value3;
      return 1;
    } else {
      return 0;
    }
  },
  skip: flag(SKIP$1),
  modified: flag(MODIFIED),
  parameters(params2, react, initonly) {
    react = react !== false;
    const argval = this._argval = this._argval || new Parameters(), argops = this._argops = this._argops || [], deps = [];
    let name4, value3, n, i;
    const add6 = (name5, index5, value4) => {
      if (value4 instanceof Operator) {
        if (value4 !== this) {
          if (react)
            value4.targets().add(this);
          deps.push(value4);
        }
        argops.push({
          op: value4,
          name: name5,
          index: index5
        });
      } else {
        argval.set(name5, index5, value4);
      }
    };
    for (name4 in params2) {
      value3 = params2[name4];
      if (name4 === PULSE) {
        array(value3).forEach((op) => {
          if (!(op instanceof Operator)) {
            error("Pulse parameters must be operator instances.");
          } else if (op !== this) {
            op.targets().add(this);
            deps.push(op);
          }
        });
        this.source = value3;
      } else if (isArray(value3)) {
        argval.set(name4, -1, Array(n = value3.length));
        for (i = 0; i < n; ++i)
          add6(name4, i, value3[i]);
      } else {
        add6(name4, -1, value3);
      }
    }
    this.marshall().clear();
    if (initonly)
      argops.initonly = true;
    return deps;
  },
  marshall(stamp) {
    const argval = this._argval || NO_PARAMS, argops = this._argops;
    let item, i, op, mod;
    if (argops) {
      const n = argops.length;
      for (i = 0; i < n; ++i) {
        item = argops[i];
        op = item.op;
        mod = op.modified() && op.stamp === stamp;
        argval.set(item.name, item.index, op.value, mod);
      }
      if (argops.initonly) {
        for (i = 0; i < n; ++i) {
          item = argops[i];
          item.op.targets().remove(this);
        }
        this._argops = null;
        this._update = null;
      }
    }
    return argval;
  },
  detach() {
    const argops = this._argops;
    let i, n, item, op;
    if (argops) {
      for (i = 0, n = argops.length; i < n; ++i) {
        item = argops[i];
        op = item.op;
        if (op._targets) {
          op._targets.remove(this);
        }
      }
    }
    this.pulse = null;
    this.source = null;
  },
  evaluate(pulse2) {
    const update3 = this._update;
    if (update3) {
      const params2 = this.marshall(pulse2.stamp), v2 = update3.call(this, params2, pulse2);
      params2.clear();
      if (v2 !== this.value) {
        this.value = v2;
      } else if (!this.modified()) {
        return pulse2.StopPropagation;
      }
    }
  },
  run(pulse2) {
    if (pulse2.stamp < this.stamp)
      return pulse2.StopPropagation;
    let rv;
    if (this.skip()) {
      this.skip(false);
      rv = 0;
    } else {
      rv = this.evaluate(pulse2);
    }
    return this.pulse = rv || pulse2;
  }
};
function add(init2, update3, params2, react) {
  let shift = 1, op;
  if (init2 instanceof Operator) {
    op = init2;
  } else if (init2 && init2.prototype instanceof Operator) {
    op = new init2();
  } else if (isFunction(init2)) {
    op = new Operator(null, init2);
  } else {
    shift = 0;
    op = new Operator(init2, update3);
  }
  this.rank(op);
  if (shift) {
    react = params2;
    params2 = update3;
  }
  if (params2)
    this.connect(op, op.parameters(params2, react));
  this.touch(op);
  return op;
}
function connect(target2, sources) {
  const targetRank = target2.rank, n = sources.length;
  for (let i = 0; i < n; ++i) {
    if (targetRank < sources[i].rank) {
      this.rerank(target2);
      return;
    }
  }
}
var STREAM_ID = 0;
function EventStream(filter5, apply3, receive) {
  this.id = ++STREAM_ID;
  this.value = null;
  if (receive)
    this.receive = receive;
  if (filter5)
    this._filter = filter5;
  if (apply3)
    this._apply = apply3;
}
function stream(filter5, apply3, receive) {
  return new EventStream(filter5, apply3, receive);
}
EventStream.prototype = {
  _filter: truthy,
  _apply: identity,
  targets() {
    return this._targets || (this._targets = UniqueList(id));
  },
  consume(_) {
    if (!arguments.length)
      return !!this._consume;
    this._consume = !!_;
    return this;
  },
  receive(evt) {
    if (this._filter(evt)) {
      const val = this.value = this._apply(evt), trg = this._targets, n = trg ? trg.length : 0;
      for (let i = 0; i < n; ++i)
        trg[i].receive(val);
      if (this._consume) {
        evt.preventDefault();
        evt.stopPropagation();
      }
    }
  },
  filter(filter5) {
    const s2 = stream(filter5);
    this.targets().add(s2);
    return s2;
  },
  apply(apply3) {
    const s2 = stream(null, apply3);
    this.targets().add(s2);
    return s2;
  },
  merge() {
    const s2 = stream();
    this.targets().add(s2);
    for (let i = 0, n = arguments.length; i < n; ++i) {
      arguments[i].targets().add(s2);
    }
    return s2;
  },
  throttle(pause) {
    let t4 = -1;
    return this.filter(() => {
      const now2 = Date.now();
      if (now2 - t4 > pause) {
        t4 = now2;
        return 1;
      } else {
        return 0;
      }
    });
  },
  debounce(delay) {
    const s2 = stream();
    this.targets().add(stream(null, null, debounce(delay, (e3) => {
      const df = e3.dataflow;
      s2.receive(e3);
      if (df && df.run)
        df.run();
    })));
    return s2;
  },
  between(a4, b2) {
    let active = false;
    a4.targets().add(stream(null, null, () => active = true));
    b2.targets().add(stream(null, null, () => active = false));
    return this.filter(() => active);
  },
  detach() {
    this._filter = truthy;
    this._targets = null;
  }
};
function events(source3, type3, filter5, apply3) {
  const df = this, s2 = stream(filter5, apply3), send = function(e3) {
    e3.dataflow = df;
    try {
      s2.receive(e3);
    } catch (error2) {
      df.error(error2);
    } finally {
      df.run();
    }
  };
  let sources;
  if (typeof source3 === "string" && typeof document !== "undefined") {
    sources = document.querySelectorAll(source3);
  } else {
    sources = array(source3);
  }
  const n = sources.length;
  for (let i = 0; i < n; ++i) {
    sources[i].addEventListener(type3, send);
  }
  return s2;
}
function parse2(data3, format5) {
  const locale4 = this.locale();
  return read(data3, format5, locale4.timeParse, locale4.utcParse);
}
function ingest(target2, data3, format5) {
  data3 = this.parse(data3, format5);
  return this.pulse(target2, this.changeset().insert(data3));
}
async function request(url, format5) {
  const df = this;
  let status = 0, data3;
  try {
    data3 = await df.loader().load(url, {
      context: "dataflow",
      response: responseType(format5 && format5.type)
    });
    try {
      data3 = df.parse(data3, format5);
    } catch (err) {
      status = -2;
      df.warn("Data ingestion failed", url, err);
    }
  } catch (err) {
    status = -1;
    df.warn("Loading failed", url, err);
  }
  return {
    data: data3,
    status
  };
}
async function preload(target2, url, format5) {
  const df = this, pending = df._pending || loadPending(df);
  pending.requests += 1;
  const res = await df.request(url, format5);
  df.pulse(target2, df.changeset().remove(truthy).insert(res.data || []));
  pending.done();
  return res;
}
function loadPending(df) {
  let accept;
  const pending = new Promise((a4) => accept = a4);
  pending.requests = 0;
  pending.done = () => {
    if (--pending.requests === 0) {
      df._pending = null;
      accept(df);
    }
  };
  return df._pending = pending;
}
var SKIP = {
  skip: true
};
function on(source3, target2, update3, params2, options) {
  const fn = source3 instanceof Operator ? onOperator : onStream;
  fn(this, source3, target2, update3, params2, options);
  return this;
}
function onStream(df, stream2, target2, update3, params2, options) {
  const opt = extend({}, options, SKIP);
  let func, op;
  if (!isFunction(target2))
    target2 = constant(target2);
  if (update3 === void 0) {
    func = (e3) => df.touch(target2(e3));
  } else if (isFunction(update3)) {
    op = new Operator(null, update3, params2, false);
    func = (e3) => {
      op.evaluate(e3);
      const t4 = target2(e3), v2 = op.value;
      isChangeSet(v2) ? df.pulse(t4, v2, options) : df.update(t4, v2, opt);
    };
  } else {
    func = (e3) => df.update(target2(e3), update3, opt);
  }
  stream2.apply(func);
}
function onOperator(df, source3, target2, update3, params2, options) {
  if (update3 === void 0) {
    source3.targets().add(target2);
  } else {
    const opt = options || {}, op = new Operator(null, updater(target2, update3), params2, false);
    op.modified(opt.force);
    op.rank = source3.rank;
    source3.targets().add(op);
    if (target2) {
      op.skip(true);
      op.value = target2.value;
      op.targets().add(target2);
      df.connect(target2, [op]);
    }
  }
}
function updater(target2, update3) {
  update3 = isFunction(update3) ? update3 : constant(update3);
  return target2 ? function(_, pulse2) {
    const value3 = update3(_, pulse2);
    if (!target2.skip()) {
      target2.skip(value3 !== this.value).value = value3;
    }
    return value3;
  } : update3;
}
function rank2(op) {
  op.rank = ++this._rank;
}
function rerank(op) {
  const queue = [op];
  let cur, list, i;
  while (queue.length) {
    this.rank(cur = queue.pop());
    if (list = cur._targets) {
      for (i = list.length; --i >= 0; ) {
        queue.push(cur = list[i]);
        if (cur === op)
          error("Cycle detected in dataflow graph.");
      }
    }
  }
}
var StopPropagation = {};
var ADD = 1 << 0;
var REM = 1 << 1;
var MOD = 1 << 2;
var ADD_REM = ADD | REM;
var ADD_MOD = ADD | MOD;
var ALL = ADD | REM | MOD;
var REFLOW = 1 << 3;
var SOURCE = 1 << 4;
var NO_SOURCE = 1 << 5;
var NO_FIELDS = 1 << 6;
function Pulse(dataflow, stamp, encode2) {
  this.dataflow = dataflow;
  this.stamp = stamp == null ? -1 : stamp;
  this.add = [];
  this.rem = [];
  this.mod = [];
  this.fields = null;
  this.encode = encode2 || null;
}
function materialize(data3, filter5) {
  const out = [];
  visitArray(data3, filter5, (_) => out.push(_));
  return out;
}
function filter2(pulse2, flags) {
  const map7 = {};
  pulse2.visit(flags, (t4) => {
    map7[tupleid(t4)] = 1;
  });
  return (t4) => map7[tupleid(t4)] ? null : t4;
}
function addFilter(a4, b2) {
  return a4 ? (t4, i) => a4(t4, i) && b2(t4, i) : b2;
}
Pulse.prototype = {
  StopPropagation,
  ADD,
  REM,
  MOD,
  ADD_REM,
  ADD_MOD,
  ALL,
  REFLOW,
  SOURCE,
  NO_SOURCE,
  NO_FIELDS,
  fork(flags) {
    return new Pulse(this.dataflow).init(this, flags);
  },
  clone() {
    const p = this.fork(ALL);
    p.add = p.add.slice();
    p.rem = p.rem.slice();
    p.mod = p.mod.slice();
    if (p.source)
      p.source = p.source.slice();
    return p.materialize(ALL | SOURCE);
  },
  addAll() {
    let p = this;
    const reuse = !p.source || p.add === p.rem || !p.rem.length && p.source.length === p.add.length;
    if (reuse) {
      return p;
    } else {
      p = new Pulse(this.dataflow).init(this);
      p.add = p.source;
      p.rem = [];
      return p;
    }
  },
  init(src, flags) {
    const p = this;
    p.stamp = src.stamp;
    p.encode = src.encode;
    if (src.fields && !(flags & NO_FIELDS)) {
      p.fields = src.fields;
    }
    if (flags & ADD) {
      p.addF = src.addF;
      p.add = src.add;
    } else {
      p.addF = null;
      p.add = [];
    }
    if (flags & REM) {
      p.remF = src.remF;
      p.rem = src.rem;
    } else {
      p.remF = null;
      p.rem = [];
    }
    if (flags & MOD) {
      p.modF = src.modF;
      p.mod = src.mod;
    } else {
      p.modF = null;
      p.mod = [];
    }
    if (flags & NO_SOURCE) {
      p.srcF = null;
      p.source = null;
    } else {
      p.srcF = src.srcF;
      p.source = src.source;
      if (src.cleans)
        p.cleans = src.cleans;
    }
    return p;
  },
  runAfter(func) {
    this.dataflow.runAfter(func);
  },
  changed(flags) {
    const f = flags || ALL;
    return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;
  },
  reflow(fork) {
    if (fork)
      return this.fork(ALL).reflow();
    const len = this.add.length, src = this.source && this.source.length;
    if (src && src !== len) {
      this.mod = this.source;
      if (len)
        this.filter(MOD, filter2(this, ADD));
    }
    return this;
  },
  clean(value3) {
    if (arguments.length) {
      this.cleans = !!value3;
      return this;
    } else {
      return this.cleans;
    }
  },
  modifies(_) {
    const hash2 = this.fields || (this.fields = {});
    if (isArray(_)) {
      _.forEach((f) => hash2[f] = true);
    } else {
      hash2[_] = true;
    }
    return this;
  },
  modified(_, nomod) {
    const fields = this.fields;
    return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some((f) => fields[f]) : fields[_];
  },
  filter(flags, filter5) {
    const p = this;
    if (flags & ADD)
      p.addF = addFilter(p.addF, filter5);
    if (flags & REM)
      p.remF = addFilter(p.remF, filter5);
    if (flags & MOD)
      p.modF = addFilter(p.modF, filter5);
    if (flags & SOURCE)
      p.srcF = addFilter(p.srcF, filter5);
    return p;
  },
  materialize(flags) {
    flags = flags || ALL;
    const p = this;
    if (flags & ADD && p.addF) {
      p.add = materialize(p.add, p.addF);
      p.addF = null;
    }
    if (flags & REM && p.remF) {
      p.rem = materialize(p.rem, p.remF);
      p.remF = null;
    }
    if (flags & MOD && p.modF) {
      p.mod = materialize(p.mod, p.modF);
      p.modF = null;
    }
    if (flags & SOURCE && p.srcF) {
      p.source = p.source.filter(p.srcF);
      p.srcF = null;
    }
    return p;
  },
  visit(flags, visitor) {
    const p = this, v2 = visitor;
    if (flags & SOURCE) {
      visitArray(p.source, p.srcF, v2);
      return p;
    }
    if (flags & ADD)
      visitArray(p.add, p.addF, v2);
    if (flags & REM)
      visitArray(p.rem, p.remF, v2);
    if (flags & MOD)
      visitArray(p.mod, p.modF, v2);
    const src = p.source;
    if (flags & REFLOW && src) {
      const sum5 = p.add.length + p.mod.length;
      if (sum5 === src.length)
        ;
      else if (sum5) {
        visitArray(src, filter2(p, ADD_MOD), v2);
      } else {
        visitArray(src, p.srcF, v2);
      }
    }
    return p;
  }
};
function MultiPulse(dataflow, stamp, pulses, encode2) {
  const p = this, n = pulses.length;
  let c3 = 0;
  this.dataflow = dataflow;
  this.stamp = stamp;
  this.fields = null;
  this.encode = encode2 || null;
  this.pulses = pulses;
  for (let i = 0; i < n; ++i) {
    const pulse2 = pulses[i];
    if (pulse2.stamp !== stamp)
      continue;
    if (pulse2.fields) {
      const hash2 = p.fields || (p.fields = {});
      for (const f in pulse2.fields) {
        hash2[f] = 1;
      }
    }
    if (pulse2.changed(p.ADD))
      c3 |= p.ADD;
    if (pulse2.changed(p.REM))
      c3 |= p.REM;
    if (pulse2.changed(p.MOD))
      c3 |= p.MOD;
  }
  this.changes = c3;
}
inherits(MultiPulse, Pulse, {
  fork(flags) {
    const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);
    if (flags !== void 0) {
      if (flags & p.ADD)
        this.visit(p.ADD, (t4) => p.add.push(t4));
      if (flags & p.REM)
        this.visit(p.REM, (t4) => p.rem.push(t4));
      if (flags & p.MOD)
        this.visit(p.MOD, (t4) => p.mod.push(t4));
    }
    return p;
  },
  changed(flags) {
    return this.changes & flags;
  },
  modified(_) {
    const p = this, fields = p.fields;
    return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some((f) => fields[f]) : fields[_];
  },
  filter() {
    error("MultiPulse does not support filtering.");
  },
  materialize() {
    error("MultiPulse does not support materialization.");
  },
  visit(flags, visitor) {
    const p = this, pulses = p.pulses, n = pulses.length;
    let i = 0;
    if (flags & p.SOURCE) {
      for (; i < n; ++i) {
        pulses[i].visit(flags, visitor);
      }
    } else {
      for (; i < n; ++i) {
        if (pulses[i].stamp === p.stamp) {
          pulses[i].visit(flags, visitor);
        }
      }
    }
    return p;
  }
});
async function evaluate(encode2, prerun, postrun) {
  const df = this, async2 = [];
  if (df._pulse)
    return reentrant(df);
  if (df._pending)
    await df._pending;
  if (prerun)
    await asyncCallback(df, prerun);
  if (!df._touched.length) {
    df.debug("Dataflow invoked, but nothing to do.");
    return df;
  }
  const stamp = ++df._clock;
  df._pulse = new Pulse(df, stamp, encode2);
  df._touched.forEach((op2) => df._enqueue(op2, true));
  df._touched = UniqueList(id);
  let count4 = 0, op, next, error2;
  try {
    while (df._heap.size() > 0) {
      op = df._heap.pop();
      if (op.rank !== op.qrank) {
        df._enqueue(op, true);
        continue;
      }
      next = op.run(df._getPulse(op, encode2));
      if (next.then) {
        next = await next;
      } else if (next.async) {
        async2.push(next.async);
        next = StopPropagation;
      }
      if (next !== StopPropagation) {
        if (op._targets)
          op._targets.forEach((op2) => df._enqueue(op2));
      }
      ++count4;
    }
  } catch (err) {
    df._heap.clear();
    error2 = err;
  }
  df._input = {};
  df._pulse = null;
  df.debug(`Pulse ${stamp}: ${count4} operators`);
  if (error2) {
    df._postrun = [];
    df.error(error2);
  }
  if (df._postrun.length) {
    const pr = df._postrun.sort((a4, b2) => b2.priority - a4.priority);
    df._postrun = [];
    for (let i = 0; i < pr.length; ++i) {
      await asyncCallback(df, pr[i].callback);
    }
  }
  if (postrun)
    await asyncCallback(df, postrun);
  if (async2.length) {
    Promise.all(async2).then((cb) => df.runAsync(null, () => {
      cb.forEach((f) => {
        try {
          f(df);
        } catch (err) {
          df.error(err);
        }
      });
    }));
  }
  return df;
}
async function runAsync(encode2, prerun, postrun) {
  while (this._running)
    await this._running;
  const clear2 = () => this._running = null;
  (this._running = this.evaluate(encode2, prerun, postrun)).then(clear2, clear2);
  return this._running;
}
function run(encode2, prerun, postrun) {
  return this._pulse ? reentrant(this) : (this.evaluate(encode2, prerun, postrun), this);
}
function runAfter(callback, enqueue2, priority) {
  if (this._pulse || enqueue2) {
    this._postrun.push({
      priority: priority || 0,
      callback
    });
  } else {
    try {
      callback(this);
    } catch (err) {
      this.error(err);
    }
  }
}
function reentrant(df) {
  df.error("Dataflow already running. Use runAsync() to chain invocations.");
  return df;
}
function enqueue(op, force) {
  const q = op.stamp < this._clock;
  if (q)
    op.stamp = this._clock;
  if (q || force) {
    op.qrank = op.rank;
    this._heap.push(op);
  }
}
function getPulse(op, encode2) {
  const s2 = op.source, stamp = this._clock;
  return s2 && isArray(s2) ? new MultiPulse(this, stamp, s2.map((_) => _.pulse), encode2) : this._input[op.id] || singlePulse(this._pulse, s2 && s2.pulse);
}
function singlePulse(p, s2) {
  if (s2 && s2.stamp === p.stamp) {
    return s2;
  }
  p = p.fork();
  if (s2 && s2 !== StopPropagation) {
    p.source = s2.source;
  }
  return p;
}
var NO_OPT = {
  skip: false,
  force: false
};
function touch(op, options) {
  const opt = options || NO_OPT;
  if (this._pulse) {
    this._enqueue(op);
  } else {
    this._touched.add(op);
  }
  if (opt.skip)
    op.skip(true);
  return this;
}
function update(op, value3, options) {
  const opt = options || NO_OPT;
  if (op.set(value3) || opt.force) {
    this.touch(op, opt);
  }
  return this;
}
function pulse(op, changeset2, options) {
  this.touch(op, options || NO_OPT);
  const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)), t4 = op.pulse && op.pulse.source || [];
  p.target = op;
  this._input[op.id] = changeset2.pulse(p, t4);
  return this;
}
function Heap(cmp2) {
  let nodes = [];
  return {
    clear: () => nodes = [],
    size: () => nodes.length,
    peek: () => nodes[0],
    push: (x5) => {
      nodes.push(x5);
      return siftdown(nodes, 0, nodes.length - 1, cmp2);
    },
    pop: () => {
      const last = nodes.pop();
      let item;
      if (nodes.length) {
        item = nodes[0];
        nodes[0] = last;
        siftup(nodes, 0, cmp2);
      } else {
        item = last;
      }
      return item;
    }
  };
}
function siftdown(array6, start, idx, cmp2) {
  let parent, pidx;
  const item = array6[idx];
  while (idx > start) {
    pidx = idx - 1 >> 1;
    parent = array6[pidx];
    if (cmp2(item, parent) < 0) {
      array6[idx] = parent;
      idx = pidx;
      continue;
    }
    break;
  }
  return array6[idx] = item;
}
function siftup(array6, idx, cmp2) {
  const start = idx, end = array6.length, item = array6[idx];
  let cidx = (idx << 1) + 1, ridx;
  while (cidx < end) {
    ridx = cidx + 1;
    if (ridx < end && cmp2(array6[cidx], array6[ridx]) >= 0) {
      cidx = ridx;
    }
    array6[idx] = array6[cidx];
    idx = cidx;
    cidx = (idx << 1) + 1;
  }
  array6[idx] = item;
  return siftdown(array6, start, idx, cmp2);
}
function Dataflow() {
  this.logger(logger());
  this.logLevel(Error$1);
  this._clock = 0;
  this._rank = 0;
  this._locale = defaultLocale3();
  try {
    this._loader = loader();
  } catch (e3) {
  }
  this._touched = UniqueList(id);
  this._input = {};
  this._pulse = null;
  this._heap = Heap((a4, b2) => a4.qrank - b2.qrank);
  this._postrun = [];
}
function logMethod(method2) {
  return function() {
    return this._log[method2].apply(this, arguments);
  };
}
Dataflow.prototype = {
  stamp() {
    return this._clock;
  },
  loader(_) {
    if (arguments.length) {
      this._loader = _;
      return this;
    } else {
      return this._loader;
    }
  },
  locale(_) {
    if (arguments.length) {
      this._locale = _;
      return this;
    } else {
      return this._locale;
    }
  },
  logger(logger2) {
    if (arguments.length) {
      this._log = logger2;
      return this;
    } else {
      return this._log;
    }
  },
  error: logMethod("error"),
  warn: logMethod("warn"),
  info: logMethod("info"),
  debug: logMethod("debug"),
  logLevel: logMethod("level"),
  cleanThreshold: 1e4,
  add,
  connect,
  rank: rank2,
  rerank,
  pulse,
  touch,
  update,
  changeset,
  ingest,
  parse: parse2,
  preload,
  request,
  events,
  on,
  evaluate,
  run,
  runAsync,
  runAfter,
  _enqueue: enqueue,
  _getPulse: getPulse
};
function Transform(init2, params2) {
  Operator.call(this, init2, null, params2);
}
inherits(Transform, Operator, {
  run(pulse2) {
    if (pulse2.stamp < this.stamp)
      return pulse2.StopPropagation;
    let rv;
    if (this.skip()) {
      this.skip(false);
    } else {
      rv = this.evaluate(pulse2);
    }
    rv = rv || pulse2;
    if (rv.then) {
      rv = rv.then((_) => this.pulse = _);
    } else if (rv !== pulse2.StopPropagation) {
      this.pulse = rv;
    }
    return rv;
  },
  evaluate(pulse2) {
    const params2 = this.marshall(pulse2.stamp), out = this.transform(params2, pulse2);
    params2.clear();
    return out;
  },
  transform() {
  }
});
var transforms = {};
function definition(type3) {
  const t4 = transform(type3);
  return t4 && t4.Definition || null;
}
function transform(type3) {
  type3 = type3 && type3.toLowerCase();
  return has(transforms, type3) ? transforms[type3] : null;
}

// node_modules/vega-transforms/build/vega-transforms.module.js
var vega_transforms_module_exports = {};
__export(vega_transforms_module_exports, {
  aggregate: () => Aggregate,
  bin: () => Bin,
  collect: () => Collect,
  compare: () => Compare,
  countpattern: () => CountPattern,
  cross: () => Cross,
  density: () => Density,
  dotbin: () => DotBin,
  expression: () => Expression,
  extent: () => Extent,
  facet: () => Facet,
  field: () => Field,
  filter: () => Filter,
  flatten: () => Flatten,
  fold: () => Fold,
  formula: () => Formula,
  generate: () => Generate,
  impute: () => Impute,
  joinaggregate: () => JoinAggregate,
  kde: () => KDE,
  key: () => Key,
  load: () => Load,
  lookup: () => Lookup,
  multiextent: () => MultiExtent,
  multivalues: () => MultiValues,
  params: () => Params,
  pivot: () => Pivot,
  prefacet: () => PreFacet,
  project: () => Project,
  proxy: () => Proxy2,
  quantile: () => Quantile,
  relay: () => Relay,
  sample: () => Sample,
  sequence: () => Sequence,
  sieve: () => Sieve,
  subflow: () => Subflow,
  timeunit: () => TimeUnit,
  tupleindex: () => TupleIndex,
  values: () => Values,
  window: () => Window
});

// node_modules/vega-statistics/build/vega-statistics.module.js
function* numbers2(values5, valueof) {
  if (valueof == null) {
    for (let value3 of values5) {
      if (value3 != null && value3 !== "" && (value3 = +value3) >= value3) {
        yield value3;
      }
    }
  } else {
    let index5 = -1;
    for (let value3 of values5) {
      value3 = valueof(value3, ++index5, values5);
      if (value3 != null && value3 !== "" && (value3 = +value3) >= value3) {
        yield value3;
      }
    }
  }
}
function quantiles(array6, p, f) {
  const values5 = Float64Array.from(numbers2(array6, f));
  values5.sort(ascending2);
  return p.map((_) => quantileSorted(values5, _));
}
function quartiles(array6, f) {
  return quantiles(array6, [0.25, 0.5, 0.75], f);
}
function estimateBandwidth(array6, f) {
  const n = array6.length, d = deviation(array6, f), q = quartiles(array6, f), h2 = (q[2] - q[0]) / 1.34, v2 = Math.min(d, h2) || d || Math.abs(q[0]) || 1;
  return 1.06 * v2 * Math.pow(n, -0.2);
}
function bin3(_) {
  const maxb = _.maxbins || 20, base2 = _.base || 10, logb = Math.log(base2), div = _.divide || [5, 2];
  let min6 = _.extent[0], max6 = _.extent[1], step, level, minstep, v2, i, n;
  const span2 = _.span || max6 - min6 || Math.abs(min6) || 1;
  if (_.step) {
    step = _.step;
  } else if (_.steps) {
    v2 = span2 / maxb;
    for (i = 0, n = _.steps.length; i < n && _.steps[i] < v2; ++i)
      ;
    step = _.steps[Math.max(0, i - 1)];
  } else {
    level = Math.ceil(Math.log(maxb) / logb);
    minstep = _.minstep || 0;
    step = Math.max(minstep, Math.pow(base2, Math.round(Math.log(span2) / logb) - level));
    while (Math.ceil(span2 / step) > maxb) {
      step *= base2;
    }
    for (i = 0, n = div.length; i < n; ++i) {
      v2 = step / div[i];
      if (v2 >= minstep && span2 / v2 <= maxb)
        step = v2;
    }
  }
  v2 = Math.log(step);
  const precision = v2 >= 0 ? 0 : ~~(-v2 / logb) + 1, eps = Math.pow(base2, -precision - 1);
  if (_.nice || _.nice === void 0) {
    v2 = Math.floor(min6 / step + eps) * step;
    min6 = min6 < v2 ? v2 - step : v2;
    max6 = Math.ceil(max6 / step) * step;
  }
  return {
    start: min6,
    stop: max6 === min6 ? min6 + step : max6,
    step
  };
}
var random = Math.random;
function setRandom(r) {
  random = r;
}
function bootstrapCI(array6, samples, alpha, f) {
  if (!array6.length)
    return [void 0, void 0];
  const values5 = Float64Array.from(numbers2(array6, f)), n = values5.length, m3 = samples;
  let a4, i, j, mu;
  for (j = 0, mu = Array(m3); j < m3; ++j) {
    for (a4 = 0, i = 0; i < n; ++i) {
      a4 += values5[~~(random() * n)];
    }
    mu[j] = a4 / n;
  }
  mu.sort(ascending2);
  return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];
}
function dotbin(array6, step, smooth, f) {
  f = f || ((_) => _);
  const n = array6.length, v2 = new Float64Array(n);
  let i = 0, j = 1, a4 = f(array6[0]), b2 = a4, w4 = a4 + step, x5;
  for (; j < n; ++j) {
    x5 = f(array6[j]);
    if (x5 >= w4) {
      b2 = (a4 + b2) / 2;
      for (; i < j; ++i)
        v2[i] = b2;
      w4 = x5 + step;
      a4 = x5;
    }
    b2 = x5;
  }
  b2 = (a4 + b2) / 2;
  for (; i < j; ++i)
    v2[i] = b2;
  return smooth ? smoothing(v2, step + step / 4) : v2;
}
function smoothing(v2, thresh) {
  const n = v2.length;
  let a4 = 0, b2 = 1, c3, d;
  while (v2[a4] === v2[b2])
    ++b2;
  while (b2 < n) {
    c3 = b2 + 1;
    while (v2[b2] === v2[c3])
      ++c3;
    if (v2[b2] - v2[b2 - 1] < thresh) {
      d = b2 + (a4 + c3 - b2 - b2 >> 1);
      while (d < b2)
        v2[d++] = v2[b2];
      while (d > b2)
        v2[d--] = v2[a4];
    }
    a4 = b2;
    b2 = c3;
  }
  return v2;
}
function lcg(seed) {
  return function() {
    seed = (1103515245 * seed + 12345) % 2147483647;
    return seed / 2147483647;
  };
}
function integer(min6, max6) {
  if (max6 == null) {
    max6 = min6;
    min6 = 0;
  }
  let a4, b2, d;
  const dist2 = {
    min(_) {
      if (arguments.length) {
        a4 = _ || 0;
        d = b2 - a4;
        return dist2;
      } else {
        return a4;
      }
    },
    max(_) {
      if (arguments.length) {
        b2 = _ || 0;
        d = b2 - a4;
        return dist2;
      } else {
        return b2;
      }
    },
    sample() {
      return a4 + Math.floor(d * random());
    },
    pdf(x5) {
      return x5 === Math.floor(x5) && x5 >= a4 && x5 < b2 ? 1 / d : 0;
    },
    cdf(x5) {
      const v2 = Math.floor(x5);
      return v2 < a4 ? 0 : v2 >= b2 ? 1 : (v2 - a4 + 1) / d;
    },
    icdf(p) {
      return p >= 0 && p <= 1 ? a4 - 1 + Math.floor(p * d) : NaN;
    }
  };
  return dist2.min(min6).max(max6);
}
var SQRT2PI = Math.sqrt(2 * Math.PI);
var SQRT2 = Math.SQRT2;
var nextSample = NaN;
function sampleNormal(mean3, stdev) {
  mean3 = mean3 || 0;
  stdev = stdev == null ? 1 : stdev;
  let x5 = 0, y5 = 0, rds, c3;
  if (nextSample === nextSample) {
    x5 = nextSample;
    nextSample = NaN;
  } else {
    do {
      x5 = random() * 2 - 1;
      y5 = random() * 2 - 1;
      rds = x5 * x5 + y5 * y5;
    } while (rds === 0 || rds > 1);
    c3 = Math.sqrt(-2 * Math.log(rds) / rds);
    x5 *= c3;
    nextSample = y5 * c3;
  }
  return mean3 + x5 * stdev;
}
function densityNormal(value3, mean3, stdev) {
  stdev = stdev == null ? 1 : stdev;
  const z = (value3 - (mean3 || 0)) / stdev;
  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);
}
function cumulativeNormal(value3, mean3, stdev) {
  mean3 = mean3 || 0;
  stdev = stdev == null ? 1 : stdev;
  const z = (value3 - mean3) / stdev, Z = Math.abs(z);
  let cd2;
  if (Z > 37) {
    cd2 = 0;
  } else {
    const exp5 = Math.exp(-Z * Z / 2);
    let sum5;
    if (Z < 7.07106781186547) {
      sum5 = 0.0352624965998911 * Z + 0.700383064443688;
      sum5 = sum5 * Z + 6.37396220353165;
      sum5 = sum5 * Z + 33.912866078383;
      sum5 = sum5 * Z + 112.079291497871;
      sum5 = sum5 * Z + 221.213596169931;
      sum5 = sum5 * Z + 220.206867912376;
      cd2 = exp5 * sum5;
      sum5 = 0.0883883476483184 * Z + 1.75566716318264;
      sum5 = sum5 * Z + 16.064177579207;
      sum5 = sum5 * Z + 86.7807322029461;
      sum5 = sum5 * Z + 296.564248779674;
      sum5 = sum5 * Z + 637.333633378831;
      sum5 = sum5 * Z + 793.826512519948;
      sum5 = sum5 * Z + 440.413735824752;
      cd2 = cd2 / sum5;
    } else {
      sum5 = Z + 0.65;
      sum5 = Z + 4 / sum5;
      sum5 = Z + 3 / sum5;
      sum5 = Z + 2 / sum5;
      sum5 = Z + 1 / sum5;
      cd2 = exp5 / sum5 / 2.506628274631;
    }
  }
  return z > 0 ? 1 - cd2 : cd2;
}
function quantileNormal(p, mean3, stdev) {
  if (p < 0 || p > 1)
    return NaN;
  return (mean3 || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);
}
function erfinv(x5) {
  let w4 = -Math.log((1 - x5) * (1 + x5)), p;
  if (w4 < 6.25) {
    w4 -= 3.125;
    p = -364441206401782e-35;
    p = -16850591381820166e-35 + p * w4;
    p = 128584807152564e-32 + p * w4;
    p = 11157877678025181e-33 + p * w4;
    p = -1333171662854621e-31 + p * w4;
    p = 20972767875968562e-33 + p * w4;
    p = 6637638134358324e-30 + p * w4;
    p = -4054566272975207e-29 + p * w4;
    p = -8151934197605472e-29 + p * w4;
    p = 26335093153082323e-28 + p * w4;
    p = -12975133253453532e-27 + p * w4;
    p = -5415412054294628e-26 + p * w4;
    p = 10512122733215323e-25 + p * w4;
    p = -4112633980346984e-24 + p * w4;
    p = -29070369957882005e-24 + p * w4;
    p = 42347877827932404e-23 + p * w4;
    p = -13654692000834679e-22 + p * w4;
    p = -13882523362786469e-21 + p * w4;
    p = 18673420803405714e-20 + p * w4;
    p = -740702534166267e-18 + p * w4;
    p = -0.006033670871430149 + p * w4;
    p = 0.24015818242558962 + p * w4;
    p = 1.6536545626831027 + p * w4;
  } else if (w4 < 16) {
    w4 = Math.sqrt(w4) - 3.25;
    p = 22137376921775787e-25;
    p = 9075656193888539e-23 + p * w4;
    p = -27517406297064545e-23 + p * w4;
    p = 18239629214389228e-24 + p * w4;
    p = 15027403968909828e-22 + p * w4;
    p = -4013867526981546e-21 + p * w4;
    p = 29234449089955446e-22 + p * w4;
    p = 12475304481671779e-21 + p * w4;
    p = -47318229009055734e-21 + p * w4;
    p = 6828485145957318e-20 + p * w4;
    p = 24031110387097894e-21 + p * w4;
    p = -3550375203628475e-19 + p * w4;
    p = 9532893797373805e-19 + p * w4;
    p = -0.0016882755560235047 + p * w4;
    p = 0.002491442096107851 + p * w4;
    p = -0.003751208507569241 + p * w4;
    p = 0.005370914553590064 + p * w4;
    p = 1.0052589676941592 + p * w4;
    p = 3.0838856104922208 + p * w4;
  } else if (Number.isFinite(w4)) {
    w4 = Math.sqrt(w4) - 5;
    p = -27109920616438573e-27;
    p = -2555641816996525e-25 + p * w4;
    p = 15076572693500548e-25 + p * w4;
    p = -3789465440126737e-24 + p * w4;
    p = 761570120807834e-23 + p * w4;
    p = -1496002662714924e-23 + p * w4;
    p = 2914795345090108e-23 + p * w4;
    p = -6771199775845234e-23 + p * w4;
    p = 22900482228026655e-23 + p * w4;
    p = -99298272942317e-20 + p * w4;
    p = 4526062597223154e-21 + p * w4;
    p = -1968177810553167e-20 + p * w4;
    p = 7599527703001776e-20 + p * w4;
    p = -21503011930044477e-20 + p * w4;
    p = -13871931833623122e-20 + p * w4;
    p = 1.0103004648645344 + p * w4;
    p = 4.849906401408584 + p * w4;
  } else {
    p = Infinity;
  }
  return p * x5;
}
function gaussian(mean3, stdev) {
  let mu, sigma;
  const dist2 = {
    mean(_) {
      if (arguments.length) {
        mu = _ || 0;
        return dist2;
      } else {
        return mu;
      }
    },
    stdev(_) {
      if (arguments.length) {
        sigma = _ == null ? 1 : _;
        return dist2;
      } else {
        return sigma;
      }
    },
    sample: () => sampleNormal(mu, sigma),
    pdf: (value3) => densityNormal(value3, mu, sigma),
    cdf: (value3) => cumulativeNormal(value3, mu, sigma),
    icdf: (p) => quantileNormal(p, mu, sigma)
  };
  return dist2.mean(mean3).stdev(stdev);
}
function kde(support, bandwidth2) {
  const kernel = gaussian();
  let n = 0;
  const dist2 = {
    data(_) {
      if (arguments.length) {
        support = _;
        n = _ ? _.length : 0;
        return dist2.bandwidth(bandwidth2);
      } else {
        return support;
      }
    },
    bandwidth(_) {
      if (!arguments.length)
        return bandwidth2;
      bandwidth2 = _;
      if (!bandwidth2 && support)
        bandwidth2 = estimateBandwidth(support);
      return dist2;
    },
    sample() {
      return support[~~(random() * n)] + bandwidth2 * kernel.sample();
    },
    pdf(x5) {
      let y5 = 0, i = 0;
      for (; i < n; ++i) {
        y5 += kernel.pdf((x5 - support[i]) / bandwidth2);
      }
      return y5 / bandwidth2 / n;
    },
    cdf(x5) {
      let y5 = 0, i = 0;
      for (; i < n; ++i) {
        y5 += kernel.cdf((x5 - support[i]) / bandwidth2);
      }
      return y5 / n;
    },
    icdf() {
      throw Error("KDE icdf not supported.");
    }
  };
  return dist2.data(support);
}
function sampleLogNormal(mean3, stdev) {
  mean3 = mean3 || 0;
  stdev = stdev == null ? 1 : stdev;
  return Math.exp(mean3 + sampleNormal() * stdev);
}
function densityLogNormal(value3, mean3, stdev) {
  if (value3 <= 0)
    return 0;
  mean3 = mean3 || 0;
  stdev = stdev == null ? 1 : stdev;
  const z = (Math.log(value3) - mean3) / stdev;
  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value3);
}
function cumulativeLogNormal(value3, mean3, stdev) {
  return cumulativeNormal(Math.log(value3), mean3, stdev);
}
function quantileLogNormal(p, mean3, stdev) {
  return Math.exp(quantileNormal(p, mean3, stdev));
}
function lognormal(mean3, stdev) {
  let mu, sigma;
  const dist2 = {
    mean(_) {
      if (arguments.length) {
        mu = _ || 0;
        return dist2;
      } else {
        return mu;
      }
    },
    stdev(_) {
      if (arguments.length) {
        sigma = _ == null ? 1 : _;
        return dist2;
      } else {
        return sigma;
      }
    },
    sample: () => sampleLogNormal(mu, sigma),
    pdf: (value3) => densityLogNormal(value3, mu, sigma),
    cdf: (value3) => cumulativeLogNormal(value3, mu, sigma),
    icdf: (p) => quantileLogNormal(p, mu, sigma)
  };
  return dist2.mean(mean3).stdev(stdev);
}
function mixture(dists, weights) {
  let m3 = 0, w4;
  function normalize4(x5) {
    const w5 = [];
    let sum5 = 0, i;
    for (i = 0; i < m3; ++i) {
      sum5 += w5[i] = x5[i] == null ? 1 : +x5[i];
    }
    for (i = 0; i < m3; ++i) {
      w5[i] /= sum5;
    }
    return w5;
  }
  const dist2 = {
    weights(_) {
      if (arguments.length) {
        w4 = normalize4(weights = _ || []);
        return dist2;
      }
      return weights;
    },
    distributions(_) {
      if (arguments.length) {
        if (_) {
          m3 = _.length;
          dists = _;
        } else {
          m3 = 0;
          dists = [];
        }
        return dist2.weights(weights);
      }
      return dists;
    },
    sample() {
      const r = random();
      let d = dists[m3 - 1], v2 = w4[0], i = 0;
      for (; i < m3 - 1; v2 += w4[++i]) {
        if (r < v2) {
          d = dists[i];
          break;
        }
      }
      return d.sample();
    },
    pdf(x5) {
      let p = 0, i = 0;
      for (; i < m3; ++i) {
        p += w4[i] * dists[i].pdf(x5);
      }
      return p;
    },
    cdf(x5) {
      let p = 0, i = 0;
      for (; i < m3; ++i) {
        p += w4[i] * dists[i].cdf(x5);
      }
      return p;
    },
    icdf() {
      throw Error("Mixture icdf not supported.");
    }
  };
  return dist2.distributions(dists).weights(weights);
}
function sampleUniform(min6, max6) {
  if (max6 == null) {
    max6 = min6 == null ? 1 : min6;
    min6 = 0;
  }
  return min6 + (max6 - min6) * random();
}
function densityUniform(value3, min6, max6) {
  if (max6 == null) {
    max6 = min6 == null ? 1 : min6;
    min6 = 0;
  }
  return value3 >= min6 && value3 <= max6 ? 1 / (max6 - min6) : 0;
}
function cumulativeUniform(value3, min6, max6) {
  if (max6 == null) {
    max6 = min6 == null ? 1 : min6;
    min6 = 0;
  }
  return value3 < min6 ? 0 : value3 > max6 ? 1 : (value3 - min6) / (max6 - min6);
}
function quantileUniform(p, min6, max6) {
  if (max6 == null) {
    max6 = min6 == null ? 1 : min6;
    min6 = 0;
  }
  return p >= 0 && p <= 1 ? min6 + p * (max6 - min6) : NaN;
}
function uniform(min6, max6) {
  let a4, b2;
  const dist2 = {
    min(_) {
      if (arguments.length) {
        a4 = _ || 0;
        return dist2;
      } else {
        return a4;
      }
    },
    max(_) {
      if (arguments.length) {
        b2 = _ == null ? 1 : _;
        return dist2;
      } else {
        return b2;
      }
    },
    sample: () => sampleUniform(a4, b2),
    pdf: (value3) => densityUniform(value3, a4, b2),
    cdf: (value3) => cumulativeUniform(value3, a4, b2),
    icdf: (p) => quantileUniform(p, a4, b2)
  };
  if (max6 == null) {
    max6 = min6 == null ? 1 : min6;
    min6 = 0;
  }
  return dist2.min(min6).max(max6);
}
function ols(uX, uY, uXY, uX2) {
  const delta = uX2 - uX * uX, slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta, intercept = uY - slope * uX;
  return [intercept, slope];
}
function points(data3, x5, y5, sort4) {
  data3 = data3.filter((d2) => {
    let u4 = x5(d2), v2 = y5(d2);
    return u4 != null && (u4 = +u4) >= u4 && v2 != null && (v2 = +v2) >= v2;
  });
  if (sort4) {
    data3.sort((a4, b2) => x5(a4) - x5(b2));
  }
  const n = data3.length, X4 = new Float64Array(n), Y4 = new Float64Array(n);
  let i = 0, ux = 0, uy = 0, xv, yv, d;
  for (d of data3) {
    X4[i] = xv = +x5(d);
    Y4[i] = yv = +y5(d);
    ++i;
    ux += (xv - ux) / i;
    uy += (yv - uy) / i;
  }
  for (i = 0; i < n; ++i) {
    X4[i] -= ux;
    Y4[i] -= uy;
  }
  return [X4, Y4, ux, uy];
}
function visitPoints(data3, x5, y5, callback) {
  let i = -1, u4, v2;
  for (const d of data3) {
    u4 = x5(d);
    v2 = y5(d);
    if (u4 != null && (u4 = +u4) >= u4 && v2 != null && (v2 = +v2) >= v2) {
      callback(u4, v2, ++i);
    }
  }
}
function rSquared(data3, x5, y5, uY, predict) {
  let SSE = 0, SST = 0;
  visitPoints(data3, x5, y5, (dx, dy) => {
    const sse = dy - predict(dx), sst = dy - uY;
    SSE += sse * sse;
    SST += sst * sst;
  });
  return 1 - SSE / SST;
}
function linear(data3, x5, y5) {
  let X4 = 0, Y4 = 0, XY = 0, X24 = 0, n = 0;
  visitPoints(data3, x5, y5, (dx, dy) => {
    ++n;
    X4 += (dx - X4) / n;
    Y4 += (dy - Y4) / n;
    XY += (dx * dy - XY) / n;
    X24 += (dx * dx - X24) / n;
  });
  const coef = ols(X4, Y4, XY, X24), predict = (x6) => coef[0] + coef[1] * x6;
  return {
    coef,
    predict,
    rSquared: rSquared(data3, x5, y5, Y4, predict)
  };
}
function log2(data3, x5, y5) {
  let X4 = 0, Y4 = 0, XY = 0, X24 = 0, n = 0;
  visitPoints(data3, x5, y5, (dx, dy) => {
    ++n;
    dx = Math.log(dx);
    X4 += (dx - X4) / n;
    Y4 += (dy - Y4) / n;
    XY += (dx * dy - XY) / n;
    X24 += (dx * dx - X24) / n;
  });
  const coef = ols(X4, Y4, XY, X24), predict = (x6) => coef[0] + coef[1] * Math.log(x6);
  return {
    coef,
    predict,
    rSquared: rSquared(data3, x5, y5, Y4, predict)
  };
}
function exp2(data3, x5, y5) {
  const [xv, yv, ux, uy] = points(data3, x5, y5);
  let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly2, xy;
  visitPoints(data3, x5, y5, (_, dy) => {
    dx = xv[n++];
    ly2 = Math.log(dy);
    xy = dx * dy;
    YL += (dy * ly2 - YL) / n;
    XY += (xy - XY) / n;
    XYL += (xy * ly2 - XYL) / n;
    X2Y += (dx * xy - X2Y) / n;
  });
  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy), predict = (x6) => Math.exp(c0 + c1 * (x6 - ux));
  return {
    coef: [Math.exp(c0 - c1 * ux), c1],
    predict,
    rSquared: rSquared(data3, x5, y5, uy, predict)
  };
}
function pow2(data3, x5, y5) {
  let X4 = 0, Y4 = 0, XY = 0, X24 = 0, YS = 0, n = 0;
  visitPoints(data3, x5, y5, (dx, dy) => {
    const lx2 = Math.log(dx), ly2 = Math.log(dy);
    ++n;
    X4 += (lx2 - X4) / n;
    Y4 += (ly2 - Y4) / n;
    XY += (lx2 * ly2 - XY) / n;
    X24 += (lx2 * lx2 - X24) / n;
    YS += (dy - YS) / n;
  });
  const coef = ols(X4, Y4, XY, X24), predict = (x6) => coef[0] * Math.pow(x6, coef[1]);
  coef[0] = Math.exp(coef[0]);
  return {
    coef,
    predict,
    rSquared: rSquared(data3, x5, y5, YS, predict)
  };
}
function quad(data3, x5, y5) {
  const [xv, yv, ux, uy] = points(data3, x5, y5), n = xv.length;
  let X24 = 0, X32 = 0, X4 = 0, XY = 0, X2Y = 0, i, dx, dy, x22;
  for (i = 0; i < n; ) {
    dx = xv[i];
    dy = yv[i++];
    x22 = dx * dx;
    X24 += (x22 - X24) / i;
    X32 += (x22 * dx - X32) / i;
    X4 += (x22 * x22 - X4) / i;
    XY += (dx * dy - XY) / i;
    X2Y += (x22 * dy - X2Y) / i;
  }
  const X2X2 = X4 - X24 * X24, d = X24 * X2X2 - X32 * X32, a4 = (X2Y * X24 - XY * X32) / d, b2 = (XY * X2X2 - X2Y * X32) / d, c3 = -a4 * X24, predict = (x6) => {
    x6 = x6 - ux;
    return a4 * x6 * x6 + b2 * x6 + c3 + uy;
  };
  return {
    coef: [c3 - b2 * ux + a4 * ux * ux + uy, b2 - 2 * a4 * ux, a4],
    predict,
    rSquared: rSquared(data3, x5, y5, uy, predict)
  };
}
function poly(data3, x5, y5, order) {
  if (order === 1)
    return linear(data3, x5, y5);
  if (order === 2)
    return quad(data3, x5, y5);
  const [xv, yv, ux, uy] = points(data3, x5, y5), n = xv.length, lhs = [], rhs = [], k3 = order + 1;
  let i, j, l, v2, c3;
  for (i = 0; i < k3; ++i) {
    for (l = 0, v2 = 0; l < n; ++l) {
      v2 += Math.pow(xv[l], i) * yv[l];
    }
    lhs.push(v2);
    c3 = new Float64Array(k3);
    for (j = 0; j < k3; ++j) {
      for (l = 0, v2 = 0; l < n; ++l) {
        v2 += Math.pow(xv[l], i + j);
      }
      c3[j] = v2;
    }
    rhs.push(c3);
  }
  rhs.push(lhs);
  const coef = gaussianElimination(rhs), predict = (x6) => {
    x6 -= ux;
    let y6 = uy + coef[0] + coef[1] * x6 + coef[2] * x6 * x6;
    for (i = 3; i < k3; ++i)
      y6 += coef[i] * Math.pow(x6, i);
    return y6;
  };
  return {
    coef: uncenter(k3, coef, -ux, uy),
    predict,
    rSquared: rSquared(data3, x5, y5, uy, predict)
  };
}
function uncenter(k3, a4, x5, y5) {
  const z = Array(k3);
  let i, j, v2, c3;
  for (i = 0; i < k3; ++i)
    z[i] = 0;
  for (i = k3 - 1; i >= 0; --i) {
    v2 = a4[i];
    c3 = 1;
    z[i] += v2;
    for (j = 1; j <= i; ++j) {
      c3 *= (i + 1 - j) / j;
      z[i - j] += v2 * Math.pow(x5, j) * c3;
    }
  }
  z[0] += y5;
  return z;
}
function gaussianElimination(matrix) {
  const n = matrix.length - 1, coef = [];
  let i, j, k3, r, t4;
  for (i = 0; i < n; ++i) {
    r = i;
    for (j = i + 1; j < n; ++j) {
      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {
        r = j;
      }
    }
    for (k3 = i; k3 < n + 1; ++k3) {
      t4 = matrix[k3][i];
      matrix[k3][i] = matrix[k3][r];
      matrix[k3][r] = t4;
    }
    for (j = i + 1; j < n; ++j) {
      for (k3 = n; k3 >= i; k3--) {
        matrix[k3][j] -= matrix[k3][i] * matrix[i][j] / matrix[i][i];
      }
    }
  }
  for (j = n - 1; j >= 0; --j) {
    t4 = 0;
    for (k3 = j + 1; k3 < n; ++k3) {
      t4 += matrix[k3][j] * coef[k3];
    }
    coef[j] = (matrix[n][j] - t4) / matrix[j][j];
  }
  return coef;
}
var maxiters = 2;
var epsilon = 1e-12;
function loess(data3, x5, y5, bandwidth2) {
  const [xv, yv, ux, uy] = points(data3, x5, y5, true), n = xv.length, bw = Math.max(2, ~~(bandwidth2 * n)), yhat = new Float64Array(n), residuals = new Float64Array(n), robustWeights = new Float64Array(n).fill(1);
  for (let iter = -1; ++iter <= maxiters; ) {
    const interval3 = [0, bw - 1];
    for (let i = 0; i < n; ++i) {
      const dx = xv[i], i0 = interval3[0], i1 = interval3[1], edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
      let W = 0, X4 = 0, Y4 = 0, XY = 0, X24 = 0;
      const denom = 1 / Math.abs(xv[edge] - dx || 1);
      for (let k3 = i0; k3 <= i1; ++k3) {
        const xk = xv[k3], yk = yv[k3], w4 = tricube(Math.abs(dx - xk) * denom) * robustWeights[k3], xkw = xk * w4;
        W += w4;
        X4 += xkw;
        Y4 += yk * w4;
        XY += yk * xkw;
        X24 += xk * xkw;
      }
      const [a4, b2] = ols(X4 / W, Y4 / W, XY / W, X24 / W);
      yhat[i] = a4 + b2 * dx;
      residuals[i] = Math.abs(yv[i] - yhat[i]);
      updateInterval(xv, i + 1, interval3);
    }
    if (iter === maxiters) {
      break;
    }
    const medianResidual = median(residuals);
    if (Math.abs(medianResidual) < epsilon)
      break;
    for (let i = 0, arg, w4; i < n; ++i) {
      arg = residuals[i] / (6 * medianResidual);
      robustWeights[i] = arg >= 1 ? epsilon : (w4 = 1 - arg * arg) * w4;
    }
  }
  return output(xv, yhat, ux, uy);
}
function tricube(x5) {
  return (x5 = 1 - x5 * x5 * x5) * x5 * x5;
}
function updateInterval(xv, i, interval3) {
  const val = xv[i];
  let left = interval3[0], right = interval3[1] + 1;
  if (right >= xv.length)
    return;
  while (i > left && xv[right] - val <= val - xv[left]) {
    interval3[0] = ++left;
    interval3[1] = right;
    ++right;
  }
}
function output(xv, yhat, ux, uy) {
  const n = xv.length, out = [];
  let i = 0, cnt = 0, prev = [], v2;
  for (; i < n; ++i) {
    v2 = xv[i] + ux;
    if (prev[0] === v2) {
      prev[1] += (yhat[i] - prev[1]) / ++cnt;
    } else {
      cnt = 0;
      prev[1] += uy;
      prev = [v2, yhat[i]];
      out.push(prev);
    }
  }
  prev[1] += uy;
  return out;
}
var MIN_RADIANS = 0.5 * Math.PI / 180;
function sampleCurve(f, extent4, minSteps, maxSteps) {
  minSteps = minSteps || 25;
  maxSteps = Math.max(minSteps, maxSteps || 200);
  const point10 = (x5) => [x5, f(x5)], minX = extent4[0], maxX = extent4[1], span2 = maxX - minX, stop3 = span2 / maxSteps, prev = [point10(minX)], next = [];
  if (minSteps === maxSteps) {
    for (let i = 1; i < maxSteps; ++i) {
      prev.push(point10(minX + i / minSteps * span2));
    }
    prev.push(point10(maxX));
    return prev;
  } else {
    next.push(point10(maxX));
    for (let i = minSteps; --i > 0; ) {
      next.push(point10(minX + i / minSteps * span2));
    }
  }
  let p02 = prev[0];
  let p1 = next[next.length - 1];
  const sx = 1 / span2;
  const sy = scaleY(p02[1], next);
  while (p1) {
    const pm = point10((p02[0] + p1[0]) / 2);
    const dx = pm[0] - p02[0] >= stop3;
    if (dx && angleDelta(p02, pm, p1, sx, sy) > MIN_RADIANS) {
      next.push(pm);
    } else {
      p02 = p1;
      prev.push(p1);
      next.pop();
    }
    p1 = next[next.length - 1];
  }
  return prev;
}
function scaleY(init2, points2) {
  let ymin = init2;
  let ymax = init2;
  const n = points2.length;
  for (let i = 0; i < n; ++i) {
    const y5 = points2[i][1];
    if (y5 < ymin)
      ymin = y5;
    if (y5 > ymax)
      ymax = y5;
  }
  return 1 / (ymax - ymin);
}
function angleDelta(p, q, r, sx, sy) {
  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])), a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));
  return Math.abs(a0 - a1);
}

// node_modules/vega-transforms/build/vega-transforms.module.js
function multikey(f) {
  return (x5) => {
    const n = f.length;
    let i = 1, k3 = String(f[0](x5));
    for (; i < n; ++i) {
      k3 += "|" + f[i](x5);
    }
    return k3;
  };
}
function groupkey(fields) {
  return !fields || !fields.length ? function() {
    return "";
  } : fields.length === 1 ? fields[0] : multikey(fields);
}
function measureName(op, field3, as) {
  return as || op + (!field3 ? "" : "_" + field3);
}
var noop = () => {
};
var base_op = {
  init: noop,
  add: noop,
  rem: noop,
  idx: 0
};
var AggregateOps = {
  values: {
    init: (m3) => m3.cell.store = true,
    value: (m3) => m3.cell.data.values(),
    idx: -1
  },
  count: {
    value: (m3) => m3.cell.num
  },
  __count__: {
    value: (m3) => m3.missing + m3.valid
  },
  missing: {
    value: (m3) => m3.missing
  },
  valid: {
    value: (m3) => m3.valid
  },
  sum: {
    init: (m3) => m3.sum = 0,
    value: (m3) => m3.sum,
    add: (m3, v2) => m3.sum += +v2,
    rem: (m3, v2) => m3.sum -= v2
  },
  product: {
    init: (m3) => m3.product = 1,
    value: (m3) => m3.valid ? m3.product : void 0,
    add: (m3, v2) => m3.product *= v2,
    rem: (m3, v2) => m3.product /= v2
  },
  mean: {
    init: (m3) => m3.mean = 0,
    value: (m3) => m3.valid ? m3.mean : void 0,
    add: (m3, v2) => (m3.mean_d = v2 - m3.mean, m3.mean += m3.mean_d / m3.valid),
    rem: (m3, v2) => (m3.mean_d = v2 - m3.mean, m3.mean -= m3.valid ? m3.mean_d / m3.valid : m3.mean)
  },
  average: {
    value: (m3) => m3.valid ? m3.mean : void 0,
    req: ["mean"],
    idx: 1
  },
  variance: {
    init: (m3) => m3.dev = 0,
    value: (m3) => m3.valid > 1 ? m3.dev / (m3.valid - 1) : void 0,
    add: (m3, v2) => m3.dev += m3.mean_d * (v2 - m3.mean),
    rem: (m3, v2) => m3.dev -= m3.mean_d * (v2 - m3.mean),
    req: ["mean"],
    idx: 1
  },
  variancep: {
    value: (m3) => m3.valid > 1 ? m3.dev / m3.valid : void 0,
    req: ["variance"],
    idx: 2
  },
  stdev: {
    value: (m3) => m3.valid > 1 ? Math.sqrt(m3.dev / (m3.valid - 1)) : void 0,
    req: ["variance"],
    idx: 2
  },
  stdevp: {
    value: (m3) => m3.valid > 1 ? Math.sqrt(m3.dev / m3.valid) : void 0,
    req: ["variance"],
    idx: 2
  },
  stderr: {
    value: (m3) => m3.valid > 1 ? Math.sqrt(m3.dev / (m3.valid * (m3.valid - 1))) : void 0,
    req: ["variance"],
    idx: 2
  },
  distinct: {
    value: (m3) => m3.cell.data.distinct(m3.get),
    req: ["values"],
    idx: 3
  },
  ci0: {
    value: (m3) => m3.cell.data.ci0(m3.get),
    req: ["values"],
    idx: 3
  },
  ci1: {
    value: (m3) => m3.cell.data.ci1(m3.get),
    req: ["values"],
    idx: 3
  },
  median: {
    value: (m3) => m3.cell.data.q2(m3.get),
    req: ["values"],
    idx: 3
  },
  q1: {
    value: (m3) => m3.cell.data.q1(m3.get),
    req: ["values"],
    idx: 3
  },
  q3: {
    value: (m3) => m3.cell.data.q3(m3.get),
    req: ["values"],
    idx: 3
  },
  min: {
    init: (m3) => m3.min = void 0,
    value: (m3) => m3.min = Number.isNaN(m3.min) ? m3.cell.data.min(m3.get) : m3.min,
    add: (m3, v2) => {
      if (v2 < m3.min || m3.min === void 0)
        m3.min = v2;
    },
    rem: (m3, v2) => {
      if (v2 <= m3.min)
        m3.min = NaN;
    },
    req: ["values"],
    idx: 4
  },
  max: {
    init: (m3) => m3.max = void 0,
    value: (m3) => m3.max = Number.isNaN(m3.max) ? m3.cell.data.max(m3.get) : m3.max,
    add: (m3, v2) => {
      if (v2 > m3.max || m3.max === void 0)
        m3.max = v2;
    },
    rem: (m3, v2) => {
      if (v2 >= m3.max)
        m3.max = NaN;
    },
    req: ["values"],
    idx: 4
  },
  argmin: {
    init: (m3) => m3.argmin = void 0,
    value: (m3) => m3.argmin || m3.cell.data.argmin(m3.get),
    add: (m3, v2, t4) => {
      if (v2 < m3.min)
        m3.argmin = t4;
    },
    rem: (m3, v2) => {
      if (v2 <= m3.min)
        m3.argmin = void 0;
    },
    req: ["min", "values"],
    idx: 3
  },
  argmax: {
    init: (m3) => m3.argmax = void 0,
    value: (m3) => m3.argmax || m3.cell.data.argmax(m3.get),
    add: (m3, v2, t4) => {
      if (v2 > m3.max)
        m3.argmax = t4;
    },
    rem: (m3, v2) => {
      if (v2 >= m3.max)
        m3.argmax = void 0;
    },
    req: ["max", "values"],
    idx: 3
  }
};
var ValidAggregateOps = Object.keys(AggregateOps);
function measure(key2, value3) {
  return (out) => extend({
    name: key2,
    out: out || key2
  }, base_op, value3);
}
ValidAggregateOps.forEach((key2) => {
  AggregateOps[key2] = measure(key2, AggregateOps[key2]);
});
function createMeasure(op, name4) {
  return AggregateOps[op](name4);
}
function compareIndex(a4, b2) {
  return a4.idx - b2.idx;
}
function resolve(agg) {
  const map7 = {};
  agg.forEach((a4) => map7[a4.name] = a4);
  const getreqs = (a4) => {
    if (!a4.req)
      return;
    a4.req.forEach((key2) => {
      if (!map7[key2])
        getreqs(map7[key2] = AggregateOps[key2]());
    });
  };
  agg.forEach(getreqs);
  return Object.values(map7).sort(compareIndex);
}
function init() {
  this.valid = 0;
  this.missing = 0;
  this._ops.forEach((op) => op.init(this));
}
function add2(v2, t4) {
  if (v2 == null || v2 === "") {
    ++this.missing;
    return;
  }
  if (v2 !== v2)
    return;
  ++this.valid;
  this._ops.forEach((op) => op.add(this, v2, t4));
}
function rem(v2, t4) {
  if (v2 == null || v2 === "") {
    --this.missing;
    return;
  }
  if (v2 !== v2)
    return;
  --this.valid;
  this._ops.forEach((op) => op.rem(this, v2, t4));
}
function set(t4) {
  this._out.forEach((op) => t4[op.out] = op.value(this));
  return t4;
}
function compileMeasures(agg, field3) {
  const get7 = field3 || identity, ops2 = resolve(agg), out = agg.slice().sort(compareIndex);
  function ctr(cell2) {
    this._ops = ops2;
    this._out = out;
    this.cell = cell2;
    this.init();
  }
  ctr.prototype.init = init;
  ctr.prototype.add = add2;
  ctr.prototype.rem = rem;
  ctr.prototype.set = set;
  ctr.prototype.get = get7;
  ctr.fields = agg.map((op) => op.out);
  return ctr;
}
function TupleStore(key2) {
  this._key = key2 ? field(key2) : tupleid;
  this.reset();
}
var prototype$1 = TupleStore.prototype;
prototype$1.reset = function() {
  this._add = [];
  this._rem = [];
  this._ext = null;
  this._get = null;
  this._q = null;
};
prototype$1.add = function(v2) {
  this._add.push(v2);
};
prototype$1.rem = function(v2) {
  this._rem.push(v2);
};
prototype$1.values = function() {
  this._get = null;
  if (this._rem.length === 0)
    return this._add;
  const a4 = this._add, r = this._rem, k3 = this._key, n = a4.length, m3 = r.length, x5 = Array(n - m3), map7 = {};
  let i, j, v2;
  for (i = 0; i < m3; ++i) {
    map7[k3(r[i])] = 1;
  }
  for (i = 0, j = 0; i < n; ++i) {
    if (map7[k3(v2 = a4[i])]) {
      map7[k3(v2)] = 0;
    } else {
      x5[j++] = v2;
    }
  }
  this._rem = [];
  return this._add = x5;
};
prototype$1.distinct = function(get7) {
  const v2 = this.values(), map7 = {};
  let n = v2.length, count4 = 0, s2;
  while (--n >= 0) {
    s2 = get7(v2[n]) + "";
    if (!has(map7, s2)) {
      map7[s2] = 1;
      ++count4;
    }
  }
  return count4;
};
prototype$1.extent = function(get7) {
  if (this._get !== get7 || !this._ext) {
    const v2 = this.values(), i = extentIndex(v2, get7);
    this._ext = [v2[i[0]], v2[i[1]]];
    this._get = get7;
  }
  return this._ext;
};
prototype$1.argmin = function(get7) {
  return this.extent(get7)[0] || {};
};
prototype$1.argmax = function(get7) {
  return this.extent(get7)[1] || {};
};
prototype$1.min = function(get7) {
  const m3 = this.extent(get7)[0];
  return m3 != null ? get7(m3) : void 0;
};
prototype$1.max = function(get7) {
  const m3 = this.extent(get7)[1];
  return m3 != null ? get7(m3) : void 0;
};
prototype$1.quartile = function(get7) {
  if (this._get !== get7 || !this._q) {
    this._q = quartiles(this.values(), get7);
    this._get = get7;
  }
  return this._q;
};
prototype$1.q1 = function(get7) {
  return this.quartile(get7)[0];
};
prototype$1.q2 = function(get7) {
  return this.quartile(get7)[1];
};
prototype$1.q3 = function(get7) {
  return this.quartile(get7)[2];
};
prototype$1.ci = function(get7) {
  if (this._get !== get7 || !this._ci) {
    this._ci = bootstrapCI(this.values(), 1e3, 0.05, get7);
    this._get = get7;
  }
  return this._ci;
};
prototype$1.ci0 = function(get7) {
  return this.ci(get7)[0];
};
prototype$1.ci1 = function(get7) {
  return this.ci(get7)[1];
};
function Aggregate(params2) {
  Transform.call(this, null, params2);
  this._adds = [];
  this._mods = [];
  this._alen = 0;
  this._mlen = 0;
  this._drop = true;
  this._cross = false;
  this._dims = [];
  this._dnames = [];
  this._measures = [];
  this._countOnly = false;
  this._counts = null;
  this._prev = null;
  this._inputs = null;
  this._outputs = null;
}
Aggregate.Definition = {
  "type": "Aggregate",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "ops",
    "type": "enum",
    "array": true,
    "values": ValidAggregateOps
  }, {
    "name": "fields",
    "type": "field",
    "null": true,
    "array": true
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }, {
    "name": "drop",
    "type": "boolean",
    "default": true
  }, {
    "name": "cross",
    "type": "boolean",
    "default": false
  }, {
    "name": "key",
    "type": "field"
  }]
};
inherits(Aggregate, Transform, {
  transform(_, pulse2) {
    const aggr = this, out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), mod = _.modified();
    aggr.stamp = out.stamp;
    if (aggr.value && (mod || pulse2.modified(aggr._inputs, true))) {
      aggr._prev = aggr.value;
      aggr.value = mod ? aggr.init(_) : {};
      pulse2.visit(pulse2.SOURCE, (t4) => aggr.add(t4));
    } else {
      aggr.value = aggr.value || aggr.init(_);
      pulse2.visit(pulse2.REM, (t4) => aggr.rem(t4));
      pulse2.visit(pulse2.ADD, (t4) => aggr.add(t4));
    }
    out.modifies(aggr._outputs);
    aggr._drop = _.drop !== false;
    if (_.cross && aggr._dims.length > 1) {
      aggr._drop = false;
      aggr.cross();
    }
    if (pulse2.clean() && aggr._drop) {
      out.clean(true).runAfter(() => this.clean());
    }
    return aggr.changes(out);
  },
  cross() {
    const aggr = this, curr = aggr.value, dims = aggr._dnames, vals2 = dims.map(() => ({})), n = dims.length;
    function collect2(cells) {
      let key2, i, t4, v2;
      for (key2 in cells) {
        t4 = cells[key2].tuple;
        for (i = 0; i < n; ++i) {
          vals2[i][v2 = t4[dims[i]]] = v2;
        }
      }
    }
    collect2(aggr._prev);
    collect2(curr);
    function generate3(base2, tuple, index5) {
      const name4 = dims[index5], v2 = vals2[index5++];
      for (const k3 in v2) {
        const key2 = base2 ? base2 + "|" + k3 : k3;
        tuple[name4] = v2[k3];
        if (index5 < n)
          generate3(key2, tuple, index5);
        else if (!curr[key2])
          aggr.cell(key2, tuple);
      }
    }
    generate3("", {}, 0);
  },
  init(_) {
    const inputs = this._inputs = [], outputs = this._outputs = [], inputMap = {};
    function inputVisit(get7) {
      const fields2 = array(accessorFields(get7)), n2 = fields2.length;
      let i2 = 0, f;
      for (; i2 < n2; ++i2) {
        if (!inputMap[f = fields2[i2]]) {
          inputMap[f] = 1;
          inputs.push(f);
        }
      }
    }
    this._dims = array(_.groupby);
    this._dnames = this._dims.map((d) => {
      const dname = accessorName(d);
      inputVisit(d);
      outputs.push(dname);
      return dname;
    });
    this.cellkey = _.key ? _.key : groupkey(this._dims);
    this._countOnly = true;
    this._counts = [];
    this._measures = [];
    const fields = _.fields || [null], ops2 = _.ops || ["count"], as = _.as || [], n = fields.length, map7 = {};
    let field3, op, m3, mname, outname, i;
    if (n !== ops2.length) {
      error("Unmatched number of fields and aggregate ops.");
    }
    for (i = 0; i < n; ++i) {
      field3 = fields[i];
      op = ops2[i];
      if (field3 == null && op !== "count") {
        error("Null aggregate field specified.");
      }
      mname = accessorName(field3);
      outname = measureName(op, mname, as[i]);
      outputs.push(outname);
      if (op === "count") {
        this._counts.push(outname);
        continue;
      }
      m3 = map7[mname];
      if (!m3) {
        inputVisit(field3);
        m3 = map7[mname] = [];
        m3.field = field3;
        this._measures.push(m3);
      }
      if (op !== "count")
        this._countOnly = false;
      m3.push(createMeasure(op, outname));
    }
    this._measures = this._measures.map((m4) => compileMeasures(m4, m4.field));
    return {};
  },
  cellkey: groupkey(),
  cell(key2, t4) {
    let cell2 = this.value[key2];
    if (!cell2) {
      cell2 = this.value[key2] = this.newcell(key2, t4);
      this._adds[this._alen++] = cell2;
    } else if (cell2.num === 0 && this._drop && cell2.stamp < this.stamp) {
      cell2.stamp = this.stamp;
      this._adds[this._alen++] = cell2;
    } else if (cell2.stamp < this.stamp) {
      cell2.stamp = this.stamp;
      this._mods[this._mlen++] = cell2;
    }
    return cell2;
  },
  newcell(key2, t4) {
    const cell2 = {
      key: key2,
      num: 0,
      agg: null,
      tuple: this.newtuple(t4, this._prev && this._prev[key2]),
      stamp: this.stamp,
      store: false
    };
    if (!this._countOnly) {
      const measures = this._measures, n = measures.length;
      cell2.agg = Array(n);
      for (let i = 0; i < n; ++i) {
        cell2.agg[i] = new measures[i](cell2);
      }
    }
    if (cell2.store) {
      cell2.data = new TupleStore();
    }
    return cell2;
  },
  newtuple(t4, p) {
    const names = this._dnames, dims = this._dims, n = dims.length, x5 = {};
    for (let i = 0; i < n; ++i) {
      x5[names[i]] = dims[i](t4);
    }
    return p ? replace(p.tuple, x5) : ingest$1(x5);
  },
  clean() {
    const cells = this.value;
    for (const key2 in cells) {
      if (cells[key2].num === 0) {
        delete cells[key2];
      }
    }
  },
  add(t4) {
    const key2 = this.cellkey(t4), cell2 = this.cell(key2, t4);
    cell2.num += 1;
    if (this._countOnly)
      return;
    if (cell2.store)
      cell2.data.add(t4);
    const agg = cell2.agg;
    for (let i = 0, n = agg.length; i < n; ++i) {
      agg[i].add(agg[i].get(t4), t4);
    }
  },
  rem(t4) {
    const key2 = this.cellkey(t4), cell2 = this.cell(key2, t4);
    cell2.num -= 1;
    if (this._countOnly)
      return;
    if (cell2.store)
      cell2.data.rem(t4);
    const agg = cell2.agg;
    for (let i = 0, n = agg.length; i < n; ++i) {
      agg[i].rem(agg[i].get(t4), t4);
    }
  },
  celltuple(cell2) {
    const tuple = cell2.tuple, counts = this._counts;
    if (cell2.store) {
      cell2.data.values();
    }
    for (let i = 0, n = counts.length; i < n; ++i) {
      tuple[counts[i]] = cell2.num;
    }
    if (!this._countOnly) {
      const agg = cell2.agg;
      for (let i = 0, n = agg.length; i < n; ++i) {
        agg[i].set(tuple);
      }
    }
    return tuple;
  },
  changes(out) {
    const adds = this._adds, mods = this._mods, prev = this._prev, drop = this._drop, add6 = out.add, rem2 = out.rem, mod = out.mod;
    let cell2, key2, i, n;
    if (prev)
      for (key2 in prev) {
        cell2 = prev[key2];
        if (!drop || cell2.num)
          rem2.push(cell2.tuple);
      }
    for (i = 0, n = this._alen; i < n; ++i) {
      add6.push(this.celltuple(adds[i]));
      adds[i] = null;
    }
    for (i = 0, n = this._mlen; i < n; ++i) {
      cell2 = mods[i];
      (cell2.num === 0 && drop ? rem2 : mod).push(this.celltuple(cell2));
      mods[i] = null;
    }
    this._alen = this._mlen = 0;
    this._prev = null;
    return out;
  }
});
var EPSILON$1 = 1e-14;
function Bin(params2) {
  Transform.call(this, null, params2);
}
Bin.Definition = {
  "type": "Bin",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "interval",
    "type": "boolean",
    "default": true
  }, {
    "name": "anchor",
    "type": "number"
  }, {
    "name": "maxbins",
    "type": "number",
    "default": 20
  }, {
    "name": "base",
    "type": "number",
    "default": 10
  }, {
    "name": "divide",
    "type": "number",
    "array": true,
    "default": [5, 2]
  }, {
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2,
    "required": true
  }, {
    "name": "span",
    "type": "number"
  }, {
    "name": "step",
    "type": "number"
  }, {
    "name": "steps",
    "type": "number",
    "array": true
  }, {
    "name": "minstep",
    "type": "number",
    "default": 0
  }, {
    "name": "nice",
    "type": "boolean",
    "default": true
  }, {
    "name": "name",
    "type": "string"
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["bin0", "bin1"]
  }]
};
inherits(Bin, Transform, {
  transform(_, pulse2) {
    const band3 = _.interval !== false, bins2 = this._bins(_), start = bins2.start, step = bins2.step, as = _.as || ["bin0", "bin1"], b0 = as[0], b1 = as[1];
    let flag2;
    if (_.modified()) {
      pulse2 = pulse2.reflow(true);
      flag2 = pulse2.SOURCE;
    } else {
      flag2 = pulse2.modified(accessorFields(_.field)) ? pulse2.ADD_MOD : pulse2.ADD;
    }
    pulse2.visit(flag2, band3 ? (t4) => {
      const v2 = bins2(t4);
      t4[b0] = v2;
      t4[b1] = v2 == null ? null : start + step * (1 + (v2 - start) / step);
    } : (t4) => t4[b0] = bins2(t4));
    return pulse2.modifies(band3 ? as : b0);
  },
  _bins(_) {
    if (this.value && !_.modified()) {
      return this.value;
    }
    const field3 = _.field, bins2 = bin3(_), step = bins2.step;
    let start = bins2.start, stop3 = start + Math.ceil((bins2.stop - start) / step) * step, a4, d;
    if ((a4 = _.anchor) != null) {
      d = a4 - (start + step * Math.floor((a4 - start) / step));
      start += d;
      stop3 += d;
    }
    const f = function(t4) {
      let v2 = toNumber(field3(t4));
      return v2 == null ? null : v2 < start ? -Infinity : v2 > stop3 ? Infinity : (v2 = Math.max(start, Math.min(v2, stop3 - step)), start + step * Math.floor(EPSILON$1 + (v2 - start) / step));
    };
    f.start = start;
    f.stop = bins2.stop;
    f.step = step;
    return this.value = accessor(f, accessorFields(field3), _.name || "bin_" + accessorName(field3));
  }
});
function SortedList(idFunc, source3, input) {
  const $2 = idFunc;
  let data3 = source3 || [], add6 = input || [], rem2 = {}, cnt = 0;
  return {
    add: (t4) => add6.push(t4),
    remove: (t4) => rem2[$2(t4)] = ++cnt,
    size: () => data3.length,
    data: (compare5, resort) => {
      if (cnt) {
        data3 = data3.filter((t4) => !rem2[$2(t4)]);
        rem2 = {};
        cnt = 0;
      }
      if (resort && compare5) {
        data3.sort(compare5);
      }
      if (add6.length) {
        data3 = compare5 ? merge(compare5, data3, add6.sort(compare5)) : data3.concat(add6);
        add6 = [];
      }
      return data3;
    }
  };
}
function Collect(params2) {
  Transform.call(this, [], params2);
}
Collect.Definition = {
  "type": "Collect",
  "metadata": {
    "source": true
  },
  "params": [{
    "name": "sort",
    "type": "compare"
  }]
};
inherits(Collect, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.ALL), list = SortedList(tupleid, this.value, out.materialize(out.ADD).add), sort4 = _.sort, mod = pulse2.changed() || sort4 && (_.modified("sort") || pulse2.modified(sort4.fields));
    out.visit(out.REM, list.remove);
    this.modified(mod);
    this.value = out.source = list.data(stableCompare(sort4), mod);
    if (pulse2.source && pulse2.source.root) {
      this.value.root = pulse2.source.root;
    }
    return out;
  }
});
function Compare(params2) {
  Operator.call(this, null, update$5, params2);
}
inherits(Compare, Operator);
function update$5(_) {
  return this.value && !_.modified() ? this.value : compare2(_.fields, _.orders);
}
function CountPattern(params2) {
  Transform.call(this, null, params2);
}
CountPattern.Definition = {
  "type": "CountPattern",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "case",
    "type": "enum",
    "values": ["upper", "lower", "mixed"],
    "default": "mixed"
  }, {
    "name": "pattern",
    "type": "string",
    "default": '[\\w"]+'
  }, {
    "name": "stopwords",
    "type": "string",
    "default": ""
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["text", "count"]
  }]
};
function tokenize(text4, tcase, match2) {
  switch (tcase) {
    case "upper":
      text4 = text4.toUpperCase();
      break;
    case "lower":
      text4 = text4.toLowerCase();
      break;
  }
  return text4.match(match2);
}
inherits(CountPattern, Transform, {
  transform(_, pulse2) {
    const process2 = (update3) => (tuple) => {
      var tokens = tokenize(get7(tuple), _.case, match2) || [], t4;
      for (var i = 0, n = tokens.length; i < n; ++i) {
        if (!stop3.test(t4 = tokens[i]))
          update3(t4);
      }
    };
    const init2 = this._parameterCheck(_, pulse2), counts = this._counts, match2 = this._match, stop3 = this._stop, get7 = _.field, as = _.as || ["text", "count"], add6 = process2((t4) => counts[t4] = 1 + (counts[t4] || 0)), rem2 = process2((t4) => counts[t4] -= 1);
    if (init2) {
      pulse2.visit(pulse2.SOURCE, add6);
    } else {
      pulse2.visit(pulse2.ADD, add6);
      pulse2.visit(pulse2.REM, rem2);
    }
    return this._finish(pulse2, as);
  },
  _parameterCheck(_, pulse2) {
    let init2 = false;
    if (_.modified("stopwords") || !this._stop) {
      this._stop = new RegExp("^" + (_.stopwords || "") + "$", "i");
      init2 = true;
    }
    if (_.modified("pattern") || !this._match) {
      this._match = new RegExp(_.pattern || "[\\w']+", "g");
      init2 = true;
    }
    if (_.modified("field") || pulse2.modified(_.field.fields)) {
      init2 = true;
    }
    if (init2)
      this._counts = {};
    return init2;
  },
  _finish(pulse2, as) {
    const counts = this._counts, tuples = this._tuples || (this._tuples = {}), text4 = as[0], count4 = as[1], out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    let w4, t4, c3;
    for (w4 in counts) {
      t4 = tuples[w4];
      c3 = counts[w4] || 0;
      if (!t4 && c3) {
        tuples[w4] = t4 = ingest$1({});
        t4[text4] = w4;
        t4[count4] = c3;
        out.add.push(t4);
      } else if (c3 === 0) {
        if (t4)
          out.rem.push(t4);
        counts[w4] = null;
        tuples[w4] = null;
      } else if (t4[count4] !== c3) {
        t4[count4] = c3;
        out.mod.push(t4);
      }
    }
    return out.modifies(as);
  }
});
function Cross(params2) {
  Transform.call(this, null, params2);
}
Cross.Definition = {
  "type": "Cross",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "filter",
    "type": "expr"
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["a", "b"]
  }]
};
inherits(Cross, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE), as = _.as || ["a", "b"], a4 = as[0], b2 = as[1], reset4 = !this.value || pulse2.changed(pulse2.ADD_REM) || _.modified("as") || _.modified("filter");
    let data3 = this.value;
    if (reset4) {
      if (data3)
        out.rem = data3;
      data3 = pulse2.materialize(pulse2.SOURCE).source;
      out.add = this.value = cross2(data3, a4, b2, _.filter || truthy);
    } else {
      out.mod = data3;
    }
    out.source = this.value;
    return out.modifies(as);
  }
});
function cross2(input, a4, b2, filter5) {
  var data3 = [], t4 = {}, n = input.length, i = 0, j, left;
  for (; i < n; ++i) {
    t4[a4] = left = input[i];
    for (j = 0; j < n; ++j) {
      t4[b2] = input[j];
      if (filter5(t4)) {
        data3.push(ingest$1(t4));
        t4 = {};
        t4[a4] = left;
      }
    }
  }
  return data3;
}
var Distributions = {
  kde,
  mixture,
  normal: gaussian,
  lognormal,
  uniform
};
var DISTRIBUTIONS = "distributions";
var FUNCTION = "function";
var FIELD = "field";
function parse3(def2, data3) {
  const func = def2[FUNCTION];
  if (!has(Distributions, func)) {
    error("Unknown distribution function: " + func);
  }
  const d = Distributions[func]();
  for (const name4 in def2) {
    if (name4 === FIELD) {
      d.data((def2.from || data3()).map(def2[name4]));
    } else if (name4 === DISTRIBUTIONS) {
      d[name4](def2[name4].map((_) => parse3(_, data3)));
    } else if (typeof d[name4] === FUNCTION) {
      d[name4](def2[name4]);
    }
  }
  return d;
}
function Density(params2) {
  Transform.call(this, null, params2);
}
var distributions = [{
  "key": {
    "function": "normal"
  },
  "params": [{
    "name": "mean",
    "type": "number",
    "default": 0
  }, {
    "name": "stdev",
    "type": "number",
    "default": 1
  }]
}, {
  "key": {
    "function": "lognormal"
  },
  "params": [{
    "name": "mean",
    "type": "number",
    "default": 0
  }, {
    "name": "stdev",
    "type": "number",
    "default": 1
  }]
}, {
  "key": {
    "function": "uniform"
  },
  "params": [{
    "name": "min",
    "type": "number",
    "default": 0
  }, {
    "name": "max",
    "type": "number",
    "default": 1
  }]
}, {
  "key": {
    "function": "kde"
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "from",
    "type": "data"
  }, {
    "name": "bandwidth",
    "type": "number",
    "default": 0
  }]
}];
var mixture2 = {
  "key": {
    "function": "mixture"
  },
  "params": [{
    "name": "distributions",
    "type": "param",
    "array": true,
    "params": distributions
  }, {
    "name": "weights",
    "type": "number",
    "array": true
  }]
};
Density.Definition = {
  "type": "Density",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "steps",
    "type": "number"
  }, {
    "name": "minsteps",
    "type": "number",
    "default": 25
  }, {
    "name": "maxsteps",
    "type": "number",
    "default": 200
  }, {
    "name": "method",
    "type": "string",
    "default": "pdf",
    "values": ["pdf", "cdf"]
  }, {
    "name": "distribution",
    "type": "param",
    "params": distributions.concat(mixture2)
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "default": ["value", "density"]
  }]
};
inherits(Density, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    if (!this.value || pulse2.changed() || _.modified()) {
      const dist2 = parse3(_.distribution, source(pulse2)), minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
      let method2 = _.method || "pdf";
      if (method2 !== "pdf" && method2 !== "cdf") {
        error("Invalid density method: " + method2);
      }
      if (!_.extent && !dist2.data) {
        error("Missing density extent parameter.");
      }
      method2 = dist2[method2];
      const as = _.as || ["value", "density"], domain4 = _.extent || extent(dist2.data()), values5 = sampleCurve(method2, domain4, minsteps, maxsteps).map((v2) => {
        const tuple = {};
        tuple[as[0]] = v2[0];
        tuple[as[1]] = v2[1];
        return ingest$1(tuple);
      });
      if (this.value)
        out.rem = this.value;
      this.value = out.add = out.source = values5;
    }
    return out;
  }
});
function source(pulse2) {
  return () => pulse2.materialize(pulse2.SOURCE).source;
}
function fieldNames(fields, as) {
  if (!fields)
    return null;
  return fields.map((f, i) => as[i] || accessorName(f));
}
function partition$1(data3, groupby, field3) {
  const groups3 = [], get7 = (f) => f(t4);
  let map7, i, n, t4, k3, g;
  if (groupby == null) {
    groups3.push(data3.map(field3));
  } else {
    for (map7 = {}, i = 0, n = data3.length; i < n; ++i) {
      t4 = data3[i];
      k3 = groupby.map(get7);
      g = map7[k3];
      if (!g) {
        map7[k3] = g = [];
        g.dims = k3;
        groups3.push(g);
      }
      g.push(field3(t4));
    }
  }
  return groups3;
}
var Output = "bin";
function DotBin(params2) {
  Transform.call(this, null, params2);
}
DotBin.Definition = {
  "type": "DotBin",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "step",
    "type": "number"
  }, {
    "name": "smooth",
    "type": "boolean",
    "default": false
  }, {
    "name": "as",
    "type": "string",
    "default": Output
  }]
};
var autostep = (data3, field3) => span(extent(data3, field3)) / 30;
inherits(DotBin, Transform, {
  transform(_, pulse2) {
    if (this.value && !(_.modified() || pulse2.changed())) {
      return pulse2;
    }
    const source3 = pulse2.materialize(pulse2.SOURCE).source, groups3 = partition$1(pulse2.source, _.groupby, identity), smooth = _.smooth || false, field3 = _.field, step = _.step || autostep(source3, field3), sort4 = stableCompare((a4, b2) => field3(a4) - field3(b2)), as = _.as || Output, n = groups3.length;
    let min6 = Infinity, max6 = -Infinity, i = 0, j;
    for (; i < n; ++i) {
      const g = groups3[i].sort(sort4);
      j = -1;
      for (const v2 of dotbin(g, step, smooth, field3)) {
        if (v2 < min6)
          min6 = v2;
        if (v2 > max6)
          max6 = v2;
        g[++j][as] = v2;
      }
    }
    this.value = {
      start: min6,
      stop: max6,
      step
    };
    return pulse2.reflow(true).modifies(as);
  }
});
function Expression(params2) {
  Operator.call(this, null, update$4, params2);
  this.modified(true);
}
inherits(Expression, Operator);
function update$4(_) {
  const expr2 = _.expr;
  return this.value && !_.modified("expr") ? this.value : accessor((datum2) => expr2(datum2, _), accessorFields(expr2), accessorName(expr2));
}
function Extent(params2) {
  Transform.call(this, [void 0, void 0], params2);
}
Extent.Definition = {
  "type": "Extent",
  "metadata": {},
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }]
};
inherits(Extent, Transform, {
  transform(_, pulse2) {
    const extent4 = this.value, field3 = _.field, mod = pulse2.changed() || pulse2.modified(field3.fields) || _.modified("field");
    let min6 = extent4[0], max6 = extent4[1];
    if (mod || min6 == null) {
      min6 = Infinity;
      max6 = -Infinity;
    }
    pulse2.visit(mod ? pulse2.SOURCE : pulse2.ADD, (t4) => {
      const v2 = toNumber(field3(t4));
      if (v2 != null) {
        if (v2 < min6)
          min6 = v2;
        if (v2 > max6)
          max6 = v2;
      }
    });
    if (!Number.isFinite(min6) || !Number.isFinite(max6)) {
      let name4 = accessorName(field3);
      if (name4)
        name4 = ' for field "'.concat(name4, '"');
      pulse2.dataflow.warn("Infinite extent".concat(name4, ": [").concat(min6, ", ").concat(max6, "]"));
      min6 = max6 = void 0;
    }
    this.value = [min6, max6];
  }
});
function Subflow(pulse2, parent) {
  Operator.call(this, pulse2);
  this.parent = parent;
  this.count = 0;
}
inherits(Subflow, Operator, {
  connect(target2) {
    this.detachSubflow = target2.detachSubflow;
    this.targets().add(target2);
    return target2.source = this;
  },
  add(t4) {
    this.count += 1;
    this.value.add.push(t4);
  },
  rem(t4) {
    this.count -= 1;
    this.value.rem.push(t4);
  },
  mod(t4) {
    this.value.mod.push(t4);
  },
  init(pulse2) {
    this.value.init(pulse2, pulse2.NO_SOURCE);
  },
  evaluate() {
    return this.value;
  }
});
function Facet(params2) {
  Transform.call(this, {}, params2);
  this._keys = fastmap();
  const a4 = this._targets = [];
  a4.active = 0;
  a4.forEach = (f) => {
    for (let i = 0, n = a4.active; i < n; ++i) {
      f(a4[i], i, a4);
    }
  };
}
inherits(Facet, Transform, {
  activate(flow) {
    this._targets[this._targets.active++] = flow;
  },
  subflow(key2, flow, pulse2, parent) {
    const flows = this.value;
    let sf = has(flows, key2) && flows[key2], df, p;
    if (!sf) {
      p = parent || (p = this._group[key2]) && p.tuple;
      df = pulse2.dataflow;
      sf = new Subflow(pulse2.fork(pulse2.NO_SOURCE), this);
      df.add(sf).connect(flow(df, key2, p));
      flows[key2] = sf;
      this.activate(sf);
    } else if (sf.value.stamp < pulse2.stamp) {
      sf.init(pulse2);
      this.activate(sf);
    }
    return sf;
  },
  clean() {
    const flows = this.value;
    let detached = 0;
    for (const key2 in flows) {
      if (flows[key2].count === 0) {
        const detach = flows[key2].detachSubflow;
        if (detach)
          detach();
        delete flows[key2];
        ++detached;
      }
    }
    if (detached) {
      const active = this._targets.filter((sf) => sf && sf.count > 0);
      this.initTargets(active);
    }
  },
  initTargets(act) {
    const a4 = this._targets, n = a4.length, m3 = act ? act.length : 0;
    let i = 0;
    for (; i < m3; ++i) {
      a4[i] = act[i];
    }
    for (; i < n && a4[i] != null; ++i) {
      a4[i] = null;
    }
    a4.active = m3;
  },
  transform(_, pulse2) {
    const df = pulse2.dataflow, key2 = _.key, flow = _.subflow, cache2 = this._keys, rekey = _.modified("key"), subflow = (key3) => this.subflow(key3, flow, pulse2);
    this._group = _.group || {};
    this.initTargets();
    pulse2.visit(pulse2.REM, (t4) => {
      const id2 = tupleid(t4), k3 = cache2.get(id2);
      if (k3 !== void 0) {
        cache2.delete(id2);
        subflow(k3).rem(t4);
      }
    });
    pulse2.visit(pulse2.ADD, (t4) => {
      const k3 = key2(t4);
      cache2.set(tupleid(t4), k3);
      subflow(k3).add(t4);
    });
    if (rekey || pulse2.modified(key2.fields)) {
      pulse2.visit(pulse2.MOD, (t4) => {
        const id2 = tupleid(t4), k0 = cache2.get(id2), k1 = key2(t4);
        if (k0 === k1) {
          subflow(k1).mod(t4);
        } else {
          cache2.set(id2, k1);
          subflow(k0).rem(t4);
          subflow(k1).add(t4);
        }
      });
    } else if (pulse2.changed(pulse2.MOD)) {
      pulse2.visit(pulse2.MOD, (t4) => {
        subflow(cache2.get(tupleid(t4))).mod(t4);
      });
    }
    if (rekey) {
      pulse2.visit(pulse2.REFLOW, (t4) => {
        const id2 = tupleid(t4), k0 = cache2.get(id2), k1 = key2(t4);
        if (k0 !== k1) {
          cache2.set(id2, k1);
          subflow(k0).rem(t4);
          subflow(k1).add(t4);
        }
      });
    }
    if (pulse2.clean()) {
      df.runAfter(() => {
        this.clean();
        cache2.clean();
      });
    } else if (cache2.empty > df.cleanThreshold) {
      df.runAfter(cache2.clean);
    }
    return pulse2;
  }
});
function Field(params2) {
  Operator.call(this, null, update$3, params2);
}
inherits(Field, Operator);
function update$3(_) {
  return this.value && !_.modified() ? this.value : isArray(_.name) ? array(_.name).map((f) => field(f)) : field(_.name, _.as);
}
function Filter(params2) {
  Transform.call(this, fastmap(), params2);
}
Filter.Definition = {
  "type": "Filter",
  "metadata": {
    "changes": true
  },
  "params": [{
    "name": "expr",
    "type": "expr",
    "required": true
  }]
};
inherits(Filter, Transform, {
  transform(_, pulse2) {
    const df = pulse2.dataflow, cache2 = this.value, output3 = pulse2.fork(), add6 = output3.add, rem2 = output3.rem, mod = output3.mod, test2 = _.expr;
    let isMod = true;
    pulse2.visit(pulse2.REM, (t4) => {
      const id2 = tupleid(t4);
      if (!cache2.has(id2))
        rem2.push(t4);
      else
        cache2.delete(id2);
    });
    pulse2.visit(pulse2.ADD, (t4) => {
      if (test2(t4, _))
        add6.push(t4);
      else
        cache2.set(tupleid(t4), 1);
    });
    function revisit(t4) {
      const id2 = tupleid(t4), b2 = test2(t4, _), s2 = cache2.get(id2);
      if (b2 && s2) {
        cache2.delete(id2);
        add6.push(t4);
      } else if (!b2 && !s2) {
        cache2.set(id2, 1);
        rem2.push(t4);
      } else if (isMod && b2 && !s2) {
        mod.push(t4);
      }
    }
    pulse2.visit(pulse2.MOD, revisit);
    if (_.modified()) {
      isMod = false;
      pulse2.visit(pulse2.REFLOW, revisit);
    }
    if (cache2.empty > df.cleanThreshold)
      df.runAfter(cache2.clean);
    return output3;
  }
});
function Flatten(params2) {
  Transform.call(this, [], params2);
}
Flatten.Definition = {
  "type": "Flatten",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "index",
    "type": "string"
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }]
};
inherits(Flatten, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE), fields = _.fields, as = fieldNames(fields, _.as || []), index5 = _.index || null, m3 = as.length;
    out.rem = this.value;
    pulse2.visit(pulse2.SOURCE, (t4) => {
      const arrays = fields.map((f) => f(t4)), maxlen = arrays.reduce((l, a4) => Math.max(l, a4.length), 0);
      let i = 0, j, d, v2;
      for (; i < maxlen; ++i) {
        d = derive(t4);
        for (j = 0; j < m3; ++j) {
          d[as[j]] = (v2 = arrays[j][i]) == null ? null : v2;
        }
        if (index5) {
          d[index5] = i;
        }
        out.add.push(d);
      }
    });
    this.value = out.source = out.add;
    if (index5)
      out.modifies(index5);
    return out.modifies(as);
  }
});
function Fold(params2) {
  Transform.call(this, [], params2);
}
Fold.Definition = {
  "type": "Fold",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["key", "value"]
  }]
};
inherits(Fold, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE), fields = _.fields, fnames = fields.map(accessorName), as = _.as || ["key", "value"], k3 = as[0], v2 = as[1], n = fields.length;
    out.rem = this.value;
    pulse2.visit(pulse2.SOURCE, (t4) => {
      for (let i = 0, d; i < n; ++i) {
        d = derive(t4);
        d[k3] = fnames[i];
        d[v2] = fields[i](t4);
        out.add.push(d);
      }
    });
    this.value = out.source = out.add;
    return out.modifies(as);
  }
});
function Formula(params2) {
  Transform.call(this, null, params2);
}
Formula.Definition = {
  "type": "Formula",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "expr",
    "type": "expr",
    "required": true
  }, {
    "name": "as",
    "type": "string",
    "required": true
  }, {
    "name": "initonly",
    "type": "boolean"
  }]
};
inherits(Formula, Transform, {
  transform(_, pulse2) {
    const func = _.expr, as = _.as, mod = _.modified(), flag2 = _.initonly ? pulse2.ADD : mod ? pulse2.SOURCE : pulse2.modified(func.fields) || pulse2.modified(as) ? pulse2.ADD_MOD : pulse2.ADD;
    if (mod) {
      pulse2 = pulse2.materialize().reflow(true);
    }
    if (!_.initonly) {
      pulse2.modifies(as);
    }
    return pulse2.visit(flag2, (t4) => t4[as] = func(t4, _));
  }
});
function Generate(params2) {
  Transform.call(this, [], params2);
}
inherits(Generate, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.ALL), gen = _.generator;
    let data3 = this.value, num = _.size - data3.length, add6, rem2, t4;
    if (num > 0) {
      for (add6 = []; --num >= 0; ) {
        add6.push(t4 = ingest$1(gen(_)));
        data3.push(t4);
      }
      out.add = out.add.length ? out.materialize(out.ADD).add.concat(add6) : add6;
    } else {
      rem2 = data3.slice(0, -num);
      out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem2) : rem2;
      data3 = data3.slice(-num);
    }
    out.source = this.value = data3;
    return out;
  }
});
var Methods = {
  value: "value",
  median,
  mean,
  min,
  max
};
var Empty = [];
function Impute(params2) {
  Transform.call(this, [], params2);
}
Impute.Definition = {
  "type": "Impute",
  "metadata": {
    "changes": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "key",
    "type": "field",
    "required": true
  }, {
    "name": "keyvals",
    "array": true
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "method",
    "type": "enum",
    "default": "value",
    "values": ["value", "mean", "median", "max", "min"]
  }, {
    "name": "value",
    "default": 0
  }]
};
function getValue(_) {
  var m3 = _.method || Methods.value, v2;
  if (Methods[m3] == null) {
    error("Unrecognized imputation method: " + m3);
  } else if (m3 === Methods.value) {
    v2 = _.value !== void 0 ? _.value : 0;
    return () => v2;
  } else {
    return Methods[m3];
  }
}
function getField(_) {
  const f = _.field;
  return (t4) => t4 ? f(t4) : NaN;
}
inherits(Impute, Transform, {
  transform(_, pulse2) {
    var out = pulse2.fork(pulse2.ALL), impute = getValue(_), field3 = getField(_), fName = accessorName(_.field), kName = accessorName(_.key), gNames = (_.groupby || []).map(accessorName), groups3 = partition(pulse2.source, _.groupby, _.key, _.keyvals), curr = [], prev = this.value, m3 = groups3.domain.length, group4, value3, gVals, kVal, g, i, j, l, n, t4;
    for (g = 0, l = groups3.length; g < l; ++g) {
      group4 = groups3[g];
      gVals = group4.values;
      value3 = NaN;
      for (j = 0; j < m3; ++j) {
        if (group4[j] != null)
          continue;
        kVal = groups3.domain[j];
        t4 = {
          _impute: true
        };
        for (i = 0, n = gVals.length; i < n; ++i)
          t4[gNames[i]] = gVals[i];
        t4[kName] = kVal;
        t4[fName] = Number.isNaN(value3) ? value3 = impute(group4, field3) : value3;
        curr.push(ingest$1(t4));
      }
    }
    if (curr.length)
      out.add = out.materialize(out.ADD).add.concat(curr);
    if (prev.length)
      out.rem = out.materialize(out.REM).rem.concat(prev);
    this.value = curr;
    return out;
  }
});
function partition(data3, groupby, key2, keyvals) {
  var get7 = (f) => f(t4), groups3 = [], domain4 = keyvals ? keyvals.slice() : [], kMap = {}, gMap = {}, gVals, gKey, group4, i, j, k3, n, t4;
  domain4.forEach((k4, i2) => kMap[k4] = i2 + 1);
  for (i = 0, n = data3.length; i < n; ++i) {
    t4 = data3[i];
    k3 = key2(t4);
    j = kMap[k3] || (kMap[k3] = domain4.push(k3));
    gKey = (gVals = groupby ? groupby.map(get7) : Empty) + "";
    if (!(group4 = gMap[gKey])) {
      group4 = gMap[gKey] = [];
      groups3.push(group4);
      group4.values = gVals;
    }
    group4[j - 1] = t4;
  }
  groups3.domain = domain4;
  return groups3;
}
function JoinAggregate(params2) {
  Aggregate.call(this, params2);
}
JoinAggregate.Definition = {
  "type": "JoinAggregate",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "fields",
    "type": "field",
    "null": true,
    "array": true
  }, {
    "name": "ops",
    "type": "enum",
    "array": true,
    "values": ValidAggregateOps
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }, {
    "name": "key",
    "type": "field"
  }]
};
inherits(JoinAggregate, Aggregate, {
  transform(_, pulse2) {
    const aggr = this, mod = _.modified();
    let cells;
    if (aggr.value && (mod || pulse2.modified(aggr._inputs, true))) {
      cells = aggr.value = mod ? aggr.init(_) : {};
      pulse2.visit(pulse2.SOURCE, (t4) => aggr.add(t4));
    } else {
      cells = aggr.value = aggr.value || this.init(_);
      pulse2.visit(pulse2.REM, (t4) => aggr.rem(t4));
      pulse2.visit(pulse2.ADD, (t4) => aggr.add(t4));
    }
    aggr.changes();
    pulse2.visit(pulse2.SOURCE, (t4) => {
      extend(t4, cells[aggr.cellkey(t4)].tuple);
    });
    return pulse2.reflow(mod).modifies(this._outputs);
  },
  changes() {
    const adds = this._adds, mods = this._mods;
    let i, n;
    for (i = 0, n = this._alen; i < n; ++i) {
      this.celltuple(adds[i]);
      adds[i] = null;
    }
    for (i = 0, n = this._mlen; i < n; ++i) {
      this.celltuple(mods[i]);
      mods[i] = null;
    }
    this._alen = this._mlen = 0;
  }
});
function KDE(params2) {
  Transform.call(this, null, params2);
}
KDE.Definition = {
  "type": "KDE",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "cumulative",
    "type": "boolean",
    "default": false
  }, {
    "name": "counts",
    "type": "boolean",
    "default": false
  }, {
    "name": "bandwidth",
    "type": "number",
    "default": 0
  }, {
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "resolve",
    "type": "enum",
    "values": ["shared", "independent"],
    "default": "independent"
  }, {
    "name": "steps",
    "type": "number"
  }, {
    "name": "minsteps",
    "type": "number",
    "default": 25
  }, {
    "name": "maxsteps",
    "type": "number",
    "default": 200
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "default": ["value", "density"]
  }]
};
inherits(KDE, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    if (!this.value || pulse2.changed() || _.modified()) {
      const source3 = pulse2.materialize(pulse2.SOURCE).source, groups3 = partition$1(source3, _.groupby, _.field), names = (_.groupby || []).map(accessorName), bandwidth2 = _.bandwidth, method2 = _.cumulative ? "cdf" : "pdf", as = _.as || ["value", "density"], values5 = [];
      let domain4 = _.extent, minsteps = _.steps || _.minsteps || 25, maxsteps = _.steps || _.maxsteps || 200;
      if (method2 !== "pdf" && method2 !== "cdf") {
        error("Invalid density method: " + method2);
      }
      if (_.resolve === "shared") {
        if (!domain4)
          domain4 = extent(source3, _.field);
        minsteps = maxsteps = _.steps || maxsteps;
      }
      groups3.forEach((g) => {
        const density = kde(g, bandwidth2)[method2], scale7 = _.counts ? g.length : 1, local = domain4 || extent(g);
        sampleCurve(density, local, minsteps, maxsteps).forEach((v2) => {
          const t4 = {};
          for (let i = 0; i < names.length; ++i) {
            t4[names[i]] = g.dims[i];
          }
          t4[as[0]] = v2[0];
          t4[as[1]] = v2[1] * scale7;
          values5.push(ingest$1(t4));
        });
      });
      if (this.value)
        out.rem = this.value;
      this.value = out.add = out.source = values5;
    }
    return out;
  }
});
function Key(params2) {
  Operator.call(this, null, update$2, params2);
}
inherits(Key, Operator);
function update$2(_) {
  return this.value && !_.modified() ? this.value : key(_.fields, _.flat);
}
function Load(params2) {
  Transform.call(this, [], params2);
  this._pending = null;
}
inherits(Load, Transform, {
  transform(_, pulse2) {
    const df = pulse2.dataflow;
    if (this._pending) {
      return output2(this, pulse2, this._pending);
    }
    if (stop(_))
      return pulse2.StopPropagation;
    if (_.values) {
      return output2(this, pulse2, df.parse(_.values, _.format));
    } else if (_.async) {
      const p = df.request(_.url, _.format).then((res) => {
        this._pending = array(res.data);
        return (df2) => df2.touch(this);
      });
      return {
        async: p
      };
    } else {
      return df.request(_.url, _.format).then((res) => output2(this, pulse2, array(res.data)));
    }
  }
});
function stop(_) {
  return _.modified("async") && !(_.modified("values") || _.modified("url") || _.modified("format"));
}
function output2(op, pulse2, data3) {
  data3.forEach(ingest$1);
  const out = pulse2.fork(pulse2.NO_FIELDS & pulse2.NO_SOURCE);
  out.rem = op.value;
  op.value = out.source = out.add = data3;
  op._pending = null;
  if (out.rem.length)
    out.clean(true);
  return out;
}
function Lookup(params2) {
  Transform.call(this, {}, params2);
}
Lookup.Definition = {
  "type": "Lookup",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "index",
    "type": "index",
    "params": [{
      "name": "from",
      "type": "data",
      "required": true
    }, {
      "name": "key",
      "type": "field",
      "required": true
    }]
  }, {
    "name": "values",
    "type": "field",
    "array": true
  }, {
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }, {
    "name": "default",
    "default": null
  }]
};
inherits(Lookup, Transform, {
  transform(_, pulse2) {
    const keys5 = _.fields, index5 = _.index, values5 = _.values, defaultValue = _.default == null ? null : _.default, reset4 = _.modified(), n = keys5.length;
    let flag2 = reset4 ? pulse2.SOURCE : pulse2.ADD, out = pulse2, as = _.as, set7, m3, mods;
    if (values5) {
      m3 = values5.length;
      if (n > 1 && !as) {
        error('Multi-field lookup requires explicit "as" parameter.');
      }
      if (as && as.length !== n * m3) {
        error('The "as" parameter has too few output field names.');
      }
      as = as || values5.map(accessorName);
      set7 = function(t4) {
        for (var i = 0, k3 = 0, j, v2; i < n; ++i) {
          v2 = index5.get(keys5[i](t4));
          if (v2 == null)
            for (j = 0; j < m3; ++j, ++k3)
              t4[as[k3]] = defaultValue;
          else
            for (j = 0; j < m3; ++j, ++k3)
              t4[as[k3]] = values5[j](v2);
        }
      };
    } else {
      if (!as) {
        error("Missing output field names.");
      }
      set7 = function(t4) {
        for (var i = 0, v2; i < n; ++i) {
          v2 = index5.get(keys5[i](t4));
          t4[as[i]] = v2 == null ? defaultValue : v2;
        }
      };
    }
    if (reset4) {
      out = pulse2.reflow(true);
    } else {
      mods = keys5.some((k3) => pulse2.modified(k3.fields));
      flag2 |= mods ? pulse2.MOD : 0;
    }
    pulse2.visit(flag2, set7);
    return out.modifies(as);
  }
});
function MultiExtent(params2) {
  Operator.call(this, null, update$1, params2);
}
inherits(MultiExtent, Operator);
function update$1(_) {
  if (this.value && !_.modified()) {
    return this.value;
  }
  const ext = _.extents, n = ext.length;
  let min6 = Infinity, max6 = -Infinity, i, e3;
  for (i = 0; i < n; ++i) {
    e3 = ext[i];
    if (e3[0] < min6)
      min6 = e3[0];
    if (e3[1] > max6)
      max6 = e3[1];
  }
  return [min6, max6];
}
function MultiValues(params2) {
  Operator.call(this, null, update2, params2);
}
inherits(MultiValues, Operator);
function update2(_) {
  return this.value && !_.modified() ? this.value : _.values.reduce((data3, _2) => data3.concat(_2), []);
}
function Params(params2) {
  Transform.call(this, null, params2);
}
inherits(Params, Transform, {
  transform(_, pulse2) {
    this.modified(_.modified());
    this.value = _;
    return pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
  }
});
function Pivot(params2) {
  Aggregate.call(this, params2);
}
Pivot.Definition = {
  "type": "Pivot",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "value",
    "type": "field",
    "required": true
  }, {
    "name": "op",
    "type": "enum",
    "values": ValidAggregateOps,
    "default": "sum"
  }, {
    "name": "limit",
    "type": "number",
    "default": 0
  }, {
    "name": "key",
    "type": "field"
  }]
};
inherits(Pivot, Aggregate, {
  _transform: Aggregate.prototype.transform,
  transform(_, pulse2) {
    return this._transform(aggregateParams(_, pulse2), pulse2);
  }
});
function aggregateParams(_, pulse2) {
  const key2 = _.field, value3 = _.value, op = (_.op === "count" ? "__count__" : _.op) || "sum", fields = accessorFields(key2).concat(accessorFields(value3)), keys5 = pivotKeys(key2, _.limit || 0, pulse2);
  if (pulse2.changed())
    _.set("__pivot__", null, null, true);
  return {
    key: _.key,
    groupby: _.groupby,
    ops: keys5.map(() => op),
    fields: keys5.map((k3) => get(k3, key2, value3, fields)),
    as: keys5.map((k3) => k3 + ""),
    modified: _.modified.bind(_)
  };
}
function get(k3, key2, value3, fields) {
  return accessor((d) => key2(d) === k3 ? value3(d) : NaN, fields, k3 + "");
}
function pivotKeys(key2, limit, pulse2) {
  const map7 = {}, list = [];
  pulse2.visit(pulse2.SOURCE, (t4) => {
    const k3 = key2(t4);
    if (!map7[k3]) {
      map7[k3] = 1;
      list.push(k3);
    }
  });
  list.sort(ascending);
  return limit ? list.slice(0, limit) : list;
}
function PreFacet(params2) {
  Facet.call(this, params2);
}
inherits(PreFacet, Facet, {
  transform(_, pulse2) {
    const flow = _.subflow, field3 = _.field, subflow = (t4) => this.subflow(tupleid(t4), flow, pulse2, t4);
    if (_.modified("field") || field3 && pulse2.modified(accessorFields(field3))) {
      error("PreFacet does not support field modification.");
    }
    this.initTargets();
    if (field3) {
      pulse2.visit(pulse2.MOD, (t4) => {
        const sf = subflow(t4);
        field3(t4).forEach((_2) => sf.mod(_2));
      });
      pulse2.visit(pulse2.ADD, (t4) => {
        const sf = subflow(t4);
        field3(t4).forEach((_2) => sf.add(ingest$1(_2)));
      });
      pulse2.visit(pulse2.REM, (t4) => {
        const sf = subflow(t4);
        field3(t4).forEach((_2) => sf.rem(_2));
      });
    } else {
      pulse2.visit(pulse2.MOD, (t4) => subflow(t4).mod(t4));
      pulse2.visit(pulse2.ADD, (t4) => subflow(t4).add(t4));
      pulse2.visit(pulse2.REM, (t4) => subflow(t4).rem(t4));
    }
    if (pulse2.clean()) {
      pulse2.runAfter(() => this.clean());
    }
    return pulse2;
  }
});
function Project(params2) {
  Transform.call(this, null, params2);
}
Project.Definition = {
  "type": "Project",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }]
};
inherits(Project, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE), fields = _.fields, as = fieldNames(_.fields, _.as || []), derive2 = fields ? (s2, t4) => project(s2, t4, fields, as) : rederive;
    let lut;
    if (this.value) {
      lut = this.value;
    } else {
      pulse2 = pulse2.addAll();
      lut = this.value = {};
    }
    pulse2.visit(pulse2.REM, (t4) => {
      const id2 = tupleid(t4);
      out.rem.push(lut[id2]);
      lut[id2] = null;
    });
    pulse2.visit(pulse2.ADD, (t4) => {
      const dt = derive2(t4, ingest$1({}));
      lut[tupleid(t4)] = dt;
      out.add.push(dt);
    });
    pulse2.visit(pulse2.MOD, (t4) => {
      out.mod.push(derive2(t4, lut[tupleid(t4)]));
    });
    return out;
  }
});
function project(s2, t4, fields, as) {
  for (let i = 0, n = fields.length; i < n; ++i) {
    t4[as[i]] = fields[i](s2);
  }
  return t4;
}
function Proxy2(params2) {
  Transform.call(this, null, params2);
}
inherits(Proxy2, Transform, {
  transform(_, pulse2) {
    this.value = _.value;
    return _.modified("value") ? pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS) : pulse2.StopPropagation;
  }
});
function Quantile(params2) {
  Transform.call(this, null, params2);
}
Quantile.Definition = {
  "type": "Quantile",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "probs",
    "type": "number",
    "array": true
  }, {
    "name": "step",
    "type": "number",
    "default": 0.01
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "default": ["prob", "value"]
  }]
};
var EPSILON = 1e-14;
inherits(Quantile, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), as = _.as || ["prob", "value"];
    if (this.value && !_.modified() && !pulse2.changed()) {
      out.source = this.value;
      return out;
    }
    const source3 = pulse2.materialize(pulse2.SOURCE).source, groups3 = partition$1(source3, _.groupby, _.field), names = (_.groupby || []).map(accessorName), values5 = [], step = _.step || 0.01, p = _.probs || range(step / 2, 1 - EPSILON, step), n = p.length;
    groups3.forEach((g) => {
      const q = quantiles(g, p);
      for (let i = 0; i < n; ++i) {
        const t4 = {};
        for (let i2 = 0; i2 < names.length; ++i2) {
          t4[names[i2]] = g.dims[i2];
        }
        t4[as[0]] = p[i];
        t4[as[1]] = q[i];
        values5.push(ingest$1(t4));
      }
    });
    if (this.value)
      out.rem = this.value;
    this.value = out.add = out.source = values5;
    return out;
  }
});
function Relay(params2) {
  Transform.call(this, null, params2);
}
inherits(Relay, Transform, {
  transform(_, pulse2) {
    let out, lut;
    if (this.value) {
      lut = this.value;
    } else {
      out = pulse2 = pulse2.addAll();
      lut = this.value = {};
    }
    if (_.derive) {
      out = pulse2.fork(pulse2.NO_SOURCE);
      pulse2.visit(pulse2.REM, (t4) => {
        const id2 = tupleid(t4);
        out.rem.push(lut[id2]);
        lut[id2] = null;
      });
      pulse2.visit(pulse2.ADD, (t4) => {
        const dt = derive(t4);
        lut[tupleid(t4)] = dt;
        out.add.push(dt);
      });
      pulse2.visit(pulse2.MOD, (t4) => {
        const dt = lut[tupleid(t4)];
        for (const k3 in t4) {
          dt[k3] = t4[k3];
          out.modifies(k3);
        }
        out.mod.push(dt);
      });
    }
    return out;
  }
});
function Sample(params2) {
  Transform.call(this, [], params2);
  this.count = 0;
}
Sample.Definition = {
  "type": "Sample",
  "metadata": {},
  "params": [{
    "name": "size",
    "type": "number",
    "default": 1e3
  }]
};
inherits(Sample, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE), mod = _.modified("size"), num = _.size, map7 = this.value.reduce((m3, t4) => (m3[tupleid(t4)] = 1, m3), {});
    let res = this.value, cnt = this.count, cap = 0;
    function update3(t4) {
      let p, idx;
      if (res.length < num) {
        res.push(t4);
      } else {
        idx = ~~((cnt + 1) * random());
        if (idx < res.length && idx >= cap) {
          p = res[idx];
          if (map7[tupleid(p)])
            out.rem.push(p);
          res[idx] = t4;
        }
      }
      ++cnt;
    }
    if (pulse2.rem.length) {
      pulse2.visit(pulse2.REM, (t4) => {
        const id2 = tupleid(t4);
        if (map7[id2]) {
          map7[id2] = -1;
          out.rem.push(t4);
        }
        --cnt;
      });
      res = res.filter((t4) => map7[tupleid(t4)] !== -1);
    }
    if ((pulse2.rem.length || mod) && res.length < num && pulse2.source) {
      cap = cnt = res.length;
      pulse2.visit(pulse2.SOURCE, (t4) => {
        if (!map7[tupleid(t4)])
          update3(t4);
      });
      cap = -1;
    }
    if (mod && res.length > num) {
      const n = res.length - num;
      for (let i = 0; i < n; ++i) {
        map7[tupleid(res[i])] = -1;
        out.rem.push(res[i]);
      }
      res = res.slice(n);
    }
    if (pulse2.mod.length) {
      pulse2.visit(pulse2.MOD, (t4) => {
        if (map7[tupleid(t4)])
          out.mod.push(t4);
      });
    }
    if (pulse2.add.length) {
      pulse2.visit(pulse2.ADD, update3);
    }
    if (pulse2.add.length || cap < 0) {
      out.add = res.filter((t4) => !map7[tupleid(t4)]);
    }
    this.count = cnt;
    this.value = out.source = res;
    return out;
  }
});
function Sequence(params2) {
  Transform.call(this, null, params2);
}
Sequence.Definition = {
  "type": "Sequence",
  "metadata": {
    "generates": true,
    "changes": true
  },
  "params": [{
    "name": "start",
    "type": "number",
    "required": true
  }, {
    "name": "stop",
    "type": "number",
    "required": true
  }, {
    "name": "step",
    "type": "number",
    "default": 1
  }, {
    "name": "as",
    "type": "string",
    "default": "data"
  }]
};
inherits(Sequence, Transform, {
  transform(_, pulse2) {
    if (this.value && !_.modified())
      return;
    const out = pulse2.materialize().fork(pulse2.MOD), as = _.as || "data";
    out.rem = this.value ? pulse2.rem.concat(this.value) : pulse2.rem;
    this.value = range(_.start, _.stop, _.step || 1).map((v2) => {
      const t4 = {};
      t4[as] = v2;
      return ingest$1(t4);
    });
    out.add = pulse2.add.concat(this.value);
    return out;
  }
});
function Sieve(params2) {
  Transform.call(this, null, params2);
  this.modified(true);
}
inherits(Sieve, Transform, {
  transform(_, pulse2) {
    this.value = pulse2.source;
    return pulse2.changed() ? pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS) : pulse2.StopPropagation;
  }
});
function TimeUnit(params2) {
  Transform.call(this, null, params2);
}
var OUTPUT = ["unit0", "unit1"];
TimeUnit.Definition = {
  "type": "TimeUnit",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field",
    "required": true
  }, {
    "name": "interval",
    "type": "boolean",
    "default": true
  }, {
    "name": "units",
    "type": "enum",
    "values": TIME_UNITS,
    "array": true
  }, {
    "name": "step",
    "type": "number",
    "default": 1
  }, {
    "name": "maxbins",
    "type": "number",
    "default": 40
  }, {
    "name": "extent",
    "type": "date",
    "array": true
  }, {
    "name": "timezone",
    "type": "enum",
    "default": "local",
    "values": ["local", "utc"]
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": OUTPUT
  }]
};
inherits(TimeUnit, Transform, {
  transform(_, pulse2) {
    const field3 = _.field, band3 = _.interval !== false, utc = _.timezone === "utc", floor3 = this._floor(_, pulse2), offset4 = (utc ? utcInterval : timeInterval)(floor3.unit).offset, as = _.as || OUTPUT, u0 = as[0], u1 = as[1], step = floor3.step;
    let min6 = floor3.start || Infinity, max6 = floor3.stop || -Infinity, flag2 = pulse2.ADD;
    if (_.modified() || pulse2.changed(pulse2.REM) || pulse2.modified(accessorFields(field3))) {
      pulse2 = pulse2.reflow(true);
      flag2 = pulse2.SOURCE;
      min6 = Infinity;
      max6 = -Infinity;
    }
    pulse2.visit(flag2, (t4) => {
      const v2 = field3(t4);
      let a4, b2;
      if (v2 == null) {
        t4[u0] = null;
        if (band3)
          t4[u1] = null;
      } else {
        t4[u0] = a4 = b2 = floor3(v2);
        if (band3)
          t4[u1] = b2 = offset4(a4, step);
        if (a4 < min6)
          min6 = a4;
        if (b2 > max6)
          max6 = b2;
      }
    });
    floor3.start = min6;
    floor3.stop = max6;
    return pulse2.modifies(band3 ? as : u0);
  },
  _floor(_, pulse2) {
    const utc = _.timezone === "utc";
    const {
      units,
      step
    } = _.units ? {
      units: _.units,
      step: _.step || 1
    } : bin2({
      extent: _.extent || extent(pulse2.materialize(pulse2.SOURCE).source, _.field),
      maxbins: _.maxbins
    });
    const tunits = timeUnits(units), prev = this.value || {}, floor3 = (utc ? utcFloor : timeFloor)(tunits, step);
    floor3.unit = peek(tunits);
    floor3.units = tunits;
    floor3.step = step;
    floor3.start = prev.start;
    floor3.stop = prev.stop;
    return this.value = floor3;
  }
});
function TupleIndex(params2) {
  Transform.call(this, fastmap(), params2);
}
inherits(TupleIndex, Transform, {
  transform(_, pulse2) {
    const df = pulse2.dataflow, field3 = _.field, index5 = this.value, set7 = (t4) => index5.set(field3(t4), t4);
    let mod = true;
    if (_.modified("field") || pulse2.modified(field3.fields)) {
      index5.clear();
      pulse2.visit(pulse2.SOURCE, set7);
    } else if (pulse2.changed()) {
      pulse2.visit(pulse2.REM, (t4) => index5.delete(field3(t4)));
      pulse2.visit(pulse2.ADD, set7);
    } else {
      mod = false;
    }
    this.modified(mod);
    if (index5.empty > df.cleanThreshold)
      df.runAfter(index5.clean);
    return pulse2.fork();
  }
});
function Values(params2) {
  Transform.call(this, null, params2);
}
inherits(Values, Transform, {
  transform(_, pulse2) {
    const run2 = !this.value || _.modified("field") || _.modified("sort") || pulse2.changed() || _.sort && pulse2.modified(_.sort.fields);
    if (run2) {
      this.value = (_.sort ? pulse2.source.slice().sort(stableCompare(_.sort)) : pulse2.source).map(_.field);
    }
  }
});
function WindowOp(op, field3, param2, as) {
  const fn = WindowOps[op](field3, param2);
  return {
    init: fn.init || zero,
    update: function(w4, t4) {
      t4[as] = fn.next(w4);
    }
  };
}
var WindowOps = {
  row_number: function() {
    return {
      next: (w4) => w4.index + 1
    };
  },
  rank: function() {
    let rank4;
    return {
      init: () => rank4 = 1,
      next: (w4) => {
        const i = w4.index, data3 = w4.data;
        return i && w4.compare(data3[i - 1], data3[i]) ? rank4 = i + 1 : rank4;
      }
    };
  },
  dense_rank: function() {
    let drank;
    return {
      init: () => drank = 1,
      next: (w4) => {
        const i = w4.index, d = w4.data;
        return i && w4.compare(d[i - 1], d[i]) ? ++drank : drank;
      }
    };
  },
  percent_rank: function() {
    const rank4 = WindowOps.rank(), next = rank4.next;
    return {
      init: rank4.init,
      next: (w4) => (next(w4) - 1) / (w4.data.length - 1)
    };
  },
  cume_dist: function() {
    let cume;
    return {
      init: () => cume = 0,
      next: (w4) => {
        const d = w4.data, c3 = w4.compare;
        let i = w4.index;
        if (cume < i) {
          while (i + 1 < d.length && !c3(d[i], d[i + 1]))
            ++i;
          cume = i;
        }
        return (1 + cume) / d.length;
      }
    };
  },
  ntile: function(field3, num) {
    num = +num;
    if (!(num > 0))
      error("ntile num must be greater than zero.");
    const cume = WindowOps.cume_dist(), next = cume.next;
    return {
      init: cume.init,
      next: (w4) => Math.ceil(num * next(w4))
    };
  },
  lag: function(field3, offset4) {
    offset4 = +offset4 || 1;
    return {
      next: (w4) => {
        const i = w4.index - offset4;
        return i >= 0 ? field3(w4.data[i]) : null;
      }
    };
  },
  lead: function(field3, offset4) {
    offset4 = +offset4 || 1;
    return {
      next: (w4) => {
        const i = w4.index + offset4, d = w4.data;
        return i < d.length ? field3(d[i]) : null;
      }
    };
  },
  first_value: function(field3) {
    return {
      next: (w4) => field3(w4.data[w4.i0])
    };
  },
  last_value: function(field3) {
    return {
      next: (w4) => field3(w4.data[w4.i1 - 1])
    };
  },
  nth_value: function(field3, nth) {
    nth = +nth;
    if (!(nth > 0))
      error("nth_value nth must be greater than zero.");
    return {
      next: (w4) => {
        const i = w4.i0 + (nth - 1);
        return i < w4.i1 ? field3(w4.data[i]) : null;
      }
    };
  },
  prev_value: function(field3) {
    let prev;
    return {
      init: () => prev = null,
      next: (w4) => {
        const v2 = field3(w4.data[w4.index]);
        return v2 != null ? prev = v2 : prev;
      }
    };
  },
  next_value: function(field3) {
    let v2, i;
    return {
      init: () => (v2 = null, i = -1),
      next: (w4) => {
        const d = w4.data;
        return w4.index <= i ? v2 : (i = find(field3, d, w4.index)) < 0 ? (i = d.length, v2 = null) : v2 = field3(d[i]);
      }
    };
  }
};
function find(field3, data3, index5) {
  for (let n = data3.length; index5 < n; ++index5) {
    const v2 = field3(data3[index5]);
    if (v2 != null)
      return index5;
  }
  return -1;
}
var ValidWindowOps = Object.keys(WindowOps);
function WindowState(_) {
  const ops2 = array(_.ops), fields = array(_.fields), params2 = array(_.params), as = array(_.as), outputs = this.outputs = [], windows = this.windows = [], inputs = {}, map7 = {}, counts = [], measures = [];
  let countOnly = true;
  function visitInputs(f) {
    array(accessorFields(f)).forEach((_2) => inputs[_2] = 1);
  }
  visitInputs(_.sort);
  ops2.forEach((op, i) => {
    const field3 = fields[i], mname = accessorName(field3), name4 = measureName(op, mname, as[i]);
    visitInputs(field3);
    outputs.push(name4);
    if (has(WindowOps, op)) {
      windows.push(WindowOp(op, fields[i], params2[i], name4));
    } else {
      if (field3 == null && op !== "count") {
        error("Null aggregate field specified.");
      }
      if (op === "count") {
        counts.push(name4);
        return;
      }
      countOnly = false;
      let m3 = map7[mname];
      if (!m3) {
        m3 = map7[mname] = [];
        m3.field = field3;
        measures.push(m3);
      }
      m3.push(createMeasure(op, name4));
    }
  });
  if (counts.length || measures.length) {
    this.cell = cell(measures, counts, countOnly);
  }
  this.inputs = Object.keys(inputs);
}
var prototype = WindowState.prototype;
prototype.init = function() {
  this.windows.forEach((_) => _.init());
  if (this.cell)
    this.cell.init();
};
prototype.update = function(w4, t4) {
  const cell2 = this.cell, wind = this.windows, data3 = w4.data, m3 = wind && wind.length;
  let j;
  if (cell2) {
    for (j = w4.p0; j < w4.i0; ++j)
      cell2.rem(data3[j]);
    for (j = w4.p1; j < w4.i1; ++j)
      cell2.add(data3[j]);
    cell2.set(t4);
  }
  for (j = 0; j < m3; ++j)
    wind[j].update(w4, t4);
};
function cell(measures, counts, countOnly) {
  measures = measures.map((m3) => compileMeasures(m3, m3.field));
  const cell2 = {
    num: 0,
    agg: null,
    store: false,
    count: counts
  };
  if (!countOnly) {
    var n = measures.length, a4 = cell2.agg = Array(n), i = 0;
    for (; i < n; ++i)
      a4[i] = new measures[i](cell2);
  }
  if (cell2.store) {
    var store = cell2.data = new TupleStore();
  }
  cell2.add = function(t4) {
    cell2.num += 1;
    if (countOnly)
      return;
    if (store)
      store.add(t4);
    for (let i2 = 0; i2 < n; ++i2) {
      a4[i2].add(a4[i2].get(t4), t4);
    }
  };
  cell2.rem = function(t4) {
    cell2.num -= 1;
    if (countOnly)
      return;
    if (store)
      store.rem(t4);
    for (let i2 = 0; i2 < n; ++i2) {
      a4[i2].rem(a4[i2].get(t4), t4);
    }
  };
  cell2.set = function(t4) {
    let i2, n2;
    if (store)
      store.values();
    for (i2 = 0, n2 = counts.length; i2 < n2; ++i2)
      t4[counts[i2]] = cell2.num;
    if (!countOnly)
      for (i2 = 0, n2 = a4.length; i2 < n2; ++i2)
        a4[i2].set(t4);
  };
  cell2.init = function() {
    cell2.num = 0;
    if (store)
      store.reset();
    for (let i2 = 0; i2 < n; ++i2)
      a4[i2].init();
  };
  return cell2;
}
function Window(params2) {
  Transform.call(this, {}, params2);
  this._mlen = 0;
  this._mods = [];
}
Window.Definition = {
  "type": "Window",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "sort",
    "type": "compare"
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "ops",
    "type": "enum",
    "array": true,
    "values": ValidWindowOps.concat(ValidAggregateOps)
  }, {
    "name": "params",
    "type": "number",
    "null": true,
    "array": true
  }, {
    "name": "fields",
    "type": "field",
    "null": true,
    "array": true
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "array": true
  }, {
    "name": "frame",
    "type": "number",
    "null": true,
    "array": true,
    "length": 2,
    "default": [null, 0]
  }, {
    "name": "ignorePeers",
    "type": "boolean",
    "default": false
  }]
};
inherits(Window, Transform, {
  transform(_, pulse2) {
    this.stamp = pulse2.stamp;
    const mod = _.modified(), cmp2 = stableCompare(_.sort), key2 = groupkey(_.groupby), group4 = (t4) => this.group(key2(t4));
    let state = this.state;
    if (!state || mod) {
      state = this.state = new WindowState(_);
    }
    if (mod || pulse2.modified(state.inputs)) {
      this.value = {};
      pulse2.visit(pulse2.SOURCE, (t4) => group4(t4).add(t4));
    } else {
      pulse2.visit(pulse2.REM, (t4) => group4(t4).remove(t4));
      pulse2.visit(pulse2.ADD, (t4) => group4(t4).add(t4));
    }
    for (let i = 0, n = this._mlen; i < n; ++i) {
      processPartition(this._mods[i], state, cmp2, _);
    }
    this._mlen = 0;
    this._mods = [];
    return pulse2.reflow(mod).modifies(state.outputs);
  },
  group(key2) {
    let group4 = this.value[key2];
    if (!group4) {
      group4 = this.value[key2] = SortedList(tupleid);
      group4.stamp = -1;
    }
    if (group4.stamp < this.stamp) {
      group4.stamp = this.stamp;
      this._mods[this._mlen++] = group4;
    }
    return group4;
  }
});
function processPartition(list, state, cmp2, _) {
  const sort4 = _.sort, range8 = sort4 && !_.ignorePeers, frame2 = _.frame || [null, 0], data3 = list.data(cmp2), n = data3.length, b2 = range8 ? bisector(sort4) : null, w4 = {
    i0: 0,
    i1: 0,
    p0: 0,
    p1: 0,
    index: 0,
    data: data3,
    compare: sort4 || constant(-1)
  };
  state.init();
  for (let i = 0; i < n; ++i) {
    setWindow(w4, frame2, i, n);
    if (range8)
      adjustRange(w4, b2);
    state.update(w4, data3[i]);
  }
}
function setWindow(w4, f, i, n) {
  w4.p0 = w4.i0;
  w4.p1 = w4.i1;
  w4.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
  w4.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
  w4.index = i;
}
function adjustRange(w4, bisect2) {
  const r0 = w4.i0, r1 = w4.i1 - 1, c3 = w4.compare, d = w4.data, n = d.length - 1;
  if (r0 > 0 && !c3(d[r0], d[r0 - 1]))
    w4.i0 = bisect2.left(d, d[r0]);
  if (r1 < n && !c3(d[r1], d[r1 + 1]))
    w4.i1 = bisect2.right(d, d[r1]);
}

// node_modules/vega-view-transforms/build/vega-view-transforms.module.js
var vega_view_transforms_module_exports = {};
__export(vega_view_transforms_module_exports, {
  bound: () => Bound,
  identifier: () => Identifier,
  mark: () => Mark,
  overlap: () => Overlap,
  render: () => Render,
  viewlayout: () => ViewLayout
});

// node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon2 = 1e-6;
var tauEpsilon = tau - epsilon2;
function Path() {
  this._x0 = this._y0 = this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x5, y5) {
    this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x5, y5) {
    this._ += "L" + (this._x1 = +x5) + "," + (this._y1 = +y5);
  },
  quadraticCurveTo: function(x13, y13, x5, y5) {
    this._ += "Q" + +x13 + "," + +y13 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
  },
  bezierCurveTo: function(x13, y13, x22, y22, x5, y5) {
    this._ += "C" + +x13 + "," + +y13 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
  },
  arcTo: function(x13, y13, x22, y22, r) {
    x13 = +x13, y13 = +y13, x22 = +x22, y22 = +y22, r = +r;
    var x07 = this._x1, y07 = this._y1, x21 = x22 - x13, y21 = y22 - y13, x01 = x07 - x13, y01 = y07 - y13, l01_2 = x01 * x01 + y01 * y01;
    if (r < 0)
      throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x13) + "," + (this._y1 = y13);
    } else if (!(l01_2 > epsilon2))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon2) || !r) {
      this._ += "L" + (this._x1 = x13) + "," + (this._y1 = y13);
    } else {
      var x20 = x22 - x07, y20 = y22 - y07, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon2) {
        this._ += "L" + (x13 + t01 * x01) + "," + (y13 + t01 * y01);
      }
      this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x13 + t21 * x21) + "," + (this._y1 = y13 + t21 * y21);
    }
  },
  arc: function(x5, y5, r, a0, a1, ccw) {
    x5 = +x5, y5 = +y5, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x07 = x5 + dx, y07 = y5 + dy, cw2 = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
    if (r < 0)
      throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + x07 + "," + y07;
    } else if (Math.abs(this._x1 - x07) > epsilon2 || Math.abs(this._y1 - y07) > epsilon2) {
      this._ += "L" + x07 + "," + y07;
    }
    if (!r)
      return;
    if (da2 < 0)
      da2 = da2 % tau + tau;
    if (da2 > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw2 + "," + (x5 - dx) + "," + (y5 - dy) + "A" + r + "," + r + ",0,1," + cw2 + "," + (this._x1 = x07) + "," + (this._y1 = y07);
    } else if (da2 > epsilon2) {
      this._ += "A" + r + "," + r + ",0," + +(da2 >= pi) + "," + cw2 + "," + (this._x1 = x5 + r * Math.cos(a1)) + "," + (this._y1 = y5 + r * Math.sin(a1));
    }
  },
  rect: function(x5, y5, w4, h2) {
    this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5) + "h" + +w4 + "v" + +h2 + "h" + -w4 + "Z";
  },
  toString: function() {
    return this._;
  }
};
var path_default = path;

// node_modules/d3-shape/src/constant.js
function constant_default(x5) {
  return function constant4() {
    return x5;
  };
}

// node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max2 = Math.max;
var min2 = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;
var epsilon3 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;
function acos(x5) {
  return x5 > 1 ? 0 : x5 < -1 ? pi2 : Math.acos(x5);
}
function asin(x5) {
  return x5 >= 1 ? halfPi : x5 <= -1 ? -halfPi : Math.asin(x5);
}

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle;
}
function intersect(x07, y07, x13, y13, x22, y22, x32, y32) {
  var x10 = x13 - x07, y10 = y13 - y07, x322 = x32 - x22, y322 = y32 - y22, t4 = y322 * x10 - x322 * y10;
  if (t4 * t4 < epsilon3)
    return;
  t4 = (x322 * (y07 - y22) - y322 * (x07 - x22)) / t4;
  return [x07 + t4 * x10, y07 + t4 * y10];
}
function cornerTangents(x07, y07, x13, y13, r1, rc, cw2) {
  var x01 = x07 - x13, y01 = y07 - y13, lo = (cw2 ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x07 + ox, y11 = y07 + oy, x10 = x13 + ox, y10 = y13 + oy, x004 = (x11 + x10) / 2, y004 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D3 = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max2(0, r * r * d2 - D3 * D3)), cx0 = (D3 * dy - dx * d) / d2, cy0 = (-D3 * dx - dy * d) / d2, cx1 = (D3 * dy + dx * d) / d2, cy1 = (-D3 * dx + dy * d) / d2, dx0 = cx0 - x004, dy0 = cy0 - y004, dx1 = cx1 - x004, dy1 = cy1 - y004;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context3 = null;
  function arc4() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da2 = abs(a1 - a0), cw2 = a1 > a0;
    if (!context3)
      context3 = buffer = path_default();
    if (r1 < r0)
      r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon3))
      context3.moveTo(0, 0);
    else if (da2 > tau2 - epsilon3) {
      context3.moveTo(r1 * cos(a0), r1 * sin(a0));
      context3.arc(0, 0, r1, a0, a1, !cw2);
      if (r0 > epsilon3) {
        context3.moveTo(r0 * cos(a1), r0 * sin(a1));
        context3.arc(0, 0, r0, a1, a0, cw2);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da2, da1 = da2, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t04, t13;
      if (rp > epsilon3) {
        var p02 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p02 * 2) > epsilon3)
          p02 *= cw2 ? 1 : -1, a00 += p02, a10 -= p02;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon3)
          p1 *= cw2 ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon3) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x004 = r0 * cos(a00), y004 = r0 * sin(a00), oc;
        if (da2 < pi2 && (oc = intersect(x01, y01, x004, y004, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min2(rc, (r0 - lc) / (kc - 1));
          rc1 = min2(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon3))
        context3.moveTo(x01, y01);
      else if (rc1 > epsilon3) {
        t04 = cornerTangents(x004, y004, x01, y01, r1, rc1, cw2);
        t13 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw2);
        context3.moveTo(t04.cx + t04.x01, t04.cy + t04.y01);
        if (rc1 < rc)
          context3.arc(t04.cx, t04.cy, rc1, atan2(t04.y01, t04.x01), atan2(t13.y01, t13.x01), !cw2);
        else {
          context3.arc(t04.cx, t04.cy, rc1, atan2(t04.y01, t04.x01), atan2(t04.y11, t04.x11), !cw2);
          context3.arc(0, 0, r1, atan2(t04.cy + t04.y11, t04.cx + t04.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), !cw2);
          context3.arc(t13.cx, t13.cy, rc1, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw2);
        }
      } else
        context3.moveTo(x01, y01), context3.arc(0, 0, r1, a01, a11, !cw2);
      if (!(r0 > epsilon3) || !(da0 > epsilon3))
        context3.lineTo(x10, y10);
      else if (rc0 > epsilon3) {
        t04 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw2);
        t13 = cornerTangents(x01, y01, x004, y004, r0, -rc0, cw2);
        context3.lineTo(t04.cx + t04.x01, t04.cy + t04.y01);
        if (rc0 < rc)
          context3.arc(t04.cx, t04.cy, rc0, atan2(t04.y01, t04.x01), atan2(t13.y01, t13.x01), !cw2);
        else {
          context3.arc(t04.cx, t04.cy, rc0, atan2(t04.y01, t04.x01), atan2(t04.y11, t04.x11), !cw2);
          context3.arc(0, 0, r0, atan2(t04.cy + t04.y11, t04.cx + t04.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), cw2);
          context3.arc(t13.cx, t13.cy, rc0, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw2);
        }
      } else
        context3.arc(0, 0, r0, a10, a00, cw2);
    }
    context3.closePath();
    if (buffer)
      return context3 = null, buffer + "" || null;
  }
  arc4.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a4 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a4) * r, sin(a4) * r];
  };
  arc4.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default(+_), arc4) : innerRadius;
  };
  arc4.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default(+_), arc4) : outerRadius;
  };
  arc4.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default(+_), arc4) : cornerRadius;
  };
  arc4.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), arc4) : padRadius;
  };
  arc4.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), arc4) : startAngle;
  };
  arc4.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), arc4) : endAngle;
  };
  arc4.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), arc4) : padAngle;
  };
  arc4.context = function(_) {
    return arguments.length ? (context3 = _ == null ? null : _, arc4) : context3;
  };
  return arc4;
}

// node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;
function array_default(x5) {
  return typeof x5 === "object" && "length" in x5 ? x5 : Array.from(x5);
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context3) {
  this._context = context3;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x5, y5);
        break;
    }
  }
};
function linear_default(context3) {
  return new Linear(context3);
}

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

// node_modules/d3-shape/src/line.js
function line_default(x5, y5) {
  var defined2 = constant_default(true), context3 = null, curve2 = linear_default, output3 = null;
  x5 = typeof x5 === "function" ? x5 : x5 === void 0 ? x : constant_default(x5);
  y5 = typeof y5 === "function" ? y5 : y5 === void 0 ? y : constant_default(y5);
  function line4(data3) {
    var i, n = (data3 = array_default(data3)).length, d, defined0 = false, buffer;
    if (context3 == null)
      output3 = curve2(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined2(d = data3[i], i, data3)) === defined0) {
        if (defined0 = !defined0)
          output3.lineStart();
        else
          output3.lineEnd();
      }
      if (defined0)
        output3.point(+x5(d, i, data3), +y5(d, i, data3));
    }
    if (buffer)
      return output3 = null, buffer + "" || null;
  }
  line4.x = function(_) {
    return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default(+_), line4) : x5;
  };
  line4.y = function(_) {
    return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default(+_), line4) : y5;
  };
  line4.defined = function(_) {
    return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant_default(!!_), line4) : defined2;
  };
  line4.curve = function(_) {
    return arguments.length ? (curve2 = _, context3 != null && (output3 = curve2(context3)), line4) : curve2;
  };
  line4.context = function(_) {
    return arguments.length ? (_ == null ? context3 = output3 = null : output3 = curve2(context3 = _), line4) : context3;
  };
  return line4;
}

// node_modules/d3-shape/src/area.js
function area_default(x07, y07, y13) {
  var x13 = null, defined2 = constant_default(true), context3 = null, curve2 = linear_default, output3 = null;
  x07 = typeof x07 === "function" ? x07 : x07 === void 0 ? x : constant_default(+x07);
  y07 = typeof y07 === "function" ? y07 : y07 === void 0 ? constant_default(0) : constant_default(+y07);
  y13 = typeof y13 === "function" ? y13 : y13 === void 0 ? y : constant_default(+y13);
  function area4(data3) {
    var i, j, k3, n = (data3 = array_default(data3)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context3 == null)
      output3 = curve2(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined2(d = data3[i], i, data3)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output3.areaStart();
          output3.lineStart();
        } else {
          output3.lineEnd();
          output3.lineStart();
          for (k3 = i - 1; k3 >= j; --k3) {
            output3.point(x0z[k3], y0z[k3]);
          }
          output3.lineEnd();
          output3.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x07(d, i, data3), y0z[i] = +y07(d, i, data3);
        output3.point(x13 ? +x13(d, i, data3) : x0z[i], y13 ? +y13(d, i, data3) : y0z[i]);
      }
    }
    if (buffer)
      return output3 = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined2).curve(curve2).context(context3);
  }
  area4.x = function(_) {
    return arguments.length ? (x07 = typeof _ === "function" ? _ : constant_default(+_), x13 = null, area4) : x07;
  };
  area4.x0 = function(_) {
    return arguments.length ? (x07 = typeof _ === "function" ? _ : constant_default(+_), area4) : x07;
  };
  area4.x1 = function(_) {
    return arguments.length ? (x13 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area4) : x13;
  };
  area4.y = function(_) {
    return arguments.length ? (y07 = typeof _ === "function" ? _ : constant_default(+_), y13 = null, area4) : y07;
  };
  area4.y0 = function(_) {
    return arguments.length ? (y07 = typeof _ === "function" ? _ : constant_default(+_), area4) : y07;
  };
  area4.y1 = function(_) {
    return arguments.length ? (y13 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area4) : y13;
  };
  area4.lineX0 = area4.lineY0 = function() {
    return arealine().x(x07).y(y07);
  };
  area4.lineY1 = function() {
    return arealine().x(x07).y(y13);
  };
  area4.lineX1 = function() {
    return arealine().x(x13).y(y07);
  };
  area4.defined = function(_) {
    return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant_default(!!_), area4) : defined2;
  };
  area4.curve = function(_) {
    return arguments.length ? (curve2 = _, context3 != null && (output3 = curve2(context3)), area4) : curve2;
  };
  area4.context = function(_) {
    return arguments.length ? (_ == null ? context3 = output3 = null : output3 = curve2(context3 = _), area4) : context3;
  };
  return area4;
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve2) {
  this._curve = curve2;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a4, r) {
    this._curve.point(r * Math.sin(a4), r * -Math.cos(a4));
  }
};
function curveRadial(curve2) {
  function radial2(context3) {
    return new Radial(curve2(context3));
  }
  radial2._curve = curve2;
  return radial2;
}

// node_modules/d3-shape/src/symbol/asterisk.js
var sqrt3 = sqrt(3);

// node_modules/d3-shape/src/symbol/circle.js
var circle_default = {
  draw(context3, size) {
    const r = sqrt(size / pi2);
    context3.moveTo(r, 0);
    context3.arc(0, 0, r, 0, tau2);
  }
};

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/d3-shape/src/symbol/star.js
var kr = sin(pi2 / 10) / sin(7 * pi2 / 10);
var kx = sin(tau2 / 10) * kr;
var ky = -cos(tau2 / 10) * kr;

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt32 = sqrt(3);

// node_modules/d3-shape/src/symbol/triangle2.js
var sqrt33 = sqrt(3);

// node_modules/d3-shape/src/symbol/wye.js
var s = sqrt(3) / 2;
var k = 1 / sqrt(12);
var a = (k / 2 + 1) * 3;

// node_modules/d3-shape/src/symbol.js
function Symbol2(type3, size) {
  let context3 = null;
  type3 = typeof type3 === "function" ? type3 : constant_default(type3 || circle_default);
  size = typeof size === "function" ? size : constant_default(size === void 0 ? 64 : +size);
  function symbol2() {
    let buffer;
    if (!context3)
      context3 = buffer = path_default();
    type3.apply(this, arguments).draw(context3, +size.apply(this, arguments));
    if (buffer)
      return context3 = null, buffer + "" || null;
  }
  symbol2.type = function(_) {
    return arguments.length ? (type3 = typeof _ === "function" ? _ : constant_default(_), symbol2) : type3;
  };
  symbol2.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant_default(+_), symbol2) : size;
  };
  symbol2.context = function(_) {
    return arguments.length ? (context3 = _ == null ? null : _, symbol2) : context3;
  };
  return symbol2;
}

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point(that, x5, y5) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x5) / 6,
    (that._y0 + 4 * that._y1 + y5) / 6
  );
}
function Basis(context3) {
  this._context = context3;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point(this, x5, y5);
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y5;
  }
};
function basis_default(context3) {
  return new Basis(context3);
}

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context3) {
  this._context = context3;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x5, this._y2 = y5;
        break;
      case 1:
        this._point = 2;
        this._x3 = x5, this._y3 = y5;
        break;
      case 2:
        this._point = 3;
        this._x4 = x5, this._y4 = y5;
        this._context.moveTo((this._x0 + 4 * this._x1 + x5) / 6, (this._y0 + 4 * this._y1 + y5) / 6);
        break;
      default:
        point(this, x5, y5);
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y5;
  }
};
function basisClosed_default(context3) {
  return new BasisClosed(context3);
}

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context3) {
  this._context = context3;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x07 = (this._x0 + 4 * this._x1 + x5) / 6, y07 = (this._y0 + 4 * this._y1 + y5) / 6;
        this._line ? this._context.lineTo(x07, y07) : this._context.moveTo(x07, y07);
        break;
      case 3:
        this._point = 4;
      default:
        point(this, x5, y5);
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y5;
  }
};
function basisOpen_default(context3) {
  return new BasisOpen(context3);
}

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context3, beta) {
  this._basis = new Basis(context3);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x5 = this._x, y5 = this._y, j = x5.length - 1;
    if (j > 0) {
      var x07 = x5[0], y07 = y5[0], dx = x5[j] - x07, dy = y5[j] - y07, i = -1, t4;
      while (++i <= j) {
        t4 = i / j;
        this._basis.point(
          this._beta * x5[i] + (1 - this._beta) * (x07 + t4 * dx),
          this._beta * y5[i] + (1 - this._beta) * (y07 + t4 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x5, y5) {
    this._x.push(+x5);
    this._y.push(+y5);
  }
};
var bundle_default = function custom(beta) {
  function bundle2(context3) {
    return beta === 1 ? new Basis(context3) : new Bundle(context3, beta);
  }
  bundle2.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle2;
}(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point2(that, x5, y5) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x5),
    that._y2 + that._k * (that._y1 - y5),
    that._x2,
    that._y2
  );
}
function Cardinal(context3, tension) {
  this._context = context3;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point2(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
        break;
      case 1:
        this._point = 2;
        this._x1 = x5, this._y1 = y5;
        break;
      case 2:
        this._point = 3;
      default:
        point2(this, x5, y5);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context3) {
    return new Cardinal(context3, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context3, tension) {
  this._context = context3;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x5, this._y3 = y5;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x5, this._y4 = y5);
        break;
      case 2:
        this._point = 3;
        this._x5 = x5, this._y5 = y5;
        break;
      default:
        point2(this, x5, y5);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context3) {
    return new CardinalClosed(context3, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context3, tension) {
  this._context = context3;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x5, y5);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context3) {
    return new CardinalOpen(context3, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point3(that, x5, y5) {
  var x13 = that._x1, y13 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon3) {
    var a4 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x13 = (x13 * a4 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y13 = (y13 * a4 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon3) {
    var b2 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m3 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b2 + that._x1 * that._l23_2a - x5 * that._l12_2a) / m3;
    y22 = (y22 * b2 + that._y1 * that._l23_2a - y5 * that._l12_2a) / m3;
  }
  that._context.bezierCurveTo(x13, y13, x22, y22, that._x2, that._y2);
}
function CatmullRom(context3, alpha) {
  this._context = context3;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    if (this._point) {
      var x23 = this._x2 - x5, y23 = this._y2 - y5;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x5, y5);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context3) {
    return alpha ? new CatmullRom(context3, alpha) : new Cardinal(context3, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context3, alpha) {
  this._context = context3;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    if (this._point) {
      var x23 = this._x2 - x5, y23 = this._y2 - y5;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x5, this._y3 = y5;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x5, this._y4 = y5);
        break;
      case 2:
        this._point = 3;
        this._x5 = x5, this._y5 = y5;
        break;
      default:
        point3(this, x5, y5);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context3) {
    return alpha ? new CatmullRomClosed(context3, alpha) : new CardinalClosed(context3, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context3, alpha) {
  this._context = context3;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    if (this._point) {
      var x23 = this._x2 - x5, y23 = this._y2 - y5;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x5, y5);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context3) {
    return alpha ? new CatmullRomOpen(context3, alpha) : new CardinalOpen(context3, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context3) {
  this._context = context3;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point)
      this._context.closePath();
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    if (this._point)
      this._context.lineTo(x5, y5);
    else
      this._point = 1, this._context.moveTo(x5, y5);
  }
};
function linearClosed_default(context3) {
  return new LinearClosed(context3);
}

// node_modules/d3-shape/src/curve/monotone.js
function sign(x5) {
  return x5 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t4) {
  var h2 = that._x1 - that._x0;
  return h2 ? (3 * (that._y1 - that._y0) / h2 - t4) / 2 : t4;
}
function point4(that, t04, t13) {
  var x07 = that._x0, y07 = that._y0, x13 = that._x1, y13 = that._y1, dx = (x13 - x07) / 3;
  that._context.bezierCurveTo(x07 + dx, y07 + dx * t04, x13 - dx, y13 - dx * t13, x13, y13);
}
function MonotoneX(context3) {
  this._context = context3;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point4(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    var t13 = NaN;
    x5 = +x5, y5 = +y5;
    if (x5 === this._x1 && y5 === this._y1)
      return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point4(this, slope2(this, t13 = slope3(this, x5, y5)), t13);
        break;
      default:
        point4(this, this._t0, t13 = slope3(this, x5, y5));
        break;
    }
    this._x0 = this._x1, this._x1 = x5;
    this._y0 = this._y1, this._y1 = y5;
    this._t0 = t13;
  }
};
function MonotoneY(context3) {
  this._context = new ReflectContext(context3);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x5, y5) {
  MonotoneX.prototype.point.call(this, y5, x5);
};
function ReflectContext(context3) {
  this._context = context3;
}
ReflectContext.prototype = {
  moveTo: function(x5, y5) {
    this._context.moveTo(y5, x5);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x5, y5) {
    this._context.lineTo(y5, x5);
  },
  bezierCurveTo: function(x13, y13, x22, y22, x5, y5) {
    this._context.bezierCurveTo(y13, x13, y22, x22, y5, x5);
  }
};
function monotoneX(context3) {
  return new MonotoneX(context3);
}
function monotoneY(context3) {
  return new MonotoneY(context3);
}

// node_modules/d3-shape/src/curve/natural.js
function Natural(context3) {
  this._context = context3;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x5 = this._x, y5 = this._y, n = x5.length;
    if (n) {
      this._line ? this._context.lineTo(x5[0], y5[0]) : this._context.moveTo(x5[0], y5[0]);
      if (n === 2) {
        this._context.lineTo(x5[1], y5[1]);
      } else {
        var px2 = controlPoints(x5), py2 = controlPoints(y5);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px2[0][i0], py2[0][i0], px2[1][i0], py2[1][i0], x5[i1], y5[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n === 1)
      this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x5, y5) {
    this._x.push(+x5);
    this._y.push(+y5);
  }
};
function controlPoints(x5) {
  var i, n = x5.length - 1, m3, a4 = new Array(n), b2 = new Array(n), r = new Array(n);
  a4[0] = 0, b2[0] = 2, r[0] = x5[0] + 2 * x5[1];
  for (i = 1; i < n - 1; ++i)
    a4[i] = 1, b2[i] = 4, r[i] = 4 * x5[i] + 2 * x5[i + 1];
  a4[n - 1] = 2, b2[n - 1] = 7, r[n - 1] = 8 * x5[n - 1] + x5[n];
  for (i = 1; i < n; ++i)
    m3 = a4[i] / b2[i - 1], b2[i] -= m3, r[i] -= m3 * r[i - 1];
  a4[n - 1] = r[n - 1] / b2[n - 1];
  for (i = n - 2; i >= 0; --i)
    a4[i] = (r[i] - a4[i + 1]) / b2[i];
  b2[n - 1] = (x5[n] + a4[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i)
    b2[i] = 2 * x5[i + 1] - a4[i + 1];
  return [a4, b2];
}
function natural_default(context3) {
  return new Natural(context3);
}

// node_modules/d3-shape/src/curve/step.js
function Step(context3, t4) {
  this._context = context3;
  this._t = t4;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2)
      this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    if (this._line >= 0)
      this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x5, y5) {
    x5 = +x5, y5 = +y5;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y5);
          this._context.lineTo(x5, y5);
        } else {
          var x13 = this._x * (1 - this._t) + x5 * this._t;
          this._context.lineTo(x13, this._y);
          this._context.lineTo(x13, y5);
        }
        break;
      }
    }
    this._x = x5, this._y = y5;
  }
};
function step_default(context3) {
  return new Step(context3, 0.5);
}
function stepBefore(context3) {
  return new Step(context3, 0);
}
function stepAfter(context3) {
  return new Step(context3, 1);
}

// node_modules/vega-canvas/src/domCanvas.js
function domCanvas(w4, h2) {
  if (typeof document !== "undefined" && document.createElement) {
    const c3 = document.createElement("canvas");
    if (c3 && c3.getContext) {
      c3.width = w4;
      c3.height = h2;
      return c3;
    }
  }
  return null;
}
var domImage = () => typeof Image !== "undefined" ? Image : null;

// node_modules/d3-scale/src/init.js
function initRange(domain4, range8) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain4);
      break;
    default:
      this.range(range8).domain(domain4);
      break;
  }
  return this;
}
function initInterpolator(domain4, interpolator) {
  switch (arguments.length) {
    case 0:
      break;
    case 1: {
      if (typeof domain4 === "function")
        this.interpolator(domain4);
      else
        this.range(domain4);
      break;
    }
    default: {
      this.domain(domain4);
      if (typeof interpolator === "function")
        this.interpolator(interpolator);
      else
        this.range(interpolator);
      break;
    }
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index5 = new InternMap(), domain4 = [], range8 = [], unknown = implicit;
  function scale7(d) {
    let i = index5.get(d);
    if (i === void 0) {
      if (unknown !== implicit)
        return unknown;
      index5.set(d, i = domain4.push(d) - 1);
    }
    return range8[i % range8.length];
  }
  scale7.domain = function(_) {
    if (!arguments.length)
      return domain4.slice();
    domain4 = [], index5 = new InternMap();
    for (const value3 of _) {
      if (index5.has(value3))
        continue;
      index5.set(value3, domain4.push(value3) - 1);
    }
    return scale7;
  };
  scale7.range = function(_) {
    return arguments.length ? (range8 = Array.from(_), scale7) : range8.slice();
  };
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : unknown;
  };
  scale7.copy = function() {
    return ordinal(domain4, range8).unknown(unknown);
  };
  initRange.apply(scale7, arguments);
  return scale7;
}

// node_modules/d3-interpolate/src/index.js
var src_exports = {};
__export(src_exports, {
  interpolate: () => value_default,
  interpolateArray: () => array_default2,
  interpolateBasis: () => basis_default2,
  interpolateBasisClosed: () => basisClosed_default2,
  interpolateCubehelix: () => cubehelix_default,
  interpolateCubehelixLong: () => cubehelixLong,
  interpolateDate: () => date_default,
  interpolateDiscrete: () => discrete_default,
  interpolateHcl: () => hcl_default,
  interpolateHclLong: () => hclLong,
  interpolateHsl: () => hsl_default,
  interpolateHslLong: () => hslLong,
  interpolateHue: () => hue_default,
  interpolateLab: () => lab2,
  interpolateNumber: () => number_default,
  interpolateNumberArray: () => numberArray_default,
  interpolateObject: () => object_default,
  interpolateRgb: () => rgb_default,
  interpolateRgbBasis: () => rgbBasis,
  interpolateRgbBasisClosed: () => rgbBasisClosed,
  interpolateRound: () => round_default,
  interpolateString: () => string_default,
  interpolateTransformCss: () => interpolateTransformCss,
  interpolateTransformSvg: () => interpolateTransformSvg,
  interpolateZoom: () => zoom_default,
  piecewise: () => piecewise,
  quantize: () => quantize_default2
});

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype2) {
  constructor.prototype = factory.prototype = prototype2;
  prototype2.constructor = constructor;
}
function extend2(parent, definition3) {
  var prototype2 = Object.create(parent.prototype);
  for (var key2 in definition3)
    prototype2[key2] = definition3[key2];
  return prototype2;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format5) {
  var m3, l;
  format5 = (format5 + "").trim().toLowerCase();
  return (m3 = reHex.exec(format5)) ? (l = m3[1].length, m3 = parseInt(m3[1], 16), l === 6 ? rgbn(m3) : l === 3 ? new Rgb(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l === 8 ? rgba(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l === 4 ? rgba(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger.exec(format5)) ? new Rgb(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent.exec(format5)) ? new Rgb(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger.exec(format5)) ? rgba(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent.exec(format5)) ? rgba(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent.exec(format5)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent.exec(format5)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named.hasOwnProperty(format5) ? rgbn(named[format5]) : format5 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b2, a4) {
  if (a4 <= 0)
    r = g = b2 = NaN;
  return new Rgb(r, g, b2, a4);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b2, opacity2) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b2, opacity2 == null ? 1 : opacity2);
}
function Rgb(r, g, b2, opacity2) {
  this.r = +r;
  this.g = +g;
  this.b = +b2;
  this.opacity = +opacity2;
}
define_default(Rgb, rgb, extend2(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a4 = clampa(this.opacity);
  return `${a4 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a4 === 1 ? ")" : `, ${a4})`}`;
}
function clampa(opacity2) {
  return isNaN(opacity2) ? 1 : Math.max(0, Math.min(1, opacity2));
}
function clampi(value3) {
  return Math.max(0, Math.min(255, Math.round(value3) || 0));
}
function hex(value3) {
  value3 = clampi(value3);
  return (value3 < 16 ? "0" : "") + value3.toString(16);
}
function hsla(h2, s2, l, a4) {
  if (a4 <= 0)
    h2 = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h2 = s2 = NaN;
  else if (s2 <= 0)
    h2 = NaN;
  return new Hsl(h2, s2, l, a4);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b2 = o.b / 255, min6 = Math.min(r, g, b2), max6 = Math.max(r, g, b2), h2 = NaN, s2 = max6 - min6, l = (max6 + min6) / 2;
  if (s2) {
    if (r === max6)
      h2 = (g - b2) / s2 + (g < b2) * 6;
    else if (g === max6)
      h2 = (b2 - r) / s2 + 2;
    else
      h2 = (r - g) / s2 + 4;
    s2 /= l < 0.5 ? max6 + min6 : 2 - max6 - min6;
    h2 *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h2;
  }
  return new Hsl(h2, s2, l, o.opacity);
}
function hsl(h2, s2, l, opacity2) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s2, l, opacity2 == null ? 1 : opacity2);
}
function Hsl(h2, s2, l, opacity2) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity2;
}
define_default(Hsl, hsl, extend2(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l = this.l, m22 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m22;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb(h2, m1, m22),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a4 = clampa(this.opacity);
    return `${a4 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a4 === 1 ? ")" : `, ${a4})`}`;
  }
}));
function clamph(value3) {
  value3 = (value3 || 0) % 360;
  return value3 < 0 ? value3 + 360 : value3;
}
function clampt(value3) {
  return Math.max(0, Math.min(1, value3 || 0));
}
function hsl2rgb(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t03 = 4 / 29;
var t12 = 6 / 29;
var t2 = 3 * t12 * t12;
var t3 = t12 * t12 * t12;
function labConvert(o) {
  if (o instanceof Lab)
    return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl)
    return hcl2lab(o);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b2 = rgb2lrgb(o.b), y5 = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b2) / Yn), x5, z;
  if (r === g && g === b2)
    x5 = z = y5;
  else {
    x5 = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b2) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b2) / Zn);
  }
  return new Lab(116 * y5 - 16, 500 * (x5 - y5), 200 * (y5 - z), o.opacity);
}
function lab(l, a4, b2, opacity2) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a4, b2, opacity2 == null ? 1 : opacity2);
}
function Lab(l, a4, b2, opacity2) {
  this.l = +l;
  this.a = +a4;
  this.b = +b2;
  this.opacity = +opacity2;
}
define_default(Lab, lab, extend2(Color, {
  brighter(k3) {
    return new Lab(this.l + K * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  darker(k3) {
    return new Lab(this.l - K * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  rgb() {
    var y5 = (this.l + 16) / 116, x5 = isNaN(this.a) ? y5 : y5 + this.a / 500, z = isNaN(this.b) ? y5 : y5 - this.b / 200;
    x5 = Xn * lab2xyz(x5);
    y5 = Yn * lab2xyz(y5);
    z = Zn * lab2xyz(z);
    return new Rgb(
      lrgb2rgb(3.1338561 * x5 - 1.6168667 * y5 - 0.4906146 * z),
      lrgb2rgb(-0.9787684 * x5 + 1.9161415 * y5 + 0.033454 * z),
      lrgb2rgb(0.0719453 * x5 - 0.2289914 * y5 + 1.4052427 * z),
      this.opacity
    );
  }
}));
function xyz2lab(t4) {
  return t4 > t3 ? Math.pow(t4, 1 / 3) : t4 / t2 + t03;
}
function lab2xyz(t4) {
  return t4 > t12 ? t4 * t4 * t4 : t2 * (t4 - t03);
}
function lrgb2rgb(x5) {
  return 255 * (x5 <= 31308e-7 ? 12.92 * x5 : 1.055 * Math.pow(x5, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x5) {
  return (x5 /= 255) <= 0.04045 ? x5 / 12.92 : Math.pow((x5 + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl)
    return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab))
    o = labConvert(o);
  if (o.a === 0 && o.b === 0)
    return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h2 = Math.atan2(o.b, o.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h2, c3, l, opacity2) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c3, l, opacity2 == null ? 1 : opacity2);
}
function Hcl(h2, c3, l, opacity2) {
  this.h = +h2;
  this.c = +c3;
  this.l = +l;
  this.opacity = +opacity2;
}
function hcl2lab(o) {
  if (isNaN(o.h))
    return new Lab(o.l, 0, 0, o.opacity);
  var h2 = o.h * radians;
  return new Lab(o.l, Math.cos(h2) * o.c, Math.sin(h2) * o.c, o.opacity);
}
define_default(Hcl, hcl, extend2(Color, {
  brighter(k3) {
    return new Hcl(this.h, this.c, this.l + K * (k3 == null ? 1 : k3), this.opacity);
  },
  darker(k3) {
    return new Hcl(this.h, this.c, this.l - K * (k3 == null ? 1 : k3), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = o.r / 255, g = o.g / 255, b2 = o.b / 255, l = (BC_DA * b2 + ED * r - EB * g) / (BC_DA + ED - EB), bl2 = b2 - l, k3 = (E * (g - l) - C * bl2) / D, s2 = Math.sqrt(k3 * k3 + bl2 * bl2) / (E * l * (1 - l)), h2 = s2 ? Math.atan2(k3, bl2) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s2, l, o.opacity);
}
function cubehelix(h2, s2, l, opacity2) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s2, l, opacity2 == null ? 1 : opacity2);
}
function Cubehelix(h2, s2, l, opacity2) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity2;
}
define_default(Cubehelix, cubehelix, extend2(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a4 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh3 = Math.cos(h2), sinh3 = Math.sin(h2);
    return new Rgb(
      255 * (l + a4 * (A * cosh3 + B * sinh3)),
      255 * (l + a4 * (C * cosh3 + D * sinh3)),
      255 * (l + a4 * (E * cosh3)),
      this.opacity
    );
  }
}));

// node_modules/d3-interpolate/src/basis.js
function basis(t13, v0, v1, v2, v3) {
  var t22 = t13 * t13, t32 = t22 * t13;
  return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default2(values5) {
  var n = values5.length - 1;
  return function(t4) {
    var i = t4 <= 0 ? t4 = 0 : t4 >= 1 ? (t4 = 1, n - 1) : Math.floor(t4 * n), v1 = values5[i], v2 = values5[i + 1], v0 = i > 0 ? values5[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values5[i + 2] : 2 * v2 - v1;
    return basis((t4 - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default2(values5) {
  var n = values5.length;
  return function(t4) {
    var i = Math.floor(((t4 %= 1) < 0 ? ++t4 : t4) * n), v0 = values5[(i + n - 1) % n], v1 = values5[i % n], v2 = values5[(i + 1) % n], v3 = values5[(i + 2) % n];
    return basis((t4 - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x5) => () => x5;

// node_modules/d3-interpolate/src/color.js
function linear2(a4, d) {
  return function(t4) {
    return a4 + t4 * d;
  };
}
function exponential(a4, b2, y5) {
  return a4 = Math.pow(a4, y5), b2 = Math.pow(b2, y5) - a4, y5 = 1 / y5, function(t4) {
    return Math.pow(a4 + t4 * b2, y5);
  };
}
function hue(a4, b2) {
  var d = b2 - a4;
  return d ? linear2(a4, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default2(isNaN(a4) ? b2 : a4);
}
function gamma(y5) {
  return (y5 = +y5) === 1 ? nogamma : function(a4, b2) {
    return b2 - a4 ? exponential(a4, b2, y5) : constant_default2(isNaN(a4) ? b2 : a4);
  };
}
function nogamma(a4, b2) {
  var d = b2 - a4;
  return d ? linear2(a4, d) : constant_default2(isNaN(a4) ? b2 : a4);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y5) {
  var color5 = gamma(y5);
  function rgb2(start, end) {
    var r = color5((start = rgb(start)).r, (end = rgb(end)).r), g = color5(start.g, end.g), b2 = color5(start.b, end.b), opacity2 = nogamma(start.opacity, end.opacity);
    return function(t4) {
      start.r = r(t4);
      start.g = g(t4);
      start.b = b2(t4);
      start.opacity = opacity2(t4);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors2) {
    var n = colors2.length, r = new Array(n), g = new Array(n), b2 = new Array(n), i, color5;
    for (i = 0; i < n; ++i) {
      color5 = rgb(colors2[i]);
      r[i] = color5.r || 0;
      g[i] = color5.g || 0;
      b2[i] = color5.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b2 = spline(b2);
    color5.opacity = 1;
    return function(t4) {
      color5.r = r(t4);
      color5.g = g(t4);
      color5.b = b2(t4);
      return color5 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default2);
var rgbBasisClosed = rgbSpline(basisClosed_default2);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a4, b2) {
  if (!b2)
    b2 = [];
  var n = a4 ? Math.min(b2.length, a4.length) : 0, c3 = b2.slice(), i;
  return function(t4) {
    for (i = 0; i < n; ++i)
      c3[i] = a4[i] * (1 - t4) + b2[i] * t4;
    return c3;
  };
}
function isNumberArray(x5) {
  return ArrayBuffer.isView(x5) && !(x5 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function array_default2(a4, b2) {
  return (isNumberArray(b2) ? numberArray_default : genericArray)(a4, b2);
}
function genericArray(a4, b2) {
  var nb = b2 ? b2.length : 0, na = a4 ? Math.min(nb, a4.length) : 0, x5 = new Array(na), c3 = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x5[i] = value_default(a4[i], b2[i]);
  for (; i < nb; ++i)
    c3[i] = b2[i];
  return function(t4) {
    for (i = 0; i < na; ++i)
      c3[i] = x5[i](t4);
    return c3;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a4, b2) {
  var d = new Date();
  return a4 = +a4, b2 = +b2, function(t4) {
    return d.setTime(a4 * (1 - t4) + b2 * t4), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a4, b2) {
  return a4 = +a4, b2 = +b2, function(t4) {
    return a4 * (1 - t4) + b2 * t4;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a4, b2) {
  var i = {}, c3 = {}, k3;
  if (a4 === null || typeof a4 !== "object")
    a4 = {};
  if (b2 === null || typeof b2 !== "object")
    b2 = {};
  for (k3 in b2) {
    if (k3 in a4) {
      i[k3] = value_default(a4[k3], b2[k3]);
    } else {
      c3[k3] = b2[k3];
    }
  }
  return function(t4) {
    for (k3 in i)
      c3[k3] = i[k3](t4);
    return c3;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero3(b2) {
  return function() {
    return b2;
  };
}
function one2(b2) {
  return function(t4) {
    return b2(t4) + "";
  };
}
function string_default(a4, b2) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
  a4 = a4 + "", b2 = b2 + "";
  while ((am = reA.exec(a4)) && (bm = reB.exec(b2))) {
    if ((bs = bm.index) > bi) {
      bs = b2.slice(bi, bs);
      if (s2[i])
        s2[i] += bs;
      else
        s2[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i])
        s2[i] += bm;
      else
        s2[++i] = bm;
    } else {
      s2[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b2.length) {
    bs = b2.slice(bi);
    if (s2[i])
      s2[i] += bs;
    else
      s2[++i] = bs;
  }
  return s2.length < 2 ? q[0] ? one2(q[0].x) : zero3(b2) : (b2 = q.length, function(t4) {
    for (var i2 = 0, o; i2 < b2; ++i2)
      s2[(o = q[i2]).i] = o.x(t4);
    return s2.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a4, b2) {
  var t4 = typeof b2, c3;
  return b2 == null || t4 === "boolean" ? constant_default2(b2) : (t4 === "number" ? number_default : t4 === "string" ? (c3 = color(b2)) ? (b2 = c3, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default)(a4, b2);
}

// node_modules/d3-interpolate/src/discrete.js
function discrete_default(range8) {
  var n = range8.length;
  return function(t4) {
    return range8[Math.max(0, Math.min(n - 1, Math.floor(t4 * n)))];
  };
}

// node_modules/d3-interpolate/src/hue.js
function hue_default(a4, b2) {
  var i = hue(+a4, +b2);
  return function(t4) {
    var x5 = i(t4);
    return x5 - 360 * Math.floor(x5 / 360);
  };
}

// node_modules/d3-interpolate/src/round.js
function round_default(a4, b2) {
  return a4 = +a4, b2 = +b2, function(t4) {
    return Math.round(a4 * (1 - t4) + b2 * t4);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity3 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a4, b2, c3, d, e3, f) {
  var scaleX, scaleY2, skewX;
  if (scaleX = Math.sqrt(a4 * a4 + b2 * b2))
    a4 /= scaleX, b2 /= scaleX;
  if (skewX = a4 * c3 + b2 * d)
    c3 -= a4 * skewX, d -= b2 * skewX;
  if (scaleY2 = Math.sqrt(c3 * c3 + d * d))
    c3 /= scaleY2, d /= scaleY2, skewX /= scaleY2;
  if (a4 * d < b2 * c3)
    a4 = -a4, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e3,
    translateY: f,
    rotate: Math.atan2(b2, a4) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY: scaleY2
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value3) {
  const m3 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value3 + "");
  return m3.isIdentity ? identity3 : decompose_default(m3.a, m3.b, m3.c, m3.d, m3.e, m3.f);
}
function parseSvg(value3) {
  if (value3 == null)
    return identity3;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value3);
  if (!(value3 = svgNode.transform.baseVal.consolidate()))
    return identity3;
  value3 = value3.matrix;
  return decompose_default(value3.a, value3.b, value3.c, value3.d, value3.e, value3.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse7, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate4(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate2(a4, b2, s2, q) {
    if (a4 !== b2) {
      if (a4 - b2 > 180)
        b2 += 360;
      else if (b2 - a4 > 180)
        a4 += 360;
      q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a4, b2) });
    } else if (b2) {
      s2.push(pop(s2) + "rotate(" + b2 + degParen);
    }
  }
  function skewX(a4, b2, s2, q) {
    if (a4 !== b2) {
      q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a4, b2) });
    } else if (b2) {
      s2.push(pop(s2) + "skewX(" + b2 + degParen);
    }
  }
  function scale7(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a4, b2) {
    var s2 = [], q = [];
    a4 = parse7(a4), b2 = parse7(b2);
    translate4(a4.translateX, a4.translateY, b2.translateX, b2.translateY, s2, q);
    rotate2(a4.rotate, b2.rotate, s2, q);
    skewX(a4.skewX, b2.skewX, s2, q);
    scale7(a4.scaleX, a4.scaleY, b2.scaleX, b2.scaleY, s2, q);
    a4 = b2 = null;
    return function(t4) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s2[(o = q[i]).i] = o.x(t4);
      return s2.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon22 = 1e-12;
function cosh(x5) {
  return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
}
function sinh(x5) {
  return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
}
function tanh(x5) {
  return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom3(p02, p1) {
    var ux0 = p02[0], uy0 = p02[1], w0 = p02[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon22) {
      S = Math.log(w1 / w0) / rho;
      i = function(t4) {
        return [
          ux0 + t4 * dx,
          uy0 + t4 * dy,
          w0 * Math.exp(rho * t4 * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t4) {
        var s2 = t4 * S, coshr0 = cosh(r0), u4 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
        return [
          ux0 + u4 * dx,
          uy0 + u4 * dy,
          w0 * coshr0 / cosh(rho * s2 + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom3.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom3;
}(Math.SQRT2, 2, 4);

// node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start, end) {
    var h2 = hue2((start = hsl(start)).h, (end = hsl(end)).h), s2 = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity2 = nogamma(start.opacity, end.opacity);
    return function(t4) {
      start.h = h2(t4);
      start.s = s2(t4);
      start.l = l(t4);
      start.opacity = opacity2(t4);
      return start + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// node_modules/d3-interpolate/src/lab.js
function lab2(start, end) {
  var l = nogamma((start = lab(start)).l, (end = lab(end)).l), a4 = nogamma(start.a, end.a), b2 = nogamma(start.b, end.b), opacity2 = nogamma(start.opacity, end.opacity);
  return function(t4) {
    start.l = l(t4);
    start.a = a4(t4);
    start.b = b2(t4);
    start.opacity = opacity2(t4);
    return start + "";
  };
}

// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start, end) {
    var h2 = hue2((start = hcl(start)).h, (end = hcl(end)).h), c3 = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity2 = nogamma(start.opacity, end.opacity);
    return function(t4) {
      start.h = h2(t4);
      start.c = c3(t4);
      start.l = l(t4);
      start.opacity = opacity2(t4);
      return start + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y5) {
    y5 = +y5;
    function cubehelix3(start, end) {
      var h2 = hue2((start = cubehelix(start)).h, (end = cubehelix(end)).h), s2 = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity2 = nogamma(start.opacity, end.opacity);
      return function(t4) {
        start.h = h2(t4);
        start.s = s2(t4);
        start.l = l(Math.pow(t4, y5));
        start.opacity = opacity2(t4);
        return start + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/d3-interpolate/src/piecewise.js
function piecewise(interpolate3, values5) {
  if (values5 === void 0)
    values5 = interpolate3, interpolate3 = value_default;
  var i = 0, n = values5.length - 1, v2 = values5[0], I = new Array(n < 0 ? 0 : n);
  while (i < n)
    I[i] = interpolate3(v2, v2 = values5[++i]);
  return function(t4) {
    var i2 = Math.max(0, Math.min(n - 1, Math.floor(t4 *= n)));
    return I[i2](t4 - i2);
  };
}

// node_modules/d3-interpolate/src/quantize.js
function quantize_default2(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i)
    samples[i] = interpolator(i / (n - 1));
  return samples;
}

// node_modules/d3-scale/src/constant.js
function constants(x5) {
  return function() {
    return x5;
  };
}

// node_modules/d3-scale/src/number.js
function number2(x5) {
  return +x5;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity4(x5) {
  return x5;
}
function normalize(a4, b2) {
  return (b2 -= a4 = +a4) ? function(x5) {
    return (x5 - a4) / b2;
  } : constants(isNaN(b2) ? NaN : 0.5);
}
function clamper(a4, b2) {
  var t4;
  if (a4 > b2)
    t4 = a4, a4 = b2, b2 = t4;
  return function(x5) {
    return Math.max(a4, Math.min(b2, x5));
  };
}
function bimap(domain4, range8, interpolate3) {
  var d0 = domain4[0], d1 = domain4[1], r0 = range8[0], r1 = range8[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate3(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate3(r0, r1);
  return function(x5) {
    return r0(d0(x5));
  };
}
function polymap(domain4, range8, interpolate3) {
  var j = Math.min(domain4.length, range8.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain4[j] < domain4[0]) {
    domain4 = domain4.slice().reverse();
    range8 = range8.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain4[i], domain4[i + 1]);
    r[i] = interpolate3(range8[i], range8[i + 1]);
  }
  return function(x5) {
    var i2 = bisect_default2(domain4, x5, 1, j) - 1;
    return r[i2](d[i2](x5));
  };
}
function copy(source3, target2) {
  return target2.domain(source3.domain()).range(source3.range()).interpolate(source3.interpolate()).clamp(source3.clamp()).unknown(source3.unknown());
}
function transformer() {
  var domain4 = unit, range8 = unit, interpolate3 = value_default, transform4, untransform, unknown, clamp2 = identity4, piecewise2, output3, input;
  function rescale() {
    var n = Math.min(domain4.length, range8.length);
    if (clamp2 !== identity4)
      clamp2 = clamper(domain4[0], domain4[n - 1]);
    piecewise2 = n > 2 ? polymap : bimap;
    output3 = input = null;
    return scale7;
  }
  function scale7(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : (output3 || (output3 = piecewise2(domain4.map(transform4), range8, interpolate3)))(transform4(clamp2(x5)));
  }
  scale7.invert = function(y5) {
    return clamp2(untransform((input || (input = piecewise2(range8, domain4.map(transform4), number_default)))(y5)));
  };
  scale7.domain = function(_) {
    return arguments.length ? (domain4 = Array.from(_, number2), rescale()) : domain4.slice();
  };
  scale7.range = function(_) {
    return arguments.length ? (range8 = Array.from(_), rescale()) : range8.slice();
  };
  scale7.rangeRound = function(_) {
    return range8 = Array.from(_), interpolate3 = round_default, rescale();
  };
  scale7.clamp = function(_) {
    return arguments.length ? (clamp2 = _ ? true : identity4, rescale()) : clamp2 !== identity4;
  };
  scale7.interpolate = function(_) {
    return arguments.length ? (interpolate3 = _, rescale()) : interpolate3;
  };
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : unknown;
  };
  return function(t4, u4) {
    transform4 = t4, untransform = u4;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity4, identity4);
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start, stop3, count4, specifier) {
  var step = tickStep(start, stop3, count4), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value3 = Math.max(Math.abs(start), Math.abs(stop3));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value3)))
        specifier.precision = precision;
      return formatPrefix(specifier, value3);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop3)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale7) {
  var domain4 = scale7.domain;
  scale7.ticks = function(count4) {
    var d = domain4();
    return ticks(d[0], d[d.length - 1], count4 == null ? 10 : count4);
  };
  scale7.tickFormat = function(count4, specifier) {
    var d = domain4();
    return tickFormat(d[0], d[d.length - 1], count4 == null ? 10 : count4, specifier);
  };
  scale7.nice = function(count4) {
    if (count4 == null)
      count4 = 10;
    var d = domain4();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop3 = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop3 < start) {
      step = start, start = stop3, stop3 = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop3, count4);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop3;
        return domain4(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop3 = Math.ceil(stop3 / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop3 = Math.floor(stop3 * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale7;
  };
  return scale7;
}
function linear3() {
  var scale7 = continuous();
  scale7.copy = function() {
    return copy(scale7, linear3());
  };
  initRange.apply(scale7, arguments);
  return linearish(scale7);
}

// node_modules/d3-scale/src/identity.js
function identity5(domain4) {
  var unknown;
  function scale7(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : x5;
  }
  scale7.invert = scale7;
  scale7.domain = scale7.range = function(_) {
    return arguments.length ? (domain4 = Array.from(_, number2), scale7) : domain4.slice();
  };
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : unknown;
  };
  scale7.copy = function() {
    return identity5(domain4).unknown(unknown);
  };
  domain4 = arguments.length ? Array.from(domain4, number2) : [0, 1];
  return linearish(scale7);
}

// node_modules/d3-scale/src/nice.js
function nice2(domain4, interval3) {
  domain4 = domain4.slice();
  var i0 = 0, i1 = domain4.length - 1, x07 = domain4[i0], x13 = domain4[i1], t4;
  if (x13 < x07) {
    t4 = i0, i0 = i1, i1 = t4;
    t4 = x07, x07 = x13, x13 = t4;
  }
  domain4[i0] = interval3.floor(x07);
  domain4[i1] = interval3.ceil(x13);
  return domain4;
}

// node_modules/d3-scale/src/log.js
function transformLog(x5) {
  return Math.log(x5);
}
function transformExp(x5) {
  return Math.exp(x5);
}
function transformLogn(x5) {
  return -Math.log(-x5);
}
function transformExpn(x5) {
  return -Math.exp(-x5);
}
function pow10(x5) {
  return isFinite(x5) ? +("1e" + x5) : x5 < 0 ? 0 : x5;
}
function powp(base2) {
  return base2 === 10 ? pow10 : base2 === Math.E ? Math.exp : (x5) => Math.pow(base2, x5);
}
function logp(base2) {
  return base2 === Math.E ? Math.log : base2 === 10 && Math.log10 || base2 === 2 && Math.log2 || (base2 = Math.log(base2), (x5) => Math.log(x5) / base2);
}
function reflect(f) {
  return (x5, k3) => -f(-x5, k3);
}
function loggish(transform4) {
  const scale7 = transform4(transformLog, transformExp);
  const domain4 = scale7.domain;
  let base2 = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base2), pows = powp(base2);
    if (domain4()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform4(transformLogn, transformExpn);
    } else {
      transform4(transformLog, transformExp);
    }
    return scale7;
  }
  scale7.base = function(_) {
    return arguments.length ? (base2 = +_, rescale()) : base2;
  };
  scale7.domain = function(_) {
    return arguments.length ? (domain4(_), rescale()) : domain4();
  };
  scale7.ticks = (count4) => {
    const d = domain4();
    let u4 = d[0];
    let v2 = d[d.length - 1];
    const r = v2 < u4;
    if (r)
      [u4, v2] = [v2, u4];
    let i = logs(u4);
    let j = logs(v2);
    let k3;
    let t4;
    const n = count4 == null ? 10 : +count4;
    let z = [];
    if (!(base2 % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u4 > 0)
        for (; i <= j; ++i) {
          for (k3 = 1; k3 < base2; ++k3) {
            t4 = i < 0 ? k3 / pows(-i) : k3 * pows(i);
            if (t4 < u4)
              continue;
            if (t4 > v2)
              break;
            z.push(t4);
          }
        }
      else
        for (; i <= j; ++i) {
          for (k3 = base2 - 1; k3 >= 1; --k3) {
            t4 = i > 0 ? k3 / pows(-i) : k3 * pows(i);
            if (t4 < u4)
              continue;
            if (t4 > v2)
              break;
            z.push(t4);
          }
        }
      if (z.length * 2 < n)
        z = ticks(u4, v2, n);
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };
  scale7.tickFormat = (count4, specifier) => {
    if (count4 == null)
      count4 = 10;
    if (specifier == null)
      specifier = base2 === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base2 % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format(specifier);
    }
    if (count4 === Infinity)
      return specifier;
    const k3 = Math.max(1, base2 * count4 / scale7.ticks().length);
    return (d) => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base2 < base2 - 0.5)
        i *= base2;
      return i <= k3 ? specifier(d) : "";
    };
  };
  scale7.nice = () => {
    return domain4(nice2(domain4(), {
      floor: (x5) => pows(Math.floor(logs(x5))),
      ceil: (x5) => pows(Math.ceil(logs(x5)))
    }));
  };
  return scale7;
}
function log3() {
  const scale7 = loggish(transformer()).domain([1, 10]);
  scale7.copy = () => copy(scale7, log3()).base(scale7.base());
  initRange.apply(scale7, arguments);
  return scale7;
}

// node_modules/d3-scale/src/symlog.js
function transformSymlog(c3) {
  return function(x5) {
    return Math.sign(x5) * Math.log1p(Math.abs(x5 / c3));
  };
}
function transformSymexp(c3) {
  return function(x5) {
    return Math.sign(x5) * Math.expm1(Math.abs(x5)) * c3;
  };
}
function symlogish(transform4) {
  var c3 = 1, scale7 = transform4(transformSymlog(c3), transformSymexp(c3));
  scale7.constant = function(_) {
    return arguments.length ? transform4(transformSymlog(c3 = +_), transformSymexp(c3)) : c3;
  };
  return linearish(scale7);
}
function symlog2() {
  var scale7 = symlogish(transformer());
  scale7.copy = function() {
    return copy(scale7, symlog2()).constant(scale7.constant());
  };
  return initRange.apply(scale7, arguments);
}

// node_modules/d3-scale/src/pow.js
function transformPow(exponent) {
  return function(x5) {
    return x5 < 0 ? -Math.pow(-x5, exponent) : Math.pow(x5, exponent);
  };
}
function transformSqrt(x5) {
  return x5 < 0 ? -Math.sqrt(-x5) : Math.sqrt(x5);
}
function transformSquare(x5) {
  return x5 < 0 ? -x5 * x5 : x5 * x5;
}
function powish(transform4) {
  var scale7 = transform4(identity4, identity4), exponent = 1;
  function rescale() {
    return exponent === 1 ? transform4(identity4, identity4) : exponent === 0.5 ? transform4(transformSqrt, transformSquare) : transform4(transformPow(exponent), transformPow(1 / exponent));
  }
  scale7.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };
  return linearish(scale7);
}
function pow3() {
  var scale7 = powish(transformer());
  scale7.copy = function() {
    return copy(scale7, pow3()).exponent(scale7.exponent());
  };
  initRange.apply(scale7, arguments);
  return scale7;
}
function sqrt2() {
  return pow3.apply(null, arguments).exponent(0.5);
}

// node_modules/d3-scale/src/quantile.js
function quantile2() {
  var domain4 = [], range8 = [], thresholds = [], unknown;
  function rescale() {
    var i = 0, n = Math.max(1, range8.length);
    thresholds = new Array(n - 1);
    while (++i < n)
      thresholds[i - 1] = quantileSorted(domain4, i / n);
    return scale7;
  }
  function scale7(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : range8[bisect_default2(thresholds, x5)];
  }
  scale7.invertExtent = function(y5) {
    var i = range8.indexOf(y5);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain4[0],
      i < thresholds.length ? thresholds[i] : domain4[domain4.length - 1]
    ];
  };
  scale7.domain = function(_) {
    if (!arguments.length)
      return domain4.slice();
    domain4 = [];
    for (let d of _)
      if (d != null && !isNaN(d = +d))
        domain4.push(d);
    domain4.sort(ascending2);
    return rescale();
  };
  scale7.range = function(_) {
    return arguments.length ? (range8 = Array.from(_), rescale()) : range8.slice();
  };
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : unknown;
  };
  scale7.quantiles = function() {
    return thresholds.slice();
  };
  scale7.copy = function() {
    return quantile2().domain(domain4).range(range8).unknown(unknown);
  };
  return initRange.apply(scale7, arguments);
}

// node_modules/d3-scale/src/quantize.js
function quantize() {
  var x07 = 0, x13 = 1, n = 1, domain4 = [0.5], range8 = [0, 1], unknown;
  function scale7(x5) {
    return x5 != null && x5 <= x5 ? range8[bisect_default2(domain4, x5, 0, n)] : unknown;
  }
  function rescale() {
    var i = -1;
    domain4 = new Array(n);
    while (++i < n)
      domain4[i] = ((i + 1) * x13 - (i - n) * x07) / (n + 1);
    return scale7;
  }
  scale7.domain = function(_) {
    return arguments.length ? ([x07, x13] = _, x07 = +x07, x13 = +x13, rescale()) : [x07, x13];
  };
  scale7.range = function(_) {
    return arguments.length ? (n = (range8 = Array.from(_)).length - 1, rescale()) : range8.slice();
  };
  scale7.invertExtent = function(y5) {
    var i = range8.indexOf(y5);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x07, domain4[0]] : i >= n ? [domain4[n - 1], x13] : [domain4[i - 1], domain4[i]];
  };
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : scale7;
  };
  scale7.thresholds = function() {
    return domain4.slice();
  };
  scale7.copy = function() {
    return quantize().domain([x07, x13]).range(range8).unknown(unknown);
  };
  return initRange.apply(linearish(scale7), arguments);
}

// node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain4 = [0.5], range8 = [0, 1], unknown, n = 1;
  function scale7(x5) {
    return x5 != null && x5 <= x5 ? range8[bisect_default2(domain4, x5, 0, n)] : unknown;
  }
  scale7.domain = function(_) {
    return arguments.length ? (domain4 = Array.from(_), n = Math.min(domain4.length, range8.length - 1), scale7) : domain4.slice();
  };
  scale7.range = function(_) {
    return arguments.length ? (range8 = Array.from(_), n = Math.min(domain4.length, range8.length - 1), scale7) : range8.slice();
  };
  scale7.invertExtent = function(y5) {
    var i = range8.indexOf(y5);
    return [domain4[i - 1], domain4[i]];
  };
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : unknown;
  };
  scale7.copy = function() {
    return threshold().domain(domain4).range(range8).unknown(unknown);
  };
  return initRange.apply(scale7, arguments);
}

// node_modules/d3-scale/src/time.js
function date(t4) {
  return new Date(t4);
}
function number3(t4) {
  return t4 instanceof Date ? +t4 : +new Date(+t4);
}
function calendar(ticks3, tickInterval, year2, month2, week2, day2, hour2, minute2, second2, format5) {
  var scale7 = continuous(), invert2 = scale7.invert, domain4 = scale7.domain;
  var formatMillisecond = format5(".%L"), formatSecond = format5(":%S"), formatMinute = format5("%I:%M"), formatHour = format5("%I %p"), formatDay = format5("%a %d"), formatWeek = format5("%b %d"), formatMonth = format5("%B"), formatYear3 = format5("%Y");
  function tickFormat3(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute2(date2) < date2 ? formatSecond : hour2(date2) < date2 ? formatMinute : day2(date2) < date2 ? formatHour : month2(date2) < date2 ? week2(date2) < date2 ? formatDay : formatWeek : year2(date2) < date2 ? formatMonth : formatYear3)(date2);
  }
  scale7.invert = function(y5) {
    return new Date(invert2(y5));
  };
  scale7.domain = function(_) {
    return arguments.length ? domain4(Array.from(_, number3)) : domain4().map(date);
  };
  scale7.ticks = function(interval3) {
    var d = domain4();
    return ticks3(d[0], d[d.length - 1], interval3 == null ? 10 : interval3);
  };
  scale7.tickFormat = function(count4, specifier) {
    return specifier == null ? tickFormat3 : format5(specifier);
  };
  scale7.nice = function(interval3) {
    var d = domain4();
    if (!interval3 || typeof interval3.range !== "function")
      interval3 = tickInterval(d[0], d[d.length - 1], interval3 == null ? 10 : interval3);
    return interval3 ? domain4(nice2(d, interval3)) : scale7;
  };
  scale7.copy = function() {
    return copy(scale7, calendar(ticks3, tickInterval, year2, month2, week2, day2, hour2, minute2, second2, format5));
  };
  return scale7;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, year_default, month_default, sunday, day_default, hour_default, minute_default, second_default, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default, second_default, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}

// node_modules/d3-scale/src/sequential.js
function transformer2() {
  var x07 = 0, x13 = 1, t04, t13, k10, transform4, interpolator = identity4, clamp2 = false, unknown;
  function scale7(x5) {
    return x5 == null || isNaN(x5 = +x5) ? unknown : interpolator(k10 === 0 ? 0.5 : (x5 = (transform4(x5) - t04) * k10, clamp2 ? Math.max(0, Math.min(1, x5)) : x5));
  }
  scale7.domain = function(_) {
    return arguments.length ? ([x07, x13] = _, t04 = transform4(x07 = +x07), t13 = transform4(x13 = +x13), k10 = t04 === t13 ? 0 : 1 / (t13 - t04), scale7) : [x07, x13];
  };
  scale7.clamp = function(_) {
    return arguments.length ? (clamp2 = !!_, scale7) : clamp2;
  };
  scale7.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale7) : interpolator;
  };
  function range8(interpolate3) {
    return function(_) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _, interpolator = interpolate3(r0, r1), scale7) : [interpolator(0), interpolator(1)];
    };
  }
  scale7.range = range8(value_default);
  scale7.rangeRound = range8(round_default);
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : unknown;
  };
  return function(t4) {
    transform4 = t4, t04 = t4(x07), t13 = t4(x13), k10 = t04 === t13 ? 0 : 1 / (t13 - t04);
    return scale7;
  };
}
function copy2(source3, target2) {
  return target2.domain(source3.domain()).interpolator(source3.interpolator()).clamp(source3.clamp()).unknown(source3.unknown());
}
function sequential() {
  var scale7 = linearish(transformer2()(identity4));
  scale7.copy = function() {
    return copy2(scale7, sequential());
  };
  return initInterpolator.apply(scale7, arguments);
}
function sequentialLog() {
  var scale7 = loggish(transformer2()).domain([1, 10]);
  scale7.copy = function() {
    return copy2(scale7, sequentialLog()).base(scale7.base());
  };
  return initInterpolator.apply(scale7, arguments);
}
function sequentialSymlog() {
  var scale7 = symlogish(transformer2());
  scale7.copy = function() {
    return copy2(scale7, sequentialSymlog()).constant(scale7.constant());
  };
  return initInterpolator.apply(scale7, arguments);
}
function sequentialPow() {
  var scale7 = powish(transformer2());
  scale7.copy = function() {
    return copy2(scale7, sequentialPow()).exponent(scale7.exponent());
  };
  return initInterpolator.apply(scale7, arguments);
}
function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}

// node_modules/d3-scale/src/diverging.js
function transformer3() {
  var x07 = 0, x13 = 0.5, x22 = 1, s2 = 1, t04, t13, t22, k10, k21, interpolator = identity4, transform4, clamp2 = false, unknown;
  function scale7(x5) {
    return isNaN(x5 = +x5) ? unknown : (x5 = 0.5 + ((x5 = +transform4(x5)) - t13) * (s2 * x5 < s2 * t13 ? k10 : k21), interpolator(clamp2 ? Math.max(0, Math.min(1, x5)) : x5));
  }
  scale7.domain = function(_) {
    return arguments.length ? ([x07, x13, x22] = _, t04 = transform4(x07 = +x07), t13 = transform4(x13 = +x13), t22 = transform4(x22 = +x22), k10 = t04 === t13 ? 0 : 0.5 / (t13 - t04), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s2 = t13 < t04 ? -1 : 1, scale7) : [x07, x13, x22];
  };
  scale7.clamp = function(_) {
    return arguments.length ? (clamp2 = !!_, scale7) : clamp2;
  };
  scale7.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale7) : interpolator;
  };
  function range8(interpolate3) {
    return function(_) {
      var r0, r1, r2;
      return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate3, [r0, r1, r2]), scale7) : [interpolator(0), interpolator(0.5), interpolator(1)];
    };
  }
  scale7.range = range8(value_default);
  scale7.rangeRound = range8(round_default);
  scale7.unknown = function(_) {
    return arguments.length ? (unknown = _, scale7) : unknown;
  };
  return function(t4) {
    transform4 = t4, t04 = t4(x07), t13 = t4(x13), t22 = t4(x22), k10 = t04 === t13 ? 0 : 0.5 / (t13 - t04), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s2 = t13 < t04 ? -1 : 1;
    return scale7;
  };
}
function diverging() {
  var scale7 = linearish(transformer3()(identity4));
  scale7.copy = function() {
    return copy2(scale7, diverging());
  };
  return initInterpolator.apply(scale7, arguments);
}
function divergingLog() {
  var scale7 = loggish(transformer3()).domain([0.1, 1, 10]);
  scale7.copy = function() {
    return copy2(scale7, divergingLog()).base(scale7.base());
  };
  return initInterpolator.apply(scale7, arguments);
}
function divergingSymlog() {
  var scale7 = symlogish(transformer3());
  scale7.copy = function() {
    return copy2(scale7, divergingSymlog()).constant(scale7.constant());
  };
  return initInterpolator.apply(scale7, arguments);
}
function divergingPow() {
  var scale7 = powish(transformer3());
  scale7.copy = function() {
    return copy2(scale7, divergingPow()).exponent(scale7.exponent());
  };
  return initInterpolator.apply(scale7, arguments);
}
function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}

// node_modules/vega-scale/build/vega-scale.module.js
function bandSpace(count4, paddingInner2, paddingOuter2) {
  const space = count4 - paddingInner2 + paddingOuter2 * 2;
  return count4 ? space > 0 ? space : 1 : 0;
}
var Identity = "identity";
var Linear2 = "linear";
var Log = "log";
var Pow = "pow";
var Sqrt = "sqrt";
var Symlog = "symlog";
var Time = "time";
var UTC = "utc";
var Sequential = "sequential";
var Diverging = "diverging";
var Quantile2 = "quantile";
var Quantize = "quantize";
var Threshold = "threshold";
var Ordinal = "ordinal";
var Point = "point";
var Band = "band";
var BinOrdinal = "bin-ordinal";
var Continuous = "continuous";
var Discrete = "discrete";
var Discretizing = "discretizing";
var Interpolating = "interpolating";
var Temporal = "temporal";
function invertRange(scale7) {
  return function(_) {
    let lo = _[0], hi = _[1], t4;
    if (hi < lo) {
      t4 = lo;
      lo = hi;
      hi = t4;
    }
    return [scale7.invert(lo), scale7.invert(hi)];
  };
}
function invertRangeExtent(scale7) {
  return function(_) {
    const range8 = scale7.range();
    let lo = _[0], hi = _[1], min6 = -1, max6, t4, i, n;
    if (hi < lo) {
      t4 = lo;
      lo = hi;
      hi = t4;
    }
    for (i = 0, n = range8.length; i < n; ++i) {
      if (range8[i] >= lo && range8[i] <= hi) {
        if (min6 < 0)
          min6 = i;
        max6 = i;
      }
    }
    if (min6 < 0)
      return void 0;
    lo = scale7.invertExtent(range8[min6]);
    hi = scale7.invertExtent(range8[max6]);
    return [lo[0] === void 0 ? lo[1] : lo[0], hi[1] === void 0 ? hi[0] : hi[1]];
  };
}
function band2() {
  const scale7 = ordinal().unknown(void 0), domain4 = scale7.domain, ordinalRange = scale7.range;
  let range$1 = [0, 1], step, bandwidth2, round2 = false, paddingInner2 = 0, paddingOuter2 = 0, align2 = 0.5;
  delete scale7.unknown;
  function rescale() {
    const n = domain4().length, reverse5 = range$1[1] < range$1[0], stop3 = range$1[1 - reverse5], space = bandSpace(n, paddingInner2, paddingOuter2);
    let start = range$1[reverse5 - 0];
    step = (stop3 - start) / (space || 1);
    if (round2) {
      step = Math.floor(step);
    }
    start += (stop3 - start - step * (n - paddingInner2)) * align2;
    bandwidth2 = step * (1 - paddingInner2);
    if (round2) {
      start = Math.round(start);
      bandwidth2 = Math.round(bandwidth2);
    }
    const values5 = range(n).map((i) => start + step * i);
    return ordinalRange(reverse5 ? values5.reverse() : values5);
  }
  scale7.domain = function(_) {
    if (arguments.length) {
      domain4(_);
      return rescale();
    } else {
      return domain4();
    }
  };
  scale7.range = function(_) {
    if (arguments.length) {
      range$1 = [+_[0], +_[1]];
      return rescale();
    } else {
      return range$1.slice();
    }
  };
  scale7.rangeRound = function(_) {
    range$1 = [+_[0], +_[1]];
    round2 = true;
    return rescale();
  };
  scale7.bandwidth = function() {
    return bandwidth2;
  };
  scale7.step = function() {
    return step;
  };
  scale7.round = function(_) {
    if (arguments.length) {
      round2 = !!_;
      return rescale();
    } else {
      return round2;
    }
  };
  scale7.padding = function(_) {
    if (arguments.length) {
      paddingOuter2 = Math.max(0, Math.min(1, _));
      paddingInner2 = paddingOuter2;
      return rescale();
    } else {
      return paddingInner2;
    }
  };
  scale7.paddingInner = function(_) {
    if (arguments.length) {
      paddingInner2 = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return paddingInner2;
    }
  };
  scale7.paddingOuter = function(_) {
    if (arguments.length) {
      paddingOuter2 = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return paddingOuter2;
    }
  };
  scale7.align = function(_) {
    if (arguments.length) {
      align2 = Math.max(0, Math.min(1, _));
      return rescale();
    } else {
      return align2;
    }
  };
  scale7.invertRange = function(_) {
    if (_[0] == null || _[1] == null)
      return;
    const reverse5 = range$1[1] < range$1[0], values5 = reverse5 ? ordinalRange().reverse() : ordinalRange(), n = values5.length - 1;
    let lo = +_[0], hi = +_[1], a4, b2, t4;
    if (lo !== lo || hi !== hi)
      return;
    if (hi < lo) {
      t4 = lo;
      lo = hi;
      hi = t4;
    }
    if (hi < values5[0] || lo > range$1[1 - reverse5])
      return;
    a4 = Math.max(0, bisectRight(values5, lo) - 1);
    b2 = lo === hi ? a4 : bisectRight(values5, hi) - 1;
    if (lo - values5[a4] > bandwidth2 + 1e-10)
      ++a4;
    if (reverse5) {
      t4 = a4;
      a4 = n - b2;
      b2 = n - t4;
    }
    return a4 > b2 ? void 0 : domain4().slice(a4, b2 + 1);
  };
  scale7.invert = function(_) {
    const value3 = scale7.invertRange([_, _]);
    return value3 ? value3[0] : value3;
  };
  scale7.copy = function() {
    return band2().domain(domain4()).range(range$1).round(round2).paddingInner(paddingInner2).paddingOuter(paddingOuter2).align(align2);
  };
  return rescale();
}
function pointish(scale7) {
  const copy4 = scale7.copy;
  scale7.padding = scale7.paddingOuter;
  delete scale7.paddingInner;
  scale7.copy = function() {
    return pointish(copy4());
  };
  return scale7;
}
function point6() {
  return pointish(band2().paddingInner(1));
}
var map4 = Array.prototype.map;
function numbers3(_) {
  return map4.call(_, toNumber);
}
var slice3 = Array.prototype.slice;
function scaleBinOrdinal() {
  let domain4 = [], range8 = [];
  function scale7(x5) {
    return x5 == null || x5 !== x5 ? void 0 : range8[(bisect_default2(domain4, x5) - 1) % range8.length];
  }
  scale7.domain = function(_) {
    if (arguments.length) {
      domain4 = numbers3(_);
      return scale7;
    } else {
      return domain4.slice();
    }
  };
  scale7.range = function(_) {
    if (arguments.length) {
      range8 = slice3.call(_);
      return scale7;
    } else {
      return range8.slice();
    }
  };
  scale7.tickFormat = function(count4, specifier) {
    return tickFormat(domain4[0], peek(domain4), count4 == null ? 10 : count4, specifier);
  };
  scale7.copy = function() {
    return scaleBinOrdinal().domain(scale7.domain()).range(scale7.range());
  };
  return scale7;
}
var scales = {};
function create(type3, constructor, metadata2) {
  const ctr = function scale7() {
    const s2 = constructor();
    if (!s2.invertRange) {
      s2.invertRange = s2.invert ? invertRange(s2) : s2.invertExtent ? invertRangeExtent(s2) : void 0;
    }
    s2.type = type3;
    return s2;
  };
  ctr.metadata = toSet(array(metadata2));
  return ctr;
}
function scale(type3, scale7, metadata2) {
  if (arguments.length > 1) {
    scales[type3] = create(type3, scale7, metadata2);
    return this;
  } else {
    return isValidScaleType(type3) ? scales[type3] : void 0;
  }
}
scale(Identity, identity5);
scale(Linear2, linear3, Continuous);
scale(Log, log3, [Continuous, Log]);
scale(Pow, pow3, Continuous);
scale(Sqrt, sqrt2, Continuous);
scale(Symlog, symlog2, Continuous);
scale(Time, time, [Continuous, Temporal]);
scale(UTC, utcTime, [Continuous, Temporal]);
scale(Sequential, sequential, [Continuous, Interpolating]);
scale("".concat(Sequential, "-").concat(Linear2), sequential, [Continuous, Interpolating]);
scale("".concat(Sequential, "-").concat(Log), sequentialLog, [Continuous, Interpolating, Log]);
scale("".concat(Sequential, "-").concat(Pow), sequentialPow, [Continuous, Interpolating]);
scale("".concat(Sequential, "-").concat(Sqrt), sequentialSqrt, [Continuous, Interpolating]);
scale("".concat(Sequential, "-").concat(Symlog), sequentialSymlog, [Continuous, Interpolating]);
scale("".concat(Diverging, "-").concat(Linear2), diverging, [Continuous, Interpolating]);
scale("".concat(Diverging, "-").concat(Log), divergingLog, [Continuous, Interpolating, Log]);
scale("".concat(Diverging, "-").concat(Pow), divergingPow, [Continuous, Interpolating]);
scale("".concat(Diverging, "-").concat(Sqrt), divergingSqrt, [Continuous, Interpolating]);
scale("".concat(Diverging, "-").concat(Symlog), divergingSymlog, [Continuous, Interpolating]);
scale(Quantile2, quantile2, [Discretizing, Quantile2]);
scale(Quantize, quantize, Discretizing);
scale(Threshold, threshold, Discretizing);
scale(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);
scale(Ordinal, ordinal, Discrete);
scale(Band, band2, Discrete);
scale(Point, point6, Discrete);
function isValidScaleType(type3) {
  return has(scales, type3);
}
function hasType(key2, type3) {
  const s2 = scales[key2];
  return s2 && s2.metadata[type3];
}
function isContinuous(key2) {
  return hasType(key2, Continuous);
}
function isDiscrete(key2) {
  return hasType(key2, Discrete);
}
function isDiscretizing(key2) {
  return hasType(key2, Discretizing);
}
function isLogarithmic(key2) {
  return hasType(key2, Log);
}
function isTemporal(key2) {
  return hasType(key2, Temporal);
}
function isInterpolating(key2) {
  return hasType(key2, Interpolating);
}
function isQuantile(key2) {
  return hasType(key2, Quantile2);
}
var scaleProps = ["clamp", "base", "constant", "exponent"];
function interpolateRange(interpolator, range8) {
  const start = range8[0], span2 = peek(range8) - start;
  return function(i) {
    return interpolator(start + i * span2);
  };
}
function interpolateColors(colors2, type3, gamma2) {
  return piecewise(interpolate(type3 || "rgb", gamma2), colors2);
}
function quantizeInterpolator(interpolator, count4) {
  const samples = new Array(count4), n = count4 + 1;
  for (let i = 0; i < count4; )
    samples[i] = interpolator(++i / n);
  return samples;
}
function scaleFraction(scale$12, min6, max6) {
  const delta = max6 - min6;
  let i, t4, s2;
  if (!delta || !Number.isFinite(delta)) {
    return constant(0.5);
  } else {
    i = (t4 = scale$12.type).indexOf("-");
    t4 = i < 0 ? t4 : t4.slice(i + 1);
    s2 = scale(t4)().domain([min6, max6]).range([0, 1]);
    scaleProps.forEach((m3) => scale$12[m3] ? s2[m3](scale$12[m3]()) : 0);
    return s2;
  }
}
function interpolate(type3, gamma2) {
  const interp = src_exports[method(type3)];
  return gamma2 != null && interp && interp.gamma ? interp.gamma(gamma2) : interp;
}
function method(type3) {
  return "interpolate" + type3.toLowerCase().split("-").map((s2) => s2[0].toUpperCase() + s2.slice(1)).join("");
}
var continuous2 = {
  blues: "cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90",
  greens: "d3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429",
  greys: "e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e",
  oranges: "fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303",
  purples: "e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c",
  reds: "fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13",
  blueGreen: "d5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429",
  bluePurple: "ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71",
  greenBlue: "d3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1",
  orangeRed: "fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403",
  purpleBlue: "dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281",
  purpleBlueGreen: "dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353",
  purpleRed: "dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a",
  redPurple: "fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174",
  yellowGreen: "e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034",
  yellowOrangeBrown: "feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204",
  yellowOrangeRed: "fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225",
  blueOrange: "134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07",
  brownBlueGreen: "704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147",
  purpleGreen: "5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29",
  purpleOrange: "4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07",
  redBlue: "8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85",
  redGrey: "8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434",
  yellowGreenBlue: "eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185",
  redYellowBlue: "a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695",
  redYellowGreen: "a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837",
  pinkYellowGreen: "8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419",
  spectral: "9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2",
  viridis: "440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725",
  magma: "0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf",
  inferno: "0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4",
  plasma: "0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921",
  cividis: "00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647",
  rainbow: "6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa",
  sinebow: "ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040",
  turbo: "23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00",
  browns: "eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632",
  tealBlues: "bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985",
  teals: "bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667",
  warmGreys: "dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e",
  goldGreen: "f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36",
  goldOrange: "f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26",
  goldRed: "f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e",
  lightGreyRed: "efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b",
  lightGreyTeal: "e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc",
  lightMulti: "e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c",
  lightOrange: "f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b",
  lightTealBlue: "e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988",
  darkBlue: "3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff",
  darkGold: "3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff",
  darkGreen: "3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa",
  darkMulti: "3737371f5287197d8c29a86995ce3fffe800ffffff",
  darkRed: "3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c"
};
var discrete = {
  category10: "1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf",
  category20: "1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5",
  category20b: "393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6",
  category20c: "3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9",
  tableau10: "4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac",
  tableau20: "4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5",
  accent: "7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666",
  dark2: "1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666",
  paired: "a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928",
  pastel1: "fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2",
  pastel2: "b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc",
  set1: "e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999",
  set2: "66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3",
  set3: "8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"
};
function colors(palette) {
  const n = palette.length / 6 | 0, c3 = new Array(n);
  for (let i = 0; i < n; ) {
    c3[i] = "#" + palette.slice(i * 6, ++i * 6);
  }
  return c3;
}
function apply(_, f) {
  for (const k3 in _)
    scheme(k3, f(_[k3]));
}
var schemes = {};
apply(discrete, colors);
apply(continuous2, (_) => interpolateColors(colors(_)));
function scheme(name4, scheme3) {
  name4 = name4 && name4.toLowerCase();
  if (arguments.length > 1) {
    schemes[name4] = scheme3;
    return this;
  } else {
    return schemes[name4];
  }
}
var SymbolLegend = "symbol";
var DiscreteLegend = "discrete";
var GradientLegend = "gradient";
var defaultFormatter = (value3) => isArray(value3) ? value3.map((v2) => String(v2)) : String(value3);
var ascending3 = (a4, b2) => a4[1] - b2[1];
var descending2 = (a4, b2) => b2[1] - a4[1];
function tickCount(scale7, count4, minStep) {
  let step;
  if (isNumber(count4)) {
    if (scale7.bins) {
      count4 = Math.max(count4, scale7.bins.length);
    }
    if (minStep != null) {
      count4 = Math.min(count4, Math.floor(span(scale7.domain()) / minStep || 1));
    }
  }
  if (isObject(count4)) {
    step = count4.step;
    count4 = count4.interval;
  }
  if (isString(count4)) {
    count4 = scale7.type === Time ? timeInterval(count4) : scale7.type == UTC ? utcInterval(count4) : error("Only time and utc scales accept interval strings.");
    if (step)
      count4 = count4.every(step);
  }
  return count4;
}
function validTicks(scale7, ticks3, count4) {
  let range8 = scale7.range(), lo = range8[0], hi = peek(range8), cmp2 = ascending3;
  if (lo > hi) {
    range8 = hi;
    hi = lo;
    lo = range8;
    cmp2 = descending2;
  }
  lo = Math.floor(lo);
  hi = Math.ceil(hi);
  ticks3 = ticks3.map((v2) => [v2, scale7(v2)]).filter((_) => lo <= _[1] && _[1] <= hi).sort(cmp2).map((_) => _[0]);
  if (count4 > 0 && ticks3.length > 1) {
    const endpoints = [ticks3[0], peek(ticks3)];
    while (ticks3.length > count4 && ticks3.length >= 3) {
      ticks3 = ticks3.filter((_, i) => !(i % 2));
    }
    if (ticks3.length < 3) {
      ticks3 = endpoints;
    }
  }
  return ticks3;
}
function tickValues(scale7, count4) {
  return scale7.bins ? validTicks(scale7, scale7.bins) : scale7.ticks ? scale7.ticks(count4) : scale7.domain();
}
function tickFormat2(locale4, scale7, count4, specifier, formatType, noSkip) {
  const type3 = scale7.type;
  let format5 = defaultFormatter;
  if (type3 === Time || formatType === Time) {
    format5 = locale4.timeFormat(specifier);
  } else if (type3 === UTC || formatType === UTC) {
    format5 = locale4.utcFormat(specifier);
  } else if (isLogarithmic(type3)) {
    const varfmt = locale4.formatFloat(specifier);
    if (noSkip || scale7.bins) {
      format5 = varfmt;
    } else {
      const test2 = tickLog(scale7, count4, false);
      format5 = (_) => test2(_) ? varfmt(_) : "";
    }
  } else if (scale7.tickFormat) {
    const d = scale7.domain();
    format5 = locale4.formatSpan(d[0], d[d.length - 1], count4, specifier);
  } else if (specifier) {
    format5 = locale4.format(specifier);
  }
  return format5;
}
function tickLog(scale7, count4, values5) {
  const ticks3 = tickValues(scale7, count4), base2 = scale7.base(), logb = Math.log(base2), k3 = Math.max(1, base2 * count4 / ticks3.length);
  const test2 = (d) => {
    let i = d / Math.pow(base2, Math.round(Math.log(d) / logb));
    if (i * base2 < base2 - 0.5)
      i *= base2;
    return i <= k3;
  };
  return values5 ? ticks3.filter(test2) : test2;
}
var symbols = {
  [Quantile2]: "quantiles",
  [Quantize]: "thresholds",
  [Threshold]: "domain"
};
var formats2 = {
  [Quantile2]: "quantiles",
  [Quantize]: "domain"
};
function labelValues(scale7, count4) {
  return scale7.bins ? binValues(scale7.bins) : scale7.type === Log ? tickLog(scale7, count4, true) : symbols[scale7.type] ? thresholdValues(scale7[symbols[scale7.type]]()) : tickValues(scale7, count4);
}
function thresholdFormat(locale4, scale7, specifier) {
  const _ = scale7[formats2[scale7.type]](), n = _.length;
  let d = n > 1 ? _[1] - _[0] : _[0], i;
  for (i = 1; i < n; ++i) {
    d = Math.min(d, _[i] - _[i - 1]);
  }
  return locale4.formatSpan(0, d, 3 * 10, specifier);
}
function thresholdValues(thresholds) {
  const values5 = [-Infinity].concat(thresholds);
  values5.max = Infinity;
  return values5;
}
function binValues(bins2) {
  const values5 = bins2.slice(0, -1);
  values5.max = peek(bins2);
  return values5;
}
var isDiscreteRange = (scale7) => symbols[scale7.type] || scale7.bins;
function labelFormat(locale4, scale7, count4, type3, specifier, formatType, noSkip) {
  const format5 = formats2[scale7.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale4, scale7, specifier) : tickFormat2(locale4, scale7, count4, specifier, formatType, noSkip);
  return type3 === SymbolLegend && isDiscreteRange(scale7) ? formatRange(format5) : type3 === DiscreteLegend ? formatDiscrete(format5) : formatPoint(format5);
}
var formatRange = (format5) => (value3, index5, array6) => {
  const limit = get2(array6[index5 + 1], get2(array6.max, Infinity)), lo = formatValue(value3, format5), hi = formatValue(limit, format5);
  return lo && hi ? lo + " \u2013 " + hi : hi ? "< " + hi : "\u2265 " + lo;
};
var get2 = (value3, dflt) => value3 != null ? value3 : dflt;
var formatDiscrete = (format5) => (value3, index5) => index5 ? format5(value3) : null;
var formatPoint = (format5) => (value3) => format5(value3);
var formatValue = (value3, format5) => Number.isFinite(value3) ? format5(value3) : null;
function labelFraction(scale7) {
  const domain4 = scale7.domain(), count4 = domain4.length - 1;
  let lo = +domain4[0], hi = +peek(domain4), span2 = hi - lo;
  if (scale7.type === Threshold) {
    const adjust = count4 ? span2 / count4 : 0.1;
    lo -= adjust;
    hi += adjust;
    span2 = hi - lo;
  }
  return (value3) => (value3 - lo) / span2;
}
function format3(locale4, scale7, specifier, formatType) {
  const type3 = formatType || scale7.type;
  if (isString(specifier) && isTemporal(type3)) {
    specifier = specifier.replace(/%a/g, "%A").replace(/%b/g, "%B");
  }
  return !specifier && type3 === Time ? locale4.timeFormat("%A, %d %B %Y, %X") : !specifier && type3 === UTC ? locale4.utcFormat("%A, %d %B %Y, %X UTC") : labelFormat(locale4, scale7, 5, null, specifier, formatType, true);
}
function domainCaption(locale4, scale7, opt) {
  opt = opt || {};
  const max6 = Math.max(3, opt.maxlen || 7), fmt = format3(locale4, scale7, opt.format, opt.formatType);
  if (isDiscretizing(scale7.type)) {
    const v2 = labelValues(scale7).slice(1).map(fmt), n = v2.length;
    return "".concat(n, " boundar").concat(n === 1 ? "y" : "ies", ": ").concat(v2.join(", "));
  } else if (isDiscrete(scale7.type)) {
    const d = scale7.domain(), n = d.length, v2 = n > max6 ? d.slice(0, max6 - 2).map(fmt).join(", ") + ", ending with " + d.slice(-1).map(fmt) : d.map(fmt).join(", ");
    return "".concat(n, " value").concat(n === 1 ? "" : "s", ": ").concat(v2);
  } else {
    const d = scale7.domain();
    return "values from ".concat(fmt(d[0]), " to ").concat(fmt(peek(d)));
  }
}

// node_modules/vega-scenegraph/build/vega-scenegraph.module.js
var gradient_id = 0;
function resetSVGGradientId() {
  gradient_id = 0;
}
var patternPrefix = "p_";
function isGradient(value3) {
  return value3 && value3.gradient;
}
function gradientRef(g, defs, base2) {
  const type3 = g.gradient;
  let id2 = g.id, prefix = type3 === "radial" ? patternPrefix : "";
  if (!id2) {
    id2 = g.id = "gradient_" + gradient_id++;
    if (type3 === "radial") {
      g.x1 = get3(g.x1, 0.5);
      g.y1 = get3(g.y1, 0.5);
      g.r1 = get3(g.r1, 0);
      g.x2 = get3(g.x2, 0.5);
      g.y2 = get3(g.y2, 0.5);
      g.r2 = get3(g.r2, 0.5);
      prefix = patternPrefix;
    } else {
      g.x1 = get3(g.x1, 0);
      g.y1 = get3(g.y1, 0);
      g.x2 = get3(g.x2, 1);
      g.y2 = get3(g.y2, 0);
    }
  }
  defs[id2] = g;
  return "url(" + (base2 || "") + "#" + prefix + id2 + ")";
}
function get3(val, def2) {
  return val != null ? val : def2;
}
function Gradient(p02, p1) {
  var stops = [], gradient4;
  return gradient4 = {
    gradient: "linear",
    x1: p02 ? p02[0] : 0,
    y1: p02 ? p02[1] : 0,
    x2: p1 ? p1[0] : 1,
    y2: p1 ? p1[1] : 0,
    stops,
    stop: function(offset4, color5) {
      stops.push({
        offset: offset4,
        color: color5
      });
      return gradient4;
    }
  };
}
var lookup = {
  "basis": {
    curve: basis_default
  },
  "basis-closed": {
    curve: basisClosed_default
  },
  "basis-open": {
    curve: basisOpen_default
  },
  "bundle": {
    curve: bundle_default,
    tension: "beta",
    value: 0.85
  },
  "cardinal": {
    curve: cardinal_default,
    tension: "tension",
    value: 0
  },
  "cardinal-open": {
    curve: cardinalOpen_default,
    tension: "tension",
    value: 0
  },
  "cardinal-closed": {
    curve: cardinalClosed_default,
    tension: "tension",
    value: 0
  },
  "catmull-rom": {
    curve: catmullRom_default,
    tension: "alpha",
    value: 0.5
  },
  "catmull-rom-closed": {
    curve: catmullRomClosed_default,
    tension: "alpha",
    value: 0.5
  },
  "catmull-rom-open": {
    curve: catmullRomOpen_default,
    tension: "alpha",
    value: 0.5
  },
  "linear": {
    curve: linear_default
  },
  "linear-closed": {
    curve: linearClosed_default
  },
  "monotone": {
    horizontal: monotoneY,
    vertical: monotoneX
  },
  "natural": {
    curve: natural_default
  },
  "step": {
    curve: step_default
  },
  "step-after": {
    curve: stepAfter
  },
  "step-before": {
    curve: stepBefore
  }
};
function curves(type3, orientation, tension) {
  var entry2 = has(lookup, type3) && lookup[type3], curve2 = null;
  if (entry2) {
    curve2 = entry2.curve || entry2[orientation || "vertical"];
    if (entry2.tension && tension != null) {
      curve2 = curve2[entry2.tension](tension);
    }
  }
  return curve2;
}
var paramCounts = {
  m: 2,
  l: 2,
  h: 1,
  v: 1,
  z: 0,
  c: 6,
  s: 4,
  q: 4,
  t: 2,
  a: 7
};
var commandPattern = /[mlhvzcsqta]([^mlhvzcsqta]+|$)/gi;
var numberPattern = /^[+-]?(([0-9]*\.[0-9]+)|([0-9]+\.)|([0-9]+))([eE][+-]?[0-9]+)?/;
var spacePattern = /^((\s+,?\s*)|(,\s*))/;
var flagPattern = /^[01]/;
function parse4(path3) {
  const commands = [];
  const matches = path3.match(commandPattern) || [];
  matches.forEach((str) => {
    let cmd = str[0];
    const type3 = cmd.toLowerCase();
    const paramCount = paramCounts[type3];
    const params2 = parseParams(type3, paramCount, str.slice(1).trim());
    const count4 = params2.length;
    if (count4 < paramCount || count4 && count4 % paramCount !== 0) {
      throw Error("Invalid SVG path, incorrect parameter count");
    }
    commands.push([cmd, ...params2.slice(0, paramCount)]);
    if (count4 === paramCount) {
      return;
    }
    if (type3 === "m") {
      cmd = cmd === "M" ? "L" : "l";
    }
    for (let i = paramCount; i < count4; i += paramCount) {
      commands.push([cmd, ...params2.slice(i, i + paramCount)]);
    }
  });
  return commands;
}
function parseParams(type3, paramCount, segment) {
  const params2 = [];
  for (let index5 = 0; paramCount && index5 < segment.length; ) {
    for (let i = 0; i < paramCount; ++i) {
      const pattern = type3 === "a" && (i === 3 || i === 4) ? flagPattern : numberPattern;
      const match2 = segment.slice(index5).match(pattern);
      if (match2 === null) {
        throw Error("Invalid SVG path, incorrect parameter type");
      }
      index5 += match2[0].length;
      params2.push(+match2[0]);
      const ws = segment.slice(index5).match(spacePattern);
      if (ws !== null) {
        index5 += ws[0].length;
      }
    }
  }
  return params2;
}
var DegToRad = Math.PI / 180;
var Epsilon = 1e-14;
var HalfPi = Math.PI / 2;
var Tau = Math.PI * 2;
var HalfSqrt3 = Math.sqrt(3) / 2;
var segmentCache = {};
var bezierCache = {};
var join = [].join;
function segments(x5, y5, rx, ry, large, sweep, rotateX, ox, oy) {
  const key2 = join.call(arguments);
  if (segmentCache[key2]) {
    return segmentCache[key2];
  }
  const th = rotateX * DegToRad;
  const sin_th = Math.sin(th);
  const cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  const px2 = cos_th * (ox - x5) * 0.5 + sin_th * (oy - y5) * 0.5;
  const py2 = cos_th * (oy - y5) * 0.5 - sin_th * (ox - x5) * 0.5;
  let pl = px2 * px2 / (rx * rx) + py2 * py2 / (ry * ry);
  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }
  const a00 = cos_th / rx;
  const a01 = sin_th / rx;
  const a10 = -sin_th / ry;
  const a11 = cos_th / ry;
  const x07 = a00 * ox + a01 * oy;
  const y07 = a10 * ox + a11 * oy;
  const x13 = a00 * x5 + a01 * y5;
  const y13 = a10 * x5 + a11 * y5;
  const d = (x13 - x07) * (x13 - x07) + (y13 - y07) * (y13 - y07);
  let sfactor_sq = 1 / d - 0.25;
  if (sfactor_sq < 0)
    sfactor_sq = 0;
  let sfactor = Math.sqrt(sfactor_sq);
  if (sweep == large)
    sfactor = -sfactor;
  const xc = 0.5 * (x07 + x13) - sfactor * (y13 - y07);
  const yc = 0.5 * (y07 + y13) + sfactor * (x13 - x07);
  const th0 = Math.atan2(y07 - yc, x07 - xc);
  const th1 = Math.atan2(y13 - yc, x13 - xc);
  let th_arc = th1 - th0;
  if (th_arc < 0 && sweep === 1) {
    th_arc += Tau;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= Tau;
  }
  const segs = Math.ceil(Math.abs(th_arc / (HalfPi + 1e-3)));
  const result = [];
  for (let i = 0; i < segs; ++i) {
    const th2 = th0 + i * th_arc / segs;
    const th3 = th0 + (i + 1) * th_arc / segs;
    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }
  return segmentCache[key2] = result;
}
function bezier(params2) {
  const key2 = join.call(params2);
  if (bezierCache[key2]) {
    return bezierCache[key2];
  }
  var cx = params2[0], cy = params2[1], th0 = params2[2], th1 = params2[3], rx = params2[4], ry = params2[5], sin_th = params2[6], cos_th = params2[7];
  const a00 = cos_th * rx;
  const a01 = -sin_th * ry;
  const a10 = sin_th * rx;
  const a11 = cos_th * ry;
  const cos_th0 = Math.cos(th0);
  const sin_th0 = Math.sin(th0);
  const cos_th1 = Math.cos(th1);
  const sin_th1 = Math.sin(th1);
  const th_half = 0.5 * (th1 - th0);
  const sin_th_h2 = Math.sin(th_half * 0.5);
  const t4 = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
  const x13 = cx + cos_th0 - t4 * sin_th0;
  const y13 = cy + sin_th0 + t4 * cos_th0;
  const x32 = cx + cos_th1;
  const y32 = cy + sin_th1;
  const x22 = x32 + t4 * sin_th1;
  const y22 = y32 - t4 * cos_th1;
  return bezierCache[key2] = [a00 * x13 + a01 * y13, a10 * x13 + a11 * y13, a00 * x22 + a01 * y22, a10 * x22 + a11 * y22, a00 * x32 + a01 * y32, a10 * x32 + a11 * y32];
}
var temp = ["l", 0, 0, 0, 0, 0, 0, 0];
function scale$1(current2, sX, sY) {
  const c3 = temp[0] = current2[0];
  if (c3 === "a" || c3 === "A") {
    temp[1] = sX * current2[1];
    temp[2] = sY * current2[2];
    temp[3] = current2[3];
    temp[4] = current2[4];
    temp[5] = current2[5];
    temp[6] = sX * current2[6];
    temp[7] = sY * current2[7];
  } else if (c3 === "h" || c3 === "H") {
    temp[1] = sX * current2[1];
  } else if (c3 === "v" || c3 === "V") {
    temp[1] = sY * current2[1];
  } else {
    for (var i = 1, n = current2.length; i < n; ++i) {
      temp[i] = (i % 2 == 1 ? sX : sY) * current2[i];
    }
  }
  return temp;
}
function pathRender(context3, path3, l, t4, sX, sY) {
  var current2, previous = null, x5 = 0, y5 = 0, controlX = 0, controlY = 0, tempX, tempY, tempControlX, tempControlY, anchorX = 0, anchorY = 0;
  if (l == null)
    l = 0;
  if (t4 == null)
    t4 = 0;
  if (sX == null)
    sX = 1;
  if (sY == null)
    sY = sX;
  if (context3.beginPath)
    context3.beginPath();
  for (var i = 0, len = path3.length; i < len; ++i) {
    current2 = path3[i];
    if (sX !== 1 || sY !== 1) {
      current2 = scale$1(current2, sX, sY);
    }
    switch (current2[0]) {
      case "l":
        x5 += current2[1];
        y5 += current2[2];
        context3.lineTo(x5 + l, y5 + t4);
        break;
      case "L":
        x5 = current2[1];
        y5 = current2[2];
        context3.lineTo(x5 + l, y5 + t4);
        break;
      case "h":
        x5 += current2[1];
        context3.lineTo(x5 + l, y5 + t4);
        break;
      case "H":
        x5 = current2[1];
        context3.lineTo(x5 + l, y5 + t4);
        break;
      case "v":
        y5 += current2[1];
        context3.lineTo(x5 + l, y5 + t4);
        break;
      case "V":
        y5 = current2[1];
        context3.lineTo(x5 + l, y5 + t4);
        break;
      case "m":
        x5 += current2[1];
        y5 += current2[2];
        anchorX = x5;
        anchorY = y5;
        context3.moveTo(x5 + l, y5 + t4);
        break;
      case "M":
        x5 = current2[1];
        y5 = current2[2];
        anchorX = x5;
        anchorY = y5;
        context3.moveTo(x5 + l, y5 + t4);
        break;
      case "c":
        tempX = x5 + current2[5];
        tempY = y5 + current2[6];
        controlX = x5 + current2[3];
        controlY = y5 + current2[4];
        context3.bezierCurveTo(
          x5 + current2[1] + l,
          y5 + current2[2] + t4,
          controlX + l,
          controlY + t4,
          tempX + l,
          tempY + t4
        );
        x5 = tempX;
        y5 = tempY;
        break;
      case "C":
        x5 = current2[5];
        y5 = current2[6];
        controlX = current2[3];
        controlY = current2[4];
        context3.bezierCurveTo(current2[1] + l, current2[2] + t4, controlX + l, controlY + t4, x5 + l, y5 + t4);
        break;
      case "s":
        tempX = x5 + current2[3];
        tempY = y5 + current2[4];
        controlX = 2 * x5 - controlX;
        controlY = 2 * y5 - controlY;
        context3.bezierCurveTo(controlX + l, controlY + t4, x5 + current2[1] + l, y5 + current2[2] + t4, tempX + l, tempY + t4);
        controlX = x5 + current2[1];
        controlY = y5 + current2[2];
        x5 = tempX;
        y5 = tempY;
        break;
      case "S":
        tempX = current2[3];
        tempY = current2[4];
        controlX = 2 * x5 - controlX;
        controlY = 2 * y5 - controlY;
        context3.bezierCurveTo(controlX + l, controlY + t4, current2[1] + l, current2[2] + t4, tempX + l, tempY + t4);
        x5 = tempX;
        y5 = tempY;
        controlX = current2[1];
        controlY = current2[2];
        break;
      case "q":
        tempX = x5 + current2[3];
        tempY = y5 + current2[4];
        controlX = x5 + current2[1];
        controlY = y5 + current2[2];
        context3.quadraticCurveTo(controlX + l, controlY + t4, tempX + l, tempY + t4);
        x5 = tempX;
        y5 = tempY;
        break;
      case "Q":
        tempX = current2[3];
        tempY = current2[4];
        context3.quadraticCurveTo(current2[1] + l, current2[2] + t4, tempX + l, tempY + t4);
        x5 = tempX;
        y5 = tempY;
        controlX = current2[1];
        controlY = current2[2];
        break;
      case "t":
        tempX = x5 + current2[1];
        tempY = y5 + current2[2];
        if (previous[0].match(/[QqTt]/) === null) {
          controlX = x5;
          controlY = y5;
        } else if (previous[0] === "t") {
          controlX = 2 * x5 - tempControlX;
          controlY = 2 * y5 - tempControlY;
        } else if (previous[0] === "q") {
          controlX = 2 * x5 - controlX;
          controlY = 2 * y5 - controlY;
        }
        tempControlX = controlX;
        tempControlY = controlY;
        context3.quadraticCurveTo(controlX + l, controlY + t4, tempX + l, tempY + t4);
        x5 = tempX;
        y5 = tempY;
        controlX = x5 + current2[1];
        controlY = y5 + current2[2];
        break;
      case "T":
        tempX = current2[1];
        tempY = current2[2];
        controlX = 2 * x5 - controlX;
        controlY = 2 * y5 - controlY;
        context3.quadraticCurveTo(controlX + l, controlY + t4, tempX + l, tempY + t4);
        x5 = tempX;
        y5 = tempY;
        break;
      case "a":
        drawArc(context3, x5 + l, y5 + t4, [current2[1], current2[2], current2[3], current2[4], current2[5], current2[6] + x5 + l, current2[7] + y5 + t4]);
        x5 += current2[6];
        y5 += current2[7];
        break;
      case "A":
        drawArc(context3, x5 + l, y5 + t4, [current2[1], current2[2], current2[3], current2[4], current2[5], current2[6] + l, current2[7] + t4]);
        x5 = current2[6];
        y5 = current2[7];
        break;
      case "z":
      case "Z":
        x5 = anchorX;
        y5 = anchorY;
        context3.closePath();
        break;
    }
    previous = current2;
  }
}
function drawArc(context3, x5, y5, coords) {
  const seg = segments(
    coords[5],
    coords[6],
    coords[0],
    coords[1],
    coords[3],
    coords[4],
    coords[2],
    x5,
    y5
  );
  for (let i = 0; i < seg.length; ++i) {
    const bez = bezier(seg[i]);
    context3.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
  }
}
var Tan30 = 0.5773502691896257;
var builtins = {
  "circle": {
    draw: function(context3, size) {
      const r = Math.sqrt(size) / 2;
      context3.moveTo(r, 0);
      context3.arc(0, 0, r, 0, Tau);
    }
  },
  "cross": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, s2 = r / 2.5;
      context3.moveTo(-r, -s2);
      context3.lineTo(-r, s2);
      context3.lineTo(-s2, s2);
      context3.lineTo(-s2, r);
      context3.lineTo(s2, r);
      context3.lineTo(s2, s2);
      context3.lineTo(r, s2);
      context3.lineTo(r, -s2);
      context3.lineTo(s2, -s2);
      context3.lineTo(s2, -r);
      context3.lineTo(-s2, -r);
      context3.lineTo(-s2, -s2);
      context3.closePath();
    }
  },
  "diamond": {
    draw: function(context3, size) {
      const r = Math.sqrt(size) / 2;
      context3.moveTo(-r, 0);
      context3.lineTo(0, -r);
      context3.lineTo(r, 0);
      context3.lineTo(0, r);
      context3.closePath();
    }
  },
  "square": {
    draw: function(context3, size) {
      var w4 = Math.sqrt(size), x5 = -w4 / 2;
      context3.rect(x5, x5, w4, w4);
    }
  },
  "arrow": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, s2 = r / 7, t4 = r / 2.5, v2 = r / 8;
      context3.moveTo(-s2, r);
      context3.lineTo(s2, r);
      context3.lineTo(s2, -v2);
      context3.lineTo(t4, -v2);
      context3.lineTo(0, -r);
      context3.lineTo(-t4, -v2);
      context3.lineTo(-s2, -v2);
      context3.closePath();
    }
  },
  "wedge": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r, o = h2 - r * Tan30, b2 = r / 4;
      context3.moveTo(0, -h2 - o);
      context3.lineTo(-b2, h2 - o);
      context3.lineTo(b2, h2 - o);
      context3.closePath();
    }
  },
  "triangle": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r, o = h2 - r * Tan30;
      context3.moveTo(0, -h2 - o);
      context3.lineTo(-r, h2 - o);
      context3.lineTo(r, h2 - o);
      context3.closePath();
    }
  },
  "triangle-up": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
      context3.moveTo(0, -h2);
      context3.lineTo(-r, h2);
      context3.lineTo(r, h2);
      context3.closePath();
    }
  },
  "triangle-down": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
      context3.moveTo(0, h2);
      context3.lineTo(-r, -h2);
      context3.lineTo(r, -h2);
      context3.closePath();
    }
  },
  "triangle-right": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
      context3.moveTo(h2, 0);
      context3.lineTo(-h2, -r);
      context3.lineTo(-h2, r);
      context3.closePath();
    }
  },
  "triangle-left": {
    draw: function(context3, size) {
      var r = Math.sqrt(size) / 2, h2 = HalfSqrt3 * r;
      context3.moveTo(-h2, 0);
      context3.lineTo(h2, -r);
      context3.lineTo(h2, r);
      context3.closePath();
    }
  },
  "stroke": {
    draw: function(context3, size) {
      const r = Math.sqrt(size) / 2;
      context3.moveTo(-r, 0);
      context3.lineTo(r, 0);
    }
  }
};
function symbols2(_) {
  return has(builtins, _) ? builtins[_] : customSymbol(_);
}
var custom8 = {};
function customSymbol(path3) {
  if (!has(custom8, path3)) {
    const parsed = parse4(path3);
    custom8[path3] = {
      draw: function(context3, size) {
        pathRender(context3, parsed, 0, 0, Math.sqrt(size) / 2);
      }
    };
  }
  return custom8[path3];
}
var C2 = 0.448084975506;
function rectangleX(d) {
  return d.x;
}
function rectangleY(d) {
  return d.y;
}
function rectangleWidth(d) {
  return d.width;
}
function rectangleHeight(d) {
  return d.height;
}
function number4(_) {
  return typeof _ === "function" ? _ : () => +_;
}
function clamp(value3, min6, max6) {
  return Math.max(min6, Math.min(value3, max6));
}
function vg_rect() {
  var x5 = rectangleX, y5 = rectangleY, width2 = rectangleWidth, height2 = rectangleHeight, crTL = number4(0), crTR = crTL, crBL = crTL, crBR = crTL, context3 = null;
  function rectangle2(_, x07, y07) {
    var buffer, x13 = x07 != null ? x07 : +x5.call(this, _), y13 = y07 != null ? y07 : +y5.call(this, _), w4 = +width2.call(this, _), h2 = +height2.call(this, _), s2 = Math.min(w4, h2) / 2, tl2 = clamp(+crTL.call(this, _), 0, s2), tr2 = clamp(+crTR.call(this, _), 0, s2), bl2 = clamp(+crBL.call(this, _), 0, s2), br2 = clamp(+crBR.call(this, _), 0, s2);
    if (!context3)
      context3 = buffer = path_default();
    if (tl2 <= 0 && tr2 <= 0 && bl2 <= 0 && br2 <= 0) {
      context3.rect(x13, y13, w4, h2);
    } else {
      var x22 = x13 + w4, y22 = y13 + h2;
      context3.moveTo(x13 + tl2, y13);
      context3.lineTo(x22 - tr2, y13);
      context3.bezierCurveTo(x22 - C2 * tr2, y13, x22, y13 + C2 * tr2, x22, y13 + tr2);
      context3.lineTo(x22, y22 - br2);
      context3.bezierCurveTo(x22, y22 - C2 * br2, x22 - C2 * br2, y22, x22 - br2, y22);
      context3.lineTo(x13 + bl2, y22);
      context3.bezierCurveTo(x13 + C2 * bl2, y22, x13, y22 - C2 * bl2, x13, y22 - bl2);
      context3.lineTo(x13, y13 + tl2);
      context3.bezierCurveTo(x13, y13 + C2 * tl2, x13 + C2 * tl2, y13, x13 + tl2, y13);
      context3.closePath();
    }
    if (buffer) {
      context3 = null;
      return buffer + "" || null;
    }
  }
  rectangle2.x = function(_) {
    if (arguments.length) {
      x5 = number4(_);
      return rectangle2;
    } else {
      return x5;
    }
  };
  rectangle2.y = function(_) {
    if (arguments.length) {
      y5 = number4(_);
      return rectangle2;
    } else {
      return y5;
    }
  };
  rectangle2.width = function(_) {
    if (arguments.length) {
      width2 = number4(_);
      return rectangle2;
    } else {
      return width2;
    }
  };
  rectangle2.height = function(_) {
    if (arguments.length) {
      height2 = number4(_);
      return rectangle2;
    } else {
      return height2;
    }
  };
  rectangle2.cornerRadius = function(tl2, tr2, br2, bl2) {
    if (arguments.length) {
      crTL = number4(tl2);
      crTR = tr2 != null ? number4(tr2) : crTL;
      crBR = br2 != null ? number4(br2) : crTL;
      crBL = bl2 != null ? number4(bl2) : crTR;
      return rectangle2;
    } else {
      return crTL;
    }
  };
  rectangle2.context = function(_) {
    if (arguments.length) {
      context3 = _ == null ? null : _;
      return rectangle2;
    } else {
      return context3;
    }
  };
  return rectangle2;
}
function vg_trail() {
  var x5, y5, size, defined2, context3 = null, ready, x13, y13, r1;
  function point10(x22, y22, w22) {
    const r2 = w22 / 2;
    if (ready) {
      var ux = y13 - y22, uy = x22 - x13;
      if (ux || uy) {
        var ud = Math.sqrt(ux * ux + uy * uy), rx = (ux /= ud) * r1, ry = (uy /= ud) * r1, t4 = Math.atan2(uy, ux);
        context3.moveTo(x13 - rx, y13 - ry);
        context3.lineTo(x22 - ux * r2, y22 - uy * r2);
        context3.arc(x22, y22, r2, t4 - Math.PI, t4);
        context3.lineTo(x13 + rx, y13 + ry);
        context3.arc(x13, y13, r1, t4, t4 + Math.PI);
      } else {
        context3.arc(x22, y22, r2, 0, Tau);
      }
      context3.closePath();
    } else {
      ready = 1;
    }
    x13 = x22;
    y13 = y22;
    r1 = r2;
  }
  function trail3(data3) {
    var i, n = data3.length, d, defined0 = false, buffer;
    if (context3 == null)
      context3 = buffer = path_default();
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined2(d = data3[i], i, data3)) === defined0) {
        if (defined0 = !defined0)
          ready = 0;
      }
      if (defined0)
        point10(+x5(d, i, data3), +y5(d, i, data3), +size(d, i, data3));
    }
    if (buffer) {
      context3 = null;
      return buffer + "" || null;
    }
  }
  trail3.x = function(_) {
    if (arguments.length) {
      x5 = _;
      return trail3;
    } else {
      return x5;
    }
  };
  trail3.y = function(_) {
    if (arguments.length) {
      y5 = _;
      return trail3;
    } else {
      return y5;
    }
  };
  trail3.size = function(_) {
    if (arguments.length) {
      size = _;
      return trail3;
    } else {
      return size;
    }
  };
  trail3.defined = function(_) {
    if (arguments.length) {
      defined2 = _;
      return trail3;
    } else {
      return defined2;
    }
  };
  trail3.context = function(_) {
    if (arguments.length) {
      if (_ == null) {
        context3 = null;
      } else {
        context3 = _;
      }
      return trail3;
    } else {
      return context3;
    }
  };
  return trail3;
}
function value$1(a4, b2) {
  return a4 != null ? a4 : b2;
}
var x2 = (item) => item.x || 0;
var y2 = (item) => item.y || 0;
var w = (item) => item.width || 0;
var h = (item) => item.height || 0;
var xw = (item) => (item.x || 0) + (item.width || 0);
var yh = (item) => (item.y || 0) + (item.height || 0);
var sa = (item) => item.startAngle || 0;
var ea = (item) => item.endAngle || 0;
var pa = (item) => item.padAngle || 0;
var ir = (item) => item.innerRadius || 0;
var or = (item) => item.outerRadius || 0;
var cr = (item) => item.cornerRadius || 0;
var tl = (item) => value$1(item.cornerRadiusTopLeft, item.cornerRadius) || 0;
var tr = (item) => value$1(item.cornerRadiusTopRight, item.cornerRadius) || 0;
var br = (item) => value$1(item.cornerRadiusBottomRight, item.cornerRadius) || 0;
var bl = (item) => value$1(item.cornerRadiusBottomLeft, item.cornerRadius) || 0;
var sz = (item) => value$1(item.size, 64);
var ts = (item) => item.size || 1;
var def = (item) => !(item.defined === false);
var type = (item) => symbols2(item.shape || "circle");
var arcShape = arc_default().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr);
var areavShape = area_default().x(x2).y1(y2).y0(yh).defined(def);
var areahShape = area_default().y(y2).x1(x2).x0(xw).defined(def);
var lineShape = line_default().x(x2).y(y2).defined(def);
var rectShape = vg_rect().x(x2).y(y2).width(w).height(h).cornerRadius(tl, tr, br, bl);
var symbolShape = Symbol2().type(type).size(sz);
var trailShape = vg_trail().x(x2).y(y2).defined(def).size(ts);
function hasCornerRadius(item) {
  return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;
}
function arc$1(context3, item) {
  return arcShape.context(context3)(item);
}
function area$1(context3, items) {
  const item = items[0], interp = item.interpolate || "linear";
  return (item.orient === "horizontal" ? areahShape : areavShape).curve(curves(interp, item.orient, item.tension)).context(context3)(items);
}
function line$1(context3, items) {
  const item = items[0], interp = item.interpolate || "linear";
  return lineShape.curve(curves(interp, item.orient, item.tension)).context(context3)(items);
}
function rectangle(context3, item, x5, y5) {
  return rectShape.context(context3)(item, x5, y5);
}
function shape$1(context3, item) {
  return (item.mark.shape || item.shape).context(context3)(item);
}
function symbol$1(context3, item) {
  return symbolShape.context(context3)(item);
}
function trail$1(context3, items) {
  return trailShape.context(context3)(items);
}
var clip_id = 1;
function resetSVGClipId() {
  clip_id = 1;
}
function clip$1(renderer, item, size) {
  var clip3 = item.clip, defs = renderer._defs, id2 = item.clip_id || (item.clip_id = "clip" + clip_id++), c3 = defs.clipping[id2] || (defs.clipping[id2] = {
    id: id2
  });
  if (isFunction(clip3)) {
    c3.path = clip3(null);
  } else if (hasCornerRadius(size)) {
    c3.path = rectangle(null, size, 0, 0);
  } else {
    c3.width = size.width || 0;
    c3.height = size.height || 0;
  }
  return "url(#" + id2 + ")";
}
function Bounds(b2) {
  this.clear();
  if (b2)
    this.union(b2);
}
Bounds.prototype = {
  clone() {
    return new Bounds(this);
  },
  clear() {
    this.x1 = +Number.MAX_VALUE;
    this.y1 = +Number.MAX_VALUE;
    this.x2 = -Number.MAX_VALUE;
    this.y2 = -Number.MAX_VALUE;
    return this;
  },
  empty() {
    return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
  },
  equals(b2) {
    return this.x1 === b2.x1 && this.y1 === b2.y1 && this.x2 === b2.x2 && this.y2 === b2.y2;
  },
  set(x13, y13, x22, y22) {
    if (x22 < x13) {
      this.x2 = x13;
      this.x1 = x22;
    } else {
      this.x1 = x13;
      this.x2 = x22;
    }
    if (y22 < y13) {
      this.y2 = y13;
      this.y1 = y22;
    } else {
      this.y1 = y13;
      this.y2 = y22;
    }
    return this;
  },
  add(x5, y5) {
    if (x5 < this.x1)
      this.x1 = x5;
    if (y5 < this.y1)
      this.y1 = y5;
    if (x5 > this.x2)
      this.x2 = x5;
    if (y5 > this.y2)
      this.y2 = y5;
    return this;
  },
  expand(d) {
    this.x1 -= d;
    this.y1 -= d;
    this.x2 += d;
    this.y2 += d;
    return this;
  },
  round() {
    this.x1 = Math.floor(this.x1);
    this.y1 = Math.floor(this.y1);
    this.x2 = Math.ceil(this.x2);
    this.y2 = Math.ceil(this.y2);
    return this;
  },
  scale(s2) {
    this.x1 *= s2;
    this.y1 *= s2;
    this.x2 *= s2;
    this.y2 *= s2;
    return this;
  },
  translate(dx, dy) {
    this.x1 += dx;
    this.x2 += dx;
    this.y1 += dy;
    this.y2 += dy;
    return this;
  },
  rotate(angle2, x5, y5) {
    const p = this.rotatedPoints(angle2, x5, y5);
    return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
  },
  rotatedPoints(angle2, x5, y5) {
    var {
      x1: x13,
      y1: y13,
      x2: x22,
      y2: y22
    } = this, cos4 = Math.cos(angle2), sin4 = Math.sin(angle2), cx = x5 - x5 * cos4 + y5 * sin4, cy = y5 - x5 * sin4 - y5 * cos4;
    return [cos4 * x13 - sin4 * y13 + cx, sin4 * x13 + cos4 * y13 + cy, cos4 * x13 - sin4 * y22 + cx, sin4 * x13 + cos4 * y22 + cy, cos4 * x22 - sin4 * y13 + cx, sin4 * x22 + cos4 * y13 + cy, cos4 * x22 - sin4 * y22 + cx, sin4 * x22 + cos4 * y22 + cy];
  },
  union(b2) {
    if (b2.x1 < this.x1)
      this.x1 = b2.x1;
    if (b2.y1 < this.y1)
      this.y1 = b2.y1;
    if (b2.x2 > this.x2)
      this.x2 = b2.x2;
    if (b2.y2 > this.y2)
      this.y2 = b2.y2;
    return this;
  },
  intersect(b2) {
    if (b2.x1 > this.x1)
      this.x1 = b2.x1;
    if (b2.y1 > this.y1)
      this.y1 = b2.y1;
    if (b2.x2 < this.x2)
      this.x2 = b2.x2;
    if (b2.y2 < this.y2)
      this.y2 = b2.y2;
    return this;
  },
  encloses(b2) {
    return b2 && this.x1 <= b2.x1 && this.x2 >= b2.x2 && this.y1 <= b2.y1 && this.y2 >= b2.y2;
  },
  alignsWith(b2) {
    return b2 && (this.x1 == b2.x1 || this.x2 == b2.x2 || this.y1 == b2.y1 || this.y2 == b2.y2);
  },
  intersects(b2) {
    return b2 && !(this.x2 < b2.x1 || this.x1 > b2.x2 || this.y2 < b2.y1 || this.y1 > b2.y2);
  },
  contains(x5, y5) {
    return !(x5 < this.x1 || x5 > this.x2 || y5 < this.y1 || y5 > this.y2);
  },
  width() {
    return this.x2 - this.x1;
  },
  height() {
    return this.y2 - this.y1;
  }
};
function Item(mark2) {
  this.mark = mark2;
  this.bounds = this.bounds || new Bounds();
}
function GroupItem(mark2) {
  Item.call(this, mark2);
  this.items = this.items || [];
}
inherits(GroupItem, Item);
function ResourceLoader(customLoader) {
  this._pending = 0;
  this._loader = customLoader || loader();
}
function increment(loader2) {
  loader2._pending += 1;
}
function decrement(loader2) {
  loader2._pending -= 1;
}
ResourceLoader.prototype = {
  pending() {
    return this._pending;
  },
  sanitizeURL(uri) {
    const loader2 = this;
    increment(loader2);
    return loader2._loader.sanitize(uri, {
      context: "href"
    }).then((opt) => {
      decrement(loader2);
      return opt;
    }).catch(() => {
      decrement(loader2);
      return null;
    });
  },
  loadImage(uri) {
    const loader2 = this, Image2 = domImage();
    increment(loader2);
    return loader2._loader.sanitize(uri, {
      context: "image"
    }).then((opt) => {
      const url = opt.href;
      if (!url || !Image2)
        throw {
          url
        };
      const img = new Image2();
      const cors = has(opt, "crossOrigin") ? opt.crossOrigin : "anonymous";
      if (cors != null)
        img.crossOrigin = cors;
      img.onload = () => decrement(loader2);
      img.onerror = () => decrement(loader2);
      img.src = url;
      return img;
    }).catch((e3) => {
      decrement(loader2);
      return {
        complete: false,
        width: 0,
        height: 0,
        src: e3 && e3.url || ""
      };
    });
  },
  ready() {
    const loader2 = this;
    return new Promise((accept) => {
      function poll(value3) {
        if (!loader2.pending())
          accept(value3);
        else
          setTimeout(() => {
            poll(true);
          }, 10);
      }
      poll(false);
    });
  }
};
function boundStroke(bounds2, item, miter) {
  if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
    const sw = item.strokeWidth != null ? +item.strokeWidth : 1;
    bounds2.expand(sw + (miter ? miterAdjustment(item, sw) : 0));
  }
  return bounds2;
}
function miterAdjustment(item, strokeWidth) {
  return item.strokeJoin && item.strokeJoin !== "miter" ? 0 : strokeWidth;
}
var circleThreshold = Tau - 1e-8;
var bounds;
var lx;
var ly;
var rot;
var ma;
var mb;
var mc;
var md;
var add3 = (x5, y5) => bounds.add(x5, y5);
var addL = (x5, y5) => add3(lx = x5, ly = y5);
var addX = (x5) => add3(x5, bounds.y1);
var addY = (y5) => add3(bounds.x1, y5);
var px = (x5, y5) => ma * x5 + mc * y5;
var py = (x5, y5) => mb * x5 + md * y5;
var addp = (x5, y5) => add3(px(x5, y5), py(x5, y5));
var addpL = (x5, y5) => addL(px(x5, y5), py(x5, y5));
function boundContext(_, deg) {
  bounds = _;
  if (deg) {
    rot = deg * DegToRad;
    ma = md = Math.cos(rot);
    mb = Math.sin(rot);
    mc = -mb;
  } else {
    ma = md = 1;
    rot = mb = mc = 0;
  }
  return context$1;
}
var context$1 = {
  beginPath() {
  },
  closePath() {
  },
  moveTo: addpL,
  lineTo: addpL,
  rect(x5, y5, w4, h2) {
    if (rot) {
      addp(x5 + w4, y5);
      addp(x5 + w4, y5 + h2);
      addp(x5, y5 + h2);
      addpL(x5, y5);
    } else {
      add3(x5 + w4, y5 + h2);
      addL(x5, y5);
    }
  },
  quadraticCurveTo(x13, y13, x22, y22) {
    const px1 = px(x13, y13), py1 = py(x13, y13), px2 = px(x22, y22), py2 = py(x22, y22);
    quadExtrema(lx, px1, px2, addX);
    quadExtrema(ly, py1, py2, addY);
    addL(px2, py2);
  },
  bezierCurveTo(x13, y13, x22, y22, x32, y32) {
    const px1 = px(x13, y13), py1 = py(x13, y13), px2 = px(x22, y22), py2 = py(x22, y22), px3 = px(x32, y32), py3 = py(x32, y32);
    cubicExtrema(lx, px1, px2, px3, addX);
    cubicExtrema(ly, py1, py2, py3, addY);
    addL(px3, py3);
  },
  arc(cx, cy, r, sa2, ea3, ccw) {
    sa2 += rot;
    ea3 += rot;
    lx = r * Math.cos(ea3) + cx;
    ly = r * Math.sin(ea3) + cy;
    if (Math.abs(ea3 - sa2) > circleThreshold) {
      add3(cx - r, cy - r);
      add3(cx + r, cy + r);
    } else {
      const update3 = (a4) => add3(r * Math.cos(a4) + cx, r * Math.sin(a4) + cy);
      let s2, i;
      update3(sa2);
      update3(ea3);
      if (ea3 !== sa2) {
        sa2 = sa2 % Tau;
        if (sa2 < 0)
          sa2 += Tau;
        ea3 = ea3 % Tau;
        if (ea3 < 0)
          ea3 += Tau;
        if (ea3 < sa2) {
          ccw = !ccw;
          s2 = sa2;
          sa2 = ea3;
          ea3 = s2;
        }
        if (ccw) {
          ea3 -= Tau;
          s2 = sa2 - sa2 % HalfPi;
          for (i = 0; i < 4 && s2 > ea3; ++i, s2 -= HalfPi)
            update3(s2);
        } else {
          s2 = sa2 - sa2 % HalfPi + HalfPi;
          for (i = 0; i < 4 && s2 < ea3; ++i, s2 = s2 + HalfPi)
            update3(s2);
        }
      }
    }
  }
};
function quadExtrema(x07, x13, x22, cb) {
  const t4 = (x07 - x13) / (x07 + x22 - 2 * x13);
  if (0 < t4 && t4 < 1)
    cb(x07 + (x13 - x07) * t4);
}
function cubicExtrema(x07, x13, x22, x32, cb) {
  const a4 = x32 - x07 + 3 * x13 - 3 * x22, b2 = x07 + x22 - 2 * x13, c3 = x07 - x13;
  let t04 = 0, t13 = 0, r;
  if (Math.abs(a4) > Epsilon) {
    r = b2 * b2 + c3 * a4;
    if (r >= 0) {
      r = Math.sqrt(r);
      t04 = (-b2 + r) / a4;
      t13 = (-b2 - r) / a4;
    }
  } else {
    t04 = 0.5 * c3 / b2;
  }
  if (0 < t04 && t04 < 1)
    cb(cubic(t04, x07, x13, x22, x32));
  if (0 < t13 && t13 < 1)
    cb(cubic(t13, x07, x13, x22, x32));
}
function cubic(t4, x07, x13, x22, x32) {
  const s2 = 1 - t4, s22 = s2 * s2, t22 = t4 * t4;
  return s22 * s2 * x07 + 3 * s22 * t4 * x13 + 3 * s2 * t22 * x22 + t22 * t4 * x32;
}
var context = (context = domCanvas(1, 1)) ? context.getContext("2d") : null;
var b = new Bounds();
function intersectPath(draw3) {
  return function(item, brush) {
    if (!context)
      return true;
    draw3(context, item);
    b.clear().union(item.bounds).intersect(brush).round();
    const {
      x1: x13,
      y1: y13,
      x2: x22,
      y2: y22
    } = b;
    for (let y5 = y13; y5 <= y22; ++y5) {
      for (let x5 = x13; x5 <= x22; ++x5) {
        if (context.isPointInPath(x5, y5)) {
          return true;
        }
      }
    }
    return false;
  };
}
function intersectPoint(item, box) {
  return box.contains(item.x || 0, item.y || 0);
}
function intersectRect(item, box) {
  const x5 = item.x || 0, y5 = item.y || 0, w4 = item.width || 0, h2 = item.height || 0;
  return box.intersects(b.set(x5, y5, x5 + w4, y5 + h2));
}
function intersectRule(item, box) {
  const x5 = item.x || 0, y5 = item.y || 0, x22 = item.x2 != null ? item.x2 : x5, y22 = item.y2 != null ? item.y2 : y5;
  return intersectBoxLine(box, x5, y5, x22, y22);
}
function intersectBoxLine(box, x5, y5, u4, v2) {
  const {
    x1: x13,
    y1: y13,
    x2: x22,
    y2: y22
  } = box, dx = u4 - x5, dy = v2 - y5;
  let t04 = 0, t13 = 1, p, q, r, e3;
  for (e3 = 0; e3 < 4; ++e3) {
    if (e3 === 0) {
      p = -dx;
      q = -(x13 - x5);
    }
    if (e3 === 1) {
      p = dx;
      q = x22 - x5;
    }
    if (e3 === 2) {
      p = -dy;
      q = -(y13 - y5);
    }
    if (e3 === 3) {
      p = dy;
      q = y22 - y5;
    }
    if (Math.abs(p) < 1e-10 && q < 0)
      return false;
    r = q / p;
    if (p < 0) {
      if (r > t13)
        return false;
      else if (r > t04)
        t04 = r;
    } else if (p > 0) {
      if (r < t04)
        return false;
      else if (r < t13)
        t13 = r;
    }
  }
  return true;
}
function blend(context3, item) {
  context3.globalCompositeOperation = item.blend || "source-over";
}
function value(value3, dflt) {
  return value3 == null ? dflt : value3;
}
function addStops(gradient4, stops) {
  const n = stops.length;
  for (let i = 0; i < n; ++i) {
    gradient4.addColorStop(stops[i].offset, stops[i].color);
  }
  return gradient4;
}
function gradient(context3, spec, bounds2) {
  const w4 = bounds2.width(), h2 = bounds2.height();
  let gradient4;
  if (spec.gradient === "radial") {
    gradient4 = context3.createRadialGradient(bounds2.x1 + value(spec.x1, 0.5) * w4, bounds2.y1 + value(spec.y1, 0.5) * h2, Math.max(w4, h2) * value(spec.r1, 0), bounds2.x1 + value(spec.x2, 0.5) * w4, bounds2.y1 + value(spec.y2, 0.5) * h2, Math.max(w4, h2) * value(spec.r2, 0.5));
  } else {
    const x13 = value(spec.x1, 0), y13 = value(spec.y1, 0), x22 = value(spec.x2, 1), y22 = value(spec.y2, 0);
    if (x13 === x22 || y13 === y22 || w4 === h2) {
      gradient4 = context3.createLinearGradient(bounds2.x1 + x13 * w4, bounds2.y1 + y13 * h2, bounds2.x1 + x22 * w4, bounds2.y1 + y22 * h2);
    } else {
      const image3 = domCanvas(Math.ceil(w4), Math.ceil(h2)), ictx = image3.getContext("2d");
      ictx.scale(w4, h2);
      ictx.fillStyle = addStops(ictx.createLinearGradient(x13, y13, x22, y22), spec.stops);
      ictx.fillRect(0, 0, w4, h2);
      return context3.createPattern(image3, "no-repeat");
    }
  }
  return addStops(gradient4, spec.stops);
}
function color2(context3, item, value3) {
  return isGradient(value3) ? gradient(context3, value3, item.bounds) : value3;
}
function fill(context3, item, opacity2) {
  opacity2 *= item.fillOpacity == null ? 1 : item.fillOpacity;
  if (opacity2 > 0) {
    context3.globalAlpha = opacity2;
    context3.fillStyle = color2(context3, item, item.fill);
    return true;
  } else {
    return false;
  }
}
var Empty2 = [];
function stroke(context3, item, opacity2) {
  var lw = (lw = item.strokeWidth) != null ? lw : 1;
  if (lw <= 0)
    return false;
  opacity2 *= item.strokeOpacity == null ? 1 : item.strokeOpacity;
  if (opacity2 > 0) {
    context3.globalAlpha = opacity2;
    context3.strokeStyle = color2(context3, item, item.stroke);
    context3.lineWidth = lw;
    context3.lineCap = item.strokeCap || "butt";
    context3.lineJoin = item.strokeJoin || "miter";
    context3.miterLimit = item.strokeMiterLimit || 10;
    if (context3.setLineDash) {
      context3.setLineDash(item.strokeDash || Empty2);
      context3.lineDashOffset = item.strokeDashOffset || 0;
    }
    return true;
  } else {
    return false;
  }
}
function compare3(a4, b2) {
  return a4.zindex - b2.zindex || a4.index - b2.index;
}
function zorder(scene) {
  if (!scene.zdirty)
    return scene.zitems;
  var items = scene.items, output3 = [], item, i, n;
  for (i = 0, n = items.length; i < n; ++i) {
    item = items[i];
    item.index = i;
    if (item.zindex)
      output3.push(item);
  }
  scene.zdirty = false;
  return scene.zitems = output3.sort(compare3);
}
function visit(scene, visitor) {
  var items = scene.items, i, n;
  if (!items || !items.length)
    return;
  const zitems = zorder(scene);
  if (zitems && zitems.length) {
    for (i = 0, n = items.length; i < n; ++i) {
      if (!items[i].zindex)
        visitor(items[i]);
    }
    items = zitems;
  }
  for (i = 0, n = items.length; i < n; ++i) {
    visitor(items[i]);
  }
}
function pickVisit(scene, visitor) {
  var items = scene.items, hit2, i;
  if (!items || !items.length)
    return null;
  const zitems = zorder(scene);
  if (zitems && zitems.length)
    items = zitems;
  for (i = items.length; --i >= 0; ) {
    if (hit2 = visitor(items[i]))
      return hit2;
  }
  if (items === zitems) {
    for (items = scene.items, i = items.length; --i >= 0; ) {
      if (!items[i].zindex) {
        if (hit2 = visitor(items[i]))
          return hit2;
      }
    }
  }
  return null;
}
function drawAll(path3) {
  return function(context3, scene, bounds2) {
    visit(scene, (item) => {
      if (!bounds2 || bounds2.intersects(item.bounds)) {
        drawPath(path3, context3, item, item);
      }
    });
  };
}
function drawOne(path3) {
  return function(context3, scene, bounds2) {
    if (scene.items.length && (!bounds2 || bounds2.intersects(scene.bounds))) {
      drawPath(path3, context3, scene.items[0], scene.items);
    }
  };
}
function drawPath(path3, context3, item, items) {
  var opacity2 = item.opacity == null ? 1 : item.opacity;
  if (opacity2 === 0)
    return;
  if (path3(context3, items))
    return;
  blend(context3, item);
  if (item.fill && fill(context3, item, opacity2)) {
    context3.fill();
  }
  if (item.stroke && stroke(context3, item, opacity2)) {
    context3.stroke();
  }
}
function pick$1(test2) {
  test2 = test2 || truthy;
  return function(context3, scene, x5, y5, gx, gy) {
    x5 *= context3.pixelRatio;
    y5 *= context3.pixelRatio;
    return pickVisit(scene, (item) => {
      const b2 = item.bounds;
      if (b2 && !b2.contains(gx, gy) || !b2)
        return;
      if (test2(context3, item, x5, y5, gx, gy))
        return item;
    });
  };
}
function hitPath(path3, filled) {
  return function(context3, o, x5, y5) {
    var item = Array.isArray(o) ? o[0] : o, fill2 = filled == null ? item.fill : filled, stroke2 = item.stroke && context3.isPointInStroke, lw, lc;
    if (stroke2) {
      lw = item.strokeWidth;
      lc = item.strokeCap;
      context3.lineWidth = lw != null ? lw : 1;
      context3.lineCap = lc != null ? lc : "butt";
    }
    return path3(context3, o) ? false : fill2 && context3.isPointInPath(x5, y5) || stroke2 && context3.isPointInStroke(x5, y5);
  };
}
function pickPath(path3) {
  return pick$1(hitPath(path3));
}
function translate(x5, y5) {
  return "translate(" + x5 + "," + y5 + ")";
}
function rotate(a4) {
  return "rotate(" + a4 + ")";
}
function scale2(scaleX, scaleY2) {
  return "scale(" + scaleX + "," + scaleY2 + ")";
}
function translateItem(item) {
  return translate(item.x || 0, item.y || 0);
}
function rotateItem(item) {
  return translate(item.x || 0, item.y || 0) + (item.angle ? " " + rotate(item.angle) : "");
}
function transformItem(item) {
  return translate(item.x || 0, item.y || 0) + (item.angle ? " " + rotate(item.angle) : "") + (item.scaleX || item.scaleY ? " " + scale2(item.scaleX || 1, item.scaleY || 1) : "");
}
function markItemPath(type3, shape2, isect) {
  function attr2(emit2, item) {
    emit2("transform", rotateItem(item));
    emit2("d", shape2(null, item));
  }
  function bound2(bounds2, item) {
    shape2(boundContext(bounds2, item.angle), item);
    return boundStroke(bounds2, item).translate(item.x || 0, item.y || 0);
  }
  function draw3(context3, item) {
    var x5 = item.x || 0, y5 = item.y || 0, a4 = item.angle || 0;
    context3.translate(x5, y5);
    if (a4)
      context3.rotate(a4 *= DegToRad);
    context3.beginPath();
    shape2(context3, item);
    if (a4)
      context3.rotate(-a4);
    context3.translate(-x5, -y5);
  }
  return {
    type: type3,
    tag: "path",
    nested: false,
    attr: attr2,
    bound: bound2,
    draw: drawAll(draw3),
    pick: pickPath(draw3),
    isect: isect || intersectPath(draw3)
  };
}
var arc = markItemPath("arc", arc$1);
function pickArea(a4, p) {
  var v2 = a4[0].orient === "horizontal" ? p[1] : p[0], z = a4[0].orient === "horizontal" ? "y" : "x", i = a4.length, min6 = Infinity, hit2, d;
  while (--i >= 0) {
    if (a4[i].defined === false)
      continue;
    d = Math.abs(a4[i][z] - v2);
    if (d < min6) {
      min6 = d;
      hit2 = a4[i];
    }
  }
  return hit2;
}
function pickLine(a4, p) {
  var t4 = Math.pow(a4[0].strokeWidth || 1, 2), i = a4.length, dx, dy, dd;
  while (--i >= 0) {
    if (a4[i].defined === false)
      continue;
    dx = a4[i].x - p[0];
    dy = a4[i].y - p[1];
    dd = dx * dx + dy * dy;
    if (dd < t4)
      return a4[i];
  }
  return null;
}
function pickTrail(a4, p) {
  var i = a4.length, dx, dy, dd;
  while (--i >= 0) {
    if (a4[i].defined === false)
      continue;
    dx = a4[i].x - p[0];
    dy = a4[i].y - p[1];
    dd = dx * dx + dy * dy;
    dx = a4[i].size || 1;
    if (dd < dx * dx)
      return a4[i];
  }
  return null;
}
function markMultiItemPath(type3, shape2, tip) {
  function attr2(emit2, item) {
    var items = item.mark.items;
    if (items.length)
      emit2("d", shape2(null, items));
  }
  function bound2(bounds2, mark2) {
    var items = mark2.items;
    if (items.length === 0) {
      return bounds2;
    } else {
      shape2(boundContext(bounds2), items);
      return boundStroke(bounds2, items[0]);
    }
  }
  function draw3(context3, items) {
    context3.beginPath();
    shape2(context3, items);
  }
  const hit2 = hitPath(draw3);
  function pick3(context3, scene, x5, y5, gx, gy) {
    var items = scene.items, b2 = scene.bounds;
    if (!items || !items.length || b2 && !b2.contains(gx, gy)) {
      return null;
    }
    x5 *= context3.pixelRatio;
    y5 *= context3.pixelRatio;
    return hit2(context3, items, x5, y5) ? items[0] : null;
  }
  return {
    type: type3,
    tag: "path",
    nested: true,
    attr: attr2,
    bound: bound2,
    draw: drawOne(draw3),
    pick: pick3,
    isect: intersectPoint,
    tip
  };
}
var area = markMultiItemPath("area", area$1, pickArea);
function clip(context3, scene) {
  var clip3 = scene.clip;
  context3.save();
  if (isFunction(clip3)) {
    context3.beginPath();
    clip3(context3);
    context3.clip();
  } else {
    clipGroup(context3, scene.group);
  }
}
function clipGroup(context3, group4) {
  context3.beginPath();
  hasCornerRadius(group4) ? rectangle(context3, group4, 0, 0) : context3.rect(0, 0, group4.width || 0, group4.height || 0);
  context3.clip();
}
function offset$1(item) {
  const sw = value(item.strokeWidth, 1);
  return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;
}
function attr$5(emit2, item) {
  emit2("transform", translateItem(item));
}
function emitRectangle(emit2, item) {
  const off = offset$1(item);
  emit2("d", rectangle(null, item, off, off));
}
function background(emit2, item) {
  emit2("class", "background");
  emit2("aria-hidden", true);
  emitRectangle(emit2, item);
}
function foreground(emit2, item) {
  emit2("class", "foreground");
  emit2("aria-hidden", true);
  if (item.strokeForeground) {
    emitRectangle(emit2, item);
  } else {
    emit2("d", "");
  }
}
function content(emit2, item, renderer) {
  const url = item.clip ? clip$1(renderer, item, item) : null;
  emit2("clip-path", url);
}
function bound$5(bounds2, group4) {
  if (!group4.clip && group4.items) {
    const items = group4.items, m3 = items.length;
    for (let j = 0; j < m3; ++j) {
      bounds2.union(items[j].bounds);
    }
  }
  if ((group4.clip || group4.width || group4.height) && !group4.noBound) {
    bounds2.add(0, 0).add(group4.width || 0, group4.height || 0);
  }
  boundStroke(bounds2, group4);
  return bounds2.translate(group4.x || 0, group4.y || 0);
}
function rectanglePath(context3, group4, x5, y5) {
  const off = offset$1(group4);
  context3.beginPath();
  rectangle(context3, group4, (x5 || 0) + off, (y5 || 0) + off);
}
var hitBackground = hitPath(rectanglePath);
var hitForeground = hitPath(rectanglePath, false);
var hitCorner = hitPath(rectanglePath, true);
function draw$4(context3, scene, bounds2) {
  visit(scene, (group4) => {
    const gx = group4.x || 0, gy = group4.y || 0, fore = group4.strokeForeground, opacity2 = group4.opacity == null ? 1 : group4.opacity;
    if ((group4.stroke || group4.fill) && opacity2) {
      rectanglePath(context3, group4, gx, gy);
      blend(context3, group4);
      if (group4.fill && fill(context3, group4, opacity2)) {
        context3.fill();
      }
      if (group4.stroke && !fore && stroke(context3, group4, opacity2)) {
        context3.stroke();
      }
    }
    context3.save();
    context3.translate(gx, gy);
    if (group4.clip)
      clipGroup(context3, group4);
    if (bounds2)
      bounds2.translate(-gx, -gy);
    visit(group4, (item) => {
      this.draw(context3, item, bounds2);
    });
    if (bounds2)
      bounds2.translate(gx, gy);
    context3.restore();
    if (fore && group4.stroke && opacity2) {
      rectanglePath(context3, group4, gx, gy);
      blend(context3, group4);
      if (stroke(context3, group4, opacity2)) {
        context3.stroke();
      }
    }
  });
}
function pick(context3, scene, x5, y5, gx, gy) {
  if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
    return null;
  }
  const cx = x5 * context3.pixelRatio, cy = y5 * context3.pixelRatio;
  return pickVisit(scene, (group4) => {
    let hit2, dx, dy;
    const b2 = group4.bounds;
    if (b2 && !b2.contains(gx, gy))
      return;
    dx = group4.x || 0;
    dy = group4.y || 0;
    const dw = dx + (group4.width || 0), dh = dy + (group4.height || 0), c3 = group4.clip;
    if (c3 && (gx < dx || gx > dw || gy < dy || gy > dh))
      return;
    context3.save();
    context3.translate(dx, dy);
    dx = gx - dx;
    dy = gy - dy;
    if (c3 && hasCornerRadius(group4) && !hitCorner(context3, group4, cx, cy)) {
      context3.restore();
      return null;
    }
    const fore = group4.strokeForeground, ix = scene.interactive !== false;
    if (ix && fore && group4.stroke && hitForeground(context3, group4, cx, cy)) {
      context3.restore();
      return group4;
    }
    hit2 = pickVisit(group4, (mark2) => pickMark(mark2, dx, dy) ? this.pick(mark2, x5, y5, dx, dy) : null);
    if (!hit2 && ix && (group4.fill || !fore && group4.stroke) && hitBackground(context3, group4, cx, cy)) {
      hit2 = group4;
    }
    context3.restore();
    return hit2 || null;
  });
}
function pickMark(mark2, x5, y5) {
  return (mark2.interactive !== false || mark2.marktype === "group") && mark2.bounds && mark2.bounds.contains(x5, y5);
}
var group2 = {
  type: "group",
  tag: "g",
  nested: false,
  attr: attr$5,
  bound: bound$5,
  draw: draw$4,
  pick,
  isect: intersectRect,
  content,
  background,
  foreground
};
var metadata = {
  "xmlns": "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  "version": "1.1"
};
function getImage(item, renderer) {
  var image3 = item.image;
  if (!image3 || item.url && item.url !== image3.url) {
    image3 = {
      complete: false,
      width: 0,
      height: 0
    };
    renderer.loadImage(item.url).then((image4) => {
      item.image = image4;
      item.image.url = item.url;
    });
  }
  return image3;
}
function imageWidth(item, image3) {
  return item.width != null ? item.width : !image3 || !image3.width ? 0 : item.aspect !== false && item.height ? item.height * image3.width / image3.height : image3.width;
}
function imageHeight(item, image3) {
  return item.height != null ? item.height : !image3 || !image3.height ? 0 : item.aspect !== false && item.width ? item.width * image3.height / image3.width : image3.height;
}
function imageXOffset(align2, w4) {
  return align2 === "center" ? w4 / 2 : align2 === "right" ? w4 : 0;
}
function imageYOffset(baseline3, h2) {
  return baseline3 === "middle" ? h2 / 2 : baseline3 === "bottom" ? h2 : 0;
}
function attr$4(emit2, item, renderer) {
  const img = getImage(item, renderer), w4 = imageWidth(item, img), h2 = imageHeight(item, img), x5 = (item.x || 0) - imageXOffset(item.align, w4), y5 = (item.y || 0) - imageYOffset(item.baseline, h2), i = !img.src && img.toDataURL ? img.toDataURL() : img.src || "";
  emit2("href", i, metadata["xmlns:xlink"], "xlink:href");
  emit2("transform", translate(x5, y5));
  emit2("width", w4);
  emit2("height", h2);
  emit2("preserveAspectRatio", item.aspect === false ? "none" : "xMidYMid");
}
function bound$4(bounds2, item) {
  const img = item.image, w4 = imageWidth(item, img), h2 = imageHeight(item, img), x5 = (item.x || 0) - imageXOffset(item.align, w4), y5 = (item.y || 0) - imageYOffset(item.baseline, h2);
  return bounds2.set(x5, y5, x5 + w4, y5 + h2);
}
function draw$3(context3, scene, bounds2) {
  visit(scene, (item) => {
    if (bounds2 && !bounds2.intersects(item.bounds))
      return;
    const img = getImage(item, this);
    let w4 = imageWidth(item, img);
    let h2 = imageHeight(item, img);
    if (w4 === 0 || h2 === 0)
      return;
    let x5 = (item.x || 0) - imageXOffset(item.align, w4), y5 = (item.y || 0) - imageYOffset(item.baseline, h2), opacity2, ar0, ar1, t4;
    if (item.aspect !== false) {
      ar0 = img.width / img.height;
      ar1 = item.width / item.height;
      if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
        if (ar1 < ar0) {
          t4 = w4 / ar0;
          y5 += (h2 - t4) / 2;
          h2 = t4;
        } else {
          t4 = h2 * ar0;
          x5 += (w4 - t4) / 2;
          w4 = t4;
        }
      }
    }
    if (img.complete || img.toDataURL) {
      blend(context3, item);
      context3.globalAlpha = (opacity2 = item.opacity) != null ? opacity2 : 1;
      context3.imageSmoothingEnabled = item.smooth !== false;
      context3.drawImage(img, x5, y5, w4, h2);
    }
  });
}
var image = {
  type: "image",
  tag: "image",
  nested: false,
  attr: attr$4,
  bound: bound$4,
  draw: draw$3,
  pick: pick$1(),
  isect: truthy,
  get: getImage,
  xOffset: imageXOffset,
  yOffset: imageYOffset
};
var line = markMultiItemPath("line", line$1, pickLine);
function attr$3(emit2, item) {
  var sx = item.scaleX || 1, sy = item.scaleY || 1;
  if (sx !== 1 || sy !== 1) {
    emit2("vector-effect", "non-scaling-stroke");
  }
  emit2("transform", transformItem(item));
  emit2("d", item.path);
}
function path$1(context3, item) {
  var path3 = item.path;
  if (path3 == null)
    return true;
  var x5 = item.x || 0, y5 = item.y || 0, sx = item.scaleX || 1, sy = item.scaleY || 1, a4 = (item.angle || 0) * DegToRad, cache2 = item.pathCache;
  if (!cache2 || cache2.path !== path3) {
    (item.pathCache = cache2 = parse4(path3)).path = path3;
  }
  if (a4 && context3.rotate && context3.translate) {
    context3.translate(x5, y5);
    context3.rotate(a4);
    pathRender(context3, cache2, 0, 0, sx, sy);
    context3.rotate(-a4);
    context3.translate(-x5, -y5);
  } else {
    pathRender(context3, cache2, x5, y5, sx, sy);
  }
}
function bound$3(bounds2, item) {
  return path$1(boundContext(bounds2, item.angle), item) ? bounds2.set(0, 0, 0, 0) : boundStroke(bounds2, item, true);
}
var path$2 = {
  type: "path",
  tag: "path",
  nested: false,
  attr: attr$3,
  bound: bound$3,
  draw: drawAll(path$1),
  pick: pickPath(path$1),
  isect: intersectPath(path$1)
};
function attr$2(emit2, item) {
  emit2("d", rectangle(null, item));
}
function bound$2(bounds2, item) {
  var x5, y5;
  return boundStroke(bounds2.set(x5 = item.x || 0, y5 = item.y || 0, x5 + item.width || 0, y5 + item.height || 0), item);
}
function draw$2(context3, item) {
  context3.beginPath();
  rectangle(context3, item);
}
var rect = {
  type: "rect",
  tag: "path",
  nested: false,
  attr: attr$2,
  bound: bound$2,
  draw: drawAll(draw$2),
  pick: pickPath(draw$2),
  isect: intersectRect
};
function attr$1(emit2, item) {
  emit2("transform", translateItem(item));
  emit2("x2", item.x2 != null ? item.x2 - (item.x || 0) : 0);
  emit2("y2", item.y2 != null ? item.y2 - (item.y || 0) : 0);
}
function bound$1(bounds2, item) {
  var x13, y13;
  return boundStroke(bounds2.set(x13 = item.x || 0, y13 = item.y || 0, item.x2 != null ? item.x2 : x13, item.y2 != null ? item.y2 : y13), item);
}
function path2(context3, item, opacity2) {
  var x13, y13, x22, y22;
  if (item.stroke && stroke(context3, item, opacity2)) {
    x13 = item.x || 0;
    y13 = item.y || 0;
    x22 = item.x2 != null ? item.x2 : x13;
    y22 = item.y2 != null ? item.y2 : y13;
    context3.beginPath();
    context3.moveTo(x13, y13);
    context3.lineTo(x22, y22);
    return true;
  }
  return false;
}
function draw$1(context3, scene, bounds2) {
  visit(scene, (item) => {
    if (bounds2 && !bounds2.intersects(item.bounds))
      return;
    var opacity2 = item.opacity == null ? 1 : item.opacity;
    if (opacity2 && path2(context3, item, opacity2)) {
      blend(context3, item);
      context3.stroke();
    }
  });
}
function hit$1(context3, item, x5, y5) {
  if (!context3.isPointInStroke)
    return false;
  return path2(context3, item, 1) && context3.isPointInStroke(x5, y5);
}
var rule = {
  type: "rule",
  tag: "line",
  nested: false,
  attr: attr$1,
  bound: bound$1,
  draw: draw$1,
  pick: pick$1(hit$1),
  isect: intersectRule
};
var shape = markItemPath("shape", shape$1);
var symbol = markItemPath("symbol", symbol$1, intersectPoint);
var widthCache = lruCache();
var textMetrics = {
  height: fontSize,
  measureWidth,
  estimateWidth,
  width: estimateWidth,
  canvas: useCanvas
};
useCanvas(true);
function useCanvas(use) {
  textMetrics.width = use && context ? measureWidth : estimateWidth;
}
function estimateWidth(item, text4) {
  return _estimateWidth(textValue(item, text4), fontSize(item));
}
function _estimateWidth(text4, currentFontHeight) {
  return ~~(0.8 * text4.length * currentFontHeight);
}
function measureWidth(item, text4) {
  return fontSize(item) <= 0 || !(text4 = textValue(item, text4)) ? 0 : _measureWidth(text4, font(item));
}
function _measureWidth(text4, currentFont) {
  const key2 = "(".concat(currentFont, ") ").concat(text4);
  let width2 = widthCache.get(key2);
  if (width2 === void 0) {
    context.font = currentFont;
    width2 = context.measureText(text4).width;
    widthCache.set(key2, width2);
  }
  return width2;
}
function fontSize(item) {
  return item.fontSize != null ? +item.fontSize || 0 : 11;
}
function lineHeight(item) {
  return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;
}
function lineArray(_) {
  return isArray(_) ? _.length > 1 ? _ : _[0] : _;
}
function textLines(item) {
  return lineArray(item.lineBreak && item.text && !isArray(item.text) ? item.text.split(item.lineBreak) : item.text);
}
function multiLineOffset(item) {
  const tl2 = textLines(item);
  return (isArray(tl2) ? tl2.length - 1 : 0) * lineHeight(item);
}
function textValue(item, line4) {
  const text4 = line4 == null ? "" : (line4 + "").trim();
  return item.limit > 0 && text4.length ? truncate2(item, text4) : text4;
}
function widthGetter(item) {
  if (textMetrics.width === measureWidth) {
    const currentFont = font(item);
    return (text4) => _measureWidth(text4, currentFont);
  } else {
    const currentFontHeight = fontSize(item);
    return (text4) => _estimateWidth(text4, currentFontHeight);
  }
}
function truncate2(item, text4) {
  var limit = +item.limit, width2 = widthGetter(item);
  if (width2(text4) < limit)
    return text4;
  var ellipsis = item.ellipsis || "\u2026", rtl = item.dir === "rtl", lo = 0, hi = text4.length, mid;
  limit -= width2(ellipsis);
  if (rtl) {
    while (lo < hi) {
      mid = lo + hi >>> 1;
      if (width2(text4.slice(mid)) > limit)
        lo = mid + 1;
      else
        hi = mid;
    }
    return ellipsis + text4.slice(lo);
  } else {
    while (lo < hi) {
      mid = 1 + (lo + hi >>> 1);
      if (width2(text4.slice(0, mid)) < limit)
        lo = mid;
      else
        hi = mid - 1;
    }
    return text4.slice(0, lo) + ellipsis;
  }
}
function fontFamily(item, quote) {
  var font3 = item.font;
  return (quote && font3 ? String(font3).replace(/"/g, "'") : font3) || "sans-serif";
}
function font(item, quote) {
  return (item.fontStyle ? item.fontStyle + " " : "") + (item.fontVariant ? item.fontVariant + " " : "") + (item.fontWeight ? item.fontWeight + " " : "") + fontSize(item) + "px " + fontFamily(item, quote);
}
function offset2(item) {
  var baseline3 = item.baseline, h2 = fontSize(item);
  return Math.round(baseline3 === "top" ? 0.79 * h2 : baseline3 === "middle" ? 0.3 * h2 : baseline3 === "bottom" ? -0.21 * h2 : baseline3 === "line-top" ? 0.29 * h2 + 0.5 * lineHeight(item) : baseline3 === "line-bottom" ? 0.29 * h2 - 0.5 * lineHeight(item) : 0);
}
var textAlign = {
  "left": "start",
  "center": "middle",
  "right": "end"
};
var tempBounds = new Bounds();
function anchorPoint(item) {
  var x5 = item.x || 0, y5 = item.y || 0, r = item.radius || 0, t4;
  if (r) {
    t4 = (item.theta || 0) - HalfPi;
    x5 += r * Math.cos(t4);
    y5 += r * Math.sin(t4);
  }
  tempBounds.x1 = x5;
  tempBounds.y1 = y5;
  return tempBounds;
}
function attr(emit2, item) {
  var dx = item.dx || 0, dy = (item.dy || 0) + offset2(item), p = anchorPoint(item), x5 = p.x1, y5 = p.y1, a4 = item.angle || 0, t4;
  emit2("text-anchor", textAlign[item.align] || "start");
  if (a4) {
    t4 = translate(x5, y5) + " " + rotate(a4);
    if (dx || dy)
      t4 += " " + translate(dx, dy);
  } else {
    t4 = translate(x5 + dx, y5 + dy);
  }
  emit2("transform", t4);
}
function bound(bounds2, item, mode3) {
  var h2 = textMetrics.height(item), a4 = item.align, p = anchorPoint(item), x5 = p.x1, y5 = p.y1, dx = item.dx || 0, dy = (item.dy || 0) + offset2(item) - Math.round(0.8 * h2), tl2 = textLines(item), w4;
  if (isArray(tl2)) {
    h2 += lineHeight(item) * (tl2.length - 1);
    w4 = tl2.reduce((w5, t4) => Math.max(w5, textMetrics.width(item, t4)), 0);
  } else {
    w4 = textMetrics.width(item, tl2);
  }
  if (a4 === "center") {
    dx -= w4 / 2;
  } else if (a4 === "right") {
    dx -= w4;
  } else
    ;
  bounds2.set(dx += x5, dy += y5, dx + w4, dy + h2);
  if (item.angle && !mode3) {
    bounds2.rotate(item.angle * DegToRad, x5, y5);
  } else if (mode3 === 2) {
    return bounds2.rotatedPoints(item.angle * DegToRad, x5, y5);
  }
  return bounds2;
}
function draw(context3, scene, bounds2) {
  visit(scene, (item) => {
    var opacity2 = item.opacity == null ? 1 : item.opacity, p, x5, y5, i, lh, tl2, str;
    if (bounds2 && !bounds2.intersects(item.bounds) || opacity2 === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0)
      return;
    context3.font = font(item);
    context3.textAlign = item.align || "left";
    p = anchorPoint(item);
    x5 = p.x1, y5 = p.y1;
    if (item.angle) {
      context3.save();
      context3.translate(x5, y5);
      context3.rotate(item.angle * DegToRad);
      x5 = y5 = 0;
    }
    x5 += item.dx || 0;
    y5 += (item.dy || 0) + offset2(item);
    tl2 = textLines(item);
    blend(context3, item);
    if (isArray(tl2)) {
      lh = lineHeight(item);
      for (i = 0; i < tl2.length; ++i) {
        str = textValue(item, tl2[i]);
        if (item.fill && fill(context3, item, opacity2)) {
          context3.fillText(str, x5, y5);
        }
        if (item.stroke && stroke(context3, item, opacity2)) {
          context3.strokeText(str, x5, y5);
        }
        y5 += lh;
      }
    } else {
      str = textValue(item, tl2);
      if (item.fill && fill(context3, item, opacity2)) {
        context3.fillText(str, x5, y5);
      }
      if (item.stroke && stroke(context3, item, opacity2)) {
        context3.strokeText(str, x5, y5);
      }
    }
    if (item.angle)
      context3.restore();
  });
}
function hit(context3, item, x5, y5, gx, gy) {
  if (item.fontSize <= 0)
    return false;
  if (!item.angle)
    return true;
  var p = anchorPoint(item), ax = p.x1, ay = p.y1, b2 = bound(tempBounds, item, 1), a4 = -item.angle * DegToRad, cos4 = Math.cos(a4), sin4 = Math.sin(a4), px2 = cos4 * gx - sin4 * gy + (ax - cos4 * ax + sin4 * ay), py2 = sin4 * gx + cos4 * gy + (ay - sin4 * ax - cos4 * ay);
  return b2.contains(px2, py2);
}
function intersectText(item, box) {
  const p = bound(tempBounds, item, 2);
  return intersectBoxLine(box, p[0], p[1], p[2], p[3]) || intersectBoxLine(box, p[0], p[1], p[4], p[5]) || intersectBoxLine(box, p[4], p[5], p[6], p[7]) || intersectBoxLine(box, p[2], p[3], p[6], p[7]);
}
var text = {
  type: "text",
  tag: "text",
  nested: false,
  attr,
  bound,
  draw,
  pick: pick$1(hit),
  isect: intersectText
};
var trail = markMultiItemPath("trail", trail$1, pickTrail);
var Marks = {
  arc,
  area,
  group: group2,
  image,
  line,
  path: path$2,
  rect,
  rule,
  shape,
  symbol,
  text,
  trail
};
function boundItem(item, func, opt) {
  var type3 = Marks[item.mark.marktype], bound2 = func || type3.bound;
  if (type3.nested)
    item = item.mark;
  return bound2(item.bounds || (item.bounds = new Bounds()), item, opt);
}
var DUMMY = {
  mark: null
};
function boundMark(mark2, bounds2, opt) {
  var type3 = Marks[mark2.marktype], bound2 = type3.bound, items = mark2.items, hasItems = items && items.length, i, n, item, b2;
  if (type3.nested) {
    if (hasItems) {
      item = items[0];
    } else {
      DUMMY.mark = mark2;
      item = DUMMY;
    }
    b2 = boundItem(item, bound2, opt);
    bounds2 = bounds2 && bounds2.union(b2) || b2;
    return bounds2;
  }
  bounds2 = bounds2 || mark2.bounds && mark2.bounds.clear() || new Bounds();
  if (hasItems) {
    for (i = 0, n = items.length; i < n; ++i) {
      bounds2.union(boundItem(items[i], bound2, opt));
    }
  }
  return mark2.bounds = bounds2;
}
var keys = [
  "marktype",
  "name",
  "role",
  "interactive",
  "clip",
  "items",
  "zindex",
  "x",
  "y",
  "width",
  "height",
  "align",
  "baseline",
  "fill",
  "fillOpacity",
  "opacity",
  "blend",
  "stroke",
  "strokeOpacity",
  "strokeWidth",
  "strokeCap",
  "strokeDash",
  "strokeDashOffset",
  "strokeForeground",
  "strokeOffset",
  "startAngle",
  "endAngle",
  "innerRadius",
  "outerRadius",
  "cornerRadius",
  "padAngle",
  "cornerRadiusTopLeft",
  "cornerRadiusTopRight",
  "cornerRadiusBottomLeft",
  "cornerRadiusBottomRight",
  "interpolate",
  "tension",
  "orient",
  "defined",
  "url",
  "aspect",
  "smooth",
  "path",
  "scaleX",
  "scaleY",
  "x2",
  "y2",
  "size",
  "shape",
  "text",
  "angle",
  "theta",
  "radius",
  "dir",
  "dx",
  "dy",
  "ellipsis",
  "limit",
  "lineBreak",
  "lineHeight",
  "font",
  "fontSize",
  "fontWeight",
  "fontStyle",
  "fontVariant",
  "description",
  "aria",
  "ariaRole",
  "ariaRoleDescription"
];
function sceneToJSON(scene, indent) {
  return JSON.stringify(scene, keys, indent);
}
function sceneFromJSON(json2) {
  const scene = typeof json2 === "string" ? JSON.parse(json2) : json2;
  return initialize(scene);
}
function initialize(scene) {
  var type3 = scene.marktype, items = scene.items, parent, i, n;
  if (items) {
    for (i = 0, n = items.length; i < n; ++i) {
      parent = type3 ? "mark" : "group";
      items[i][parent] = scene;
      if (items[i].zindex)
        items[i][parent].zdirty = true;
      if ("group" === (type3 || parent))
        initialize(items[i]);
    }
  }
  if (type3)
    boundMark(scene);
  return scene;
}
function Scenegraph(scene) {
  if (arguments.length) {
    this.root = sceneFromJSON(scene);
  } else {
    this.root = createMark({
      marktype: "group",
      name: "root",
      role: "frame"
    });
    this.root.items = [new GroupItem(this.root)];
  }
}
Scenegraph.prototype = {
  toJSON(indent) {
    return sceneToJSON(this.root, indent || 0);
  },
  mark(markdef, group4, index5) {
    group4 = group4 || this.root.items[0];
    const mark2 = createMark(markdef, group4);
    group4.items[index5] = mark2;
    if (mark2.zindex)
      mark2.group.zdirty = true;
    return mark2;
  }
};
function createMark(def2, group4) {
  const mark2 = {
    bounds: new Bounds(),
    clip: !!def2.clip,
    group: group4,
    interactive: def2.interactive === false ? false : true,
    items: [],
    marktype: def2.marktype,
    name: def2.name || void 0,
    role: def2.role || void 0,
    zindex: def2.zindex || 0
  };
  if (def2.aria != null) {
    mark2.aria = def2.aria;
  }
  if (def2.description) {
    mark2.description = def2.description;
  }
  return mark2;
}
function domCreate(doc, tag, ns) {
  if (!doc && typeof document !== "undefined" && document.createElement) {
    doc = document;
  }
  return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
}
function domFind(el, tag) {
  tag = tag.toLowerCase();
  var nodes = el.childNodes, i = 0, n = nodes.length;
  for (; i < n; ++i)
    if (nodes[i].tagName.toLowerCase() === tag) {
      return nodes[i];
    }
}
function domChild(el, index5, tag, ns) {
  var a4 = el.childNodes[index5], b2;
  if (!a4 || a4.tagName.toLowerCase() !== tag.toLowerCase()) {
    b2 = a4 || null;
    a4 = domCreate(el.ownerDocument, tag, ns);
    el.insertBefore(a4, b2);
  }
  return a4;
}
function domClear(el, index5) {
  var nodes = el.childNodes, curr = nodes.length;
  while (curr > index5)
    el.removeChild(nodes[--curr]);
  return el;
}
function cssClass(mark2) {
  return "mark-" + mark2.marktype + (mark2.role ? " role-" + mark2.role : "") + (mark2.name ? " " + mark2.name : "");
}
function point7(event2, el) {
  const rect3 = el.getBoundingClientRect();
  return [event2.clientX - rect3.left - (el.clientLeft || 0), event2.clientY - rect3.top - (el.clientTop || 0)];
}
function resolveItem(item, event2, el, origin) {
  var mark2 = item && item.mark, mdef, p;
  if (mark2 && (mdef = Marks[mark2.marktype]).tip) {
    p = point7(event2, el);
    p[0] -= origin[0];
    p[1] -= origin[1];
    while (item = item.mark.group) {
      p[0] -= item.x || 0;
      p[1] -= item.y || 0;
    }
    item = mdef.tip(mark2.items, p);
  }
  return item;
}
function Handler(customLoader, customTooltip) {
  this._active = null;
  this._handlers = {};
  this._loader = customLoader || loader();
  this._tooltip = customTooltip || defaultTooltip;
}
function defaultTooltip(handler, event2, item, value3) {
  handler.element().setAttribute("title", value3 || "");
}
Handler.prototype = {
  initialize(el, origin, obj) {
    this._el = el;
    this._obj = obj || null;
    return this.origin(origin);
  },
  element() {
    return this._el;
  },
  canvas() {
    return this._el && this._el.firstChild;
  },
  origin(origin) {
    if (arguments.length) {
      this._origin = origin || [0, 0];
      return this;
    } else {
      return this._origin.slice();
    }
  },
  scene(scene) {
    if (!arguments.length)
      return this._scene;
    this._scene = scene;
    return this;
  },
  on() {
  },
  off() {
  },
  _handlerIndex(h2, type3, handler) {
    for (let i = h2 ? h2.length : 0; --i >= 0; ) {
      if (h2[i].type === type3 && (!handler || h2[i].handler === handler)) {
        return i;
      }
    }
    return -1;
  },
  handlers(type3) {
    const h2 = this._handlers, a4 = [];
    if (type3) {
      a4.push(...h2[this.eventName(type3)]);
    } else {
      for (const k3 in h2) {
        a4.push(...h2[k3]);
      }
    }
    return a4;
  },
  eventName(name4) {
    const i = name4.indexOf(".");
    return i < 0 ? name4 : name4.slice(0, i);
  },
  handleHref(event2, item, href2) {
    this._loader.sanitize(href2, {
      context: "href"
    }).then((opt) => {
      const e3 = new MouseEvent(event2.type, event2), a4 = domCreate(null, "a");
      for (const name4 in opt)
        a4.setAttribute(name4, opt[name4]);
      a4.dispatchEvent(e3);
    }).catch(() => {
    });
  },
  handleTooltip(event2, item, show) {
    if (item && item.tooltip != null) {
      item = resolveItem(item, event2, this.canvas(), this._origin);
      const value3 = show && item && item.tooltip || null;
      this._tooltip.call(this._obj, this, event2, item, value3);
    }
  },
  getItemBoundingClientRect(item) {
    const el = this.canvas();
    if (!el)
      return;
    const rect3 = el.getBoundingClientRect(), origin = this._origin, bounds2 = item.bounds, width2 = bounds2.width(), height2 = bounds2.height();
    let x5 = bounds2.x1 + origin[0] + rect3.left, y5 = bounds2.y1 + origin[1] + rect3.top;
    while (item.mark && (item = item.mark.group)) {
      x5 += item.x || 0;
      y5 += item.y || 0;
    }
    return {
      x: x5,
      y: y5,
      width: width2,
      height: height2,
      left: x5,
      top: y5,
      right: x5 + width2,
      bottom: y5 + height2
    };
  }
};
function Renderer(loader2) {
  this._el = null;
  this._bgcolor = null;
  this._loader = new ResourceLoader(loader2);
}
Renderer.prototype = {
  initialize(el, width2, height2, origin, scaleFactor) {
    this._el = el;
    return this.resize(width2, height2, origin, scaleFactor);
  },
  element() {
    return this._el;
  },
  canvas() {
    return this._el && this._el.firstChild;
  },
  background(bgcolor) {
    if (arguments.length === 0)
      return this._bgcolor;
    this._bgcolor = bgcolor;
    return this;
  },
  resize(width2, height2, origin, scaleFactor) {
    this._width = width2;
    this._height = height2;
    this._origin = origin || [0, 0];
    this._scale = scaleFactor || 1;
    return this;
  },
  dirty() {
  },
  render(scene) {
    const r = this;
    r._call = function() {
      r._render(scene);
    };
    r._call();
    r._call = null;
    return r;
  },
  _render() {
  },
  renderAsync(scene) {
    const r = this.render(scene);
    return this._ready ? this._ready.then(() => r) : Promise.resolve(r);
  },
  _load(method2, uri) {
    var r = this, p = r._loader[method2](uri);
    if (!r._ready) {
      const call = r._call;
      r._ready = r._loader.ready().then((redraw) => {
        if (redraw)
          call();
        r._ready = null;
      });
    }
    return p;
  },
  sanitizeURL(uri) {
    return this._load("sanitizeURL", uri);
  },
  loadImage(uri) {
    return this._load("loadImage", uri);
  }
};
var KeyDownEvent = "keydown";
var KeyPressEvent = "keypress";
var KeyUpEvent = "keyup";
var DragEnterEvent = "dragenter";
var DragLeaveEvent = "dragleave";
var DragOverEvent = "dragover";
var MouseDownEvent = "mousedown";
var MouseUpEvent = "mouseup";
var MouseMoveEvent = "mousemove";
var MouseOutEvent = "mouseout";
var MouseOverEvent = "mouseover";
var ClickEvent = "click";
var DoubleClickEvent = "dblclick";
var WheelEvent = "wheel";
var MouseWheelEvent = "mousewheel";
var TouchStartEvent = "touchstart";
var TouchMoveEvent = "touchmove";
var TouchEndEvent = "touchend";
var Events = [KeyDownEvent, KeyPressEvent, KeyUpEvent, DragEnterEvent, DragLeaveEvent, DragOverEvent, MouseDownEvent, MouseUpEvent, MouseMoveEvent, MouseOutEvent, MouseOverEvent, ClickEvent, DoubleClickEvent, WheelEvent, MouseWheelEvent, TouchStartEvent, TouchMoveEvent, TouchEndEvent];
var TooltipShowEvent = MouseMoveEvent;
var TooltipHideEvent = MouseOutEvent;
var HrefEvent = ClickEvent;
function CanvasHandler(loader2, tooltip2) {
  Handler.call(this, loader2, tooltip2);
  this._down = null;
  this._touch = null;
  this._first = true;
  this._events = {};
}
var eventBundle = (type3) => type3 === TouchStartEvent || type3 === TouchMoveEvent || type3 === TouchEndEvent ? [TouchStartEvent, TouchMoveEvent, TouchEndEvent] : [type3];
function eventListenerCheck(handler, type3) {
  eventBundle(type3).forEach((_) => addEventListener(handler, _));
}
function addEventListener(handler, type3) {
  const canvas = handler.canvas();
  if (canvas && !handler._events[type3]) {
    handler._events[type3] = 1;
    canvas.addEventListener(type3, handler[type3] ? (evt) => handler[type3](evt) : (evt) => handler.fire(type3, evt));
  }
}
function move(moveEvent, overEvent, outEvent) {
  return function(evt) {
    const a4 = this._active, p = this.pickEvent(evt);
    if (p === a4) {
      this.fire(moveEvent, evt);
    } else {
      if (!a4 || !a4.exit) {
        this.fire(outEvent, evt);
      }
      this._active = p;
      this.fire(overEvent, evt);
      this.fire(moveEvent, evt);
    }
  };
}
function inactive(type3) {
  return function(evt) {
    this.fire(type3, evt);
    this._active = null;
  };
}
inherits(CanvasHandler, Handler, {
  initialize(el, origin, obj) {
    this._canvas = el && domFind(el, "canvas");
    [ClickEvent, MouseDownEvent, MouseMoveEvent, MouseOutEvent, DragLeaveEvent].forEach((type3) => eventListenerCheck(this, type3));
    return Handler.prototype.initialize.call(this, el, origin, obj);
  },
  canvas() {
    return this._canvas;
  },
  context() {
    return this._canvas.getContext("2d");
  },
  events: Events,
  DOMMouseScroll(evt) {
    this.fire(MouseWheelEvent, evt);
  },
  mousemove: move(MouseMoveEvent, MouseOverEvent, MouseOutEvent),
  dragover: move(DragOverEvent, DragEnterEvent, DragLeaveEvent),
  mouseout: inactive(MouseOutEvent),
  dragleave: inactive(DragLeaveEvent),
  mousedown(evt) {
    this._down = this._active;
    this.fire(MouseDownEvent, evt);
  },
  click(evt) {
    if (this._down === this._active) {
      this.fire(ClickEvent, evt);
      this._down = null;
    }
  },
  touchstart(evt) {
    this._touch = this.pickEvent(evt.changedTouches[0]);
    if (this._first) {
      this._active = this._touch;
      this._first = false;
    }
    this.fire(TouchStartEvent, evt, true);
  },
  touchmove(evt) {
    this.fire(TouchMoveEvent, evt, true);
  },
  touchend(evt) {
    this.fire(TouchEndEvent, evt, true);
    this._touch = null;
  },
  fire(type3, evt, touch2) {
    const a4 = touch2 ? this._touch : this._active, h2 = this._handlers[type3];
    evt.vegaType = type3;
    if (type3 === HrefEvent && a4 && a4.href) {
      this.handleHref(evt, a4, a4.href);
    } else if (type3 === TooltipShowEvent || type3 === TooltipHideEvent) {
      this.handleTooltip(evt, a4, type3 !== TooltipHideEvent);
    }
    if (h2) {
      for (let i = 0, len = h2.length; i < len; ++i) {
        h2[i].handler.call(this._obj, evt, a4);
      }
    }
  },
  on(type3, handler) {
    const name4 = this.eventName(type3), h2 = this._handlers, i = this._handlerIndex(h2[name4], type3, handler);
    if (i < 0) {
      eventListenerCheck(this, type3);
      (h2[name4] || (h2[name4] = [])).push({
        type: type3,
        handler
      });
    }
    return this;
  },
  off(type3, handler) {
    const name4 = this.eventName(type3), h2 = this._handlers[name4], i = this._handlerIndex(h2, type3, handler);
    if (i >= 0) {
      h2.splice(i, 1);
    }
    return this;
  },
  pickEvent(evt) {
    const p = point7(evt, this._canvas), o = this._origin;
    return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
  },
  pick(scene, x5, y5, gx, gy) {
    const g = this.context(), mark2 = Marks[scene.marktype];
    return mark2.pick.call(this, g, scene, x5, y5, gx, gy);
  }
});
function devicePixelRatio() {
  return typeof window !== "undefined" ? window.devicePixelRatio || 1 : 1;
}
var pixelRatio = devicePixelRatio();
function resize(canvas, width2, height2, origin, scaleFactor, opt) {
  const inDOM = typeof HTMLElement !== "undefined" && canvas instanceof HTMLElement && canvas.parentNode != null, context3 = canvas.getContext("2d"), ratio = inDOM ? pixelRatio : scaleFactor;
  canvas.width = width2 * ratio;
  canvas.height = height2 * ratio;
  for (const key2 in opt) {
    context3[key2] = opt[key2];
  }
  if (inDOM && ratio !== 1) {
    canvas.style.width = width2 + "px";
    canvas.style.height = height2 + "px";
  }
  context3.pixelRatio = ratio;
  context3.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
  return canvas;
}
function CanvasRenderer(loader2) {
  Renderer.call(this, loader2);
  this._options = {};
  this._redraw = false;
  this._dirty = new Bounds();
  this._tempb = new Bounds();
}
var base$1 = Renderer.prototype;
var viewBounds = (origin, width2, height2) => new Bounds().set(0, 0, width2, height2).translate(-origin[0], -origin[1]);
function clipToBounds(g, b2, origin) {
  b2.expand(1).round();
  if (g.pixelRatio % 1) {
    b2.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);
  }
  b2.translate(-(origin[0] % 1), -(origin[1] % 1));
  g.beginPath();
  g.rect(b2.x1, b2.y1, b2.width(), b2.height());
  g.clip();
  return b2;
}
inherits(CanvasRenderer, Renderer, {
  initialize(el, width2, height2, origin, scaleFactor, options) {
    this._options = options || {};
    this._canvas = this._options.externalContext ? null : domCanvas(1, 1, this._options.type);
    if (el && this._canvas) {
      domClear(el, 0).appendChild(this._canvas);
      this._canvas.setAttribute("class", "marks");
    }
    return base$1.initialize.call(this, el, width2, height2, origin, scaleFactor);
  },
  resize(width2, height2, origin, scaleFactor) {
    base$1.resize.call(this, width2, height2, origin, scaleFactor);
    if (this._canvas) {
      resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options.context);
    } else {
      const ctx = this._options.externalContext;
      if (!ctx)
        error("CanvasRenderer is missing a valid canvas or context");
      ctx.scale(this._scale, this._scale);
      ctx.translate(this._origin[0], this._origin[1]);
    }
    this._redraw = true;
    return this;
  },
  canvas() {
    return this._canvas;
  },
  context() {
    return this._options.externalContext || (this._canvas ? this._canvas.getContext("2d") : null);
  },
  dirty(item) {
    const b2 = this._tempb.clear().union(item.bounds);
    let g = item.mark.group;
    while (g) {
      b2.translate(g.x || 0, g.y || 0);
      g = g.mark.group;
    }
    this._dirty.union(b2);
  },
  _render(scene) {
    const g = this.context(), o = this._origin, w4 = this._width, h2 = this._height, db = this._dirty, vb = viewBounds(o, w4, h2);
    g.save();
    const b2 = this._redraw || db.empty() ? (this._redraw = false, vb.expand(1)) : clipToBounds(g, vb.intersect(db), o);
    this.clear(-o[0], -o[1], w4, h2);
    this.draw(g, scene, b2);
    g.restore();
    db.clear();
    return this;
  },
  draw(ctx, scene, bounds2) {
    const mark2 = Marks[scene.marktype];
    if (scene.clip)
      clip(ctx, scene);
    mark2.draw.call(this, ctx, scene, bounds2);
    if (scene.clip)
      ctx.restore();
  },
  clear(x5, y5, w4, h2) {
    const opt = this._options, g = this.context();
    if (opt.type !== "pdf" && !opt.externalContext) {
      g.clearRect(x5, y5, w4, h2);
    }
    if (this._bgcolor != null) {
      g.fillStyle = this._bgcolor;
      g.fillRect(x5, y5, w4, h2);
    }
  }
});
function SVGHandler(loader2, tooltip2) {
  Handler.call(this, loader2, tooltip2);
  const h2 = this;
  h2._hrefHandler = listener(h2, (evt, item) => {
    if (item && item.href)
      h2.handleHref(evt, item, item.href);
  });
  h2._tooltipHandler = listener(h2, (evt, item) => {
    h2.handleTooltip(evt, item, evt.type !== TooltipHideEvent);
  });
}
var listener = (context3, handler) => (evt) => {
  let item = evt.target.__data__;
  item = Array.isArray(item) ? item[0] : item;
  evt.vegaType = evt.type;
  handler.call(context3._obj, evt, item);
};
inherits(SVGHandler, Handler, {
  initialize(el, origin, obj) {
    let svg = this._svg;
    if (svg) {
      svg.removeEventListener(HrefEvent, this._hrefHandler);
      svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);
      svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);
    }
    this._svg = svg = el && domFind(el, "svg");
    if (svg) {
      svg.addEventListener(HrefEvent, this._hrefHandler);
      svg.addEventListener(TooltipShowEvent, this._tooltipHandler);
      svg.addEventListener(TooltipHideEvent, this._tooltipHandler);
    }
    return Handler.prototype.initialize.call(this, el, origin, obj);
  },
  canvas() {
    return this._svg;
  },
  on(type3, handler) {
    const name4 = this.eventName(type3), h2 = this._handlers, i = this._handlerIndex(h2[name4], type3, handler);
    if (i < 0) {
      const x5 = {
        type: type3,
        handler,
        listener: listener(this, handler)
      };
      (h2[name4] || (h2[name4] = [])).push(x5);
      if (this._svg) {
        this._svg.addEventListener(name4, x5.listener);
      }
    }
    return this;
  },
  off(type3, handler) {
    const name4 = this.eventName(type3), h2 = this._handlers[name4], i = this._handlerIndex(h2, type3, handler);
    if (i >= 0) {
      if (this._svg) {
        this._svg.removeEventListener(name4, h2[i].listener);
      }
      h2.splice(i, 1);
    }
    return this;
  }
});
var ARIA_HIDDEN = "aria-hidden";
var ARIA_LABEL = "aria-label";
var ARIA_ROLE = "role";
var ARIA_ROLEDESCRIPTION = "aria-roledescription";
var GRAPHICS_OBJECT = "graphics-object";
var GRAPHICS_SYMBOL = "graphics-symbol";
var bundle = (role, roledesc, label) => ({
  [ARIA_ROLE]: role,
  [ARIA_ROLEDESCRIPTION]: roledesc,
  [ARIA_LABEL]: label || void 0
});
var AriaIgnore = toSet(["axis-domain", "axis-grid", "axis-label", "axis-tick", "axis-title", "legend-band", "legend-entry", "legend-gradient", "legend-label", "legend-title", "legend-symbol", "title"]);
var AriaGuides = {
  "axis": {
    desc: "axis",
    caption: axisCaption
  },
  "legend": {
    desc: "legend",
    caption: legendCaption
  },
  "title-text": {
    desc: "title",
    caption: (item) => "Title text '".concat(titleCaption(item), "'")
  },
  "title-subtitle": {
    desc: "subtitle",
    caption: (item) => "Subtitle text '".concat(titleCaption(item), "'")
  }
};
var AriaEncode = {
  ariaRole: ARIA_ROLE,
  ariaRoleDescription: ARIA_ROLEDESCRIPTION,
  description: ARIA_LABEL
};
function ariaItemAttributes(emit2, item) {
  const hide = item.aria === false;
  emit2(ARIA_HIDDEN, hide || void 0);
  if (hide || item.description == null) {
    for (const prop in AriaEncode) {
      emit2(AriaEncode[prop], void 0);
    }
  } else {
    const type3 = item.mark.marktype;
    emit2(ARIA_LABEL, item.description);
    emit2(ARIA_ROLE, item.ariaRole || (type3 === "group" ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL));
    emit2(ARIA_ROLEDESCRIPTION, item.ariaRoleDescription || "".concat(type3, " mark"));
  }
}
function ariaMarkAttributes(mark2) {
  return mark2.aria === false ? {
    [ARIA_HIDDEN]: true
  } : AriaIgnore[mark2.role] ? null : AriaGuides[mark2.role] ? ariaGuide(mark2, AriaGuides[mark2.role]) : ariaMark(mark2);
}
function ariaMark(mark2) {
  const type3 = mark2.marktype;
  const recurse2 = type3 === "group" || type3 === "text" || mark2.items.some((_) => _.description != null && _.aria !== false);
  return bundle(recurse2 ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL, "".concat(type3, " mark container"), mark2.description);
}
function ariaGuide(mark2, opt) {
  try {
    const item = mark2.items[0], caption = opt.caption || (() => "");
    return bundle(opt.role || GRAPHICS_SYMBOL, opt.desc, item.description || caption(item));
  } catch (err) {
    return null;
  }
}
function titleCaption(item) {
  return array(item.text).join(" ");
}
function axisCaption(item) {
  const datum2 = item.datum, orient2 = item.orient, title2 = datum2.title ? extractTitle(item) : null, ctx = item.context, scale7 = ctx.scales[datum2.scale].value, locale4 = ctx.dataflow.locale(), type3 = scale7.type, xy = orient2 === "left" || orient2 === "right" ? "Y" : "X";
  return "".concat(xy, "-axis") + (title2 ? " titled '".concat(title2, "'") : "") + " for a ".concat(isDiscrete(type3) ? "discrete" : type3, " scale") + " with ".concat(domainCaption(locale4, scale7, item));
}
function legendCaption(item) {
  const datum2 = item.datum, title2 = datum2.title ? extractTitle(item) : null, type3 = "".concat(datum2.type || "", " legend").trim(), scales2 = datum2.scales, props = Object.keys(scales2), ctx = item.context, scale7 = ctx.scales[scales2[props[0]]].value, locale4 = ctx.dataflow.locale();
  return capitalize(type3) + (title2 ? " titled '".concat(title2, "'") : "") + " for ".concat(channelCaption(props)) + " with ".concat(domainCaption(locale4, scale7, item));
}
function extractTitle(item) {
  try {
    return array(peek(item.items).items[0].text).join(" ");
  } catch (err) {
    return null;
  }
}
function channelCaption(props) {
  props = props.map((p) => p + (p === "fill" || p === "stroke" ? " color" : ""));
  return props.length < 2 ? props[0] : props.slice(0, -1).join(", ") + " and " + peek(props);
}
function capitalize(s2) {
  return s2.length ? s2[0].toUpperCase() + s2.slice(1) : s2;
}
var innerText = (val) => (val + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
var attrText = (val) => innerText(val).replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
function markup() {
  let buf = "", outer = "", inner = "";
  const stack2 = [], clear2 = () => outer = inner = "", push2 = (tag) => {
    if (outer) {
      buf += "".concat(outer, ">").concat(inner);
      clear2();
    }
    stack2.push(tag);
  }, attr2 = (name4, value3) => {
    if (value3 != null)
      outer += " ".concat(name4, '="').concat(attrText(value3), '"');
    return m3;
  }, m3 = {
    open(tag) {
      push2(tag);
      outer = "<" + tag;
      for (var _len = arguments.length, attrs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        attrs[_key - 1] = arguments[_key];
      }
      for (const set7 of attrs) {
        for (const key2 in set7)
          attr2(key2, set7[key2]);
      }
      return m3;
    },
    close() {
      const tag = stack2.pop();
      if (outer) {
        buf += outer + (inner ? ">".concat(inner, "</").concat(tag, ">") : "/>");
      } else {
        buf += "</".concat(tag, ">");
      }
      clear2();
      return m3;
    },
    attr: attr2,
    text: (t4) => (inner += innerText(t4), m3),
    toString: () => buf
  };
  return m3;
}
var serializeXML = (node) => _serialize(markup(), node) + "";
function _serialize(m3, node) {
  m3.open(node.tagName);
  if (node.hasAttributes()) {
    const attrs = node.attributes, n = attrs.length;
    for (let i = 0; i < n; ++i) {
      m3.attr(attrs[i].name, attrs[i].value);
    }
  }
  if (node.hasChildNodes()) {
    const children3 = node.childNodes;
    for (const child of children3) {
      child.nodeType === 3 ? m3.text(child.nodeValue) : _serialize(m3, child);
    }
  }
  return m3.close();
}
var stylesAttr = {
  fill: "fill",
  fillOpacity: "fill-opacity",
  stroke: "stroke",
  strokeOpacity: "stroke-opacity",
  strokeWidth: "stroke-width",
  strokeCap: "stroke-linecap",
  strokeJoin: "stroke-linejoin",
  strokeDash: "stroke-dasharray",
  strokeDashOffset: "stroke-dashoffset",
  strokeMiterLimit: "stroke-miterlimit",
  opacity: "opacity"
};
var stylesCss = {
  blend: "mix-blend-mode"
};
var rootAttributes = {
  "fill": "none",
  "stroke-miterlimit": 10
};
var RootIndex = 0;
var xmlns = "http://www.w3.org/2000/xmlns/";
var svgns = metadata.xmlns;
function SVGRenderer(loader2) {
  Renderer.call(this, loader2);
  this._dirtyID = 0;
  this._dirty = [];
  this._svg = null;
  this._root = null;
  this._defs = null;
}
var base = Renderer.prototype;
inherits(SVGRenderer, Renderer, {
  initialize(el, width2, height2, origin, scaleFactor) {
    this._defs = {};
    this._clearDefs();
    if (el) {
      this._svg = domChild(el, 0, "svg", svgns);
      this._svg.setAttributeNS(xmlns, "xmlns", svgns);
      this._svg.setAttributeNS(xmlns, "xmlns:xlink", metadata["xmlns:xlink"]);
      this._svg.setAttribute("version", metadata["version"]);
      this._svg.setAttribute("class", "marks");
      domClear(el, 1);
      this._root = domChild(this._svg, RootIndex, "g", svgns);
      setAttributes(this._root, rootAttributes);
      domClear(this._svg, RootIndex + 1);
    }
    this.background(this._bgcolor);
    return base.initialize.call(this, el, width2, height2, origin, scaleFactor);
  },
  background(bgcolor) {
    if (arguments.length && this._svg) {
      this._svg.style.setProperty("background-color", bgcolor);
    }
    return base.background.apply(this, arguments);
  },
  resize(width2, height2, origin, scaleFactor) {
    base.resize.call(this, width2, height2, origin, scaleFactor);
    if (this._svg) {
      setAttributes(this._svg, {
        width: this._width * this._scale,
        height: this._height * this._scale,
        viewBox: "0 0 ".concat(this._width, " ").concat(this._height)
      });
      this._root.setAttribute("transform", "translate(".concat(this._origin, ")"));
    }
    this._dirty = [];
    return this;
  },
  canvas() {
    return this._svg;
  },
  svg() {
    const svg = this._svg, bg = this._bgcolor;
    if (!svg)
      return null;
    let node;
    if (bg) {
      svg.removeAttribute("style");
      node = domChild(svg, RootIndex, "rect", svgns);
      setAttributes(node, {
        width: this._width,
        height: this._height,
        fill: bg
      });
    }
    const text4 = serializeXML(svg);
    if (bg) {
      svg.removeChild(node);
      this._svg.style.setProperty("background-color", bg);
    }
    return text4;
  },
  _render(scene) {
    if (this._dirtyCheck()) {
      if (this._dirtyAll)
        this._clearDefs();
      this.mark(this._root, scene);
      domClear(this._root, 1);
    }
    this.defs();
    this._dirty = [];
    ++this._dirtyID;
    return this;
  },
  dirty(item) {
    if (item.dirty !== this._dirtyID) {
      item.dirty = this._dirtyID;
      this._dirty.push(item);
    }
  },
  isDirty(item) {
    return this._dirtyAll || !item._svg || !item._svg.ownerSVGElement || item.dirty === this._dirtyID;
  },
  _dirtyCheck() {
    this._dirtyAll = true;
    const items = this._dirty;
    if (!items.length || !this._dirtyID)
      return true;
    const id2 = ++this._dirtyID;
    let item, mark2, type3, mdef, i, n, o;
    for (i = 0, n = items.length; i < n; ++i) {
      item = items[i];
      mark2 = item.mark;
      if (mark2.marktype !== type3) {
        type3 = mark2.marktype;
        mdef = Marks[type3];
      }
      if (mark2.zdirty && mark2.dirty !== id2) {
        this._dirtyAll = false;
        dirtyParents(item, id2);
        mark2.items.forEach((i2) => {
          i2.dirty = id2;
        });
      }
      if (mark2.zdirty)
        continue;
      if (item.exit) {
        if (mdef.nested && mark2.items.length) {
          o = mark2.items[0];
          if (o._svg)
            this._update(mdef, o._svg, o);
        } else if (item._svg) {
          o = item._svg.parentNode;
          if (o)
            o.removeChild(item._svg);
        }
        item._svg = null;
        continue;
      }
      item = mdef.nested ? mark2.items[0] : item;
      if (item._update === id2)
        continue;
      if (!item._svg || !item._svg.ownerSVGElement) {
        this._dirtyAll = false;
        dirtyParents(item, id2);
      } else {
        this._update(mdef, item._svg, item);
      }
      item._update = id2;
    }
    return !this._dirtyAll;
  },
  mark(el, scene, prev) {
    if (!this.isDirty(scene)) {
      return scene._svg;
    }
    const svg = this._svg, mdef = Marks[scene.marktype], events4 = scene.interactive === false ? "none" : null, isGroup = mdef.tag === "g";
    const parent = bind(scene, el, prev, "g", svg);
    parent.setAttribute("class", cssClass(scene));
    const aria2 = ariaMarkAttributes(scene);
    for (const key2 in aria2)
      setAttribute(parent, key2, aria2[key2]);
    if (!isGroup) {
      setAttribute(parent, "pointer-events", events4);
    }
    setAttribute(parent, "clip-path", scene.clip ? clip$1(this, scene, scene.group) : null);
    let sibling = null, i = 0;
    const process2 = (item) => {
      const dirty = this.isDirty(item), node = bind(item, parent, sibling, mdef.tag, svg);
      if (dirty) {
        this._update(mdef, node, item);
        if (isGroup)
          recurse(this, node, item);
      }
      sibling = node;
      ++i;
    };
    if (mdef.nested) {
      if (scene.items.length)
        process2(scene.items[0]);
    } else {
      visit(scene, process2);
    }
    domClear(parent, i);
    return parent;
  },
  _update(mdef, el, item) {
    element = el;
    values = el.__values__;
    ariaItemAttributes(emit, item);
    mdef.attr(emit, item, this);
    const extra = mark_extras[mdef.type];
    if (extra)
      extra.call(this, mdef, el, item);
    if (element)
      this.style(element, item);
  },
  style(el, item) {
    if (item == null)
      return;
    for (const prop in stylesAttr) {
      let value3 = prop === "font" ? fontFamily(item) : item[prop];
      if (value3 === values[prop])
        continue;
      const name4 = stylesAttr[prop];
      if (value3 == null) {
        el.removeAttribute(name4);
      } else {
        if (isGradient(value3)) {
          value3 = gradientRef(value3, this._defs.gradient, href());
        }
        el.setAttribute(name4, value3 + "");
      }
      values[prop] = value3;
    }
    for (const prop in stylesCss) {
      setStyle(el, stylesCss[prop], item[prop]);
    }
  },
  defs() {
    const svg = this._svg, defs = this._defs;
    let el = defs.el, index5 = 0;
    for (const id2 in defs.gradient) {
      if (!el)
        defs.el = el = domChild(svg, RootIndex + 1, "defs", svgns);
      index5 = updateGradient(el, defs.gradient[id2], index5);
    }
    for (const id2 in defs.clipping) {
      if (!el)
        defs.el = el = domChild(svg, RootIndex + 1, "defs", svgns);
      index5 = updateClipping(el, defs.clipping[id2], index5);
    }
    if (el) {
      index5 === 0 ? (svg.removeChild(el), defs.el = null) : domClear(el, index5);
    }
  },
  _clearDefs() {
    const def2 = this._defs;
    def2.gradient = {};
    def2.clipping = {};
  }
});
function dirtyParents(item, id2) {
  for (; item && item.dirty !== id2; item = item.mark.group) {
    item.dirty = id2;
    if (item.mark && item.mark.dirty !== id2) {
      item.mark.dirty = id2;
    } else
      return;
  }
}
function updateGradient(el, grad, index5) {
  let i, n, stop3;
  if (grad.gradient === "radial") {
    let pt = domChild(el, index5++, "pattern", svgns);
    setAttributes(pt, {
      id: patternPrefix + grad.id,
      viewBox: "0,0,1,1",
      width: "100%",
      height: "100%",
      preserveAspectRatio: "xMidYMid slice"
    });
    pt = domChild(pt, 0, "rect", svgns);
    setAttributes(pt, {
      width: 1,
      height: 1,
      fill: "url(".concat(href(), "#").concat(grad.id, ")")
    });
    el = domChild(el, index5++, "radialGradient", svgns);
    setAttributes(el, {
      id: grad.id,
      fx: grad.x1,
      fy: grad.y1,
      fr: grad.r1,
      cx: grad.x2,
      cy: grad.y2,
      r: grad.r2
    });
  } else {
    el = domChild(el, index5++, "linearGradient", svgns);
    setAttributes(el, {
      id: grad.id,
      x1: grad.x1,
      x2: grad.x2,
      y1: grad.y1,
      y2: grad.y2
    });
  }
  for (i = 0, n = grad.stops.length; i < n; ++i) {
    stop3 = domChild(el, i, "stop", svgns);
    stop3.setAttribute("offset", grad.stops[i].offset);
    stop3.setAttribute("stop-color", grad.stops[i].color);
  }
  domClear(el, i);
  return index5;
}
function updateClipping(el, clip3, index5) {
  let mask;
  el = domChild(el, index5, "clipPath", svgns);
  el.setAttribute("id", clip3.id);
  if (clip3.path) {
    mask = domChild(el, 0, "path", svgns);
    mask.setAttribute("d", clip3.path);
  } else {
    mask = domChild(el, 0, "rect", svgns);
    setAttributes(mask, {
      x: 0,
      y: 0,
      width: clip3.width,
      height: clip3.height
    });
  }
  domClear(el, 1);
  return index5 + 1;
}
function recurse(renderer, el, group4) {
  el = el.lastChild.previousSibling;
  let prev, idx = 0;
  visit(group4, (item) => {
    prev = renderer.mark(el, item, prev);
    ++idx;
  });
  domClear(el, 1 + idx);
}
function bind(item, el, sibling, tag, svg) {
  let node = item._svg, doc;
  if (!node) {
    doc = el.ownerDocument;
    node = domCreate(doc, tag, svgns);
    item._svg = node;
    if (item.mark) {
      node.__data__ = item;
      node.__values__ = {
        fill: "default"
      };
      if (tag === "g") {
        const bg = domCreate(doc, "path", svgns);
        node.appendChild(bg);
        bg.__data__ = item;
        const cg = domCreate(doc, "g", svgns);
        node.appendChild(cg);
        cg.__data__ = item;
        const fg = domCreate(doc, "path", svgns);
        node.appendChild(fg);
        fg.__data__ = item;
        fg.__values__ = {
          fill: "default"
        };
      }
    }
  }
  if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) {
    el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
  }
  return node;
}
function siblingCheck(node, sibling) {
  return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling;
}
var element = null;
var values = null;
var mark_extras = {
  group(mdef, el, item) {
    const fg = element = el.childNodes[2];
    values = fg.__values__;
    mdef.foreground(emit, item, this);
    values = el.__values__;
    element = el.childNodes[1];
    mdef.content(emit, item, this);
    const bg = element = el.childNodes[0];
    mdef.background(emit, item, this);
    const value3 = item.mark.interactive === false ? "none" : null;
    if (value3 !== values.events) {
      setAttribute(fg, "pointer-events", value3);
      setAttribute(bg, "pointer-events", value3);
      values.events = value3;
    }
    if (item.strokeForeground && item.stroke) {
      const fill2 = item.fill;
      setAttribute(fg, "display", null);
      this.style(bg, item);
      setAttribute(bg, "stroke", null);
      if (fill2)
        item.fill = null;
      values = fg.__values__;
      this.style(fg, item);
      if (fill2)
        item.fill = fill2;
      element = null;
    } else {
      setAttribute(fg, "display", "none");
    }
  },
  image(mdef, el, item) {
    if (item.smooth === false) {
      setStyle(el, "image-rendering", "optimizeSpeed");
      setStyle(el, "image-rendering", "pixelated");
    } else {
      setStyle(el, "image-rendering", null);
    }
  },
  text(mdef, el, item) {
    const tl2 = textLines(item);
    let key2, value3, doc, lh;
    if (isArray(tl2)) {
      value3 = tl2.map((_) => textValue(item, _));
      key2 = value3.join("\n");
      if (key2 !== values.text) {
        domClear(el, 0);
        doc = el.ownerDocument;
        lh = lineHeight(item);
        value3.forEach((t4, i) => {
          const ts2 = domCreate(doc, "tspan", svgns);
          ts2.__data__ = item;
          ts2.textContent = t4;
          if (i) {
            ts2.setAttribute("x", 0);
            ts2.setAttribute("dy", lh);
          }
          el.appendChild(ts2);
        });
        values.text = key2;
      }
    } else {
      value3 = textValue(item, tl2);
      if (value3 !== values.text) {
        el.textContent = value3;
        values.text = value3;
      }
    }
    setAttribute(el, "font-family", fontFamily(item));
    setAttribute(el, "font-size", fontSize(item) + "px");
    setAttribute(el, "font-style", item.fontStyle);
    setAttribute(el, "font-variant", item.fontVariant);
    setAttribute(el, "font-weight", item.fontWeight);
  }
};
function emit(name4, value3, ns) {
  if (value3 === values[name4])
    return;
  if (ns) {
    setAttributeNS(element, name4, value3, ns);
  } else {
    setAttribute(element, name4, value3);
  }
  values[name4] = value3;
}
function setStyle(el, name4, value3) {
  if (value3 !== values[name4]) {
    if (value3 == null) {
      el.style.removeProperty(name4);
    } else {
      el.style.setProperty(name4, value3 + "");
    }
    values[name4] = value3;
  }
}
function setAttributes(el, attrs) {
  for (const key2 in attrs) {
    setAttribute(el, key2, attrs[key2]);
  }
}
function setAttribute(el, name4, value3) {
  if (value3 != null) {
    el.setAttribute(name4, value3);
  } else {
    el.removeAttribute(name4);
  }
}
function setAttributeNS(el, name4, value3, ns) {
  if (value3 != null) {
    el.setAttributeNS(ns, name4, value3);
  } else {
    el.removeAttributeNS(ns, name4);
  }
}
function href() {
  let loc;
  return typeof window === "undefined" ? "" : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
}
function SVGStringRenderer(loader2) {
  Renderer.call(this, loader2);
  this._text = null;
  this._defs = {
    gradient: {},
    clipping: {}
  };
}
inherits(SVGStringRenderer, Renderer, {
  svg() {
    return this._text;
  },
  _render(scene) {
    const m3 = markup();
    m3.open("svg", extend({}, metadata, {
      class: "marks",
      width: this._width * this._scale,
      height: this._height * this._scale,
      viewBox: "0 0 ".concat(this._width, " ").concat(this._height)
    }));
    const bg = this._bgcolor;
    if (bg && bg !== "transparent" && bg !== "none") {
      m3.open("rect", {
        width: this._width,
        height: this._height,
        fill: bg
      }).close();
    }
    m3.open("g", rootAttributes, {
      transform: "translate(" + this._origin + ")"
    });
    this.mark(m3, scene);
    m3.close();
    this.defs(m3);
    this._text = m3.close() + "";
    return this;
  },
  mark(m3, scene) {
    const mdef = Marks[scene.marktype], tag = mdef.tag, attrList = [ariaItemAttributes, mdef.attr];
    m3.open("g", {
      "class": cssClass(scene),
      "clip-path": scene.clip ? clip$1(this, scene, scene.group) : null
    }, ariaMarkAttributes(scene), {
      "pointer-events": tag !== "g" && scene.interactive === false ? "none" : null
    });
    const process2 = (item) => {
      const href2 = this.href(item);
      if (href2)
        m3.open("a", href2);
      m3.open(tag, this.attr(scene, item, attrList, tag !== "g" ? tag : null));
      if (tag === "text") {
        const tl2 = textLines(item);
        if (isArray(tl2)) {
          const attrs = {
            x: 0,
            dy: lineHeight(item)
          };
          for (let i = 0; i < tl2.length; ++i) {
            m3.open("tspan", i ? attrs : null).text(textValue(item, tl2[i])).close();
          }
        } else {
          m3.text(textValue(item, tl2));
        }
      } else if (tag === "g") {
        const fore = item.strokeForeground, fill2 = item.fill, stroke2 = item.stroke;
        if (fore && stroke2) {
          item.stroke = null;
        }
        m3.open("path", this.attr(scene, item, mdef.background, "bgrect")).close();
        m3.open("g", this.attr(scene, item, mdef.content));
        visit(item, (scene2) => this.mark(m3, scene2));
        m3.close();
        if (fore && stroke2) {
          if (fill2)
            item.fill = null;
          item.stroke = stroke2;
          m3.open("path", this.attr(scene, item, mdef.foreground, "bgrect")).close();
          if (fill2)
            item.fill = fill2;
        } else {
          m3.open("path", this.attr(scene, item, mdef.foreground, "bgfore")).close();
        }
      }
      m3.close();
      if (href2)
        m3.close();
    };
    if (mdef.nested) {
      if (scene.items && scene.items.length)
        process2(scene.items[0]);
    } else {
      visit(scene, process2);
    }
    return m3.close();
  },
  href(item) {
    const href2 = item.href;
    let attr2;
    if (href2) {
      if (attr2 = this._hrefs && this._hrefs[href2]) {
        return attr2;
      } else {
        this.sanitizeURL(href2).then((attr3) => {
          attr3["xlink:href"] = attr3.href;
          attr3.href = null;
          (this._hrefs || (this._hrefs = {}))[href2] = attr3;
        });
      }
    }
    return null;
  },
  attr(scene, item, attrs, tag) {
    const object2 = {}, emit2 = (name4, value3, ns, prefixed) => {
      object2[prefixed || name4] = value3;
    };
    if (Array.isArray(attrs)) {
      attrs.forEach((fn) => fn(emit2, item, this));
    } else {
      attrs(emit2, item, this);
    }
    if (tag) {
      style(object2, item, scene, tag, this._defs);
    }
    return object2;
  },
  defs(m3) {
    const gradient4 = this._defs.gradient, clipping = this._defs.clipping, count4 = Object.keys(gradient4).length + Object.keys(clipping).length;
    if (count4 === 0)
      return;
    m3.open("defs");
    for (const id2 in gradient4) {
      const def2 = gradient4[id2], stops = def2.stops;
      if (def2.gradient === "radial") {
        m3.open("pattern", {
          id: patternPrefix + id2,
          viewBox: "0,0,1,1",
          width: "100%",
          height: "100%",
          preserveAspectRatio: "xMidYMid slice"
        });
        m3.open("rect", {
          width: "1",
          height: "1",
          fill: "url(#" + id2 + ")"
        }).close();
        m3.close();
        m3.open("radialGradient", {
          id: id2,
          fx: def2.x1,
          fy: def2.y1,
          fr: def2.r1,
          cx: def2.x2,
          cy: def2.y2,
          r: def2.r2
        });
      } else {
        m3.open("linearGradient", {
          id: id2,
          x1: def2.x1,
          x2: def2.x2,
          y1: def2.y1,
          y2: def2.y2
        });
      }
      for (let i = 0; i < stops.length; ++i) {
        m3.open("stop", {
          offset: stops[i].offset,
          "stop-color": stops[i].color
        }).close();
      }
      m3.close();
    }
    for (const id2 in clipping) {
      const def2 = clipping[id2];
      m3.open("clipPath", {
        id: id2
      });
      if (def2.path) {
        m3.open("path", {
          d: def2.path
        }).close();
      } else {
        m3.open("rect", {
          x: 0,
          y: 0,
          width: def2.width,
          height: def2.height
        }).close();
      }
      m3.close();
    }
    m3.close();
  }
});
function style(s2, item, scene, tag, defs) {
  let styleList;
  if (item == null)
    return s2;
  if (tag === "bgrect" && scene.interactive === false) {
    s2["pointer-events"] = "none";
  }
  if (tag === "bgfore") {
    if (scene.interactive === false) {
      s2["pointer-events"] = "none";
    }
    s2.display = "none";
    if (item.fill !== null)
      return s2;
  }
  if (tag === "image" && item.smooth === false) {
    styleList = ["image-rendering: optimizeSpeed;", "image-rendering: pixelated;"];
  }
  if (tag === "text") {
    s2["font-family"] = fontFamily(item);
    s2["font-size"] = fontSize(item) + "px";
    s2["font-style"] = item.fontStyle;
    s2["font-variant"] = item.fontVariant;
    s2["font-weight"] = item.fontWeight;
  }
  for (const prop in stylesAttr) {
    let value3 = item[prop];
    const name4 = stylesAttr[prop];
    if (value3 === "transparent" && (name4 === "fill" || name4 === "stroke"))
      ;
    else if (value3 != null) {
      if (isGradient(value3)) {
        value3 = gradientRef(value3, defs.gradient, "");
      }
      s2[name4] = value3;
    }
  }
  for (const prop in stylesCss) {
    const value3 = item[prop];
    if (value3 != null) {
      styleList = styleList || [];
      styleList.push("".concat(stylesCss[prop], ": ").concat(value3, ";"));
    }
  }
  if (styleList) {
    s2.style = styleList.join(" ");
  }
  return s2;
}
var Canvas = "canvas";
var PNG = "png";
var SVG = "svg";
var None2 = "none";
var RenderType = {
  Canvas,
  PNG,
  SVG,
  None: None2
};
var modules = {};
modules[Canvas] = modules[PNG] = {
  renderer: CanvasRenderer,
  headless: CanvasRenderer,
  handler: CanvasHandler
};
modules[SVG] = {
  renderer: SVGRenderer,
  headless: SVGStringRenderer,
  handler: SVGHandler
};
modules[None2] = {};
function renderModule(name4, _) {
  name4 = String(name4 || "").toLowerCase();
  if (arguments.length > 1) {
    modules[name4] = _;
    return this;
  } else {
    return modules[name4];
  }
}
function intersect2(scene, bounds2, filter5) {
  const hits = [], box = new Bounds().union(bounds2), type3 = scene.marktype;
  return type3 ? intersectMark(scene, box, filter5, hits) : type3 === "group" ? intersectGroup(scene, box, filter5, hits) : error("Intersect scene must be mark node or group item.");
}
function intersectMark(mark2, box, filter5, hits) {
  if (visitMark(mark2, box, filter5)) {
    const items = mark2.items, type3 = mark2.marktype, n = items.length;
    let i = 0;
    if (type3 === "group") {
      for (; i < n; ++i) {
        intersectGroup(items[i], box, filter5, hits);
      }
    } else {
      for (const test2 = Marks[type3].isect; i < n; ++i) {
        const item = items[i];
        if (intersectItem(item, box, test2))
          hits.push(item);
      }
    }
  }
  return hits;
}
function visitMark(mark2, box, filter5) {
  return mark2.bounds && box.intersects(mark2.bounds) && (mark2.marktype === "group" || mark2.interactive !== false && (!filter5 || filter5(mark2)));
}
function intersectGroup(group4, box, filter5, hits) {
  if (filter5 && filter5(group4.mark) && intersectItem(group4, box, Marks.group.isect)) {
    hits.push(group4);
  }
  const marks = group4.items, n = marks && marks.length;
  if (n) {
    const x5 = group4.x || 0, y5 = group4.y || 0;
    box.translate(-x5, -y5);
    for (let i = 0; i < n; ++i) {
      intersectMark(marks[i], box, filter5, hits);
    }
    box.translate(x5, y5);
  }
  return hits;
}
function intersectItem(item, box, test2) {
  const bounds2 = item.bounds;
  return box.encloses(bounds2) || box.intersects(bounds2) && test2(item, box);
}
var clipBounds = new Bounds();
function boundClip(mark2) {
  const clip3 = mark2.clip;
  if (isFunction(clip3)) {
    clip3(boundContext(clipBounds.clear()));
  } else if (clip3) {
    clipBounds.set(0, 0, mark2.group.width, mark2.group.height);
  } else
    return;
  mark2.bounds.intersect(clipBounds);
}
var TOLERANCE = 1e-9;
function sceneEqual(a4, b2, key2) {
  return a4 === b2 ? true : key2 === "path" ? pathEqual(a4, b2) : a4 instanceof Date && b2 instanceof Date ? +a4 === +b2 : isNumber(a4) && isNumber(b2) ? Math.abs(a4 - b2) <= TOLERANCE : !a4 || !b2 || !isObject(a4) && !isObject(b2) ? a4 == b2 : objectEqual(a4, b2);
}
function pathEqual(a4, b2) {
  return sceneEqual(parse4(a4), parse4(b2));
}
function objectEqual(a4, b2) {
  var ka = Object.keys(a4), kb = Object.keys(b2), key2, i;
  if (ka.length !== kb.length)
    return false;
  ka.sort();
  kb.sort();
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  for (i = ka.length - 1; i >= 0; i--) {
    key2 = ka[i];
    if (!sceneEqual(a4[key2], b2[key2], key2))
      return false;
  }
  return typeof a4 === typeof b2;
}
function resetSVGDefIds() {
  resetSVGClipId();
  resetSVGGradientId();
}

// node_modules/vega-view-transforms/build/vega-view-transforms.module.js
var Top = "top";
var Left = "left";
var Right = "right";
var Bottom = "bottom";
var TopLeft = "top-left";
var TopRight = "top-right";
var BottomLeft = "bottom-left";
var BottomRight = "bottom-right";
var Start = "start";
var Middle = "middle";
var End = "end";
var X = "x";
var Y = "y";
var Group = "group";
var AxisRole = "axis";
var TitleRole = "title";
var FrameRole = "frame";
var ScopeRole = "scope";
var LegendRole = "legend";
var RowHeader = "row-header";
var RowFooter = "row-footer";
var RowTitle = "row-title";
var ColHeader = "column-header";
var ColFooter = "column-footer";
var ColTitle = "column-title";
var Padding = "padding";
var Symbols = "symbol";
var Fit = "fit";
var FitX = "fit-x";
var FitY = "fit-y";
var Pad = "pad";
var None3 = "none";
var All = "all";
var Each = "each";
var Flush = "flush";
var Column = "column";
var Row = "row";
function Bound(params2) {
  Transform.call(this, null, params2);
}
inherits(Bound, Transform, {
  transform(_, pulse2) {
    const view = pulse2.dataflow, mark2 = _.mark, type3 = mark2.marktype, entry2 = Marks[type3], bound2 = entry2.bound;
    let markBounds = mark2.bounds, rebound;
    if (entry2.nested) {
      if (mark2.items.length)
        view.dirty(mark2.items[0]);
      markBounds = boundItem2(mark2, bound2);
      mark2.items.forEach((item) => {
        item.bounds.clear().union(markBounds);
      });
    } else if (type3 === Group || _.modified()) {
      pulse2.visit(pulse2.MOD, (item) => view.dirty(item));
      markBounds.clear();
      mark2.items.forEach((item) => markBounds.union(boundItem2(item, bound2)));
      switch (mark2.role) {
        case AxisRole:
        case LegendRole:
        case TitleRole:
          pulse2.reflow();
      }
    } else {
      rebound = pulse2.changed(pulse2.REM);
      pulse2.visit(pulse2.ADD, (item) => {
        markBounds.union(boundItem2(item, bound2));
      });
      pulse2.visit(pulse2.MOD, (item) => {
        rebound = rebound || markBounds.alignsWith(item.bounds);
        view.dirty(item);
        markBounds.union(boundItem2(item, bound2));
      });
      if (rebound) {
        markBounds.clear();
        mark2.items.forEach((item) => markBounds.union(item.bounds));
      }
    }
    boundClip(mark2);
    return pulse2.modifies("bounds");
  }
});
function boundItem2(item, bound2, opt) {
  return bound2(item.bounds.clear(), item, opt);
}
var COUNTER_NAME = ":vega_identifier:";
function Identifier(params2) {
  Transform.call(this, 0, params2);
}
Identifier.Definition = {
  "type": "Identifier",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "as",
    "type": "string",
    "required": true
  }]
};
inherits(Identifier, Transform, {
  transform(_, pulse2) {
    const counter = getCounter(pulse2.dataflow), as = _.as;
    let id2 = counter.value;
    pulse2.visit(pulse2.ADD, (t4) => t4[as] = t4[as] || ++id2);
    counter.set(this.value = id2);
    return pulse2;
  }
});
function getCounter(view) {
  return view._signals[COUNTER_NAME] || (view._signals[COUNTER_NAME] = view.add(0));
}
function Mark(params2) {
  Transform.call(this, null, params2);
}
inherits(Mark, Transform, {
  transform(_, pulse2) {
    let mark2 = this.value;
    if (!mark2) {
      mark2 = pulse2.dataflow.scenegraph().mark(_.markdef, lookup2(_), _.index);
      mark2.group.context = _.context;
      if (!_.context.group)
        _.context.group = mark2.group;
      mark2.source = this.source;
      mark2.clip = _.clip;
      mark2.interactive = _.interactive;
      this.value = mark2;
    }
    const Init = mark2.marktype === Group ? GroupItem : Item;
    pulse2.visit(pulse2.ADD, (item) => Init.call(item, mark2));
    if (_.modified("clip") || _.modified("interactive")) {
      mark2.clip = _.clip;
      mark2.interactive = !!_.interactive;
      mark2.zdirty = true;
      pulse2.reflow();
    }
    mark2.items = pulse2.source;
    return pulse2;
  }
});
function lookup2(_) {
  const g = _.groups, p = _.parent;
  return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
}
function Overlap(params2) {
  Transform.call(this, null, params2);
}
var methods = {
  parity: (items) => items.filter((item, i) => i % 2 ? item.opacity = 0 : 1),
  greedy: (items, sep) => {
    let a4;
    return items.filter((b2, i) => !i || !intersect3(a4.bounds, b2.bounds, sep) ? (a4 = b2, 1) : b2.opacity = 0);
  }
};
var intersect3 = (a4, b2, sep) => sep > Math.max(b2.x1 - a4.x2, a4.x1 - b2.x2, b2.y1 - a4.y2, a4.y1 - b2.y2);
var hasOverlap = (items, pad4) => {
  for (var i = 1, n = items.length, a4 = items[0].bounds, b2; i < n; a4 = b2, ++i) {
    if (intersect3(a4, b2 = items[i].bounds, pad4))
      return true;
  }
};
var hasBounds = (item) => {
  const b2 = item.bounds;
  return b2.width() > 1 && b2.height() > 1;
};
var boundTest = (scale7, orient2, tolerance) => {
  var range8 = scale7.range(), b2 = new Bounds();
  if (orient2 === Top || orient2 === Bottom) {
    b2.set(range8[0], -Infinity, range8[1], Infinity);
  } else {
    b2.set(-Infinity, range8[0], Infinity, range8[1]);
  }
  b2.expand(tolerance || 1);
  return (item) => b2.encloses(item.bounds);
};
var reset = (source3) => {
  source3.forEach((item) => item.opacity = 1);
  return source3;
};
var reflow = (pulse2, _) => pulse2.reflow(_.modified()).modifies("opacity");
inherits(Overlap, Transform, {
  transform(_, pulse2) {
    const reduce4 = methods[_.method] || methods.parity, sep = _.separation || 0;
    let source3 = pulse2.materialize(pulse2.SOURCE).source, items, test2;
    if (!source3 || !source3.length)
      return;
    if (!_.method) {
      if (_.modified("method")) {
        reset(source3);
        pulse2 = reflow(pulse2, _);
      }
      return pulse2;
    }
    source3 = source3.filter(hasBounds);
    if (!source3.length)
      return;
    if (_.sort) {
      source3 = source3.slice().sort(_.sort);
    }
    items = reset(source3);
    pulse2 = reflow(pulse2, _);
    if (items.length >= 3 && hasOverlap(items, sep)) {
      do {
        items = reduce4(items, sep);
      } while (items.length >= 3 && hasOverlap(items, sep));
      if (items.length < 3 && !peek(source3).opacity) {
        if (items.length > 1)
          peek(items).opacity = 0;
        peek(source3).opacity = 1;
      }
    }
    if (_.boundScale && _.boundTolerance >= 0) {
      test2 = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
      source3.forEach((item) => {
        if (!test2(item))
          item.opacity = 0;
      });
    }
    const bounds2 = items[0].mark.bounds.clear();
    source3.forEach((item) => {
      if (item.opacity)
        bounds2.union(item.bounds);
    });
    return pulse2;
  }
});
function Render(params2) {
  Transform.call(this, null, params2);
}
inherits(Render, Transform, {
  transform(_, pulse2) {
    const view = pulse2.dataflow;
    pulse2.visit(pulse2.ALL, (item) => view.dirty(item));
    if (pulse2.fields && pulse2.fields["zindex"]) {
      const item = pulse2.source && pulse2.source[0];
      if (item)
        item.mark.zdirty = true;
    }
  }
});
var tempBounds2 = new Bounds();
function set2(item, property2, value3) {
  return item[property2] === value3 ? 0 : (item[property2] = value3, 1);
}
function isYAxis(mark2) {
  var orient2 = mark2.items[0].orient;
  return orient2 === Left || orient2 === Right;
}
function axisIndices(datum2) {
  let index5 = +datum2.grid;
  return [
    datum2.ticks ? index5++ : -1,
    datum2.labels ? index5++ : -1,
    index5 + +datum2.domain
  ];
}
function axisLayout(view, axis, width2, height2) {
  var item = axis.items[0], datum2 = item.datum, delta = item.translate != null ? item.translate : 0.5, orient2 = item.orient, indices = axisIndices(datum2), range8 = item.range, offset4 = item.offset, position2 = item.position, minExtent = item.minExtent, maxExtent = item.maxExtent, title2 = datum2.title && item.items[indices[2]].items[0], titlePadding = item.titlePadding, bounds2 = item.bounds, dl = title2 && multiLineOffset(title2), x5 = 0, y5 = 0, i, s2;
  tempBounds2.clear().union(bounds2);
  bounds2.clear();
  if ((i = indices[0]) > -1)
    bounds2.union(item.items[i].bounds);
  if ((i = indices[1]) > -1)
    bounds2.union(item.items[i].bounds);
  switch (orient2) {
    case Top:
      x5 = position2 || 0;
      y5 = -offset4;
      s2 = Math.max(minExtent, Math.min(maxExtent, -bounds2.y1));
      bounds2.add(0, -s2).add(range8, 0);
      if (title2)
        axisTitleLayout(view, title2, s2, titlePadding, dl, 0, -1, bounds2);
      break;
    case Left:
      x5 = -offset4;
      y5 = position2 || 0;
      s2 = Math.max(minExtent, Math.min(maxExtent, -bounds2.x1));
      bounds2.add(-s2, 0).add(0, range8);
      if (title2)
        axisTitleLayout(view, title2, s2, titlePadding, dl, 1, -1, bounds2);
      break;
    case Right:
      x5 = width2 + offset4;
      y5 = position2 || 0;
      s2 = Math.max(minExtent, Math.min(maxExtent, bounds2.x2));
      bounds2.add(0, 0).add(s2, range8);
      if (title2)
        axisTitleLayout(view, title2, s2, titlePadding, dl, 1, 1, bounds2);
      break;
    case Bottom:
      x5 = position2 || 0;
      y5 = height2 + offset4;
      s2 = Math.max(minExtent, Math.min(maxExtent, bounds2.y2));
      bounds2.add(0, 0).add(range8, s2);
      if (title2)
        axisTitleLayout(view, title2, s2, titlePadding, 0, 0, 1, bounds2);
      break;
    default:
      x5 = item.x;
      y5 = item.y;
  }
  boundStroke(bounds2.translate(x5, y5), item);
  if (set2(item, "x", x5 + delta) | set2(item, "y", y5 + delta)) {
    item.bounds = tempBounds2;
    view.dirty(item);
    item.bounds = bounds2;
    view.dirty(item);
  }
  return item.mark.bounds.clear().union(bounds2);
}
function axisTitleLayout(view, title2, offset4, pad4, dl, isYAxis2, sign4, bounds2) {
  const b2 = title2.bounds;
  if (title2.auto) {
    const v2 = sign4 * (offset4 + dl + pad4);
    let dx = 0, dy = 0;
    view.dirty(title2);
    isYAxis2 ? dx = (title2.x || 0) - (title2.x = v2) : dy = (title2.y || 0) - (title2.y = v2);
    title2.mark.bounds.clear().union(b2.translate(-dx, -dy));
    view.dirty(title2);
  }
  bounds2.union(b2);
}
var min3 = (a4, b2) => Math.floor(Math.min(a4, b2));
var max3 = (a4, b2) => Math.ceil(Math.max(a4, b2));
function gridLayoutGroups(group4) {
  var groups3 = group4.items, n = groups3.length, i = 0, mark2, items;
  const views = {
    marks: [],
    rowheaders: [],
    rowfooters: [],
    colheaders: [],
    colfooters: [],
    rowtitle: null,
    coltitle: null
  };
  for (; i < n; ++i) {
    mark2 = groups3[i];
    items = mark2.items;
    if (mark2.marktype === Group) {
      switch (mark2.role) {
        case AxisRole:
        case LegendRole:
        case TitleRole:
          break;
        case RowHeader:
          views.rowheaders.push(...items);
          break;
        case RowFooter:
          views.rowfooters.push(...items);
          break;
        case ColHeader:
          views.colheaders.push(...items);
          break;
        case ColFooter:
          views.colfooters.push(...items);
          break;
        case RowTitle:
          views.rowtitle = items[0];
          break;
        case ColTitle:
          views.coltitle = items[0];
          break;
        default:
          views.marks.push(...items);
      }
    }
  }
  return views;
}
function bboxFlush(item) {
  return new Bounds().set(0, 0, item.width || 0, item.height || 0);
}
function bboxFull(item) {
  const b2 = item.bounds.clone();
  return b2.empty() ? b2.set(0, 0, 0, 0) : b2.translate(-(item.x || 0), -(item.y || 0));
}
function get4(opt, key2, d) {
  const v2 = isObject(opt) ? opt[key2] : opt;
  return v2 != null ? v2 : d !== void 0 ? d : 0;
}
function offsetValue(v2) {
  return v2 < 0 ? Math.ceil(-v2) : 0;
}
function gridLayout(view, groups3, opt) {
  var dirty = !opt.nodirty, bbox = opt.bounds === Flush ? bboxFlush : bboxFull, bounds2 = tempBounds2.set(0, 0, 0, 0), alignCol = get4(opt.align, Column), alignRow = get4(opt.align, Row), padCol = get4(opt.padding, Column), padRow = get4(opt.padding, Row), ncols = opt.columns || groups3.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups3.length / ncols), n = groups3.length, xOffset = Array(n), xExtent = Array(ncols), xMax = 0, yOffset = Array(n), yExtent = Array(nrows), yMax = 0, dx = Array(n), dy = Array(n), boxes = Array(n), m3, i, c3, r, b2, g, px2, py2, x5, y5, offset4;
  for (i = 0; i < ncols; ++i)
    xExtent[i] = 0;
  for (i = 0; i < nrows; ++i)
    yExtent[i] = 0;
  for (i = 0; i < n; ++i) {
    g = groups3[i];
    b2 = boxes[i] = bbox(g);
    g.x = g.x || 0;
    dx[i] = 0;
    g.y = g.y || 0;
    dy[i] = 0;
    c3 = i % ncols;
    r = ~~(i / ncols);
    xMax = Math.max(xMax, px2 = Math.ceil(b2.x2));
    yMax = Math.max(yMax, py2 = Math.ceil(b2.y2));
    xExtent[c3] = Math.max(xExtent[c3], px2);
    yExtent[r] = Math.max(yExtent[r], py2);
    xOffset[i] = padCol + offsetValue(b2.x1);
    yOffset[i] = padRow + offsetValue(b2.y1);
    if (dirty)
      view.dirty(groups3[i]);
  }
  for (i = 0; i < n; ++i) {
    if (i % ncols === 0)
      xOffset[i] = 0;
    if (i < ncols)
      yOffset[i] = 0;
  }
  if (alignCol === Each) {
    for (c3 = 1; c3 < ncols; ++c3) {
      for (offset4 = 0, i = c3; i < n; i += ncols) {
        if (offset4 < xOffset[i])
          offset4 = xOffset[i];
      }
      for (i = c3; i < n; i += ncols) {
        xOffset[i] = offset4 + xExtent[c3 - 1];
      }
    }
  } else if (alignCol === All) {
    for (offset4 = 0, i = 0; i < n; ++i) {
      if (i % ncols && offset4 < xOffset[i])
        offset4 = xOffset[i];
    }
    for (i = 0; i < n; ++i) {
      if (i % ncols)
        xOffset[i] = offset4 + xMax;
    }
  } else {
    for (alignCol = false, c3 = 1; c3 < ncols; ++c3) {
      for (i = c3; i < n; i += ncols) {
        xOffset[i] += xExtent[c3 - 1];
      }
    }
  }
  if (alignRow === Each) {
    for (r = 1; r < nrows; ++r) {
      for (offset4 = 0, i = r * ncols, m3 = i + ncols; i < m3; ++i) {
        if (offset4 < yOffset[i])
          offset4 = yOffset[i];
      }
      for (i = r * ncols; i < m3; ++i) {
        yOffset[i] = offset4 + yExtent[r - 1];
      }
    }
  } else if (alignRow === All) {
    for (offset4 = 0, i = ncols; i < n; ++i) {
      if (offset4 < yOffset[i])
        offset4 = yOffset[i];
    }
    for (i = ncols; i < n; ++i) {
      yOffset[i] = offset4 + yMax;
    }
  } else {
    for (alignRow = false, r = 1; r < nrows; ++r) {
      for (i = r * ncols, m3 = i + ncols; i < m3; ++i) {
        yOffset[i] += yExtent[r - 1];
      }
    }
  }
  for (x5 = 0, i = 0; i < n; ++i) {
    x5 = xOffset[i] + (i % ncols ? x5 : 0);
    dx[i] += x5 - groups3[i].x;
  }
  for (c3 = 0; c3 < ncols; ++c3) {
    for (y5 = 0, i = c3; i < n; i += ncols) {
      y5 += yOffset[i];
      dy[i] += y5 - groups3[i].y;
    }
  }
  if (alignCol && get4(opt.center, Column) && nrows > 1) {
    for (i = 0; i < n; ++i) {
      b2 = alignCol === All ? xMax : xExtent[i % ncols];
      x5 = b2 - boxes[i].x2 - groups3[i].x - dx[i];
      if (x5 > 0)
        dx[i] += x5 / 2;
    }
  }
  if (alignRow && get4(opt.center, Row) && ncols !== 1) {
    for (i = 0; i < n; ++i) {
      b2 = alignRow === All ? yMax : yExtent[~~(i / ncols)];
      y5 = b2 - boxes[i].y2 - groups3[i].y - dy[i];
      if (y5 > 0)
        dy[i] += y5 / 2;
    }
  }
  for (i = 0; i < n; ++i) {
    bounds2.union(boxes[i].translate(dx[i], dy[i]));
  }
  x5 = get4(opt.anchor, X);
  y5 = get4(opt.anchor, Y);
  switch (get4(opt.anchor, Column)) {
    case End:
      x5 -= bounds2.width();
      break;
    case Middle:
      x5 -= bounds2.width() / 2;
  }
  switch (get4(opt.anchor, Row)) {
    case End:
      y5 -= bounds2.height();
      break;
    case Middle:
      y5 -= bounds2.height() / 2;
  }
  x5 = Math.round(x5);
  y5 = Math.round(y5);
  bounds2.clear();
  for (i = 0; i < n; ++i) {
    groups3[i].mark.bounds.clear();
  }
  for (i = 0; i < n; ++i) {
    g = groups3[i];
    g.x += dx[i] += x5;
    g.y += dy[i] += y5;
    bounds2.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
    if (dirty)
      view.dirty(g);
  }
  return bounds2;
}
function trellisLayout(view, group4, opt) {
  var views = gridLayoutGroups(group4), groups3 = views.marks, bbox = opt.bounds === Flush ? boundFlush : boundFull, off = opt.offset, ncols = opt.columns || groups3.length, nrows = ncols <= 0 ? 1 : Math.ceil(groups3.length / ncols), cells = nrows * ncols, x5, y5, x22, y22, anchor, band3, offset4;
  const bounds2 = gridLayout(view, groups3, opt);
  if (bounds2.empty())
    bounds2.set(0, 0, 0, 0);
  if (views.rowheaders) {
    band3 = get4(opt.headerBand, Row, null);
    x5 = layoutHeaders(view, views.rowheaders, groups3, ncols, nrows, -get4(off, "rowHeader"), min3, 0, bbox, "x1", 0, ncols, 1, band3);
  }
  if (views.colheaders) {
    band3 = get4(opt.headerBand, Column, null);
    y5 = layoutHeaders(view, views.colheaders, groups3, ncols, ncols, -get4(off, "columnHeader"), min3, 1, bbox, "y1", 0, 1, ncols, band3);
  }
  if (views.rowfooters) {
    band3 = get4(opt.footerBand, Row, null);
    x22 = layoutHeaders(view, views.rowfooters, groups3, ncols, nrows, get4(off, "rowFooter"), max3, 0, bbox, "x2", ncols - 1, ncols, 1, band3);
  }
  if (views.colfooters) {
    band3 = get4(opt.footerBand, Column, null);
    y22 = layoutHeaders(view, views.colfooters, groups3, ncols, ncols, get4(off, "columnFooter"), max3, 1, bbox, "y2", cells - ncols, 1, ncols, band3);
  }
  if (views.rowtitle) {
    anchor = get4(opt.titleAnchor, Row);
    offset4 = get4(off, "rowTitle");
    offset4 = anchor === End ? x22 + offset4 : x5 - offset4;
    band3 = get4(opt.titleBand, Row, 0.5);
    layoutTitle(view, views.rowtitle, offset4, 0, bounds2, band3);
  }
  if (views.coltitle) {
    anchor = get4(opt.titleAnchor, Column);
    offset4 = get4(off, "columnTitle");
    offset4 = anchor === End ? y22 + offset4 : y5 - offset4;
    band3 = get4(opt.titleBand, Column, 0.5);
    layoutTitle(view, views.coltitle, offset4, 1, bounds2, band3);
  }
}
function boundFlush(item, field3) {
  return field3 === "x1" ? item.x || 0 : field3 === "y1" ? item.y || 0 : field3 === "x2" ? (item.x || 0) + (item.width || 0) : field3 === "y2" ? (item.y || 0) + (item.height || 0) : void 0;
}
function boundFull(item, field3) {
  return item.bounds[field3];
}
function layoutHeaders(view, headers, groups3, ncols, limit, offset4, agg, isX2, bound2, bf, start, stride, back, band3) {
  var n = groups3.length, init2 = 0, edge = 0, i, j, k3, m3, b2, h2, g, x5, y5;
  if (!n)
    return init2;
  for (i = start; i < n; i += stride) {
    if (groups3[i])
      init2 = agg(init2, bound2(groups3[i], bf));
  }
  if (!headers.length)
    return init2;
  if (headers.length > limit) {
    view.warn("Grid headers exceed limit: " + limit);
    headers = headers.slice(0, limit);
  }
  init2 += offset4;
  for (j = 0, m3 = headers.length; j < m3; ++j) {
    view.dirty(headers[j]);
    headers[j].mark.bounds.clear();
  }
  for (i = start, j = 0, m3 = headers.length; j < m3; ++j, i += stride) {
    h2 = headers[j];
    b2 = h2.mark.bounds;
    for (k3 = i; k3 >= 0 && (g = groups3[k3]) == null; k3 -= back)
      ;
    if (isX2) {
      x5 = band3 == null ? g.x : Math.round(g.bounds.x1 + band3 * g.bounds.width());
      y5 = init2;
    } else {
      x5 = init2;
      y5 = band3 == null ? g.y : Math.round(g.bounds.y1 + band3 * g.bounds.height());
    }
    b2.union(h2.bounds.translate(x5 - (h2.x || 0), y5 - (h2.y || 0)));
    h2.x = x5;
    h2.y = y5;
    view.dirty(h2);
    edge = agg(edge, b2[bf]);
  }
  return edge;
}
function layoutTitle(view, g, offset4, isX2, bounds2, band3) {
  if (!g)
    return;
  view.dirty(g);
  var x5 = offset4, y5 = offset4;
  isX2 ? x5 = Math.round(bounds2.x1 + band3 * bounds2.width()) : y5 = Math.round(bounds2.y1 + band3 * bounds2.height());
  g.bounds.translate(x5 - (g.x || 0), y5 - (g.y || 0));
  g.mark.bounds.clear().union(g.bounds);
  g.x = x5;
  g.y = y5;
  view.dirty(g);
}
function lookup$1(config, orient2) {
  const opt = config[orient2] || {};
  return (key2, d) => opt[key2] != null ? opt[key2] : config[key2] != null ? config[key2] : d;
}
function offsets(legends, value3) {
  let max6 = -Infinity;
  legends.forEach((item) => {
    if (item.offset != null)
      max6 = Math.max(max6, item.offset);
  });
  return max6 > -Infinity ? max6 : value3;
}
function legendParams(g, orient2, config, xb, yb, w4, h2) {
  const _ = lookup$1(config, orient2), offset4 = offsets(g, _("offset", 0)), anchor = _("anchor", Start), mult2 = anchor === End ? 1 : anchor === Middle ? 0.5 : 0;
  const p = {
    align: Each,
    bounds: _("bounds", Flush),
    columns: _("direction") === "vertical" ? 1 : g.length,
    padding: _("margin", 8),
    center: _("center"),
    nodirty: true
  };
  switch (orient2) {
    case Left:
      p.anchor = {
        x: Math.floor(xb.x1) - offset4,
        column: End,
        y: mult2 * (h2 || xb.height() + 2 * xb.y1),
        row: anchor
      };
      break;
    case Right:
      p.anchor = {
        x: Math.ceil(xb.x2) + offset4,
        y: mult2 * (h2 || xb.height() + 2 * xb.y1),
        row: anchor
      };
      break;
    case Top:
      p.anchor = {
        y: Math.floor(yb.y1) - offset4,
        row: End,
        x: mult2 * (w4 || yb.width() + 2 * yb.x1),
        column: anchor
      };
      break;
    case Bottom:
      p.anchor = {
        y: Math.ceil(yb.y2) + offset4,
        x: mult2 * (w4 || yb.width() + 2 * yb.x1),
        column: anchor
      };
      break;
    case TopLeft:
      p.anchor = {
        x: offset4,
        y: offset4
      };
      break;
    case TopRight:
      p.anchor = {
        x: w4 - offset4,
        y: offset4,
        column: End
      };
      break;
    case BottomLeft:
      p.anchor = {
        x: offset4,
        y: h2 - offset4,
        row: End
      };
      break;
    case BottomRight:
      p.anchor = {
        x: w4 - offset4,
        y: h2 - offset4,
        column: End,
        row: End
      };
      break;
  }
  return p;
}
function legendLayout(view, legend) {
  var item = legend.items[0], datum2 = item.datum, orient2 = item.orient, bounds2 = item.bounds, x5 = item.x, y5 = item.y, w4, h2;
  item._bounds ? item._bounds.clear().union(bounds2) : item._bounds = bounds2.clone();
  bounds2.clear();
  legendGroupLayout(view, item, item.items[0].items[0]);
  bounds2 = legendBounds(item, bounds2);
  w4 = 2 * item.padding;
  h2 = 2 * item.padding;
  if (!bounds2.empty()) {
    w4 = Math.ceil(bounds2.width() + w4);
    h2 = Math.ceil(bounds2.height() + h2);
  }
  if (datum2.type === Symbols) {
    legendEntryLayout(item.items[0].items[0].items[0].items);
  }
  if (orient2 !== None3) {
    item.x = x5 = 0;
    item.y = y5 = 0;
  }
  item.width = w4;
  item.height = h2;
  boundStroke(bounds2.set(x5, y5, x5 + w4, y5 + h2), item);
  item.mark.bounds.clear().union(bounds2);
  return item;
}
function legendBounds(item, b2) {
  item.items.forEach((_) => b2.union(_.bounds));
  b2.x1 = item.padding;
  b2.y1 = item.padding;
  return b2;
}
function legendGroupLayout(view, item, entry2) {
  var pad4 = item.padding, ex = pad4 - entry2.x, ey = pad4 - entry2.y;
  if (!item.datum.title) {
    if (ex || ey)
      translate2(view, entry2, ex, ey);
  } else {
    var title2 = item.items[1].items[0], anchor = title2.anchor, tpad = item.titlePadding || 0, tx = pad4 - title2.x, ty = pad4 - title2.y;
    switch (title2.orient) {
      case Left:
        ex += Math.ceil(title2.bounds.width()) + tpad;
        break;
      case Right:
      case Bottom:
        break;
      default:
        ey += title2.bounds.height() + tpad;
    }
    if (ex || ey)
      translate2(view, entry2, ex, ey);
    switch (title2.orient) {
      case Left:
        ty += legendTitleOffset(item, entry2, title2, anchor, 1, 1);
        break;
      case Right:
        tx += legendTitleOffset(item, entry2, title2, End, 0, 0) + tpad;
        ty += legendTitleOffset(item, entry2, title2, anchor, 1, 1);
        break;
      case Bottom:
        tx += legendTitleOffset(item, entry2, title2, anchor, 0, 0);
        ty += legendTitleOffset(item, entry2, title2, End, -1, 0, 1) + tpad;
        break;
      default:
        tx += legendTitleOffset(item, entry2, title2, anchor, 0, 0);
    }
    if (tx || ty)
      translate2(view, title2, tx, ty);
    if ((tx = Math.round(title2.bounds.x1 - pad4)) < 0) {
      translate2(view, entry2, -tx, 0);
      translate2(view, title2, -tx, 0);
    }
  }
}
function legendTitleOffset(item, entry2, title2, anchor, y5, lr, noBar) {
  const grad = item.datum.type !== "symbol", vgrad = title2.datum.vgrad, e3 = grad && (lr || !vgrad) && !noBar ? entry2.items[0] : entry2, s2 = e3.bounds[y5 ? "y2" : "x2"] - item.padding, u4 = vgrad && lr ? s2 : 0, v2 = vgrad && lr ? 0 : s2, o = y5 <= 0 ? 0 : multiLineOffset(title2);
  return Math.round(anchor === Start ? u4 : anchor === End ? v2 - o : 0.5 * (s2 - o));
}
function translate2(view, item, dx, dy) {
  item.x += dx;
  item.y += dy;
  item.bounds.translate(dx, dy);
  item.mark.bounds.translate(dx, dy);
  view.dirty(item);
}
function legendEntryLayout(entries3) {
  const widths = entries3.reduce((w4, g) => {
    w4[g.column] = Math.max(g.bounds.x2 - g.x, w4[g.column] || 0);
    return w4;
  }, {});
  entries3.forEach((g) => {
    g.width = widths[g.column];
    g.height = g.bounds.y2 - g.y;
  });
}
function titleLayout(view, mark2, width2, height2, viewBounds2) {
  var group4 = mark2.items[0], frame2 = group4.frame, orient2 = group4.orient, anchor = group4.anchor, offset4 = group4.offset, padding3 = group4.padding, title2 = group4.items[0].items[0], subtitle = group4.items[1] && group4.items[1].items[0], end = orient2 === Left || orient2 === Right ? height2 : width2, start = 0, x5 = 0, y5 = 0, sx = 0, sy = 0, pos;
  if (frame2 !== Group) {
    orient2 === Left ? (start = viewBounds2.y2, end = viewBounds2.y1) : orient2 === Right ? (start = viewBounds2.y1, end = viewBounds2.y2) : (start = viewBounds2.x1, end = viewBounds2.x2);
  } else if (orient2 === Left) {
    start = height2, end = 0;
  }
  pos = anchor === Start ? start : anchor === End ? end : (start + end) / 2;
  if (subtitle && subtitle.text) {
    switch (orient2) {
      case Top:
      case Bottom:
        sy = title2.bounds.height() + padding3;
        break;
      case Left:
        sx = title2.bounds.width() + padding3;
        break;
      case Right:
        sx = -title2.bounds.width() - padding3;
        break;
    }
    tempBounds2.clear().union(subtitle.bounds);
    tempBounds2.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));
    if (set2(subtitle, "x", sx) | set2(subtitle, "y", sy)) {
      view.dirty(subtitle);
      subtitle.bounds.clear().union(tempBounds2);
      subtitle.mark.bounds.clear().union(tempBounds2);
      view.dirty(subtitle);
    }
    tempBounds2.clear().union(subtitle.bounds);
  } else {
    tempBounds2.clear();
  }
  tempBounds2.union(title2.bounds);
  switch (orient2) {
    case Top:
      x5 = pos;
      y5 = viewBounds2.y1 - tempBounds2.height() - offset4;
      break;
    case Left:
      x5 = viewBounds2.x1 - tempBounds2.width() - offset4;
      y5 = pos;
      break;
    case Right:
      x5 = viewBounds2.x2 + tempBounds2.width() + offset4;
      y5 = pos;
      break;
    case Bottom:
      x5 = pos;
      y5 = viewBounds2.y2 + offset4;
      break;
    default:
      x5 = group4.x;
      y5 = group4.y;
  }
  if (set2(group4, "x", x5) | set2(group4, "y", y5)) {
    tempBounds2.translate(x5, y5);
    view.dirty(group4);
    group4.bounds.clear().union(tempBounds2);
    mark2.bounds.clear().union(tempBounds2);
    view.dirty(group4);
  }
  return group4.bounds;
}
function ViewLayout(params2) {
  Transform.call(this, null, params2);
}
inherits(ViewLayout, Transform, {
  transform(_, pulse2) {
    const view = pulse2.dataflow;
    _.mark.items.forEach((group4) => {
      if (_.layout)
        trellisLayout(view, group4, _.layout);
      layoutGroup(view, group4, _);
    });
    return shouldReflow(_.mark.group) ? pulse2.reflow() : pulse2;
  }
});
function shouldReflow(group4) {
  return group4 && group4.mark.role !== "legend-entry";
}
function layoutGroup(view, group4, _) {
  var items = group4.items, width2 = Math.max(0, group4.width || 0), height2 = Math.max(0, group4.height || 0), viewBounds2 = new Bounds().set(0, 0, width2, height2), xBounds = viewBounds2.clone(), yBounds = viewBounds2.clone(), legends = [], title2, mark2, orient2, b2, i, n;
  for (i = 0, n = items.length; i < n; ++i) {
    mark2 = items[i];
    switch (mark2.role) {
      case AxisRole:
        b2 = isYAxis(mark2) ? xBounds : yBounds;
        b2.union(axisLayout(view, mark2, width2, height2));
        break;
      case TitleRole:
        title2 = mark2;
        break;
      case LegendRole:
        legends.push(legendLayout(view, mark2));
        break;
      case FrameRole:
      case ScopeRole:
      case RowHeader:
      case RowFooter:
      case RowTitle:
      case ColHeader:
      case ColFooter:
      case ColTitle:
        xBounds.union(mark2.bounds);
        yBounds.union(mark2.bounds);
        break;
      default:
        viewBounds2.union(mark2.bounds);
    }
  }
  if (legends.length) {
    const l = {};
    legends.forEach((item) => {
      orient2 = item.orient || Right;
      if (orient2 !== None3)
        (l[orient2] || (l[orient2] = [])).push(item);
    });
    for (const orient3 in l) {
      const g = l[orient3];
      gridLayout(view, g, legendParams(g, orient3, _.legends, xBounds, yBounds, width2, height2));
    }
    legends.forEach((item) => {
      const b3 = item.bounds;
      if (!b3.equals(item._bounds)) {
        item.bounds = item._bounds;
        view.dirty(item);
        item.bounds = b3;
        view.dirty(item);
      }
      if (_.autosize && _.autosize.type === Fit) {
        switch (item.orient) {
          case Left:
          case Right:
            viewBounds2.add(b3.x1, 0).add(b3.x2, 0);
            break;
          case Top:
          case Bottom:
            viewBounds2.add(0, b3.y1).add(0, b3.y2);
        }
      } else {
        viewBounds2.union(b3);
      }
    });
  }
  viewBounds2.union(xBounds).union(yBounds);
  if (title2) {
    viewBounds2.union(titleLayout(view, title2, width2, height2, viewBounds2));
  }
  if (group4.clip) {
    viewBounds2.set(0, 0, group4.width || 0, group4.height || 0);
  }
  viewSizeLayout(view, group4, viewBounds2, _);
}
function viewSizeLayout(view, group4, viewBounds2, _) {
  const auto = _.autosize || {}, type3 = auto.type;
  if (view._autosize < 1 || !type3)
    return;
  let viewWidth2 = view._width, viewHeight2 = view._height, width2 = Math.max(0, group4.width || 0), left = Math.max(0, Math.ceil(-viewBounds2.x1)), height2 = Math.max(0, group4.height || 0), top = Math.max(0, Math.ceil(-viewBounds2.y1));
  const right = Math.max(0, Math.ceil(viewBounds2.x2 - width2)), bottom = Math.max(0, Math.ceil(viewBounds2.y2 - height2));
  if (auto.contains === Padding) {
    const padding3 = view.padding();
    viewWidth2 -= padding3.left + padding3.right;
    viewHeight2 -= padding3.top + padding3.bottom;
  }
  if (type3 === None3) {
    left = 0;
    top = 0;
    width2 = viewWidth2;
    height2 = viewHeight2;
  } else if (type3 === Fit) {
    width2 = Math.max(0, viewWidth2 - left - right);
    height2 = Math.max(0, viewHeight2 - top - bottom);
  } else if (type3 === FitX) {
    width2 = Math.max(0, viewWidth2 - left - right);
    viewHeight2 = height2 + top + bottom;
  } else if (type3 === FitY) {
    viewWidth2 = width2 + left + right;
    height2 = Math.max(0, viewHeight2 - top - bottom);
  } else if (type3 === Pad) {
    viewWidth2 = width2 + left + right;
    viewHeight2 = height2 + top + bottom;
  }
  view._resizeView(viewWidth2, viewHeight2, width2, height2, [left, top], auto.resize);
}

// node_modules/vega-encode/build/vega-encode.module.js
var vega_encode_module_exports = {};
__export(vega_encode_module_exports, {
  axisticks: () => AxisTicks,
  datajoin: () => DataJoin,
  encode: () => Encode,
  legendentries: () => LegendEntries,
  linkpath: () => LinkPath,
  pie: () => Pie,
  scale: () => Scale,
  sortitems: () => SortItems,
  stack: () => Stack
});
function AxisTicks(params2) {
  Transform.call(this, null, params2);
}
inherits(AxisTicks, Transform, {
  transform(_, pulse2) {
    if (this.value && !_.modified()) {
      return pulse2.StopPropagation;
    }
    var locale4 = pulse2.dataflow.locale(), out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), ticks3 = this.value, scale7 = _.scale, tally = _.count == null ? _.values ? _.values.length : 10 : _.count, count4 = tickCount(scale7, tally, _.minstep), format5 = _.format || tickFormat2(locale4, scale7, count4, _.formatSpecifier, _.formatType, !!_.values), values5 = _.values ? validTicks(scale7, _.values, count4) : tickValues(scale7, count4);
    if (ticks3)
      out.rem = ticks3;
    ticks3 = values5.map((value3, i) => ingest$1({
      index: i / (values5.length - 1 || 1),
      value: value3,
      label: format5(value3)
    }));
    if (_.extra && ticks3.length) {
      ticks3.push(ingest$1({
        index: -1,
        extra: {
          value: ticks3[0].value
        },
        label: ""
      }));
    }
    out.source = ticks3;
    out.add = ticks3;
    this.value = ticks3;
    return out;
  }
});
function DataJoin(params2) {
  Transform.call(this, null, params2);
}
function defaultItemCreate() {
  return ingest$1({});
}
function newMap(key2) {
  const map7 = fastmap().test((t4) => t4.exit);
  map7.lookup = (t4) => map7.get(key2(t4));
  return map7;
}
inherits(DataJoin, Transform, {
  transform(_, pulse2) {
    var df = pulse2.dataflow, out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), item = _.item || defaultItemCreate, key2 = _.key || tupleid, map7 = this.value;
    if (isArray(out.encode)) {
      out.encode = null;
    }
    if (map7 && (_.modified("key") || pulse2.modified(key2))) {
      error("DataJoin does not support modified key function or fields.");
    }
    if (!map7) {
      pulse2 = pulse2.addAll();
      this.value = map7 = newMap(key2);
    }
    pulse2.visit(pulse2.ADD, (t4) => {
      const k3 = key2(t4);
      let x5 = map7.get(k3);
      if (x5) {
        if (x5.exit) {
          map7.empty--;
          out.add.push(x5);
        } else {
          out.mod.push(x5);
        }
      } else {
        x5 = item(t4);
        map7.set(k3, x5);
        out.add.push(x5);
      }
      x5.datum = t4;
      x5.exit = false;
    });
    pulse2.visit(pulse2.MOD, (t4) => {
      const k3 = key2(t4), x5 = map7.get(k3);
      if (x5) {
        x5.datum = t4;
        out.mod.push(x5);
      }
    });
    pulse2.visit(pulse2.REM, (t4) => {
      const k3 = key2(t4), x5 = map7.get(k3);
      if (t4 === x5.datum && !x5.exit) {
        out.rem.push(x5);
        x5.exit = true;
        ++map7.empty;
      }
    });
    if (pulse2.changed(pulse2.ADD_MOD))
      out.modifies("datum");
    if (pulse2.clean() || _.clean && map7.empty > df.cleanThreshold) {
      df.runAfter(map7.clean);
    }
    return out;
  }
});
function Encode(params2) {
  Transform.call(this, null, params2);
}
inherits(Encode, Transform, {
  transform(_, pulse2) {
    var out = pulse2.fork(pulse2.ADD_REM), fmod = _.mod || false, encoders = _.encoders, encode2 = pulse2.encode;
    if (isArray(encode2)) {
      if (out.changed() || encode2.every((e3) => encoders[e3])) {
        encode2 = encode2[0];
        out.encode = null;
      } else {
        return pulse2.StopPropagation;
      }
    }
    var reenter = encode2 === "enter", update3 = encoders.update || falsy, enter = encoders.enter || falsy, exit = encoders.exit || falsy, set7 = (encode2 && !reenter ? encoders[encode2] : update3) || falsy;
    if (pulse2.changed(pulse2.ADD)) {
      pulse2.visit(pulse2.ADD, (t4) => {
        enter(t4, _);
        update3(t4, _);
      });
      out.modifies(enter.output);
      out.modifies(update3.output);
      if (set7 !== falsy && set7 !== update3) {
        pulse2.visit(pulse2.ADD, (t4) => {
          set7(t4, _);
        });
        out.modifies(set7.output);
      }
    }
    if (pulse2.changed(pulse2.REM) && exit !== falsy) {
      pulse2.visit(pulse2.REM, (t4) => {
        exit(t4, _);
      });
      out.modifies(exit.output);
    }
    if (reenter || set7 !== falsy) {
      const flag2 = pulse2.MOD | (_.modified() ? pulse2.REFLOW : 0);
      if (reenter) {
        pulse2.visit(flag2, (t4) => {
          const mod = enter(t4, _) || fmod;
          if (set7(t4, _) || mod)
            out.mod.push(t4);
        });
        if (out.mod.length)
          out.modifies(enter.output);
      } else {
        pulse2.visit(flag2, (t4) => {
          if (set7(t4, _) || fmod)
            out.mod.push(t4);
        });
      }
      if (out.mod.length)
        out.modifies(set7.output);
    }
    return out.changed() ? out : pulse2.StopPropagation;
  }
});
function LegendEntries(params2) {
  Transform.call(this, [], params2);
}
inherits(LegendEntries, Transform, {
  transform(_, pulse2) {
    if (this.value != null && !_.modified()) {
      return pulse2.StopPropagation;
    }
    var locale4 = pulse2.dataflow.locale(), out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), items = this.value, type3 = _.type || SymbolLegend, scale7 = _.scale, limit = +_.limit, count4 = tickCount(scale7, _.count == null ? 5 : _.count, _.minstep), lskip = !!_.values || type3 === SymbolLegend, format5 = _.format || labelFormat(locale4, scale7, count4, type3, _.formatSpecifier, _.formatType, lskip), values5 = _.values || labelValues(scale7, count4), domain4, fraction, size, offset4, ellipsis;
    if (items)
      out.rem = items;
    if (type3 === SymbolLegend) {
      if (limit && values5.length > limit) {
        pulse2.dataflow.warn("Symbol legend count exceeds limit, filtering items.");
        items = values5.slice(0, limit - 1);
        ellipsis = true;
      } else {
        items = values5;
      }
      if (isFunction(size = _.size)) {
        if (!_.values && scale7(items[0]) === 0) {
          items = items.slice(1);
        }
        offset4 = items.reduce((max6, value3) => Math.max(max6, size(value3, _)), 0);
      } else {
        size = constant(offset4 = size || 8);
      }
      items = items.map((value3, index5) => ingest$1({
        index: index5,
        label: format5(value3, index5, items),
        value: value3,
        offset: offset4,
        size: size(value3, _)
      }));
      if (ellipsis) {
        ellipsis = values5[items.length];
        items.push(ingest$1({
          index: items.length,
          label: "\u2026".concat(values5.length - items.length, " entries"),
          value: ellipsis,
          offset: offset4,
          size: size(ellipsis, _)
        }));
      }
    } else if (type3 === GradientLegend) {
      domain4 = scale7.domain(), fraction = scaleFraction(scale7, domain4[0], peek(domain4));
      if (values5.length < 3 && !_.values && domain4[0] !== peek(domain4)) {
        values5 = [domain4[0], peek(domain4)];
      }
      items = values5.map((value3, index5) => ingest$1({
        index: index5,
        label: format5(value3, index5, values5),
        value: value3,
        perc: fraction(value3)
      }));
    } else {
      size = values5.length - 1;
      fraction = labelFraction(scale7);
      items = values5.map((value3, index5) => ingest$1({
        index: index5,
        label: format5(value3, index5, values5),
        value: value3,
        perc: index5 ? fraction(value3) : 0,
        perc2: index5 === size ? 1 : fraction(values5[index5 + 1])
      }));
    }
    out.source = items;
    out.add = items;
    this.value = items;
    return out;
  }
});
var sourceX = (t4) => t4.source.x;
var sourceY = (t4) => t4.source.y;
var targetX = (t4) => t4.target.x;
var targetY = (t4) => t4.target.y;
function LinkPath(params2) {
  Transform.call(this, {}, params2);
}
LinkPath.Definition = {
  "type": "LinkPath",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "sourceX",
    "type": "field",
    "default": "source.x"
  }, {
    "name": "sourceY",
    "type": "field",
    "default": "source.y"
  }, {
    "name": "targetX",
    "type": "field",
    "default": "target.x"
  }, {
    "name": "targetY",
    "type": "field",
    "default": "target.y"
  }, {
    "name": "orient",
    "type": "enum",
    "default": "vertical",
    "values": ["horizontal", "vertical", "radial"]
  }, {
    "name": "shape",
    "type": "enum",
    "default": "line",
    "values": ["line", "arc", "curve", "diagonal", "orthogonal"]
  }, {
    "name": "require",
    "type": "signal"
  }, {
    "name": "as",
    "type": "string",
    "default": "path"
  }]
};
inherits(LinkPath, Transform, {
  transform(_, pulse2) {
    var sx = _.sourceX || sourceX, sy = _.sourceY || sourceY, tx = _.targetX || targetX, ty = _.targetY || targetY, as = _.as || "path", orient2 = _.orient || "vertical", shape2 = _.shape || "line", path3 = Paths.get(shape2 + "-" + orient2) || Paths.get(shape2);
    if (!path3) {
      error("LinkPath unsupported type: " + _.shape + (_.orient ? "-" + _.orient : ""));
    }
    pulse2.visit(pulse2.SOURCE, (t4) => {
      t4[as] = path3(sx(t4), sy(t4), tx(t4), ty(t4));
    });
    return pulse2.reflow(_.modified()).modifies(as);
  }
});
var line2 = (sx, sy, tx, ty) => "M" + sx + "," + sy + "L" + tx + "," + ty;
var lineR = (sa2, sr, ta, tr2) => line2(sr * Math.cos(sa2), sr * Math.sin(sa2), tr2 * Math.cos(ta), tr2 * Math.sin(ta));
var arc2 = (sx, sy, tx, ty) => {
  var dx = tx - sx, dy = ty - sy, rr = Math.sqrt(dx * dx + dy * dy) / 2, ra = 180 * Math.atan2(dy, dx) / Math.PI;
  return "M" + sx + "," + sy + "A" + rr + "," + rr + " " + ra + " 0 1 " + tx + "," + ty;
};
var arcR = (sa2, sr, ta, tr2) => arc2(sr * Math.cos(sa2), sr * Math.sin(sa2), tr2 * Math.cos(ta), tr2 * Math.sin(ta));
var curve = (sx, sy, tx, ty) => {
  const dx = tx - sx, dy = ty - sy, ix = 0.2 * (dx + dy), iy = 0.2 * (dy - dx);
  return "M" + sx + "," + sy + "C" + (sx + ix) + "," + (sy + iy) + " " + (tx + iy) + "," + (ty - ix) + " " + tx + "," + ty;
};
var curveR = (sa2, sr, ta, tr2) => curve(sr * Math.cos(sa2), sr * Math.sin(sa2), tr2 * Math.cos(ta), tr2 * Math.sin(ta));
var orthoX = (sx, sy, tx, ty) => "M" + sx + "," + sy + "V" + ty + "H" + tx;
var orthoY = (sx, sy, tx, ty) => "M" + sx + "," + sy + "H" + tx + "V" + ty;
var orthoR = (sa2, sr, ta, tr2) => {
  const sc = Math.cos(sa2), ss = Math.sin(sa2), tc = Math.cos(ta), ts2 = Math.sin(ta), sf = Math.abs(ta - sa2) > Math.PI ? ta <= sa2 : ta > sa2;
  return "M" + sr * sc + "," + sr * ss + "A" + sr + "," + sr + " 0 0," + (sf ? 1 : 0) + " " + sr * tc + "," + sr * ts2 + "L" + tr2 * tc + "," + tr2 * ts2;
};
var diagonalX = (sx, sy, tx, ty) => {
  const m3 = (sx + tx) / 2;
  return "M" + sx + "," + sy + "C" + m3 + "," + sy + " " + m3 + "," + ty + " " + tx + "," + ty;
};
var diagonalY = (sx, sy, tx, ty) => {
  const m3 = (sy + ty) / 2;
  return "M" + sx + "," + sy + "C" + sx + "," + m3 + " " + tx + "," + m3 + " " + tx + "," + ty;
};
var diagonalR = (sa2, sr, ta, tr2) => {
  const sc = Math.cos(sa2), ss = Math.sin(sa2), tc = Math.cos(ta), ts2 = Math.sin(ta), mr = (sr + tr2) / 2;
  return "M" + sr * sc + "," + sr * ss + "C" + mr * sc + "," + mr * ss + " " + mr * tc + "," + mr * ts2 + " " + tr2 * tc + "," + tr2 * ts2;
};
var Paths = fastmap({
  "line": line2,
  "line-radial": lineR,
  "arc": arc2,
  "arc-radial": arcR,
  "curve": curve,
  "curve-radial": curveR,
  "orthogonal-horizontal": orthoX,
  "orthogonal-vertical": orthoY,
  "orthogonal-radial": orthoR,
  "diagonal-horizontal": diagonalX,
  "diagonal-vertical": diagonalY,
  "diagonal-radial": diagonalR
});
function Pie(params2) {
  Transform.call(this, null, params2);
}
Pie.Definition = {
  "type": "Pie",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "startAngle",
    "type": "number",
    "default": 0
  }, {
    "name": "endAngle",
    "type": "number",
    "default": 6.283185307179586
  }, {
    "name": "sort",
    "type": "boolean",
    "default": false
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["startAngle", "endAngle"]
  }]
};
inherits(Pie, Transform, {
  transform(_, pulse2) {
    var as = _.as || ["startAngle", "endAngle"], startAngle = as[0], endAngle = as[1], field3 = _.field || one, start = _.startAngle || 0, stop3 = _.endAngle != null ? _.endAngle : 2 * Math.PI, data3 = pulse2.source, values5 = data3.map(field3), n = values5.length, a4 = start, k3 = (stop3 - start) / sum(values5), index5 = range(n), i, t4, v2;
    if (_.sort) {
      index5.sort((a5, b2) => values5[a5] - values5[b2]);
    }
    for (i = 0; i < n; ++i) {
      v2 = values5[index5[i]];
      t4 = data3[index5[i]];
      t4[startAngle] = a4;
      t4[endAngle] = a4 += v2 * k3;
    }
    this.value = values5;
    return pulse2.reflow(_.modified()).modifies(as);
  }
});
var DEFAULT_COUNT = 5;
function includeZero(scale7) {
  const type3 = scale7.type;
  return !scale7.bins && (type3 === Linear2 || type3 === Pow || type3 === Sqrt);
}
function includePad(type3) {
  return isContinuous(type3) && type3 !== Sequential;
}
var SKIP2 = toSet(["set", "modified", "clear", "type", "scheme", "schemeExtent", "schemeCount", "domain", "domainMin", "domainMid", "domainMax", "domainRaw", "domainImplicit", "nice", "zero", "bins", "range", "rangeStep", "round", "reverse", "interpolate", "interpolateGamma"]);
function Scale(params2) {
  Transform.call(this, null, params2);
  this.modified(true);
}
inherits(Scale, Transform, {
  transform(_, pulse2) {
    var df = pulse2.dataflow, scale$12 = this.value, key2 = scaleKey(_);
    if (!scale$12 || key2 !== scale$12.type) {
      this.value = scale$12 = scale(key2)();
    }
    for (key2 in _)
      if (!SKIP2[key2]) {
        if (key2 === "padding" && includePad(scale$12.type))
          continue;
        isFunction(scale$12[key2]) ? scale$12[key2](_[key2]) : df.warn("Unsupported scale property: " + key2);
      }
    configureRange(scale$12, _, configureBins(scale$12, _, configureDomain(scale$12, _, df)));
    return pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
  }
});
function scaleKey(_) {
  var t4 = _.type, d = "", n;
  if (t4 === Sequential)
    return Sequential + "-" + Linear2;
  if (isContinuousColor(_)) {
    n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
    d = n === 2 ? Sequential + "-" : n === 3 ? Diverging + "-" : "";
  }
  return (d + t4 || Linear2).toLowerCase();
}
function isContinuousColor(_) {
  const t4 = _.type;
  return isContinuous(t4) && t4 !== Time && t4 !== UTC && (_.scheme || _.range && _.range.length && _.range.every(isString));
}
function configureDomain(scale7, _, df) {
  const raw = rawDomain(scale7, _.domainRaw, df);
  if (raw > -1)
    return raw;
  var domain4 = _.domain, type3 = scale7.type, zero6 = _.zero || _.zero === void 0 && includeZero(scale7), n, mid;
  if (!domain4)
    return 0;
  if (includePad(type3) && _.padding && domain4[0] !== peek(domain4)) {
    domain4 = padDomain(type3, domain4, _.range, _.padding, _.exponent, _.constant);
  }
  if (zero6 || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
    n = (domain4 = domain4.slice()).length - 1 || 1;
    if (zero6) {
      if (domain4[0] > 0)
        domain4[0] = 0;
      if (domain4[n] < 0)
        domain4[n] = 0;
    }
    if (_.domainMin != null)
      domain4[0] = _.domainMin;
    if (_.domainMax != null)
      domain4[n] = _.domainMax;
    if (_.domainMid != null) {
      mid = _.domainMid;
      const i = mid > domain4[n] ? n + 1 : mid < domain4[0] ? 0 : n;
      if (i !== n)
        df.warn("Scale domainMid exceeds domain min or max.", mid);
      domain4.splice(i, 0, mid);
    }
  }
  scale7.domain(domainCheck(type3, domain4, df));
  if (type3 === Ordinal) {
    scale7.unknown(_.domainImplicit ? implicit : void 0);
  }
  if (_.nice && scale7.nice) {
    scale7.nice(_.nice !== true && tickCount(scale7, _.nice) || null);
  }
  return domain4.length;
}
function rawDomain(scale7, raw, df) {
  if (raw) {
    scale7.domain(domainCheck(scale7.type, raw, df));
    return raw.length;
  } else {
    return -1;
  }
}
function padDomain(type3, domain4, range8, pad4, exponent, constant4) {
  var span2 = Math.abs(peek(range8) - range8[0]), frac = span2 / (span2 - 2 * pad4), d = type3 === Log ? zoomLog(domain4, null, frac) : type3 === Sqrt ? zoomPow(domain4, null, frac, 0.5) : type3 === Pow ? zoomPow(domain4, null, frac, exponent || 1) : type3 === Symlog ? zoomSymlog(domain4, null, frac, constant4 || 1) : zoomLinear(domain4, null, frac);
  domain4 = domain4.slice();
  domain4[0] = d[0];
  domain4[domain4.length - 1] = d[1];
  return domain4;
}
function domainCheck(type3, domain4, df) {
  if (isLogarithmic(type3)) {
    var s2 = Math.abs(domain4.reduce((s3, v2) => s3 + (v2 < 0 ? -1 : v2 > 0 ? 1 : 0), 0));
    if (s2 !== domain4.length) {
      df.warn("Log scale domain includes zero: " + $(domain4));
    }
  }
  return domain4;
}
function configureBins(scale7, _, count4) {
  let bins2 = _.bins;
  if (bins2 && !isArray(bins2)) {
    const domain4 = scale7.domain(), lo = domain4[0], hi = peek(domain4), step = bins2.step;
    let start = bins2.start == null ? lo : bins2.start, stop3 = bins2.stop == null ? hi : bins2.stop;
    if (!step)
      error("Scale bins parameter missing step property.");
    if (start < lo)
      start = step * Math.ceil(lo / step);
    if (stop3 > hi)
      stop3 = step * Math.floor(hi / step);
    bins2 = range(start, stop3 + step / 2, step);
  }
  if (bins2) {
    scale7.bins = bins2;
  } else if (scale7.bins) {
    delete scale7.bins;
  }
  if (scale7.type === BinOrdinal) {
    if (!bins2) {
      scale7.bins = scale7.domain();
    } else if (!_.domain && !_.domainRaw) {
      scale7.domain(bins2);
      count4 = bins2.length;
    }
  }
  return count4;
}
function configureRange(scale7, _, count4) {
  var type3 = scale7.type, round2 = _.round || false, range8 = _.range;
  if (_.rangeStep != null) {
    range8 = configureRangeStep(type3, _, count4);
  } else if (_.scheme) {
    range8 = configureScheme(type3, _, count4);
    if (isFunction(range8)) {
      if (scale7.interpolator) {
        return scale7.interpolator(range8);
      } else {
        error("Scale type ".concat(type3, " does not support interpolating color schemes."));
      }
    }
  }
  if (range8 && isInterpolating(type3)) {
    return scale7.interpolator(interpolateColors(flip(range8, _.reverse), _.interpolate, _.interpolateGamma));
  }
  if (range8 && _.interpolate && scale7.interpolate) {
    scale7.interpolate(interpolate(_.interpolate, _.interpolateGamma));
  } else if (isFunction(scale7.round)) {
    scale7.round(round2);
  } else if (isFunction(scale7.rangeRound)) {
    scale7.interpolate(round2 ? round_default : value_default);
  }
  if (range8)
    scale7.range(flip(range8, _.reverse));
}
function configureRangeStep(type3, _, count4) {
  if (type3 !== Band && type3 !== Point) {
    error("Only band and point scales support rangeStep.");
  }
  var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0, inner = type3 === Point ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
  return [0, _.rangeStep * bandSpace(count4, inner, outer)];
}
function configureScheme(type3, _, count4) {
  var extent4 = _.schemeExtent, name4, scheme$1;
  if (isArray(_.scheme)) {
    scheme$1 = interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);
  } else {
    name4 = _.scheme.toLowerCase();
    scheme$1 = scheme(name4);
    if (!scheme$1)
      error("Unrecognized scheme name: ".concat(_.scheme));
  }
  count4 = type3 === Threshold ? count4 + 1 : type3 === BinOrdinal ? count4 - 1 : type3 === Quantile2 || type3 === Quantize ? +_.schemeCount || DEFAULT_COUNT : count4;
  return isInterpolating(type3) ? adjustScheme(scheme$1, extent4, _.reverse) : isFunction(scheme$1) ? quantizeInterpolator(adjustScheme(scheme$1, extent4), count4) : type3 === Ordinal ? scheme$1 : scheme$1.slice(0, count4);
}
function adjustScheme(scheme3, extent4, reverse5) {
  return isFunction(scheme3) && (extent4 || reverse5) ? interpolateRange(scheme3, flip(extent4 || [0, 1], reverse5)) : scheme3;
}
function flip(array6, reverse5) {
  return reverse5 ? array6.slice().reverse() : array6;
}
function SortItems(params2) {
  Transform.call(this, null, params2);
}
inherits(SortItems, Transform, {
  transform(_, pulse2) {
    const mod = _.modified("sort") || pulse2.changed(pulse2.ADD) || pulse2.modified(_.sort.fields) || pulse2.modified("datum");
    if (mod)
      pulse2.source.sort(stableCompare(_.sort));
    this.modified(mod);
    return pulse2;
  }
});
var Zero = "zero";
var Center = "center";
var Normalize = "normalize";
var DefOutput = ["y0", "y1"];
function Stack(params2) {
  Transform.call(this, null, params2);
}
Stack.Definition = {
  "type": "Stack",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "offset",
    "type": "enum",
    "default": Zero,
    "values": [Zero, Center, Normalize]
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": DefOutput
  }]
};
inherits(Stack, Transform, {
  transform(_, pulse2) {
    var as = _.as || DefOutput, y07 = as[0], y13 = as[1], sort4 = stableCompare(_.sort), field3 = _.field || one, stack2 = _.offset === Center ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero, groups3, i, n, max6;
    groups3 = partition2(pulse2.source, _.groupby, sort4, field3);
    for (i = 0, n = groups3.length, max6 = groups3.max; i < n; ++i) {
      stack2(groups3[i], max6, field3, y07, y13);
    }
    return pulse2.reflow(_.modified()).modifies(as);
  }
});
function stackCenter(group4, max6, field3, y07, y13) {
  var last = (max6 - group4.sum) / 2, m3 = group4.length, j = 0, t4;
  for (; j < m3; ++j) {
    t4 = group4[j];
    t4[y07] = last;
    t4[y13] = last += Math.abs(field3(t4));
  }
}
function stackNormalize(group4, max6, field3, y07, y13) {
  var scale7 = 1 / group4.sum, last = 0, m3 = group4.length, j = 0, v2 = 0, t4;
  for (; j < m3; ++j) {
    t4 = group4[j];
    t4[y07] = last;
    t4[y13] = last = scale7 * (v2 += Math.abs(field3(t4)));
  }
}
function stackZero(group4, max6, field3, y07, y13) {
  var lastPos = 0, lastNeg = 0, m3 = group4.length, j = 0, v2, t4;
  for (; j < m3; ++j) {
    t4 = group4[j];
    v2 = +field3(t4);
    if (v2 < 0) {
      t4[y07] = lastNeg;
      t4[y13] = lastNeg += v2;
    } else {
      t4[y07] = lastPos;
      t4[y13] = lastPos += v2;
    }
  }
}
function partition2(data3, groupby, sort4, field3) {
  var groups3 = [], get7 = (f) => f(t4), map7, i, n, m3, t4, k3, g, s2, max6;
  if (groupby == null) {
    groups3.push(data3.slice());
  } else {
    for (map7 = {}, i = 0, n = data3.length; i < n; ++i) {
      t4 = data3[i];
      k3 = groupby.map(get7);
      g = map7[k3];
      if (!g) {
        map7[k3] = g = [];
        groups3.push(g);
      }
      g.push(t4);
    }
  }
  for (k3 = 0, max6 = 0, m3 = groups3.length; k3 < m3; ++k3) {
    g = groups3[k3];
    for (i = 0, s2 = 0, n = g.length; i < n; ++i) {
      s2 += Math.abs(field3(g[i]));
    }
    g.sum = s2;
    if (s2 > max6)
      max6 = s2;
    if (sort4)
      g.sort(sort4);
  }
  groups3.max = max6;
  return groups3;
}

// node_modules/vega-geo/build/vega-geo.module.js
var vega_geo_module_exports = {};
__export(vega_geo_module_exports, {
  contour: () => Contour,
  geojson: () => GeoJSON,
  geopath: () => GeoPath,
  geopoint: () => GeoPoint,
  geoshape: () => GeoShape,
  graticule: () => Graticule,
  heatmap: () => Heatmap,
  isocontour: () => Isocontour,
  kde2d: () => KDE2D,
  projection: () => Projection
});

// node_modules/d3-geo/src/math.js
var epsilon4 = 1e-6;
var epsilon23 = 1e-12;
var pi3 = Math.PI;
var halfPi2 = pi3 / 2;
var quarterPi = pi3 / 4;
var tau3 = pi3 * 2;
var degrees3 = 180 / pi3;
var radians2 = pi3 / 180;
var abs2 = Math.abs;
var atan = Math.atan;
var atan22 = Math.atan2;
var cos2 = Math.cos;
var ceil = Math.ceil;
var exp3 = Math.exp;
var hypot = Math.hypot;
var log4 = Math.log;
var pow4 = Math.pow;
var sin2 = Math.sin;
var sign2 = Math.sign || function(x5) {
  return x5 > 0 ? 1 : x5 < 0 ? -1 : 0;
};
var sqrt4 = Math.sqrt;
var tan = Math.tan;
function acos2(x5) {
  return x5 > 1 ? 0 : x5 < -1 ? pi3 : Math.acos(x5);
}
function asin2(x5) {
  return x5 > 1 ? halfPi2 : x5 < -1 ? -halfPi2 : Math.asin(x5);
}

// node_modules/d3-geo/src/noop.js
function noop2() {
}

// node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream2) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream2);
  }
}
var streamObjectType = {
  Feature: function(object2, stream2) {
    streamGeometry(object2.geometry, stream2);
  },
  FeatureCollection: function(object2, stream2) {
    var features = object2.features, i = -1, n = features.length;
    while (++i < n)
      streamGeometry(features[i].geometry, stream2);
  }
};
var streamGeometryType = {
  Sphere: function(object2, stream2) {
    stream2.sphere();
  },
  Point: function(object2, stream2) {
    object2 = object2.coordinates;
    stream2.point(object2[0], object2[1], object2[2]);
  },
  MultiPoint: function(object2, stream2) {
    var coordinates = object2.coordinates, i = -1, n = coordinates.length;
    while (++i < n)
      object2 = coordinates[i], stream2.point(object2[0], object2[1], object2[2]);
  },
  LineString: function(object2, stream2) {
    streamLine(object2.coordinates, stream2, 0);
  },
  MultiLineString: function(object2, stream2) {
    var coordinates = object2.coordinates, i = -1, n = coordinates.length;
    while (++i < n)
      streamLine(coordinates[i], stream2, 0);
  },
  Polygon: function(object2, stream2) {
    streamPolygon(object2.coordinates, stream2);
  },
  MultiPolygon: function(object2, stream2) {
    var coordinates = object2.coordinates, i = -1, n = coordinates.length;
    while (++i < n)
      streamPolygon(coordinates[i], stream2);
  },
  GeometryCollection: function(object2, stream2) {
    var geometries = object2.geometries, i = -1, n = geometries.length;
    while (++i < n)
      streamGeometry(geometries[i], stream2);
  }
};
function streamLine(coordinates, stream2, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream2.lineStart();
  while (++i < n)
    coordinate = coordinates[i], stream2.point(coordinate[0], coordinate[1], coordinate[2]);
  stream2.lineEnd();
}
function streamPolygon(coordinates, stream2) {
  var i = -1, n = coordinates.length;
  stream2.polygonStart();
  while (++i < n)
    streamLine(coordinates[i], stream2, 1);
  stream2.polygonEnd();
}
function stream_default(object2, stream2) {
  if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
    streamObjectType[object2.type](object2, stream2);
  } else {
    streamGeometry(object2, stream2);
  }
}

// node_modules/d3-geo/src/area.js
var areaRingSum = new Adder();
var areaSum = new Adder();
var lambda00;
var phi00;
var lambda0;
var cosPhi0;
var sinPhi0;
var areaStream = {
  point: noop2,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: function() {
    areaRingSum = new Adder();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau3 + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop2;
  },
  sphere: function() {
    areaSum.add(tau3);
  }
};
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaRingEnd() {
  areaPoint(lambda00, phi00);
}
function areaPointFirst(lambda, phi2) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi2;
  lambda *= radians2, phi2 *= radians2;
  lambda0 = lambda, cosPhi0 = cos2(phi2 = phi2 / 2 + quarterPi), sinPhi0 = sin2(phi2);
}
function areaPoint(lambda, phi2) {
  lambda *= radians2, phi2 *= radians2;
  phi2 = phi2 / 2 + quarterPi;
  var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos2(phi2), sinPhi = sin2(phi2), k3 = sinPhi0 * sinPhi, u4 = cosPhi0 * cosPhi + k3 * cos2(adLambda), v2 = k3 * sdLambda * sin2(adLambda);
  areaRingSum.add(atan22(v2, u4));
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}
function area_default2(object2) {
  areaSum = new Adder();
  stream_default(object2, areaStream);
  return areaSum * 2;
}

// node_modules/d3-geo/src/cartesian.js
function spherical(cartesian2) {
  return [atan22(cartesian2[1], cartesian2[0]), asin2(cartesian2[2])];
}
function cartesian(spherical2) {
  var lambda = spherical2[0], phi2 = spherical2[1], cosPhi = cos2(phi2);
  return [cosPhi * cos2(lambda), cosPhi * sin2(lambda), sin2(phi2)];
}
function cartesianDot(a4, b2) {
  return a4[0] * b2[0] + a4[1] * b2[1] + a4[2] * b2[2];
}
function cartesianCross(a4, b2) {
  return [a4[1] * b2[2] - a4[2] * b2[1], a4[2] * b2[0] - a4[0] * b2[2], a4[0] * b2[1] - a4[1] * b2[0]];
}
function cartesianAddInPlace(a4, b2) {
  a4[0] += b2[0], a4[1] += b2[1], a4[2] += b2[2];
}
function cartesianScale(vector, k3) {
  return [vector[0] * k3, vector[1] * k3, vector[2] * k3];
}
function cartesianNormalizeInPlace(d) {
  var l = sqrt4(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

// node_modules/d3-geo/src/bounds.js
var lambda02;
var phi0;
var lambda1;
var phi1;
var lambda2;
var lambda002;
var phi002;
var p0;
var deltaSum;
var ranges;
var range2;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum = new Adder();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0)
      lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon4)
      phi1 = 90;
    else if (deltaSum < -epsilon4)
      phi0 = -90;
    range2[0] = lambda02, range2[1] = lambda1;
  },
  sphere: function() {
    lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};
function boundsPoint(lambda, phi2) {
  ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
  if (phi2 < phi0)
    phi0 = phi2;
  if (phi2 > phi1)
    phi1 = phi2;
}
function linePoint(lambda, phi2) {
  var p = cartesian([lambda * radians2, phi2 * radians2]);
  if (p0) {
    var normal = cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2, sign4 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees3 * sign4, phii, antimeridian = abs2(delta) > 180;
    if (antimeridian ^ (sign4 * lambda2 < lambdai && lambdai < sign4 * lambda)) {
      phii = inflection[1] * degrees3;
      if (phii > phi1)
        phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign4 * lambda2 < lambdai && lambdai < sign4 * lambda)) {
      phii = -inflection[1] * degrees3;
      if (phii < phi0)
        phi0 = phii;
    } else {
      if (phi2 < phi0)
        phi0 = phi2;
      if (phi2 > phi1)
        phi1 = phi2;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda02, lambda) > angle(lambda02, lambda1))
          lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda02, lambda1))
          lambda02 = lambda;
      }
    } else {
      if (lambda1 >= lambda02) {
        if (lambda < lambda02)
          lambda02 = lambda;
        if (lambda > lambda1)
          lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda02, lambda) > angle(lambda02, lambda1))
            lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda02, lambda1))
            lambda02 = lambda;
        }
      }
    }
  } else {
    ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
  }
  if (phi2 < phi0)
    phi0 = phi2;
  if (phi2 > phi1)
    phi1 = phi2;
  p0 = p, lambda2 = lambda;
}
function boundsLineStart() {
  boundsStream.point = linePoint;
}
function boundsLineEnd() {
  range2[0] = lambda02, range2[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}
function boundsRingPoint(lambda, phi2) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs2(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda002 = lambda, phi002 = phi2;
  }
  areaStream.point(lambda, phi2);
  linePoint(lambda, phi2);
}
function boundsRingStart() {
  areaStream.lineStart();
}
function boundsRingEnd() {
  boundsRingPoint(lambda002, phi002);
  areaStream.lineEnd();
  if (abs2(deltaSum) > epsilon4)
    lambda02 = -(lambda1 = 180);
  range2[0] = lambda02, range2[1] = lambda1;
  p0 = null;
}
function angle(lambda03, lambda12) {
  return (lambda12 -= lambda03) < 0 ? lambda12 + 360 : lambda12;
}
function rangeCompare(a4, b2) {
  return a4[0] - b2[0];
}
function rangeContains(range8, x5) {
  return range8[0] <= range8[1] ? range8[0] <= x5 && x5 <= range8[1] : x5 < range8[0] || range8[1] < x5;
}
function bounds_default(feature2) {
  var i, n, a4, b2, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda02 = phi0 = Infinity);
  ranges = [];
  stream_default(feature2, boundsStream);
  if (n = ranges.length) {
    ranges.sort(rangeCompare);
    for (i = 1, a4 = ranges[0], merged = [a4]; i < n; ++i) {
      b2 = ranges[i];
      if (rangeContains(a4, b2[0]) || rangeContains(a4, b2[1])) {
        if (angle(a4[0], b2[1]) > angle(a4[0], a4[1]))
          a4[1] = b2[1];
        if (angle(b2[0], a4[1]) > angle(a4[0], a4[1]))
          a4[0] = b2[0];
      } else {
        merged.push(a4 = b2);
      }
    }
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a4 = merged[n]; i <= n; a4 = b2, ++i) {
      b2 = merged[i];
      if ((delta = angle(a4[1], b2[0])) > deltaMax)
        deltaMax = delta, lambda02 = b2[0], lambda1 = a4[1];
    }
  }
  ranges = range2 = null;
  return lambda02 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda02, phi0], [lambda1, phi1]];
}

// node_modules/d3-geo/src/centroid.js
var W0;
var W1;
var X0;
var Y0;
var Z0;
var X1;
var Y1;
var Z1;
var X2;
var Y2;
var Z2;
var lambda003;
var phi003;
var x0;
var y0;
var z0;
var centroidStream = {
  sphere: noop2,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};
function centroidPoint(lambda, phi2) {
  lambda *= radians2, phi2 *= radians2;
  var cosPhi = cos2(phi2);
  centroidPointCartesian(cosPhi * cos2(lambda), cosPhi * sin2(lambda), sin2(phi2));
}
function centroidPointCartesian(x5, y5, z) {
  ++W0;
  X0 += (x5 - X0) / W0;
  Y0 += (y5 - Y0) / W0;
  Z0 += (z - Z0) / W0;
}
function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi2) {
  lambda *= radians2, phi2 *= radians2;
  var cosPhi = cos2(phi2);
  x0 = cosPhi * cos2(lambda);
  y0 = cosPhi * sin2(lambda);
  z0 = sin2(phi2);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi2) {
  lambda *= radians2, phi2 *= radians2;
  var cosPhi = cos2(phi2), x5 = cosPhi * cos2(lambda), y5 = cosPhi * sin2(lambda), z = sin2(phi2), w4 = atan22(sqrt4((w4 = y0 * z - z0 * y5) * w4 + (w4 = z0 * x5 - x0 * z) * w4 + (w4 = x0 * y5 - y0 * x5) * w4), x0 * x5 + y0 * y5 + z0 * z);
  W1 += w4;
  X1 += w4 * (x0 + (x0 = x5));
  Y1 += w4 * (y0 + (y0 = y5));
  Z1 += w4 * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
  centroidRingPoint(lambda003, phi003);
  centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi2) {
  lambda003 = lambda, phi003 = phi2;
  lambda *= radians2, phi2 *= radians2;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos2(phi2);
  x0 = cosPhi * cos2(lambda);
  y0 = cosPhi * sin2(lambda);
  z0 = sin2(phi2);
  centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi2) {
  lambda *= radians2, phi2 *= radians2;
  var cosPhi = cos2(phi2), x5 = cosPhi * cos2(lambda), y5 = cosPhi * sin2(lambda), z = sin2(phi2), cx = y0 * z - z0 * y5, cy = z0 * x5 - x0 * z, cz = x0 * y5 - y0 * x5, m3 = hypot(cx, cy, cz), w4 = asin2(m3), v2 = m3 && -w4 / m3;
  X2.add(v2 * cx);
  Y2.add(v2 * cy);
  Z2.add(v2 * cz);
  W1 += w4;
  X1 += w4 * (x0 + (x0 = x5));
  Y1 += w4 * (y0 + (y0 = y5));
  Z1 += w4 * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}
function centroid_default(object2) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
  X2 = new Adder();
  Y2 = new Adder();
  Z2 = new Adder();
  stream_default(object2, centroidStream);
  var x5 = +X2, y5 = +Y2, z = +Z2, m3 = hypot(x5, y5, z);
  if (m3 < epsilon23) {
    x5 = X1, y5 = Y1, z = Z1;
    if (W1 < epsilon4)
      x5 = X0, y5 = Y0, z = Z0;
    m3 = hypot(x5, y5, z);
    if (m3 < epsilon23)
      return [NaN, NaN];
  }
  return [atan22(y5, x5) * degrees3, asin2(z / m3) * degrees3];
}

// node_modules/d3-geo/src/compose.js
function compose_default(a4, b2) {
  function compose(x5, y5) {
    return x5 = a4(x5, y5), b2(x5[0], x5[1]);
  }
  if (a4.invert && b2.invert)
    compose.invert = function(x5, y5) {
      return x5 = b2.invert(x5, y5), x5 && a4.invert(x5[0], x5[1]);
    };
  return compose;
}

// node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi2) {
  return [abs2(lambda) > pi3 ? lambda + Math.round(-lambda / tau3) * tau3 : lambda, phi2];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau3) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi2) {
    return lambda += deltaLambda, [lambda > pi3 ? lambda - tau3 : lambda < -pi3 ? lambda + tau3 : lambda, phi2];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos2(deltaPhi), sinDeltaPhi = sin2(deltaPhi), cosDeltaGamma = cos2(deltaGamma), sinDeltaGamma = sin2(deltaGamma);
  function rotation(lambda, phi2) {
    var cosPhi = cos2(phi2), x5 = cos2(lambda) * cosPhi, y5 = sin2(lambda) * cosPhi, z = sin2(phi2), k3 = z * cosDeltaPhi + x5 * sinDeltaPhi;
    return [
      atan22(y5 * cosDeltaGamma - k3 * sinDeltaGamma, x5 * cosDeltaPhi - z * sinDeltaPhi),
      asin2(k3 * cosDeltaGamma + y5 * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi2) {
    var cosPhi = cos2(phi2), x5 = cos2(lambda) * cosPhi, y5 = sin2(lambda) * cosPhi, z = sin2(phi2), k3 = z * cosDeltaGamma - y5 * sinDeltaGamma;
    return [
      atan22(y5 * cosDeltaGamma + z * sinDeltaGamma, x5 * cosDeltaPhi + k3 * sinDeltaPhi),
      asin2(k3 * cosDeltaPhi - x5 * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate2) {
  rotate2 = rotateRadians(rotate2[0] * radians2, rotate2[1] * radians2, rotate2.length > 2 ? rotate2[2] * radians2 : 0);
  function forward(coordinates) {
    coordinates = rotate2(coordinates[0] * radians2, coordinates[1] * radians2);
    return coordinates[0] *= degrees3, coordinates[1] *= degrees3, coordinates;
  }
  forward.invert = function(coordinates) {
    coordinates = rotate2.invert(coordinates[0] * radians2, coordinates[1] * radians2);
    return coordinates[0] *= degrees3, coordinates[1] *= degrees3, coordinates;
  };
  return forward;
}

// node_modules/d3-geo/src/circle.js
function circleStream(stream2, radius2, delta, direction, t04, t13) {
  if (!delta)
    return;
  var cosRadius = cos2(radius2), sinRadius = sin2(radius2), step = direction * delta;
  if (t04 == null) {
    t04 = radius2 + direction * tau3;
    t13 = radius2 - step / 2;
  } else {
    t04 = circleRadius(cosRadius, t04);
    t13 = circleRadius(cosRadius, t13);
    if (direction > 0 ? t04 < t13 : t04 > t13)
      t04 += direction * tau3;
  }
  for (var point10, t4 = t04; direction > 0 ? t4 > t13 : t4 < t13; t4 -= step) {
    point10 = spherical([cosRadius, -sinRadius * cos2(t4), -sinRadius * sin2(t4)]);
    stream2.point(point10[0], point10[1]);
  }
}
function circleRadius(cosRadius, point10) {
  point10 = cartesian(point10), point10[0] -= cosRadius;
  cartesianNormalizeInPlace(point10);
  var radius2 = acos2(-point10[1]);
  return ((-point10[2] < 0 ? -radius2 : radius2) + tau3 - epsilon4) % tau3;
}

// node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line4;
  return {
    point: function(x5, y5, m3) {
      line4.push([x5, y5, m3]);
    },
    lineStart: function() {
      lines.push(line4 = []);
    },
    lineEnd: noop2,
    rejoin: function() {
      if (lines.length > 1)
        lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line4 = null;
      return result;
    }
  };
}

// node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a4, b2) {
  return abs2(a4[0] - b2[0]) < epsilon4 && abs2(a4[1] - b2[1]) < epsilon4;
}

// node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point10, points2, other, entry2) {
  this.x = point10;
  this.z = points2;
  this.o = other;
  this.e = entry2;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments2, compareIntersection2, startInside, interpolate3, stream2) {
  var subject = [], clip3 = [], i, n;
  segments2.forEach(function(segment) {
    if ((n2 = segment.length - 1) <= 0)
      return;
    var n2, p02 = segment[0], p1 = segment[n2], x5;
    if (pointEqual_default(p02, p1)) {
      if (!p02[2] && !p1[2]) {
        stream2.lineStart();
        for (i = 0; i < n2; ++i)
          stream2.point((p02 = segment[i])[0], p02[1]);
        stream2.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon4;
    }
    subject.push(x5 = new Intersection(p02, segment, null, true));
    clip3.push(x5.o = new Intersection(p02, null, x5, false));
    subject.push(x5 = new Intersection(p1, segment, null, false));
    clip3.push(x5.o = new Intersection(p1, null, x5, true));
  });
  if (!subject.length)
    return;
  clip3.sort(compareIntersection2);
  link2(subject);
  link2(clip3);
  for (i = 0, n = clip3.length; i < n; ++i) {
    clip3[i].e = startInside = !startInside;
  }
  var start = subject[0], points2, point10;
  while (1) {
    var current2 = start, isSubject = true;
    while (current2.v)
      if ((current2 = current2.n) === start)
        return;
    points2 = current2.z;
    stream2.lineStart();
    do {
      current2.v = current2.o.v = true;
      if (current2.e) {
        if (isSubject) {
          for (i = 0, n = points2.length; i < n; ++i)
            stream2.point((point10 = points2[i])[0], point10[1]);
        } else {
          interpolate3(current2.x, current2.n.x, 1, stream2);
        }
        current2 = current2.n;
      } else {
        if (isSubject) {
          points2 = current2.p.z;
          for (i = points2.length - 1; i >= 0; --i)
            stream2.point((point10 = points2[i])[0], point10[1]);
        } else {
          interpolate3(current2.x, current2.p.x, -1, stream2);
        }
        current2 = current2.p;
      }
      current2 = current2.o;
      points2 = current2.z;
      isSubject = !isSubject;
    } while (!current2.v);
    stream2.lineEnd();
  }
}
function link2(array6) {
  if (!(n = array6.length))
    return;
  var n, i = 0, a4 = array6[0], b2;
  while (++i < n) {
    a4.n = b2 = array6[i];
    b2.p = a4;
    a4 = b2;
  }
  a4.n = b2 = array6[0];
  b2.p = a4;
}

// node_modules/d3-geo/src/polygonContains.js
function longitude(point10) {
  return abs2(point10[0]) <= pi3 ? point10[0] : sign2(point10[0]) * ((abs2(point10[0]) + pi3) % tau3 - pi3);
}
function polygonContains_default(polygon, point10) {
  var lambda = longitude(point10), phi2 = point10[1], sinPhi = sin2(phi2), normal = [sin2(lambda), -cos2(lambda), 0], angle2 = 0, winding = 0;
  var sum5 = new Adder();
  if (sinPhi === 1)
    phi2 = halfPi2 + epsilon4;
  else if (sinPhi === -1)
    phi2 = -halfPi2 - epsilon4;
  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m3 = (ring = polygon[i]).length))
      continue;
    var ring, m3, point0 = ring[m3 - 1], lambda03 = longitude(point0), phi03 = point0[1] / 2 + quarterPi, sinPhi02 = sin2(phi03), cosPhi02 = cos2(phi03);
    for (var j = 0; j < m3; ++j, lambda03 = lambda12, sinPhi02 = sinPhi1, cosPhi02 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin2(phi12), cosPhi1 = cos2(phi12), delta = lambda12 - lambda03, sign4 = delta >= 0 ? 1 : -1, absDelta = sign4 * delta, antimeridian = absDelta > pi3, k3 = sinPhi02 * sinPhi1;
      sum5.add(atan22(k3 * sign4 * sin2(absDelta), cosPhi02 * cosPhi1 + k3 * cos2(absDelta)));
      angle2 += antimeridian ? delta + sign4 * tau3 : delta;
      if (antimeridian ^ lambda03 >= lambda ^ lambda12 >= lambda) {
        var arc4 = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc4);
        var intersection3 = cartesianCross(normal, arc4);
        cartesianNormalizeInPlace(intersection3);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin2(intersection3[2]);
        if (phi2 > phiArc || phi2 === phiArc && (arc4[0] || arc4[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle2 < -epsilon4 || angle2 < epsilon4 && sum5 < -epsilon23) ^ winding & 1;
}

// node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate3, start) {
  return function(sink) {
    var line4 = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments2, ring;
    var clip3 = {
      point: point10,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip3.point = pointRing;
        clip3.lineStart = ringStart;
        clip3.lineEnd = ringEnd;
        segments2 = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip3.point = point10;
        clip3.lineStart = lineStart;
        clip3.lineEnd = lineEnd;
        segments2 = merge2(segments2);
        var startInside = polygonContains_default(polygon, start);
        if (segments2.length) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments2, compareIntersection, startInside, interpolate3, sink);
        } else if (startInside) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate3(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted)
          sink.polygonEnd(), polygonStarted = false;
        segments2 = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate3(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point10(lambda, phi2) {
      if (pointVisible(lambda, phi2))
        sink.point(lambda, phi2);
    }
    function pointLine(lambda, phi2) {
      line4.point(lambda, phi2);
    }
    function lineStart() {
      clip3.point = pointLine;
      line4.lineStart();
    }
    function lineEnd() {
      clip3.point = point10;
      line4.lineEnd();
    }
    function pointRing(lambda, phi2) {
      ring.push([lambda, phi2]);
      ringSink.point(lambda, phi2);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m3, segment, point11;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n)
        return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m3 = segment.length - 1) > 0) {
          if (!polygonStarted)
            sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m3; ++i)
            sink.point((point11 = segment[i])[0], point11[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n > 1 && clean & 2)
        ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments2.push(ringSegments.filter(validSegment));
    }
    return clip3;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a4, b2) {
  return ((a4 = a4.x)[0] < 0 ? a4[1] - halfPi2 - epsilon4 : halfPi2 - a4[1]) - ((b2 = b2.x)[0] < 0 ? b2[1] - halfPi2 - epsilon4 : halfPi2 - b2[1]);
}

// node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(
  function() {
    return true;
  },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi3, -halfPi2]
);
function clipAntimeridianLine(stream2) {
  var lambda03 = NaN, phi03 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream2.lineStart();
      clean = 1;
    },
    point: function(lambda12, phi12) {
      var sign1 = lambda12 > 0 ? pi3 : -pi3, delta = abs2(lambda12 - lambda03);
      if (abs2(delta - pi3) < epsilon4) {
        stream2.point(lambda03, phi03 = (phi03 + phi12) / 2 > 0 ? halfPi2 : -halfPi2);
        stream2.point(sign0, phi03);
        stream2.lineEnd();
        stream2.lineStart();
        stream2.point(sign1, phi03);
        stream2.point(lambda12, phi03);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi3) {
        if (abs2(lambda03 - sign0) < epsilon4)
          lambda03 -= sign0 * epsilon4;
        if (abs2(lambda12 - sign1) < epsilon4)
          lambda12 -= sign1 * epsilon4;
        phi03 = clipAntimeridianIntersect(lambda03, phi03, lambda12, phi12);
        stream2.point(sign0, phi03);
        stream2.lineEnd();
        stream2.lineStart();
        stream2.point(sign1, phi03);
        clean = 0;
      }
      stream2.point(lambda03 = lambda12, phi03 = phi12);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream2.lineEnd();
      lambda03 = phi03 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda03, phi03, lambda12, phi12) {
  var cosPhi02, cosPhi1, sinLambda0Lambda1 = sin2(lambda03 - lambda12);
  return abs2(sinLambda0Lambda1) > epsilon4 ? atan((sin2(phi03) * (cosPhi1 = cos2(phi12)) * sin2(lambda12) - sin2(phi12) * (cosPhi02 = cos2(phi03)) * sin2(lambda03)) / (cosPhi02 * cosPhi1 * sinLambda0Lambda1)) : (phi03 + phi12) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream2) {
  var phi2;
  if (from == null) {
    phi2 = direction * halfPi2;
    stream2.point(-pi3, phi2);
    stream2.point(0, phi2);
    stream2.point(pi3, phi2);
    stream2.point(pi3, 0);
    stream2.point(pi3, -phi2);
    stream2.point(0, -phi2);
    stream2.point(-pi3, -phi2);
    stream2.point(-pi3, 0);
    stream2.point(-pi3, phi2);
  } else if (abs2(from[0] - to[0]) > epsilon4) {
    var lambda = from[0] < to[0] ? pi3 : -pi3;
    phi2 = direction * lambda / 2;
    stream2.point(-lambda, phi2);
    stream2.point(0, phi2);
    stream2.point(lambda, phi2);
  } else {
    stream2.point(to[0], to[1]);
  }
}

// node_modules/d3-geo/src/clip/circle.js
function circle_default2(radius2) {
  var cr2 = cos2(radius2), delta = 6 * radians2, smallRadius = cr2 > 0, notHemisphere = abs2(cr2) > epsilon4;
  function interpolate3(from, to, direction, stream2) {
    circleStream(stream2, radius2, delta, direction, from, to);
  }
  function visible(lambda, phi2) {
    return cos2(lambda) * cos2(phi2) > cr2;
  }
  function clipLine(stream2) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi2) {
        var point1 = [lambda, phi2], point22, v2 = visible(lambda, phi2), c3 = smallRadius ? v2 ? 0 : code(lambda, phi2) : v2 ? code(lambda + (lambda < 0 ? pi3 : -pi3), phi2) : 0;
        if (!point0 && (v00 = v0 = v2))
          stream2.lineStart();
        if (v2 !== v0) {
          point22 = intersect5(point0, point1);
          if (!point22 || pointEqual_default(point0, point22) || pointEqual_default(point1, point22))
            point1[2] = 1;
        }
        if (v2 !== v0) {
          clean = 0;
          if (v2) {
            stream2.lineStart();
            point22 = intersect5(point1, point0);
            stream2.point(point22[0], point22[1]);
          } else {
            point22 = intersect5(point0, point1);
            stream2.point(point22[0], point22[1], 2);
            stream2.lineEnd();
          }
          point0 = point22;
        } else if (notHemisphere && point0 && smallRadius ^ v2) {
          var t4;
          if (!(c3 & c0) && (t4 = intersect5(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream2.lineStart();
              stream2.point(t4[0][0], t4[0][1]);
              stream2.point(t4[1][0], t4[1][1]);
              stream2.lineEnd();
            } else {
              stream2.point(t4[1][0], t4[1][1]);
              stream2.lineEnd();
              stream2.lineStart();
              stream2.point(t4[0][0], t4[0][1], 3);
            }
          }
        }
        if (v2 && (!point0 || !pointEqual_default(point0, point1))) {
          stream2.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v2, c0 = c3;
      },
      lineEnd: function() {
        if (v0)
          stream2.lineEnd();
        point0 = null;
      },
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect5(a4, b2, two) {
    var pa2 = cartesian(a4), pb = cartesian(b2);
    var n1 = [1, 0, 0], n2 = cartesianCross(pa2, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant)
      return !two && a4;
    var c1 = cr2 * n2n2 / determinant, c22 = -cr2 * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A6 = cartesianScale(n1, c1), B4 = cartesianScale(n2, c22);
    cartesianAddInPlace(A6, B4);
    var u4 = n1xn2, w4 = cartesianDot(A6, u4), uu = cartesianDot(u4, u4), t22 = w4 * w4 - uu * (cartesianDot(A6, A6) - 1);
    if (t22 < 0)
      return;
    var t4 = sqrt4(t22), q = cartesianScale(u4, (-w4 - t4) / uu);
    cartesianAddInPlace(q, A6);
    q = spherical(q);
    if (!two)
      return q;
    var lambda03 = a4[0], lambda12 = b2[0], phi03 = a4[1], phi12 = b2[1], z;
    if (lambda12 < lambda03)
      z = lambda03, lambda03 = lambda12, lambda12 = z;
    var delta2 = lambda12 - lambda03, polar = abs2(delta2 - pi3) < epsilon4, meridian = polar || delta2 < epsilon4;
    if (!polar && phi12 < phi03)
      z = phi03, phi03 = phi12, phi12 = z;
    if (meridian ? polar ? phi03 + phi12 > 0 ^ q[1] < (abs2(q[0] - lambda03) < epsilon4 ? phi03 : phi12) : phi03 <= q[1] && q[1] <= phi12 : delta2 > pi3 ^ (lambda03 <= q[0] && q[0] <= lambda12)) {
      var q1 = cartesianScale(u4, (-w4 + t4) / uu);
      cartesianAddInPlace(q1, A6);
      return [q, spherical(q1)];
    }
  }
  function code(lambda, phi2) {
    var r = smallRadius ? radius2 : pi3 - radius2, code2 = 0;
    if (lambda < -r)
      code2 |= 1;
    else if (lambda > r)
      code2 |= 2;
    if (phi2 < -r)
      code2 |= 4;
    else if (phi2 > r)
      code2 |= 8;
    return code2;
  }
  return clip_default(visible, clipLine, interpolate3, smallRadius ? [0, -radius2] : [-pi3, radius2 - pi3]);
}

// node_modules/d3-geo/src/clip/line.js
function line_default2(a4, b2, x07, y07, x13, y13) {
  var ax = a4[0], ay = a4[1], bx = b2[0], by = b2[1], t04 = 0, t13 = 1, dx = bx - ax, dy = by - ay, r;
  r = x07 - ax;
  if (!dx && r > 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r < t04)
      return;
    if (r < t13)
      t13 = r;
  } else if (dx > 0) {
    if (r > t13)
      return;
    if (r > t04)
      t04 = r;
  }
  r = x13 - ax;
  if (!dx && r < 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r > t13)
      return;
    if (r > t04)
      t04 = r;
  } else if (dx > 0) {
    if (r < t04)
      return;
    if (r < t13)
      t13 = r;
  }
  r = y07 - ay;
  if (!dy && r > 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r < t04)
      return;
    if (r < t13)
      t13 = r;
  } else if (dy > 0) {
    if (r > t13)
      return;
    if (r > t04)
      t04 = r;
  }
  r = y13 - ay;
  if (!dy && r < 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r > t13)
      return;
    if (r > t04)
      t04 = r;
  } else if (dy > 0) {
    if (r < t04)
      return;
    if (r < t13)
      t13 = r;
  }
  if (t04 > 0)
    a4[0] = ax + t04 * dx, a4[1] = ay + t04 * dy;
  if (t13 < 1)
    b2[0] = ax + t13 * dx, b2[1] = ay + t13 * dy;
  return true;
}

// node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;
function clipRectangle(x07, y07, x13, y13) {
  function visible(x5, y5) {
    return x07 <= x5 && x5 <= x13 && y07 <= y5 && y5 <= y13;
  }
  function interpolate3(from, to, direction, stream2) {
    var a4 = 0, a1 = 0;
    if (from == null || (a4 = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do
        stream2.point(a4 === 0 || a4 === 3 ? x07 : x13, a4 > 1 ? y13 : y07);
      while ((a4 = (a4 + direction + 4) % 4) !== a1);
    } else {
      stream2.point(to[0], to[1]);
    }
  }
  function corner(p, direction) {
    return abs2(p[0] - x07) < epsilon4 ? direction > 0 ? 0 : 3 : abs2(p[0] - x13) < epsilon4 ? direction > 0 ? 2 : 1 : abs2(p[1] - y07) < epsilon4 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection2(a4, b2) {
    return comparePoint(a4.x, b2.x);
  }
  function comparePoint(a4, b2) {
    var ca3 = corner(a4, 1), cb = corner(b2, 1);
    return ca3 !== cb ? ca3 - cb : ca3 === 0 ? b2[1] - a4[1] : ca3 === 1 ? a4[0] - b2[0] : ca3 === 2 ? a4[1] - b2[1] : b2[0] - a4[0];
  }
  return function(stream2) {
    var activeStream = stream2, bufferStream = buffer_default(), segments2, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point: point10,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point10(x5, y5) {
      if (visible(x5, y5))
        activeStream.point(x5, y5);
    }
    function polygonInside() {
      var winding = 0;
      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring2 = polygon[i], j = 1, m3 = ring2.length, point11 = ring2[0], a0, a1, b0 = point11[0], b1 = point11[1]; j < m3; ++j) {
          a0 = b0, a1 = b1, point11 = ring2[j], b0 = point11[0], b1 = point11[1];
          if (a1 <= y13) {
            if (b1 > y13 && (b0 - a0) * (y13 - a1) > (b1 - a1) * (x07 - a0))
              ++winding;
          } else {
            if (b1 <= y13 && (b0 - a0) * (y13 - a1) < (b1 - a1) * (x07 - a0))
              --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments2 = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments2 = merge2(segments2)).length;
      if (cleanInside || visible2) {
        stream2.polygonStart();
        if (cleanInside) {
          stream2.lineStart();
          interpolate3(null, null, 1, stream2);
          stream2.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments2, compareIntersection2, startInside, interpolate3, stream2);
        }
        stream2.polygonEnd();
      }
      activeStream = stream2, segments2 = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint2;
      if (polygon)
        polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments2) {
        linePoint2(x__, y__);
        if (v__ && v_)
          bufferStream.rejoin();
        segments2.push(bufferStream.result());
      }
      clipStream.point = point10;
      if (v_)
        activeStream.lineEnd();
    }
    function linePoint2(x5, y5) {
      var v2 = visible(x5, y5);
      if (polygon)
        ring.push([x5, y5]);
      if (first) {
        x__ = x5, y__ = y5, v__ = v2;
        first = false;
        if (v2) {
          activeStream.lineStart();
          activeStream.point(x5, y5);
        }
      } else {
        if (v2 && v_)
          activeStream.point(x5, y5);
        else {
          var a4 = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b2 = [x5 = Math.max(clipMin, Math.min(clipMax, x5)), y5 = Math.max(clipMin, Math.min(clipMax, y5))];
          if (line_default2(a4, b2, x07, y07, x13, y13)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a4[0], a4[1]);
            }
            activeStream.point(b2[0], b2[1]);
            if (!v2)
              activeStream.lineEnd();
            clean = false;
          } else if (v2) {
            activeStream.lineStart();
            activeStream.point(x5, y5);
            clean = false;
          }
        }
      }
      x_ = x5, y_ = y5, v_ = v2;
    }
    return clipStream;
  };
}

// node_modules/d3-geo/src/graticule.js
function graticuleX(y07, y13, dy) {
  var y5 = range(y07, y13 - epsilon4, dy).concat(y13);
  return function(x5) {
    return y5.map(function(y6) {
      return [x5, y6];
    });
  };
}
function graticuleY(x07, x13, dx) {
  var x5 = range(x07, x13 - epsilon4, dx).concat(x13);
  return function(y5) {
    return x5.map(function(x6) {
      return [x6, y5];
    });
  };
}
function graticule() {
  var x13, x07, X13, X03, y13, y07, Y13, Y03, dx = 10, dy = dx, DX = 90, DY = 360, x5, y5, X4, Y4, precision = 2.5;
  function graticule2() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range(ceil(X03 / DX) * DX, X13, DX).map(X4).concat(range(ceil(Y03 / DY) * DY, Y13, DY).map(Y4)).concat(range(ceil(x07 / dx) * dx, x13, dx).filter(function(x6) {
      return abs2(x6 % DX) > epsilon4;
    }).map(x5)).concat(range(ceil(y07 / dy) * dy, y13, dy).filter(function(y6) {
      return abs2(y6 % DY) > epsilon4;
    }).map(y5));
  }
  graticule2.lines = function() {
    return lines().map(function(coordinates) {
      return { type: "LineString", coordinates };
    });
  };
  graticule2.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X4(X03).concat(
          Y4(Y13).slice(1),
          X4(X13).reverse().slice(1),
          Y4(Y03).reverse().slice(1)
        )
      ]
    };
  };
  graticule2.extent = function(_) {
    if (!arguments.length)
      return graticule2.extentMinor();
    return graticule2.extentMajor(_).extentMinor(_);
  };
  graticule2.extentMajor = function(_) {
    if (!arguments.length)
      return [[X03, Y03], [X13, Y13]];
    X03 = +_[0][0], X13 = +_[1][0];
    Y03 = +_[0][1], Y13 = +_[1][1];
    if (X03 > X13)
      _ = X03, X03 = X13, X13 = _;
    if (Y03 > Y13)
      _ = Y03, Y03 = Y13, Y13 = _;
    return graticule2.precision(precision);
  };
  graticule2.extentMinor = function(_) {
    if (!arguments.length)
      return [[x07, y07], [x13, y13]];
    x07 = +_[0][0], x13 = +_[1][0];
    y07 = +_[0][1], y13 = +_[1][1];
    if (x07 > x13)
      _ = x07, x07 = x13, x13 = _;
    if (y07 > y13)
      _ = y07, y07 = y13, y13 = _;
    return graticule2.precision(precision);
  };
  graticule2.step = function(_) {
    if (!arguments.length)
      return graticule2.stepMinor();
    return graticule2.stepMajor(_).stepMinor(_);
  };
  graticule2.stepMajor = function(_) {
    if (!arguments.length)
      return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule2;
  };
  graticule2.stepMinor = function(_) {
    if (!arguments.length)
      return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule2;
  };
  graticule2.precision = function(_) {
    if (!arguments.length)
      return precision;
    precision = +_;
    x5 = graticuleX(y07, y13, 90);
    y5 = graticuleY(x07, x13, precision);
    X4 = graticuleX(Y03, Y13, 90);
    Y4 = graticuleY(X03, X13, precision);
    return graticule2;
  };
  return graticule2.extentMajor([[-180, -90 + epsilon4], [180, 90 - epsilon4]]).extentMinor([[-180, -80 - epsilon4], [180, 80 + epsilon4]]);
}

// node_modules/d3-geo/src/identity.js
var identity_default4 = (x5) => x5;

// node_modules/d3-geo/src/path/area.js
var areaSum2 = new Adder();
var areaRingSum2 = new Adder();
var x00;
var y00;
var x02;
var y02;
var areaStream2 = {
  point: noop2,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: function() {
    areaStream2.lineStart = areaRingStart2;
    areaStream2.lineEnd = areaRingEnd2;
  },
  polygonEnd: function() {
    areaStream2.lineStart = areaStream2.lineEnd = areaStream2.point = noop2;
    areaSum2.add(abs2(areaRingSum2));
    areaRingSum2 = new Adder();
  },
  result: function() {
    var area4 = areaSum2 / 2;
    areaSum2 = new Adder();
    return area4;
  }
};
function areaRingStart2() {
  areaStream2.point = areaPointFirst2;
}
function areaPointFirst2(x5, y5) {
  areaStream2.point = areaPoint2;
  x00 = x02 = x5, y00 = y02 = y5;
}
function areaPoint2(x5, y5) {
  areaRingSum2.add(y02 * x5 - x02 * y5);
  x02 = x5, y02 = y5;
}
function areaRingEnd2() {
  areaPoint2(x00, y00);
}
var area_default3 = areaStream2;

// node_modules/d3-geo/src/path/bounds.js
var x03 = Infinity;
var y03 = x03;
var x1 = -x03;
var y1 = x1;
var boundsStream2 = {
  point: boundsPoint2,
  lineStart: noop2,
  lineEnd: noop2,
  polygonStart: noop2,
  polygonEnd: noop2,
  result: function() {
    var bounds2 = [[x03, y03], [x1, y1]];
    x1 = y1 = -(y03 = x03 = Infinity);
    return bounds2;
  }
};
function boundsPoint2(x5, y5) {
  if (x5 < x03)
    x03 = x5;
  if (x5 > x1)
    x1 = x5;
  if (y5 < y03)
    y03 = y5;
  if (y5 > y1)
    y1 = y5;
}
var bounds_default2 = boundsStream2;

// node_modules/d3-geo/src/path/centroid.js
var X02 = 0;
var Y02 = 0;
var Z02 = 0;
var X12 = 0;
var Y12 = 0;
var Z12 = 0;
var X22 = 0;
var Y22 = 0;
var Z22 = 0;
var x002;
var y002;
var x04;
var y04;
var centroidStream2 = {
  point: centroidPoint2,
  lineStart: centroidLineStart2,
  lineEnd: centroidLineEnd2,
  polygonStart: function() {
    centroidStream2.lineStart = centroidRingStart2;
    centroidStream2.lineEnd = centroidRingEnd2;
  },
  polygonEnd: function() {
    centroidStream2.point = centroidPoint2;
    centroidStream2.lineStart = centroidLineStart2;
    centroidStream2.lineEnd = centroidLineEnd2;
  },
  result: function() {
    var centroid = Z22 ? [X22 / Z22, Y22 / Z22] : Z12 ? [X12 / Z12, Y12 / Z12] : Z02 ? [X02 / Z02, Y02 / Z02] : [NaN, NaN];
    X02 = Y02 = Z02 = X12 = Y12 = Z12 = X22 = Y22 = Z22 = 0;
    return centroid;
  }
};
function centroidPoint2(x5, y5) {
  X02 += x5;
  Y02 += y5;
  ++Z02;
}
function centroidLineStart2() {
  centroidStream2.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x5, y5) {
  centroidStream2.point = centroidPointLine;
  centroidPoint2(x04 = x5, y04 = y5);
}
function centroidPointLine(x5, y5) {
  var dx = x5 - x04, dy = y5 - y04, z = sqrt4(dx * dx + dy * dy);
  X12 += z * (x04 + x5) / 2;
  Y12 += z * (y04 + y5) / 2;
  Z12 += z;
  centroidPoint2(x04 = x5, y04 = y5);
}
function centroidLineEnd2() {
  centroidStream2.point = centroidPoint2;
}
function centroidRingStart2() {
  centroidStream2.point = centroidPointFirstRing;
}
function centroidRingEnd2() {
  centroidPointRing(x002, y002);
}
function centroidPointFirstRing(x5, y5) {
  centroidStream2.point = centroidPointRing;
  centroidPoint2(x002 = x04 = x5, y002 = y04 = y5);
}
function centroidPointRing(x5, y5) {
  var dx = x5 - x04, dy = y5 - y04, z = sqrt4(dx * dx + dy * dy);
  X12 += z * (x04 + x5) / 2;
  Y12 += z * (y04 + y5) / 2;
  Z12 += z;
  z = y04 * x5 - x04 * y5;
  X22 += z * (x04 + x5);
  Y22 += z * (y04 + y5);
  Z22 += z * 3;
  centroidPoint2(x04 = x5, y04 = y5);
}
var centroid_default2 = centroidStream2;

// node_modules/d3-geo/src/path/context.js
function PathContext(context3) {
  this._context = context3;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._context.closePath();
    this._point = NaN;
  },
  point: function(x5, y5) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x5, y5);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x5, y5);
        break;
      }
      default: {
        this._context.moveTo(x5 + this._radius, y5);
        this._context.arc(x5, y5, this._radius, 0, tau3);
        break;
      }
    }
  },
  result: noop2
};

// node_modules/d3-geo/src/path/measure.js
var lengthSum = new Adder();
var lengthRing;
var x003;
var y003;
var x05;
var y05;
var lengthStream = {
  point: noop2,
  lineStart: function() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function() {
    if (lengthRing)
      lengthPoint(x003, y003);
    lengthStream.point = noop2;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length2 = +lengthSum;
    lengthSum = new Adder();
    return length2;
  }
};
function lengthPointFirst(x5, y5) {
  lengthStream.point = lengthPoint;
  x003 = x05 = x5, y003 = y05 = y5;
}
function lengthPoint(x5, y5) {
  x05 -= x5, y05 -= y5;
  lengthSum.add(sqrt4(x05 * x05 + y05 * y05));
  x05 = x5, y05 = y5;
}
var measure_default = lengthStream;

// node_modules/d3-geo/src/path/string.js
function PathString() {
  this._string = [];
}
PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius)
      this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._string.push("Z");
    this._point = NaN;
  },
  point: function(x5, y5) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x5, ",", y5);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x5, ",", y5);
        break;
      }
      default: {
        if (this._circle == null)
          this._circle = circle(this._radius);
        this._string.push("M", x5, ",", y5, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};
function circle(radius2) {
  return "m0," + radius2 + "a" + radius2 + "," + radius2 + " 0 1,1 0," + -2 * radius2 + "a" + radius2 + "," + radius2 + " 0 1,1 0," + 2 * radius2 + "z";
}

// node_modules/d3-geo/src/path/index.js
function path_default2(projection3, context3) {
  var pointRadius = 4.5, projectionStream, contextStream;
  function path3(object2) {
    if (object2) {
      if (typeof pointRadius === "function")
        contextStream.pointRadius(+pointRadius.apply(this, arguments));
      stream_default(object2, projectionStream(contextStream));
    }
    return contextStream.result();
  }
  path3.area = function(object2) {
    stream_default(object2, projectionStream(area_default3));
    return area_default3.result();
  };
  path3.measure = function(object2) {
    stream_default(object2, projectionStream(measure_default));
    return measure_default.result();
  };
  path3.bounds = function(object2) {
    stream_default(object2, projectionStream(bounds_default2));
    return bounds_default2.result();
  };
  path3.centroid = function(object2) {
    stream_default(object2, projectionStream(centroid_default2));
    return centroid_default2.result();
  };
  path3.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection3 = null, identity_default4) : (projection3 = _).stream, path3) : projection3;
  };
  path3.context = function(_) {
    if (!arguments.length)
      return context3;
    contextStream = _ == null ? (context3 = null, new PathString()) : new PathContext(context3 = _);
    if (typeof pointRadius !== "function")
      contextStream.pointRadius(pointRadius);
    return path3;
  };
  path3.pointRadius = function(_) {
    if (!arguments.length)
      return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path3;
  };
  return path3.projection(projection3).context(context3);
}

// node_modules/d3-geo/src/transform.js
function transformer4(methods2) {
  return function(stream2) {
    var s2 = new TransformStream();
    for (var key2 in methods2)
      s2[key2] = methods2[key2];
    s2.stream = stream2;
    return s2;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x5, y5) {
    this.stream.point(x5, y5);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo/src/projection/fit.js
function fit(projection3, fitBounds, object2) {
  var clip3 = projection3.clipExtent && projection3.clipExtent();
  projection3.scale(150).translate([0, 0]);
  if (clip3 != null)
    projection3.clipExtent(null);
  stream_default(object2, projection3.stream(bounds_default2));
  fitBounds(bounds_default2.result());
  if (clip3 != null)
    projection3.clipExtent(clip3);
  return projection3;
}
function fitExtent(projection3, extent4, object2) {
  return fit(projection3, function(b2) {
    var w4 = extent4[1][0] - extent4[0][0], h2 = extent4[1][1] - extent4[0][1], k3 = Math.min(w4 / (b2[1][0] - b2[0][0]), h2 / (b2[1][1] - b2[0][1])), x5 = +extent4[0][0] + (w4 - k3 * (b2[1][0] + b2[0][0])) / 2, y5 = +extent4[0][1] + (h2 - k3 * (b2[1][1] + b2[0][1])) / 2;
    projection3.scale(150 * k3).translate([x5, y5]);
  }, object2);
}
function fitSize(projection3, size, object2) {
  return fitExtent(projection3, [[0, 0], size], object2);
}
function fitWidth(projection3, width2, object2) {
  return fit(projection3, function(b2) {
    var w4 = +width2, k3 = w4 / (b2[1][0] - b2[0][0]), x5 = (w4 - k3 * (b2[1][0] + b2[0][0])) / 2, y5 = -k3 * b2[0][1];
    projection3.scale(150 * k3).translate([x5, y5]);
  }, object2);
}
function fitHeight(projection3, height2, object2) {
  return fit(projection3, function(b2) {
    var h2 = +height2, k3 = h2 / (b2[1][1] - b2[0][1]), x5 = -k3 * b2[0][0], y5 = (h2 - k3 * (b2[1][1] + b2[0][1])) / 2;
    projection3.scale(150 * k3).translate([x5, y5]);
  }, object2);
}

// node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance = cos2(30 * radians2);
function resample_default(project3, delta2) {
  return +delta2 ? resample(project3, delta2) : resampleNone(project3);
}
function resampleNone(project3) {
  return transformer4({
    point: function(x5, y5) {
      x5 = project3(x5, y5);
      this.stream.point(x5[0], x5[1]);
    }
  });
}
function resample(project3, delta2) {
  function resampleLineTo(x07, y07, lambda03, a0, b0, c0, x13, y13, lambda12, a1, b1, c1, depth, stream2) {
    var dx = x13 - x07, dy = y13 - y07, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a4 = a0 + a1, b2 = b0 + b1, c3 = c0 + c1, m3 = sqrt4(a4 * a4 + b2 * b2 + c3 * c3), phi2 = asin2(c3 /= m3), lambda22 = abs2(abs2(c3) - 1) < epsilon4 || abs2(lambda03 - lambda12) < epsilon4 ? (lambda03 + lambda12) / 2 : atan22(b2, a4), p = project3(lambda22, phi2), x22 = p[0], y22 = p[1], dx2 = x22 - x07, dy2 = y22 - y07, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs2((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x07, y07, lambda03, a0, b0, c0, x22, y22, lambda22, a4 /= m3, b2 /= m3, c3, depth, stream2);
        stream2.point(x22, y22);
        resampleLineTo(x22, y22, lambda22, a4, b2, c3, x13, y13, lambda12, a1, b1, c1, depth, stream2);
      }
    }
  }
  return function(stream2) {
    var lambda004, x004, y004, a00, b00, c00, lambda03, x07, y07, a0, b0, c0;
    var resampleStream = {
      point: point10,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream2.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream2.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point10(x5, y5) {
      x5 = project3(x5, y5);
      stream2.point(x5[0], x5[1]);
    }
    function lineStart() {
      x07 = NaN;
      resampleStream.point = linePoint2;
      stream2.lineStart();
    }
    function linePoint2(lambda, phi2) {
      var c3 = cartesian([lambda, phi2]), p = project3(lambda, phi2);
      resampleLineTo(x07, y07, lambda03, a0, b0, c0, x07 = p[0], y07 = p[1], lambda03 = lambda, a0 = c3[0], b0 = c3[1], c0 = c3[2], maxDepth, stream2);
      stream2.point(x07, y07);
    }
    function lineEnd() {
      resampleStream.point = point10;
      stream2.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi2) {
      linePoint2(lambda004 = lambda, phi2), x004 = x07, y004 = y07, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint2;
    }
    function ringEnd() {
      resampleLineTo(x07, y07, lambda03, a0, b0, c0, x004, y004, lambda004, a00, b00, c00, maxDepth, stream2);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer4({
  point: function(x5, y5) {
    this.stream.point(x5 * radians2, y5 * radians2);
  }
});
function transformRotate(rotate2) {
  return transformer4({
    point: function(x5, y5) {
      var r = rotate2(x5, y5);
      return this.stream.point(r[0], r[1]);
    }
  });
}
function scaleTranslate(k3, dx, dy, sx, sy) {
  function transform4(x5, y5) {
    x5 *= sx;
    y5 *= sy;
    return [dx + k3 * x5, dy - k3 * y5];
  }
  transform4.invert = function(x5, y5) {
    return [(x5 - dx) / k3 * sx, (dy - y5) / k3 * sy];
  };
  return transform4;
}
function scaleTranslateRotate(k3, dx, dy, sx, sy, alpha) {
  if (!alpha)
    return scaleTranslate(k3, dx, dy, sx, sy);
  var cosAlpha = cos2(alpha), sinAlpha = sin2(alpha), a4 = cosAlpha * k3, b2 = sinAlpha * k3, ai = cosAlpha / k3, bi = sinAlpha / k3, ci = (sinAlpha * dy - cosAlpha * dx) / k3, fi = (sinAlpha * dx + cosAlpha * dy) / k3;
  function transform4(x5, y5) {
    x5 *= sx;
    y5 *= sy;
    return [a4 * x5 - b2 * y5 + dx, dy - b2 * x5 - a4 * y5];
  }
  transform4.invert = function(x5, y5) {
    return [sx * (ai * x5 - bi * y5 + ci), sy * (fi - bi * x5 - ai * y5)];
  };
  return transform4;
}
function projection(project3) {
  return projectionMutator(function() {
    return project3;
  })();
}
function projectionMutator(projectAt) {
  var project3, k3 = 150, x5 = 480, y5 = 250, lambda = 0, phi2 = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate2, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x07 = null, y07, x13, y13, postclip = identity_default4, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache2, cacheStream;
  function projection3(point10) {
    return projectRotateTransform(point10[0] * radians2, point10[1] * radians2);
  }
  function invert2(point10) {
    point10 = projectRotateTransform.invert(point10[0], point10[1]);
    return point10 && [point10[0] * degrees3, point10[1] * degrees3];
  }
  projection3.stream = function(stream2) {
    return cache2 && cacheStream === stream2 ? cache2 : cache2 = transformRadians(transformRotate(rotate2)(preclip(projectResample(postclip(cacheStream = stream2)))));
  };
  projection3.preclip = function(_) {
    return arguments.length ? (preclip = _, theta = void 0, reset4()) : preclip;
  };
  projection3.postclip = function(_) {
    return arguments.length ? (postclip = _, x07 = y07 = x13 = y13 = null, reset4()) : postclip;
  };
  projection3.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? circle_default2(theta = _ * radians2) : (theta = null, antimeridian_default), reset4()) : theta * degrees3;
  };
  projection3.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x07 = y07 = x13 = y13 = null, identity_default4) : clipRectangle(x07 = +_[0][0], y07 = +_[0][1], x13 = +_[1][0], y13 = +_[1][1]), reset4()) : x07 == null ? null : [[x07, y07], [x13, y13]];
  };
  projection3.scale = function(_) {
    return arguments.length ? (k3 = +_, recenter()) : k3;
  };
  projection3.translate = function(_) {
    return arguments.length ? (x5 = +_[0], y5 = +_[1], recenter()) : [x5, y5];
  };
  projection3.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians2, phi2 = _[1] % 360 * radians2, recenter()) : [lambda * degrees3, phi2 * degrees3];
  };
  projection3.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians2, deltaPhi = _[1] % 360 * radians2, deltaGamma = _.length > 2 ? _[2] % 360 * radians2 : 0, recenter()) : [deltaLambda * degrees3, deltaPhi * degrees3, deltaGamma * degrees3];
  };
  projection3.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians2, recenter()) : alpha * degrees3;
  };
  projection3.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };
  projection3.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };
  projection3.precision = function(_) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _ * _), reset4()) : sqrt4(delta2);
  };
  projection3.fitExtent = function(extent4, object2) {
    return fitExtent(projection3, extent4, object2);
  };
  projection3.fitSize = function(size, object2) {
    return fitSize(projection3, size, object2);
  };
  projection3.fitWidth = function(width2, object2) {
    return fitWidth(projection3, width2, object2);
  };
  projection3.fitHeight = function(height2, object2) {
    return fitHeight(projection3, height2, object2);
  };
  function recenter() {
    var center = scaleTranslateRotate(k3, 0, 0, sx, sy, alpha).apply(null, project3(lambda, phi2)), transform4 = scaleTranslateRotate(k3, x5 - center[0], y5 - center[1], sx, sy, alpha);
    rotate2 = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project3, transform4);
    projectRotateTransform = compose_default(rotate2, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset4();
  }
  function reset4() {
    cache2 = cacheStream = null;
    return projection3;
  }
  return function() {
    project3 = projectAt.apply(this, arguments);
    projection3.invert = project3.invert && invert2;
    return recenter();
  };
}

// node_modules/d3-geo/src/projection/conic.js
function conicProjection(projectAt) {
  var phi03 = 0, phi12 = pi3 / 3, m3 = projectionMutator(projectAt), p = m3(phi03, phi12);
  p.parallels = function(_) {
    return arguments.length ? m3(phi03 = _[0] * radians2, phi12 = _[1] * radians2) : [phi03 * degrees3, phi12 * degrees3];
  };
  return p;
}

// node_modules/d3-geo/src/projection/cylindricalEqualArea.js
function cylindricalEqualAreaRaw(phi03) {
  var cosPhi02 = cos2(phi03);
  function forward(lambda, phi2) {
    return [lambda * cosPhi02, sin2(phi2) / cosPhi02];
  }
  forward.invert = function(x5, y5) {
    return [x5 / cosPhi02, asin2(y5 * cosPhi02)];
  };
  return forward;
}

// node_modules/d3-geo/src/projection/conicEqualArea.js
function conicEqualAreaRaw(y07, y13) {
  var sy0 = sin2(y07), n = (sy0 + sin2(y13)) / 2;
  if (abs2(n) < epsilon4)
    return cylindricalEqualAreaRaw(y07);
  var c3 = 1 + sy0 * (2 * n - sy0), r0 = sqrt4(c3) / n;
  function project3(x5, y5) {
    var r = sqrt4(c3 - 2 * n * sin2(y5)) / n;
    return [r * sin2(x5 *= n), r0 - r * cos2(x5)];
  }
  project3.invert = function(x5, y5) {
    var r0y = r0 - y5, l = atan22(x5, abs2(r0y)) * sign2(r0y);
    if (r0y * n < 0)
      l -= pi3 * sign2(x5) * sign2(r0y);
    return [l / n, asin2((c3 - (x5 * x5 + r0y * r0y) * n * n) / (2 * n))];
  };
  return project3;
}
function conicEqualArea_default() {
  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}

// node_modules/d3-geo/src/projection/albers.js
function albers_default() {
  return conicEqualArea_default().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}

// node_modules/d3-geo/src/projection/albersUsa.js
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x5, y5) {
      var i = -1;
      while (++i < n)
        streams[i].point(x5, y5);
    },
    sphere: function() {
      var i = -1;
      while (++i < n)
        streams[i].sphere();
    },
    lineStart: function() {
      var i = -1;
      while (++i < n)
        streams[i].lineStart();
    },
    lineEnd: function() {
      var i = -1;
      while (++i < n)
        streams[i].lineEnd();
    },
    polygonStart: function() {
      var i = -1;
      while (++i < n)
        streams[i].polygonStart();
    },
    polygonEnd: function() {
      var i = -1;
      while (++i < n)
        streams[i].polygonEnd();
    }
  };
}
function albersUsa_default() {
  var cache2, cacheStream, lower48 = albers_default(), lower48Point, alaska = conicEqualArea_default().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, hawaii = conicEqualArea_default().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, point10, pointStream = { point: function(x5, y5) {
    point10 = [x5, y5];
  } };
  function albersUsa(coordinates) {
    var x5 = coordinates[0], y5 = coordinates[1];
    return point10 = null, (lower48Point.point(x5, y5), point10) || (alaskaPoint.point(x5, y5), point10) || (hawaiiPoint.point(x5, y5), point10);
  }
  albersUsa.invert = function(coordinates) {
    var k3 = lower48.scale(), t4 = lower48.translate(), x5 = (coordinates[0] - t4[0]) / k3, y5 = (coordinates[1] - t4[1]) / k3;
    return (y5 >= 0.12 && y5 < 0.234 && x5 >= -0.425 && x5 < -0.214 ? alaska : y5 >= 0.166 && y5 < 0.234 && x5 >= -0.214 && x5 < -0.115 ? hawaii : lower48).invert(coordinates);
  };
  albersUsa.stream = function(stream2) {
    return cache2 && cacheStream === stream2 ? cache2 : cache2 = multiplex([lower48.stream(cacheStream = stream2), alaska.stream(stream2), hawaii.stream(stream2)]);
  };
  albersUsa.precision = function(_) {
    if (!arguments.length)
      return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset4();
  };
  albersUsa.scale = function(_) {
    if (!arguments.length)
      return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };
  albersUsa.translate = function(_) {
    if (!arguments.length)
      return lower48.translate();
    var k3 = lower48.scale(), x5 = +_[0], y5 = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x5 - 0.455 * k3, y5 - 0.238 * k3], [x5 + 0.455 * k3, y5 + 0.238 * k3]]).stream(pointStream);
    alaskaPoint = alaska.translate([x5 - 0.307 * k3, y5 + 0.201 * k3]).clipExtent([[x5 - 0.425 * k3 + epsilon4, y5 + 0.12 * k3 + epsilon4], [x5 - 0.214 * k3 - epsilon4, y5 + 0.234 * k3 - epsilon4]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x5 - 0.205 * k3, y5 + 0.212 * k3]).clipExtent([[x5 - 0.214 * k3 + epsilon4, y5 + 0.166 * k3 + epsilon4], [x5 - 0.115 * k3 - epsilon4, y5 + 0.234 * k3 - epsilon4]]).stream(pointStream);
    return reset4();
  };
  albersUsa.fitExtent = function(extent4, object2) {
    return fitExtent(albersUsa, extent4, object2);
  };
  albersUsa.fitSize = function(size, object2) {
    return fitSize(albersUsa, size, object2);
  };
  albersUsa.fitWidth = function(width2, object2) {
    return fitWidth(albersUsa, width2, object2);
  };
  albersUsa.fitHeight = function(height2, object2) {
    return fitHeight(albersUsa, height2, object2);
  };
  function reset4() {
    cache2 = cacheStream = null;
    return albersUsa;
  }
  return albersUsa.scale(1070);
}

// node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale7) {
  return function(x5, y5) {
    var cx = cos2(x5), cy = cos2(y5), k3 = scale7(cx * cy);
    if (k3 === Infinity)
      return [2, 0];
    return [
      k3 * cy * sin2(x5),
      k3 * sin2(y5)
    ];
  };
}
function azimuthalInvert(angle2) {
  return function(x5, y5) {
    var z = sqrt4(x5 * x5 + y5 * y5), c3 = angle2(z), sc = sin2(c3), cc2 = cos2(c3);
    return [
      atan22(x5 * sc, z * cc2),
      asin2(z && y5 * sc / z)
    ];
  };
}

// node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt4(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
  return 2 * asin2(z / 2);
});
function azimuthalEqualArea_default() {
  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}

// node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw = azimuthalRaw(function(c3) {
  return (c3 = acos2(c3)) && c3 / sin2(c3);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
  return z;
});
function azimuthalEquidistant_default() {
  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}

// node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi2) {
  return [lambda, log4(tan((halfPi2 + phi2) / 2))];
}
mercatorRaw.invert = function(x5, y5) {
  return [x5, 2 * atan(exp3(y5)) - halfPi2];
};
function mercator_default() {
  return mercatorProjection(mercatorRaw).scale(961 / tau3);
}
function mercatorProjection(project3) {
  var m3 = projection(project3), center = m3.center, scale7 = m3.scale, translate4 = m3.translate, clipExtent = m3.clipExtent, x07 = null, y07, x13, y13;
  m3.scale = function(_) {
    return arguments.length ? (scale7(_), reclip()) : scale7();
  };
  m3.translate = function(_) {
    return arguments.length ? (translate4(_), reclip()) : translate4();
  };
  m3.center = function(_) {
    return arguments.length ? (center(_), reclip()) : center();
  };
  m3.clipExtent = function(_) {
    return arguments.length ? (_ == null ? x07 = y07 = x13 = y13 = null : (x07 = +_[0][0], y07 = +_[0][1], x13 = +_[1][0], y13 = +_[1][1]), reclip()) : x07 == null ? null : [[x07, y07], [x13, y13]];
  };
  function reclip() {
    var k3 = pi3 * scale7(), t4 = m3(rotation_default(m3.rotate()).invert([0, 0]));
    return clipExtent(x07 == null ? [[t4[0] - k3, t4[1] - k3], [t4[0] + k3, t4[1] + k3]] : project3 === mercatorRaw ? [[Math.max(t4[0] - k3, x07), y07], [Math.min(t4[0] + k3, x13), y13]] : [[x07, Math.max(t4[1] - k3, y07)], [x13, Math.min(t4[1] + k3, y13)]]);
  }
  return reclip();
}

// node_modules/d3-geo/src/projection/conicConformal.js
function tany(y5) {
  return tan((halfPi2 + y5) / 2);
}
function conicConformalRaw(y07, y13) {
  var cy0 = cos2(y07), n = y07 === y13 ? sin2(y07) : log4(cy0 / cos2(y13)) / log4(tany(y13) / tany(y07)), f = cy0 * pow4(tany(y07), n) / n;
  if (!n)
    return mercatorRaw;
  function project3(x5, y5) {
    if (f > 0) {
      if (y5 < -halfPi2 + epsilon4)
        y5 = -halfPi2 + epsilon4;
    } else {
      if (y5 > halfPi2 - epsilon4)
        y5 = halfPi2 - epsilon4;
    }
    var r = f / pow4(tany(y5), n);
    return [r * sin2(n * x5), f - r * cos2(n * x5)];
  }
  project3.invert = function(x5, y5) {
    var fy = f - y5, r = sign2(n) * sqrt4(x5 * x5 + fy * fy), l = atan22(x5, abs2(fy)) * sign2(fy);
    if (fy * n < 0)
      l -= pi3 * sign2(x5) * sign2(fy);
    return [l / n, 2 * atan(pow4(f / r, 1 / n)) - halfPi2];
  };
  return project3;
}
function conicConformal_default() {
  return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
}

// node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi2) {
  return [lambda, phi2];
}
equirectangularRaw.invert = equirectangularRaw;
function equirectangular_default() {
  return projection(equirectangularRaw).scale(152.63);
}

// node_modules/d3-geo/src/projection/conicEquidistant.js
function conicEquidistantRaw(y07, y13) {
  var cy0 = cos2(y07), n = y07 === y13 ? sin2(y07) : (cy0 - cos2(y13)) / (y13 - y07), g = cy0 / n + y07;
  if (abs2(n) < epsilon4)
    return equirectangularRaw;
  function project3(x5, y5) {
    var gy = g - y5, nx = n * x5;
    return [gy * sin2(nx), g - gy * cos2(nx)];
  }
  project3.invert = function(x5, y5) {
    var gy = g - y5, l = atan22(x5, abs2(gy)) * sign2(gy);
    if (gy * n < 0)
      l -= pi3 * sign2(x5) * sign2(gy);
    return [l / n, g - sign2(n) * sqrt4(x5 * x5 + gy * gy)];
  };
  return project3;
}
function conicEquidistant_default() {
  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}

// node_modules/d3-geo/src/projection/equalEarth.js
var A1 = 1.340264;
var A2 = -0.081106;
var A3 = 893e-6;
var A4 = 3796e-6;
var M = sqrt4(3) / 2;
var iterations = 12;
function equalEarthRaw(lambda, phi2) {
  var l = asin2(M * sin2(phi2)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos2(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}
equalEarthRaw.invert = function(x5, y5) {
  var l = y5, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y5;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs2(delta) < epsilon23)
      break;
  }
  return [
    M * x5 * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos2(l),
    asin2(sin2(l) / M)
  ];
};
function equalEarth_default() {
  return projection(equalEarthRaw).scale(177.158);
}

// node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x5, y5) {
  var cy = cos2(y5), k3 = cos2(x5) * cy;
  return [cy * sin2(x5) / k3, sin2(y5) / k3];
}
gnomonicRaw.invert = azimuthalInvert(atan);
function gnomonic_default() {
  return projection(gnomonicRaw).scale(144.049).clipAngle(60);
}

// node_modules/d3-geo/src/projection/identity.js
function identity_default5() {
  var k3 = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca3, sa2, x07 = null, y07, x13, y13, kx3 = 1, ky2 = 1, transform4 = transformer4({
    point: function(x5, y5) {
      var p = projection3([x5, y5]);
      this.stream.point(p[0], p[1]);
    }
  }), postclip = identity_default4, cache2, cacheStream;
  function reset4() {
    kx3 = k3 * sx;
    ky2 = k3 * sy;
    cache2 = cacheStream = null;
    return projection3;
  }
  function projection3(p) {
    var x5 = p[0] * kx3, y5 = p[1] * ky2;
    if (alpha) {
      var t4 = y5 * ca3 - x5 * sa2;
      x5 = x5 * ca3 + y5 * sa2;
      y5 = t4;
    }
    return [x5 + tx, y5 + ty];
  }
  projection3.invert = function(p) {
    var x5 = p[0] - tx, y5 = p[1] - ty;
    if (alpha) {
      var t4 = y5 * ca3 + x5 * sa2;
      x5 = x5 * ca3 - y5 * sa2;
      y5 = t4;
    }
    return [x5 / kx3, y5 / ky2];
  };
  projection3.stream = function(stream2) {
    return cache2 && cacheStream === stream2 ? cache2 : cache2 = transform4(postclip(cacheStream = stream2));
  };
  projection3.postclip = function(_) {
    return arguments.length ? (postclip = _, x07 = y07 = x13 = y13 = null, reset4()) : postclip;
  };
  projection3.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x07 = y07 = x13 = y13 = null, identity_default4) : clipRectangle(x07 = +_[0][0], y07 = +_[0][1], x13 = +_[1][0], y13 = +_[1][1]), reset4()) : x07 == null ? null : [[x07, y07], [x13, y13]];
  };
  projection3.scale = function(_) {
    return arguments.length ? (k3 = +_, reset4()) : k3;
  };
  projection3.translate = function(_) {
    return arguments.length ? (tx = +_[0], ty = +_[1], reset4()) : [tx, ty];
  };
  projection3.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians2, sa2 = sin2(alpha), ca3 = cos2(alpha), reset4()) : alpha * degrees3;
  };
  projection3.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, reset4()) : sx < 0;
  };
  projection3.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, reset4()) : sy < 0;
  };
  projection3.fitExtent = function(extent4, object2) {
    return fitExtent(projection3, extent4, object2);
  };
  projection3.fitSize = function(size, object2) {
    return fitSize(projection3, size, object2);
  };
  projection3.fitWidth = function(width2, object2) {
    return fitWidth(projection3, width2, object2);
  };
  projection3.fitHeight = function(height2, object2) {
    return fitHeight(projection3, height2, object2);
  };
  return projection3;
}

// node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw(lambda, phi2) {
  var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
  return [
    lambda * (0.8707 - 0.131979 * phi22 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi22 - 1529e-6 * phi4))),
    phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4)))
  ];
}
naturalEarth1Raw.invert = function(x5, y5) {
  var phi2 = y5, i = 25, delta;
  do {
    var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
    phi2 -= delta = (phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4))) - y5) / (1.007226 + phi22 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi22 - 5916e-6 * 11 * phi4)));
  } while (abs2(delta) > epsilon4 && --i > 0);
  return [
    x5 / (0.8707 + (phi22 = phi2 * phi2) * (-0.131979 + phi22 * (-0.013791 + phi22 * phi22 * phi22 * (3971e-6 - 1529e-6 * phi22)))),
    phi2
  ];
};
function naturalEarth1_default() {
  return projection(naturalEarth1Raw).scale(175.295);
}

// node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x5, y5) {
  return [cos2(y5) * sin2(x5), sin2(y5)];
}
orthographicRaw.invert = azimuthalInvert(asin2);
function orthographic_default() {
  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon4);
}

// node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x5, y5) {
  var cy = cos2(y5), k3 = 1 + cos2(x5) * cy;
  return [cy * sin2(x5) / k3, sin2(y5) / k3];
}
stereographicRaw.invert = azimuthalInvert(function(z) {
  return 2 * atan(z);
});
function stereographic_default() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}

// node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi2) {
  return [log4(tan((halfPi2 + phi2) / 2)), -lambda];
}
transverseMercatorRaw.invert = function(x5, y5) {
  return [-y5, 2 * atan(exp3(x5)) - halfPi2];
};
function transverseMercator_default() {
  var m3 = mercatorProjection(transverseMercatorRaw), center = m3.center, rotate2 = m3.rotate;
  m3.center = function(_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };
  m3.rotate = function(_) {
    return arguments.length ? rotate2([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate2(), [_[0], _[1], _[2] - 90]);
  };
  return rotate2([0, 0, 90]).scale(159.155);
}

// node_modules/d3-geo-projection/src/math.js
var abs3 = Math.abs;
var atan3 = Math.atan;
var atan23 = Math.atan2;
var cos3 = Math.cos;
var exp4 = Math.exp;
var floor2 = Math.floor;
var log5 = Math.log;
var max4 = Math.max;
var min4 = Math.min;
var pow5 = Math.pow;
var sign3 = Math.sign || function(x5) {
  return x5 > 0 ? 1 : x5 < 0 ? -1 : 0;
};
var sin3 = Math.sin;
var tan2 = Math.tan;
var epsilon5 = 1e-6;
var epsilon24 = 1e-12;
var pi4 = Math.PI;
var halfPi3 = pi4 / 2;
var quarterPi2 = pi4 / 4;
var sqrt1_2 = Math.SQRT1_2;
var sqrt22 = sqrt5(2);
var sqrtPi = sqrt5(pi4);
var tau4 = pi4 * 2;
var degrees4 = 180 / pi4;
var radians3 = pi4 / 180;
function sinci(x5) {
  return x5 ? x5 / Math.sin(x5) : 1;
}
function asin3(x5) {
  return x5 > 1 ? halfPi3 : x5 < -1 ? -halfPi3 : Math.asin(x5);
}
function acos3(x5) {
  return x5 > 1 ? 0 : x5 < -1 ? pi4 : Math.acos(x5);
}
function sqrt5(x5) {
  return x5 > 0 ? Math.sqrt(x5) : 0;
}
function tanh2(x5) {
  x5 = exp4(2 * x5);
  return (x5 - 1) / (x5 + 1);
}
function sinh2(x5) {
  return (exp4(x5) - exp4(-x5)) / 2;
}
function cosh2(x5) {
  return (exp4(x5) + exp4(-x5)) / 2;
}
function arsinh(x5) {
  return log5(x5 + sqrt5(x5 * x5 + 1));
}
function arcosh(x5) {
  return log5(x5 + sqrt5(x5 * x5 - 1));
}

// node_modules/d3-geo-projection/src/aitoff.js
function aitoffRaw(x5, y5) {
  var cosy = cos3(y5), sincia = sinci(acos3(cosy * cos3(x5 /= 2)));
  return [2 * cosy * sin3(x5) * sincia, sin3(y5) * sincia];
}
aitoffRaw.invert = function(x5, y5) {
  if (x5 * x5 + 4 * y5 * y5 > pi4 * pi4 + epsilon5)
    return;
  var x13 = x5, y13 = y5, i = 25;
  do {
    var sinx = sin3(x13), sinx_2 = sin3(x13 / 2), cosx_2 = cos3(x13 / 2), siny = sin3(y13), cosy = cos3(y13), sin_2y = sin3(2 * y13), sin2y = siny * siny, cos2y = cosy * cosy, sin2x_2 = sinx_2 * sinx_2, c3 = 1 - cos2y * cosx_2 * cosx_2, e3 = c3 ? acos3(cosy * cosx_2) * sqrt5(f = 1 / c3) : f = 0, f, fx = 2 * e3 * cosy * sinx_2 - x5, fy = e3 * siny - y5, dxdx = f * (cos2y * sin2x_2 + e3 * cosy * cosx_2 * sin2y), dxdy = f * (0.5 * sinx * sin_2y - e3 * 2 * siny * sinx_2), dydx = f * 0.25 * (sin_2y * sinx_2 - e3 * siny * cos2y * sinx), dydy = f * (sin2y * cosx_2 + e3 * sin2x_2 * cosy), z = dxdy * dydx - dydy * dxdx;
    if (!z)
      break;
    var dx = (fy * dxdy - fx * dydy) / z, dy = (fx * dydx - fy * dxdx) / z;
    x13 -= dx, y13 -= dy;
  } while ((abs3(dx) > epsilon5 || abs3(dy) > epsilon5) && --i > 0);
  return [x13, y13];
};

// node_modules/d3-geo-projection/src/august.js
function augustRaw(lambda, phi2) {
  var tanPhi = tan2(phi2 / 2), k3 = sqrt5(1 - tanPhi * tanPhi), c3 = 1 + k3 * cos3(lambda /= 2), x5 = sin3(lambda) * k3 / c3, y5 = tanPhi / c3, x22 = x5 * x5, y22 = y5 * y5;
  return [
    4 / 3 * x5 * (3 + x22 - 3 * y22),
    4 / 3 * y5 * (3 + 3 * x22 - y22)
  ];
}
augustRaw.invert = function(x5, y5) {
  x5 *= 3 / 8, y5 *= 3 / 8;
  if (!x5 && abs3(y5) > 1)
    return null;
  var x22 = x5 * x5, y22 = y5 * y5, s2 = 1 + x22 + y22, sin3Eta = sqrt5((s2 - sqrt5(s2 * s2 - 4 * y5 * y5)) / 2), eta = asin3(sin3Eta) / 3, xi = sin3Eta ? arcosh(abs3(y5 / sin3Eta)) / 3 : arsinh(abs3(x5)) / 3, cosEta = cos3(eta), coshXi = cosh2(xi), d = coshXi * coshXi - cosEta * cosEta;
  return [
    sign3(x5) * 2 * atan23(sinh2(xi) * cosEta, 0.25 - d),
    sign3(y5) * 2 * atan23(coshXi * sin3(eta), 0.25 + d)
  ];
};

// node_modules/d3-geo-projection/src/baker.js
var sqrt8 = sqrt5(8);
var phi02 = log5(1 + sqrt22);
function bakerRaw(lambda, phi2) {
  var phi03 = abs3(phi2);
  return phi03 < quarterPi2 ? [lambda, log5(tan2(quarterPi2 + phi2 / 2))] : [lambda * cos3(phi03) * (2 * sqrt22 - 1 / sin3(phi03)), sign3(phi2) * (2 * sqrt22 * (phi03 - quarterPi2) - log5(tan2(phi03 / 2)))];
}
bakerRaw.invert = function(x5, y5) {
  if ((y07 = abs3(y5)) < phi02)
    return [x5, 2 * atan3(exp4(y5)) - halfPi3];
  var phi2 = quarterPi2, i = 25, delta, y07;
  do {
    var cosPhi_2 = cos3(phi2 / 2), tanPhi_2 = tan2(phi2 / 2);
    phi2 -= delta = (sqrt8 * (phi2 - quarterPi2) - log5(tanPhi_2) - y07) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));
  } while (abs3(delta) > epsilon24 && --i > 0);
  return [x5 / (cos3(phi2) * (sqrt8 - 1 / sin3(phi2))), sign3(y5) * phi2];
};

// node_modules/d3-geo-projection/src/hammer.js
function hammerQuarticAuthalicRaw(lambda, phi2) {
  return [
    lambda * cos3(phi2) / cos3(phi2 /= 2),
    2 * sin3(phi2)
  ];
}
hammerQuarticAuthalicRaw.invert = function(x5, y5) {
  var phi2 = 2 * asin3(y5 / 2);
  return [
    x5 * cos3(phi2 / 2) / cos3(phi2),
    phi2
  ];
};

// node_modules/d3-geo-projection/src/newton.js
function solve(f, y5, x5) {
  var steps = 100, delta, f0, f1;
  x5 = x5 === void 0 ? 0 : +x5;
  y5 = +y5;
  do {
    f0 = f(x5);
    f1 = f(x5 + epsilon5);
    if (f0 === f1)
      f1 = f0 + epsilon5;
    x5 -= delta = -1 * epsilon5 * (f0 - y5) / (f0 - f1);
  } while (steps-- > 0 && abs3(delta) > epsilon5);
  return steps < 0 ? NaN : x5;
}

// node_modules/d3-geo-projection/src/mollweide.js
function mollweideBromleyTheta(cp, phi2) {
  var cpsinPhi = cp * sin3(phi2), i = 30, delta;
  do
    phi2 -= delta = (phi2 + sin3(phi2) - cpsinPhi) / (1 + cos3(phi2));
  while (abs3(delta) > epsilon5 && --i > 0);
  return phi2 / 2;
}
function mollweideBromleyRaw(cx, cy, cp) {
  function forward(lambda, phi2) {
    return [cx * lambda * cos3(phi2 = mollweideBromleyTheta(cp, phi2)), cy * sin3(phi2)];
  }
  forward.invert = function(x5, y5) {
    return y5 = asin3(y5 / cy), [x5 / (cx * cos3(y5)), asin3((2 * y5 + sin3(2 * y5)) / cp)];
  };
  return forward;
}
var mollweideRaw = mollweideBromleyRaw(sqrt22 / halfPi3, sqrt22, pi4);
function mollweide_default() {
  return projection(mollweideRaw).scale(169.529);
}

// node_modules/d3-geo-projection/src/boggs.js
var k2 = 2.00276;
var w2 = 1.11072;
function boggsRaw(lambda, phi2) {
  var theta = mollweideBromleyTheta(pi4, phi2);
  return [k2 * lambda / (1 / cos3(phi2) + w2 / cos3(theta)), (phi2 + sqrt22 * sin3(theta)) / k2];
}
boggsRaw.invert = function(x5, y5) {
  var ky2 = k2 * y5, theta = y5 < 0 ? -quarterPi2 : quarterPi2, i = 25, delta, phi2;
  do {
    phi2 = ky2 - sqrt22 * sin3(theta);
    theta -= delta = (sin3(2 * theta) + 2 * theta - pi4 * sin3(phi2)) / (2 * cos3(2 * theta) + 2 + pi4 * cos3(phi2) * sqrt22 * cos3(theta));
  } while (abs3(delta) > epsilon5 && --i > 0);
  phi2 = ky2 - sqrt22 * sin3(theta);
  return [x5 * (1 / cos3(phi2) + w2 / cos3(theta)) / k2, phi2];
};

// node_modules/d3-geo-projection/src/sinusoidal.js
function sinusoidalRaw(lambda, phi2) {
  return [lambda * cos3(phi2), phi2];
}
sinusoidalRaw.invert = function(x5, y5) {
  return [x5 / cos3(y5), y5];
};

// node_modules/d3-geo-projection/src/bromley.js
var bromleyRaw = mollweideBromleyRaw(1, 4 / pi4, pi4);

// node_modules/d3-geo-projection/src/collignon.js
function collignonRaw(lambda, phi2) {
  var alpha = sqrt5(1 - sin3(phi2));
  return [2 / sqrtPi * lambda * alpha, sqrtPi * (1 - alpha)];
}
collignonRaw.invert = function(x5, y5) {
  var lambda = (lambda = y5 / sqrtPi - 1) * lambda;
  return [lambda > 0 ? x5 * sqrt5(pi4 / lambda) / 2 : 0, asin3(1 - lambda)];
};

// node_modules/d3-geo-projection/src/craster.js
var sqrt34 = sqrt5(3);
function crasterRaw(lambda, phi2) {
  return [sqrt34 * lambda * (2 * cos3(2 * phi2 / 3) - 1) / sqrtPi, sqrt34 * sqrtPi * sin3(phi2 / 3)];
}
crasterRaw.invert = function(x5, y5) {
  var phi2 = 3 * asin3(y5 / (sqrt34 * sqrtPi));
  return [sqrtPi * x5 / (sqrt34 * (2 * cos3(2 * phi2 / 3) - 1)), phi2];
};

// node_modules/d3-geo-projection/src/cylindricalEqualArea.js
function cylindricalEqualAreaRaw2(phi03) {
  var cosPhi02 = cos3(phi03);
  function forward(lambda, phi2) {
    return [lambda * cosPhi02, sin3(phi2) / cosPhi02];
  }
  forward.invert = function(x5, y5) {
    return [x5 / cosPhi02, asin3(y5 * cosPhi02)];
  };
  return forward;
}

// node_modules/d3-geo-projection/src/eckert1.js
function eckert1Raw(lambda, phi2) {
  var alpha = sqrt5(8 / (3 * pi4));
  return [
    alpha * lambda * (1 - abs3(phi2) / pi4),
    alpha * phi2
  ];
}
eckert1Raw.invert = function(x5, y5) {
  var alpha = sqrt5(8 / (3 * pi4)), phi2 = y5 / alpha;
  return [
    x5 / (alpha * (1 - abs3(phi2) / pi4)),
    phi2
  ];
};

// node_modules/d3-geo-projection/src/eckert2.js
function eckert2Raw(lambda, phi2) {
  var alpha = sqrt5(4 - 3 * sin3(abs3(phi2)));
  return [
    2 / sqrt5(6 * pi4) * lambda * alpha,
    sign3(phi2) * sqrt5(2 * pi4 / 3) * (2 - alpha)
  ];
}
eckert2Raw.invert = function(x5, y5) {
  var alpha = 2 - abs3(y5) / sqrt5(2 * pi4 / 3);
  return [
    x5 * sqrt5(6 * pi4) / (2 * alpha),
    sign3(y5) * asin3((4 - alpha * alpha) / 3)
  ];
};

// node_modules/d3-geo-projection/src/eckert3.js
function eckert3Raw(lambda, phi2) {
  var k3 = sqrt5(pi4 * (4 + pi4));
  return [
    2 / k3 * lambda * (1 + sqrt5(1 - 4 * phi2 * phi2 / (pi4 * pi4))),
    4 / k3 * phi2
  ];
}
eckert3Raw.invert = function(x5, y5) {
  var k3 = sqrt5(pi4 * (4 + pi4)) / 2;
  return [
    x5 * k3 / (1 + sqrt5(1 - y5 * y5 * (4 + pi4) / (4 * pi4))),
    y5 * k3 / 2
  ];
};

// node_modules/d3-geo-projection/src/eckert4.js
function eckert4Raw(lambda, phi2) {
  var k3 = (2 + halfPi3) * sin3(phi2);
  phi2 /= 2;
  for (var i = 0, delta = Infinity; i < 10 && abs3(delta) > epsilon5; i++) {
    var cosPhi = cos3(phi2);
    phi2 -= delta = (phi2 + sin3(phi2) * (cosPhi + 2) - k3) / (2 * cosPhi * (1 + cosPhi));
  }
  return [
    2 / sqrt5(pi4 * (4 + pi4)) * lambda * (1 + cos3(phi2)),
    2 * sqrt5(pi4 / (4 + pi4)) * sin3(phi2)
  ];
}
eckert4Raw.invert = function(x5, y5) {
  var A6 = y5 * sqrt5((4 + pi4) / pi4) / 2, k3 = asin3(A6), c3 = cos3(k3);
  return [
    x5 / (2 / sqrt5(pi4 * (4 + pi4)) * (1 + c3)),
    asin3((k3 + A6 * (c3 + 2)) / (2 + halfPi3))
  ];
};

// node_modules/d3-geo-projection/src/eckert5.js
function eckert5Raw(lambda, phi2) {
  return [
    lambda * (1 + cos3(phi2)) / sqrt5(2 + pi4),
    2 * phi2 / sqrt5(2 + pi4)
  ];
}
eckert5Raw.invert = function(x5, y5) {
  var k3 = sqrt5(2 + pi4), phi2 = y5 * k3 / 2;
  return [
    k3 * x5 / (1 + cos3(phi2)),
    phi2
  ];
};

// node_modules/d3-geo-projection/src/eckert6.js
function eckert6Raw(lambda, phi2) {
  var k3 = (1 + halfPi3) * sin3(phi2);
  for (var i = 0, delta = Infinity; i < 10 && abs3(delta) > epsilon5; i++) {
    phi2 -= delta = (phi2 + sin3(phi2) - k3) / (1 + cos3(phi2));
  }
  k3 = sqrt5(2 + pi4);
  return [
    lambda * (1 + cos3(phi2)) / k3,
    2 * phi2 / k3
  ];
}
eckert6Raw.invert = function(x5, y5) {
  var j = 1 + halfPi3, k3 = sqrt5(j / 2);
  return [
    x5 * 2 * k3 / (1 + cos3(y5 *= k3)),
    asin3((y5 + sin3(y5)) / j)
  ];
};

// node_modules/d3-geo-projection/src/eisenlohr.js
var eisenlohrK = 3 + 2 * sqrt22;
function eisenlohrRaw(lambda, phi2) {
  var s0 = sin3(lambda /= 2), c0 = cos3(lambda), k3 = sqrt5(cos3(phi2)), c1 = cos3(phi2 /= 2), t4 = sin3(phi2) / (c1 + sqrt22 * c0 * k3), c3 = sqrt5(2 / (1 + t4 * t4)), v2 = sqrt5((sqrt22 * c1 + (c0 + s0) * k3) / (sqrt22 * c1 + (c0 - s0) * k3));
  return [
    eisenlohrK * (c3 * (v2 - 1 / v2) - 2 * log5(v2)),
    eisenlohrK * (c3 * t4 * (v2 + 1 / v2) - 2 * atan3(t4))
  ];
}
eisenlohrRaw.invert = function(x5, y5) {
  if (!(p = augustRaw.invert(x5 / 1.2, y5 * 1.065)))
    return null;
  var lambda = p[0], phi2 = p[1], i = 20, p;
  x5 /= eisenlohrK, y5 /= eisenlohrK;
  do {
    var _0 = lambda / 2, _1 = phi2 / 2, s0 = sin3(_0), c0 = cos3(_0), s1 = sin3(_1), c1 = cos3(_1), cos1 = cos3(phi2), k3 = sqrt5(cos1), t4 = s1 / (c1 + sqrt22 * c0 * k3), t22 = t4 * t4, c3 = sqrt5(2 / (1 + t22)), v0 = sqrt22 * c1 + (c0 + s0) * k3, v1 = sqrt22 * c1 + (c0 - s0) * k3, v2 = v0 / v1, v3 = sqrt5(v2), vm1v = v3 - 1 / v3, vp1v = v3 + 1 / v3, fx = c3 * vm1v - 2 * log5(v3) - x5, fy = c3 * t4 * vp1v - 2 * atan3(t4) - y5, deltatDeltaLambda = s1 && sqrt1_2 * k3 * s0 * t22 / s1, deltatDeltaPhi = (sqrt22 * c0 * c1 + k3) / (2 * (c1 + sqrt22 * c0 * k3) * (c1 + sqrt22 * c0 * k3) * k3), deltacDeltat = -0.5 * t4 * c3 * c3 * c3, deltacDeltaLambda = deltacDeltat * deltatDeltaLambda, deltacDeltaPhi = deltacDeltat * deltatDeltaPhi, A6 = (A6 = 2 * c1 + sqrt22 * k3 * (c0 - s0)) * A6 * v3, deltavDeltaLambda = (sqrt22 * c0 * c1 * k3 + cos1) / A6, deltavDeltaPhi = -(sqrt22 * s0 * s1) / (k3 * A6), deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v3 + c3 * (deltavDeltaLambda + deltavDeltaLambda / v2), deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v3 + c3 * (deltavDeltaPhi + deltavDeltaPhi / v2), deltayDeltaLambda = t4 * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t22) + c3 * vp1v * deltatDeltaLambda + c3 * t4 * (deltavDeltaLambda - deltavDeltaLambda / v2), deltayDeltaPhi = t4 * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t22) + c3 * vp1v * deltatDeltaPhi + c3 * t4 * (deltavDeltaPhi - deltavDeltaPhi / v2), denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
    if (!denominator)
      break;
    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator, deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    lambda -= deltaLambda;
    phi2 = max4(-halfPi3, min4(halfPi3, phi2 - deltaPhi));
  } while ((abs3(deltaLambda) > epsilon5 || abs3(deltaPhi) > epsilon5) && --i > 0);
  return abs3(abs3(phi2) - halfPi3) < epsilon5 ? [0, phi2] : i && [lambda, phi2];
};

// node_modules/d3-geo-projection/src/fahey.js
var faheyK = cos3(35 * radians3);
function faheyRaw(lambda, phi2) {
  var t4 = tan2(phi2 / 2);
  return [lambda * faheyK * sqrt5(1 - t4 * t4), (1 + faheyK) * t4];
}
faheyRaw.invert = function(x5, y5) {
  var t4 = y5 / (1 + faheyK);
  return [x5 && x5 / (faheyK * sqrt5(1 - t4 * t4)), 2 * atan3(t4)];
};

// node_modules/d3-geo-projection/src/foucaut.js
function foucautRaw(lambda, phi2) {
  var k3 = phi2 / 2, cosk = cos3(k3);
  return [2 * lambda / sqrtPi * cos3(phi2) * cosk * cosk, sqrtPi * tan2(k3)];
}
foucautRaw.invert = function(x5, y5) {
  var k3 = atan3(y5 / sqrtPi), cosk = cos3(k3), phi2 = 2 * k3;
  return [x5 * sqrtPi / 2 / (cos3(phi2) * cosk * cosk), phi2];
};

// node_modules/d3-geo-projection/src/ginzburgPolyconic.js
function ginzburgPolyconic_default(a4, b2, c3, d, e3, f, g, h2) {
  if (arguments.length < 8)
    h2 = 0;
  function forward(lambda, phi2) {
    if (!phi2)
      return [a4 * lambda / pi4, 0];
    var phi22 = phi2 * phi2, xB = a4 + phi22 * (b2 + phi22 * (c3 + phi22 * d)), yB = phi2 * (e3 - 1 + phi22 * (f - h2 + phi22 * g)), m3 = (xB * xB + yB * yB) / (2 * yB), alpha = lambda * asin3(xB / m3) / pi4;
    return [m3 * sin3(alpha), phi2 * (1 + phi22 * h2) + m3 * (1 - cos3(alpha))];
  }
  forward.invert = function(x5, y5) {
    var lambda = pi4 * x5 / a4, phi2 = y5, deltaLambda, deltaPhi, i = 50;
    do {
      var phi22 = phi2 * phi2, xB = a4 + phi22 * (b2 + phi22 * (c3 + phi22 * d)), yB = phi2 * (e3 - 1 + phi22 * (f - h2 + phi22 * g)), p = xB * xB + yB * yB, q = 2 * yB, m3 = p / q, m22 = m3 * m3, dAlphadLambda = asin3(xB / m3) / pi4, alpha = lambda * dAlphadLambda, xB2 = xB * xB, dxBdPhi = (2 * b2 + phi22 * (4 * c3 + phi22 * 6 * d)) * phi2, dyBdPhi = e3 + phi22 * (3 * f + phi22 * 5 * g), dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)), dqdPhi = 2 * (dyBdPhi - 1), dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q), cosAlpha = cos3(alpha), sinAlpha = sin3(alpha), mcosAlpha = m3 * cosAlpha, msinAlpha = m3 * sinAlpha, dAlphadPhi = lambda / pi4 * (1 / sqrt5(1 - xB2 / m22)) * (dxBdPhi * m3 - xB * dmdPhi) / m22, fx = msinAlpha - x5, fy = phi2 * (1 + phi22 * h2) + m3 - mcosAlpha - y5, deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi, deltaxDeltaLambda = mcosAlpha * dAlphadLambda, deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi), deltayDeltaLambda = msinAlpha * dAlphadLambda, denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;
      if (!denominator)
        break;
      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;
      phi2 -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    } while ((abs3(deltaLambda) > epsilon5 || abs3(deltaPhi) > epsilon5) && --i > 0);
    return [lambda, phi2];
  };
  return forward;
}

// node_modules/d3-geo-projection/src/ginzburg4.js
var ginzburg4Raw = ginzburgPolyconic_default(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);

// node_modules/d3-geo-projection/src/ginzburg5.js
var ginzburg5Raw = ginzburgPolyconic_default(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435, 0.082742);

// node_modules/d3-geo-projection/src/ginzburg6.js
var ginzburg6Raw = ginzburgPolyconic_default(5 / 6 * pi4, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);

// node_modules/d3-geo-projection/src/ginzburg8.js
function ginzburg8Raw(lambda, phi2) {
  var lambda22 = lambda * lambda, phi22 = phi2 * phi2;
  return [
    lambda * (1 - 0.162388 * phi22) * (0.87 - 952426e-9 * lambda22 * lambda22),
    phi2 * (1 + phi22 / 12)
  ];
}
ginzburg8Raw.invert = function(x5, y5) {
  var lambda = x5, phi2 = y5, i = 50, delta;
  do {
    var phi22 = phi2 * phi2;
    phi2 -= delta = (phi2 * (1 + phi22 / 12) - y5) / (1 + phi22 / 4);
  } while (abs3(delta) > epsilon5 && --i > 0);
  i = 50;
  x5 /= 1 - 0.162388 * phi22;
  do {
    var lambda4 = (lambda4 = lambda * lambda) * lambda4;
    lambda -= delta = (lambda * (0.87 - 952426e-9 * lambda4) - x5) / (0.87 - 476213e-8 * lambda4);
  } while (abs3(delta) > epsilon5 && --i > 0);
  return [lambda, phi2];
};

// node_modules/d3-geo-projection/src/ginzburg9.js
var ginzburg9Raw = ginzburgPolyconic_default(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965, 0.031762);

// node_modules/d3-geo-projection/src/gringorten.js
function gringortenRaw(lambda, phi2) {
  var sLambda = sign3(lambda), sPhi = sign3(phi2), cosPhi = cos3(phi2), x5 = cos3(lambda) * cosPhi, y5 = sin3(lambda) * cosPhi, z = sin3(sPhi * phi2);
  lambda = abs3(atan23(y5, z));
  phi2 = asin3(x5);
  if (abs3(lambda - halfPi3) > epsilon5)
    lambda %= halfPi3;
  var point10 = gringortenHexadecant(lambda > pi4 / 4 ? halfPi3 - lambda : lambda, phi2);
  if (lambda > pi4 / 4)
    z = point10[0], point10[0] = -point10[1], point10[1] = -z;
  return point10[0] *= sLambda, point10[1] *= -sPhi, point10;
}
gringortenRaw.invert = function(x5, y5) {
  if (abs3(x5) > 1)
    x5 = sign3(x5) * 2 - x5;
  if (abs3(y5) > 1)
    y5 = sign3(y5) * 2 - y5;
  var sx = sign3(x5), sy = sign3(y5), x07 = -sx * x5, y07 = -sy * y5, t4 = y07 / x07 < 1, p = gringortenHexadecantInvert(t4 ? y07 : x07, t4 ? x07 : y07), lambda = p[0], phi2 = p[1], cosPhi = cos3(phi2);
  if (t4)
    lambda = -halfPi3 - lambda;
  return [sx * (atan23(sin3(lambda) * cosPhi, -sin3(phi2)) + pi4), sy * asin3(cos3(lambda) * cosPhi)];
};
function gringortenHexadecant(lambda, phi2) {
  if (phi2 === halfPi3)
    return [0, 0];
  var sinPhi = sin3(phi2), r = sinPhi * sinPhi, r2 = r * r, j = 1 + r2, k3 = 1 + 3 * r2, q = 1 - r2, z = asin3(1 / sqrt5(j)), v2 = q + r * j * z, p2 = (1 - sinPhi) / v2, p = sqrt5(p2), a22 = p2 * j, a4 = sqrt5(a22), h2 = p * q, x5, i;
  if (lambda === 0)
    return [0, -(h2 + r * a4)];
  var cosPhi = cos3(phi2), secPhi = 1 / cosPhi, drdPhi = 2 * sinPhi * cosPhi, dvdPhi = (-3 * r + z * k3) * drdPhi, dp2dPhi = (-v2 * cosPhi - (1 - sinPhi) * dvdPhi) / (v2 * v2), dpdPhi = 0.5 * dp2dPhi / p, dhdPhi = q * dpdPhi - 2 * r * p * drdPhi, dra2dPhi = r * j * dp2dPhi + p2 * k3 * drdPhi, mu = -secPhi * drdPhi, nu = -secPhi * dra2dPhi, zeta = -2 * secPhi * dhdPhi, lambda12 = 4 * lambda / pi4, delta;
  if (lambda > 0.222 * pi4 || phi2 < pi4 / 4 && lambda > 0.175 * pi4) {
    x5 = (h2 + r * sqrt5(a22 * (1 + r2) - h2 * h2)) / (1 + r2);
    if (lambda > pi4 / 4)
      return [x5, x5];
    var x13 = x5, x07 = 0.5 * x5;
    x5 = 0.5 * (x07 + x13), i = 50;
    do {
      var g = sqrt5(a22 - x5 * x5), f = x5 * (zeta + mu * g) + nu * asin3(x5 / a4) - lambda12;
      if (!f)
        break;
      if (f < 0)
        x07 = x5;
      else
        x13 = x5;
      x5 = 0.5 * (x07 + x13);
    } while (abs3(x13 - x07) > epsilon5 && --i > 0);
  } else {
    x5 = epsilon5, i = 25;
    do {
      var x22 = x5 * x5, g2 = sqrt5(a22 - x22), zetaMug = zeta + mu * g2, f2 = x5 * zetaMug + nu * asin3(x5 / a4) - lambda12, df = zetaMug + (nu - mu * x22) / g2;
      x5 -= delta = g2 ? f2 / df : 0;
    } while (abs3(delta) > epsilon5 && --i > 0);
  }
  return [x5, -h2 - r * sqrt5(a22 - x5 * x5)];
}
function gringortenHexadecantInvert(x5, y5) {
  var x07 = 0, x13 = 1, r = 0.5, i = 50;
  while (true) {
    var r2 = r * r, sinPhi = sqrt5(r), z = asin3(1 / sqrt5(1 + r2)), v2 = 1 - r2 + r * (1 + r2) * z, p2 = (1 - sinPhi) / v2, p = sqrt5(p2), a22 = p2 * (1 + r2), h2 = p * (1 - r2), g2 = a22 - x5 * x5, g = sqrt5(g2), y07 = y5 + h2 + r * g;
    if (abs3(x13 - x07) < epsilon24 || --i === 0 || y07 === 0)
      break;
    if (y07 > 0)
      x07 = r;
    else
      x13 = r;
    r = 0.5 * (x07 + x13);
  }
  if (!i)
    return null;
  var phi2 = asin3(sinPhi), cosPhi = cos3(phi2), secPhi = 1 / cosPhi, drdPhi = 2 * sinPhi * cosPhi, dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi, dp2dPhi = (-v2 * cosPhi - (1 - sinPhi) * dvdPhi) / (v2 * v2), dpdPhi = 0.5 * dp2dPhi / p, dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi, zeta = -2 * secPhi * dhdPhi, mu = -secPhi * drdPhi, nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);
  return [pi4 / 4 * (x5 * (zeta + mu * g) + nu * asin3(x5 / sqrt5(a22))), phi2];
}

// node_modules/d3-geo-projection/src/elliptic.js
function ellipticJi(u4, v2, m3) {
  var a4, b2, c3;
  if (!u4) {
    b2 = ellipticJ(v2, 1 - m3);
    return [
      [0, b2[0] / b2[1]],
      [1 / b2[1], 0],
      [b2[2] / b2[1], 0]
    ];
  }
  a4 = ellipticJ(u4, m3);
  if (!v2)
    return [[a4[0], 0], [a4[1], 0], [a4[2], 0]];
  b2 = ellipticJ(v2, 1 - m3);
  c3 = b2[1] * b2[1] + m3 * a4[0] * a4[0] * b2[0] * b2[0];
  return [
    [a4[0] * b2[2] / c3, a4[1] * a4[2] * b2[0] * b2[1] / c3],
    [a4[1] * b2[1] / c3, -a4[0] * a4[2] * b2[0] * b2[2] / c3],
    [a4[2] * b2[1] * b2[2] / c3, -m3 * a4[0] * a4[1] * b2[0] / c3]
  ];
}
function ellipticJ(u4, m3) {
  var ai, b2, phi2, t4, twon;
  if (m3 < epsilon5) {
    t4 = sin3(u4);
    b2 = cos3(u4);
    ai = m3 * (u4 - t4 * b2) / 4;
    return [
      t4 - ai * b2,
      b2 + ai * t4,
      1 - m3 * t4 * t4 / 2,
      u4 - ai
    ];
  }
  if (m3 >= 1 - epsilon5) {
    ai = (1 - m3) / 4;
    b2 = cosh2(u4);
    t4 = tanh2(u4);
    phi2 = 1 / b2;
    twon = b2 * sinh2(u4);
    return [
      t4 + ai * (twon - u4) / (b2 * b2),
      phi2 - ai * t4 * phi2 * (twon - u4),
      phi2 + ai * t4 * phi2 * (twon + u4),
      2 * atan3(exp4(u4)) - halfPi3 + ai * (twon - u4) / b2
    ];
  }
  var a4 = [1, 0, 0, 0, 0, 0, 0, 0, 0], c3 = [sqrt5(m3), 0, 0, 0, 0, 0, 0, 0, 0], i = 0;
  b2 = sqrt5(1 - m3);
  twon = 1;
  while (abs3(c3[i] / a4[i]) > epsilon5 && i < 8) {
    ai = a4[i++];
    c3[i] = (ai - b2) / 2;
    a4[i] = (ai + b2) / 2;
    b2 = sqrt5(ai * b2);
    twon *= 2;
  }
  phi2 = twon * a4[i] * u4;
  do {
    t4 = c3[i] * sin3(b2 = phi2) / a4[i];
    phi2 = (asin3(t4) + phi2) / 2;
  } while (--i);
  return [sin3(phi2), t4 = cos3(phi2), t4 / cos3(phi2 - b2), phi2];
}
function ellipticFi(phi2, psi, m3) {
  var r = abs3(phi2), i = abs3(psi), sinhPsi = sinh2(i);
  if (r) {
    var cscPhi = 1 / sin3(r), cotPhi2 = 1 / (tan2(r) * tan2(r)), b2 = -(cotPhi2 + m3 * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m3), c3 = (m3 - 1) * cotPhi2, cotLambda2 = (-b2 + sqrt5(b2 * b2 - 4 * c3)) / 2;
    return [
      ellipticF(atan3(1 / sqrt5(cotLambda2)), m3) * sign3(phi2),
      ellipticF(atan3(sqrt5((cotLambda2 / cotPhi2 - 1) / m3)), 1 - m3) * sign3(psi)
    ];
  }
  return [
    0,
    ellipticF(atan3(sinhPsi), 1 - m3) * sign3(psi)
  ];
}
function ellipticF(phi2, m3) {
  if (!m3)
    return phi2;
  if (m3 === 1)
    return log5(tan2(phi2 / 2 + quarterPi2));
  var a4 = 1, b2 = sqrt5(1 - m3), c3 = sqrt5(m3);
  for (var i = 0; abs3(c3) > epsilon5; i++) {
    if (phi2 % pi4) {
      var dPhi = atan3(b2 * tan2(phi2) / a4);
      if (dPhi < 0)
        dPhi += pi4;
      phi2 += dPhi + ~~(phi2 / pi4) * pi4;
    } else
      phi2 += phi2;
    c3 = (a4 + b2) / 2;
    b2 = sqrt5(a4 * b2);
    c3 = ((a4 = c3) - b2) / 2;
  }
  return phi2 / (pow5(2, i) * a4);
}

// node_modules/d3-geo-projection/src/guyou.js
function guyouRaw(lambda, phi2) {
  var k_ = (sqrt22 - 1) / (sqrt22 + 1), k3 = sqrt5(1 - k_ * k_), K4 = ellipticF(halfPi3, k3 * k3), f = -1, psi = log5(tan2(pi4 / 4 + abs3(phi2) / 2)), r = exp4(f * psi) / sqrt5(k_), at = guyouComplexAtan(r * cos3(f * lambda), r * sin3(f * lambda)), t4 = ellipticFi(at[0], at[1], k3 * k3);
  return [-t4[1], (phi2 >= 0 ? 1 : -1) * (0.5 * K4 - t4[0])];
}
function guyouComplexAtan(x5, y5) {
  var x22 = x5 * x5, y_1 = y5 + 1, t4 = 1 - x22 - y5 * y5;
  return [
    0.5 * ((x5 >= 0 ? halfPi3 : -halfPi3) - atan23(t4, 2 * x5)),
    -0.25 * log5(t4 * t4 + 4 * x22) + 0.5 * log5(y_1 * y_1 + x22)
  ];
}
function guyouComplexDivide(a4, b2) {
  var denominator = b2[0] * b2[0] + b2[1] * b2[1];
  return [
    (a4[0] * b2[0] + a4[1] * b2[1]) / denominator,
    (a4[1] * b2[0] - a4[0] * b2[1]) / denominator
  ];
}
guyouRaw.invert = function(x5, y5) {
  var k_ = (sqrt22 - 1) / (sqrt22 + 1), k3 = sqrt5(1 - k_ * k_), K4 = ellipticF(halfPi3, k3 * k3), f = -1, j = ellipticJi(0.5 * K4 - y5, -x5, k3 * k3), tn = guyouComplexDivide(j[0], j[1]), lambda = atan23(tn[1], tn[0]) / f;
  return [
    lambda,
    2 * atan3(exp4(0.5 / f * log5(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi3
  ];
};

// node_modules/d3-geo-projection/src/healpix.js
var K2 = 3;
var healpixParallel = asin3(1 - 1 / K2) * degrees4;
var healpixLambert = cylindricalEqualAreaRaw2(0);

// node_modules/d3-geo-projection/src/sinuMollweide.js
var sinuMollweidePhi = 0.7109889596207567;
var sinuMollweideY = 0.0528035274542;
function sinuMollweideRaw(lambda, phi2) {
  return phi2 > -sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi2), lambda[1] += sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi2);
}
sinuMollweideRaw.invert = function(x5, y5) {
  return y5 > -sinuMollweidePhi ? mollweideRaw.invert(x5, y5 - sinuMollweideY) : sinusoidalRaw.invert(x5, y5);
};

// node_modules/d3-geo-projection/src/homolosine.js
function homolosineRaw(lambda, phi2) {
  return abs3(phi2) > sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi2), lambda[1] -= phi2 > 0 ? sinuMollweideY : -sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi2);
}
homolosineRaw.invert = function(x5, y5) {
  return abs3(y5) > sinuMollweidePhi ? mollweideRaw.invert(x5, y5 + (y5 > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidalRaw.invert(x5, y5);
};

// node_modules/d3-geo-projection/src/kavrayskiy7.js
function kavrayskiy7Raw(lambda, phi2) {
  return [3 / tau4 * lambda * sqrt5(pi4 * pi4 / 3 - phi2 * phi2), phi2];
}
kavrayskiy7Raw.invert = function(x5, y5) {
  return [tau4 / 3 * x5 / sqrt5(pi4 * pi4 / 3 - y5 * y5), y5];
};

// node_modules/d3-geo-projection/src/larrivee.js
var pi_sqrt2 = pi4 / sqrt22;
function larriveeRaw(lambda, phi2) {
  return [
    lambda * (1 + sqrt5(cos3(phi2))) / 2,
    phi2 / (cos3(phi2 / 2) * cos3(lambda / 6))
  ];
}
larriveeRaw.invert = function(x5, y5) {
  var x07 = abs3(x5), y07 = abs3(y5), lambda = epsilon5, phi2 = halfPi3;
  if (y07 < pi_sqrt2)
    phi2 *= y07 / pi_sqrt2;
  else
    lambda += 6 * acos3(pi_sqrt2 / y07);
  for (var i = 0; i < 25; i++) {
    var sinPhi = sin3(phi2), sqrtcosPhi = sqrt5(cos3(phi2)), sinPhi_2 = sin3(phi2 / 2), cosPhi_2 = cos3(phi2 / 2), sinLambda_6 = sin3(lambda / 6), cosLambda_6 = cos3(lambda / 6), f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x07, f1 = phi2 / (cosPhi_2 * cosLambda_6) - y07, df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0, df0dLambda = 0.5 * (1 + sqrtcosPhi), df1dPhi = (1 + 0.5 * phi2 * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6), df1dLambda = phi2 / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6), denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda, dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom, dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;
    phi2 -= dPhi;
    lambda -= dLambda;
    if (abs3(dPhi) < epsilon5 && abs3(dLambda) < epsilon5)
      break;
  }
  return [x5 < 0 ? -lambda : lambda, y5 < 0 ? -phi2 : phi2];
};

// node_modules/d3-geo-projection/src/laskowski.js
function laskowskiRaw(lambda, phi2) {
  var lambda22 = lambda * lambda, phi22 = phi2 * phi2;
  return [
    lambda * (0.975534 + phi22 * (-0.119161 + lambda22 * -0.0143059 + phi22 * -0.0547009)),
    phi2 * (1.00384 + lambda22 * (0.0802894 + phi22 * -0.02855 + lambda22 * 199025e-9) + phi22 * (0.0998909 + phi22 * -0.0491032))
  ];
}
laskowskiRaw.invert = function(x5, y5) {
  var lambda = sign3(x5) * pi4, phi2 = y5 / 2, i = 50;
  do {
    var lambda22 = lambda * lambda, phi22 = phi2 * phi2, lambdaPhi = lambda * phi2, fx = lambda * (0.975534 + phi22 * (-0.119161 + lambda22 * -0.0143059 + phi22 * -0.0547009)) - x5, fy = phi2 * (1.00384 + lambda22 * (0.0802894 + phi22 * -0.02855 + lambda22 * 199025e-9) + phi22 * (0.0998909 + phi22 * -0.0491032)) - y5, deltaxDeltaLambda = 0.975534 - phi22 * (0.119161 + 3 * lambda22 * 0.0143059 + phi22 * 0.0547009), deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi22 + 2 * 0.0143059 * lambda22), deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 199025e-9 * lambda22 + 2 * -0.02855 * phi22), deltayDeltaPhi = 1.00384 + lambda22 * (0.0802894 + 199025e-9 * lambda22) + phi22 * (3 * (0.0998909 - 0.02855 * lambda22) - 5 * 0.0491032 * phi22), denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda, deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator, deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;
    lambda -= deltaLambda, phi2 -= deltaPhi;
  } while ((abs3(deltaLambda) > epsilon5 || abs3(deltaPhi) > epsilon5) && --i > 0);
  return i && [lambda, phi2];
};

// node_modules/d3-geo-projection/src/littrow.js
function littrowRaw(lambda, phi2) {
  return [
    sin3(lambda) / cos3(phi2),
    tan2(phi2) * cos3(lambda)
  ];
}
littrowRaw.invert = function(x5, y5) {
  var x22 = x5 * x5, y22 = y5 * y5, y2_1 = y22 + 1, x2_y2_1 = x22 + y2_1, cosPhi = x5 ? sqrt1_2 * sqrt5((x2_y2_1 - sqrt5(x2_y2_1 * x2_y2_1 - 4 * x22)) / x22) : 1 / sqrt5(y2_1);
  return [
    asin3(x5 * cosPhi),
    sign3(y5) * acos3(cosPhi)
  ];
};

// node_modules/d3-geo-projection/src/miller.js
function millerRaw(lambda, phi2) {
  return [lambda, 1.25 * log5(tan2(quarterPi2 + 0.4 * phi2))];
}
millerRaw.invert = function(x5, y5) {
  return [x5, 2.5 * atan3(exp4(0.8 * y5)) - 0.625 * pi4];
};

// node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js
var sqrt6 = sqrt5(6);
var sqrt7 = sqrt5(7);
function mtFlatPolarParabolicRaw(lambda, phi2) {
  var theta = asin3(7 * sin3(phi2) / (3 * sqrt6));
  return [
    sqrt6 * lambda * (2 * cos3(2 * theta / 3) - 1) / sqrt7,
    9 * sin3(theta / 3) / sqrt7
  ];
}
mtFlatPolarParabolicRaw.invert = function(x5, y5) {
  var theta = 3 * asin3(y5 * sqrt7 / 9);
  return [
    x5 * sqrt7 / (sqrt6 * (2 * cos3(2 * theta / 3) - 1)),
    asin3(sin3(theta) * 3 * sqrt6 / 7)
  ];
};

// node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js
function mtFlatPolarQuarticRaw(lambda, phi2) {
  var k3 = (1 + sqrt1_2) * sin3(phi2), theta = phi2;
  for (var i = 0, delta; i < 25; i++) {
    theta -= delta = (sin3(theta / 2) + sin3(theta) - k3) / (0.5 * cos3(theta / 2) + cos3(theta));
    if (abs3(delta) < epsilon5)
      break;
  }
  return [
    lambda * (1 + 2 * cos3(theta) / cos3(theta / 2)) / (3 * sqrt22),
    2 * sqrt5(3) * sin3(theta / 2) / sqrt5(2 + sqrt22)
  ];
}
mtFlatPolarQuarticRaw.invert = function(x5, y5) {
  var sinTheta_2 = y5 * sqrt5(2 + sqrt22) / (2 * sqrt5(3)), theta = 2 * asin3(sinTheta_2);
  return [
    3 * sqrt22 * x5 / (1 + 2 * cos3(theta) / cos3(theta / 2)),
    asin3((sinTheta_2 + sin3(theta)) / (1 + sqrt1_2))
  ];
};

// node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js
function mtFlatPolarSinusoidalRaw(lambda, phi2) {
  var A6 = sqrt5(6 / (4 + pi4)), k3 = (1 + pi4 / 4) * sin3(phi2), theta = phi2 / 2;
  for (var i = 0, delta; i < 25; i++) {
    theta -= delta = (theta / 2 + sin3(theta) - k3) / (0.5 + cos3(theta));
    if (abs3(delta) < epsilon5)
      break;
  }
  return [
    A6 * (0.5 + cos3(theta)) * lambda / 1.5,
    A6 * theta
  ];
}
mtFlatPolarSinusoidalRaw.invert = function(x5, y5) {
  var A6 = sqrt5(6 / (4 + pi4)), theta = y5 / A6;
  if (abs3(abs3(theta) - halfPi3) < epsilon5)
    theta = theta < 0 ? -halfPi3 : halfPi3;
  return [
    1.5 * x5 / (A6 * (0.5 + cos3(theta))),
    asin3((theta / 2 + sin3(theta)) / (1 + pi4 / 4))
  ];
};

// node_modules/d3-geo-projection/src/naturalEarth2.js
function naturalEarth2Raw(lambda, phi2) {
  var phi22 = phi2 * phi2, phi4 = phi22 * phi22, phi6 = phi22 * phi4;
  return [
    lambda * (0.84719 - 0.13063 * phi22 + phi6 * phi6 * (-0.04515 + 0.05494 * phi22 - 0.02326 * phi4 + 331e-5 * phi6)),
    phi2 * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi22 - 396e-5 * phi4))
  ];
}
naturalEarth2Raw.invert = function(x5, y5) {
  var phi2 = y5, i = 25, delta, phi22, phi4, phi6;
  do {
    phi22 = phi2 * phi2;
    phi4 = phi22 * phi22;
    phi2 -= delta = (phi2 * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi22 - 396e-5 * phi4)) - y5) / (1.01183 + phi4 * phi4 * (9 * -0.02625 + 11 * 0.01926 * phi22 + 13 * -396e-5 * phi4));
  } while (abs3(delta) > epsilon24 && --i > 0);
  phi22 = phi2 * phi2;
  phi4 = phi22 * phi22;
  phi6 = phi22 * phi4;
  return [
    x5 / (0.84719 - 0.13063 * phi22 + phi6 * phi6 * (-0.04515 + 0.05494 * phi22 - 0.02326 * phi4 + 331e-5 * phi6)),
    phi2
  ];
};

// node_modules/d3-geo-projection/src/nellHammer.js
function nellHammerRaw(lambda, phi2) {
  return [
    lambda * (1 + cos3(phi2)) / 2,
    2 * (phi2 - tan2(phi2 / 2))
  ];
}
nellHammerRaw.invert = function(x5, y5) {
  var p = y5 / 2;
  for (var i = 0, delta = Infinity; i < 10 && abs3(delta) > epsilon5; ++i) {
    var c3 = cos3(y5 / 2);
    y5 -= delta = (y5 - tan2(y5 / 2) - p) / (1 - 0.5 / (c3 * c3));
  }
  return [
    2 * x5 / (1 + cos3(y5)),
    y5
  ];
};

// node_modules/d3-geo-projection/src/nicolosi.js
function nicolosiRaw(lambda, phi2) {
  var sinPhi = sin3(phi2), q = cos3(phi2), s2 = sign3(lambda);
  if (lambda === 0 || abs3(phi2) === halfPi3)
    return [0, phi2];
  else if (phi2 === 0)
    return [lambda, 0];
  else if (abs3(lambda) === halfPi3)
    return [lambda * q, halfPi3 * sinPhi];
  var b2 = pi4 / (2 * lambda) - 2 * lambda / pi4, c3 = 2 * phi2 / pi4, d = (1 - c3 * c3) / (sinPhi - c3);
  var b22 = b2 * b2, d2 = d * d, b2d2 = 1 + b22 / d2, d2b2 = 1 + d2 / b22;
  var M2 = (b2 * sinPhi / d - b2 / 2) / b2d2, N = (d2 * sinPhi / b22 + d / 2) / d2b2, m3 = M2 * M2 + q * q / b2d2, n = N * N - (d2 * sinPhi * sinPhi / b22 + d * sinPhi - 1) / d2b2;
  return [
    halfPi3 * (M2 + sqrt5(m3) * s2),
    halfPi3 * (N + sqrt5(n < 0 ? 0 : n) * sign3(-phi2 * b2) * s2)
  ];
}
nicolosiRaw.invert = function(x5, y5) {
  x5 /= halfPi3;
  y5 /= halfPi3;
  var x22 = x5 * x5, y22 = y5 * y5, x2y2 = x22 + y22, pi22 = pi4 * pi4;
  return [
    x5 ? (x2y2 - 1 + sqrt5((1 - x2y2) * (1 - x2y2) + 4 * x22)) / (2 * x5) * halfPi3 : 0,
    solve(function(phi2) {
      return x2y2 * (pi4 * sin3(phi2) - 2 * phi2) * pi4 + 4 * phi2 * phi2 * (y5 - sin3(phi2)) + 2 * pi4 * phi2 - pi22 * y5;
    }, 0)
  ];
};

// node_modules/d3-geo-projection/src/patterson.js
var pattersonK1 = 1.0148;
var pattersonK2 = 0.23185;
var pattersonK3 = -0.14499;
var pattersonK4 = 0.02406;
var pattersonC1 = pattersonK1;
var pattersonC2 = 5 * pattersonK2;
var pattersonC3 = 7 * pattersonK3;
var pattersonC4 = 9 * pattersonK4;
var pattersonYmax = 1.790857183;
function pattersonRaw(lambda, phi2) {
  var phi22 = phi2 * phi2;
  return [
    lambda,
    phi2 * (pattersonK1 + phi22 * phi22 * (pattersonK2 + phi22 * (pattersonK3 + pattersonK4 * phi22)))
  ];
}
pattersonRaw.invert = function(x5, y5) {
  if (y5 > pattersonYmax)
    y5 = pattersonYmax;
  else if (y5 < -pattersonYmax)
    y5 = -pattersonYmax;
  var yc = y5, delta;
  do {
    var y22 = yc * yc;
    yc -= delta = (yc * (pattersonK1 + y22 * y22 * (pattersonK2 + y22 * (pattersonK3 + pattersonK4 * y22))) - y5) / (pattersonC1 + y22 * y22 * (pattersonC2 + y22 * (pattersonC3 + pattersonC4 * y22)));
  } while (abs3(delta) > epsilon5);
  return [x5, yc];
};

// node_modules/d3-geo-projection/src/polyconic.js
function polyconicRaw(lambda, phi2) {
  if (abs3(phi2) < epsilon5)
    return [lambda, 0];
  var tanPhi = tan2(phi2), k3 = lambda * sin3(phi2);
  return [
    sin3(k3) / tanPhi,
    phi2 + (1 - cos3(k3)) / tanPhi
  ];
}
polyconicRaw.invert = function(x5, y5) {
  if (abs3(y5) < epsilon5)
    return [x5, 0];
  var k3 = x5 * x5 + y5 * y5, phi2 = y5 * 0.5, i = 10, delta;
  do {
    var tanPhi = tan2(phi2), secPhi = 1 / cos3(phi2), j = k3 - 2 * y5 * phi2 + phi2 * phi2;
    phi2 -= delta = (tanPhi * j + 2 * (phi2 - y5)) / (2 + j * secPhi * secPhi + 2 * (phi2 - y5) * tanPhi);
  } while (abs3(delta) > epsilon5 && --i > 0);
  tanPhi = tan2(phi2);
  return [
    (abs3(y5) < abs3(phi2 + 1 / tanPhi) ? asin3(x5 * tanPhi) : sign3(y5) * sign3(x5) * (acos3(abs3(x5 * tanPhi)) + halfPi3)) / sin3(phi2),
    phi2
  ];
};

// node_modules/d3-geo-projection/src/polyhedral/octahedron.js
var octahedron = [
  [0, 90],
  [-90, 0],
  [0, 0],
  [90, 0],
  [180, 0],
  [0, -90]
];
var octahedron_default = [
  [0, 2, 1],
  [0, 3, 2],
  [5, 1, 2],
  [5, 2, 3],
  [0, 1, 4],
  [0, 4, 3],
  [5, 4, 1],
  [5, 3, 4]
].map(function(face) {
  return face.map(function(i) {
    return octahedron[i];
  });
});

// node_modules/d3-geo-projection/src/polyhedral/collignon.js
var kx2 = 2 / sqrt5(3);
function collignonK(a4, b2) {
  var p = collignonRaw(a4, b2);
  return [p[0] * kx2, p[1]];
}
collignonK.invert = function(x5, y5) {
  return collignonRaw.invert(x5 / kx2, y5);
};

// node_modules/d3-geo-projection/src/robinson.js
var K3 = [
  [0.9986, -0.062],
  [1, 0],
  [0.9986, 0.062],
  [0.9954, 0.124],
  [0.99, 0.186],
  [0.9822, 0.248],
  [0.973, 0.31],
  [0.96, 0.372],
  [0.9427, 0.434],
  [0.9216, 0.4958],
  [0.8962, 0.5571],
  [0.8679, 0.6176],
  [0.835, 0.6769],
  [0.7986, 0.7346],
  [0.7597, 0.7903],
  [0.7186, 0.8435],
  [0.6732, 0.8936],
  [0.6213, 0.9394],
  [0.5722, 0.9761],
  [0.5322, 1]
];
K3.forEach(function(d) {
  d[1] *= 1.593415793900743;
});
function robinsonRaw(lambda, phi2) {
  var i = min4(18, abs3(phi2) * 36 / pi4), i0 = floor2(i), di = i - i0, ax = (k3 = K3[i0])[0], ay = k3[1], bx = (k3 = K3[++i0])[0], by = k3[1], cx = (k3 = K3[min4(19, ++i0)])[0], cy = k3[1], k3;
  return [
    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),
    sign3(phi2) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)
  ];
}
robinsonRaw.invert = function(x5, y5) {
  var phi2 = y5 * 90, i = min4(18, abs3(phi2 / 5)), i0 = max4(0, floor2(i));
  do {
    var ay = K3[i0][1], by = K3[i0 + 1][1], cy = K3[min4(19, i0 + 2)][1], u4 = cy - ay, v2 = cy - 2 * by + ay, t4 = 2 * (abs3(y5) - by) / u4, c3 = v2 / u4, di = t4 * (1 - c3 * t4 * (1 - 2 * c3 * t4));
    if (di >= 0 || i0 === 1) {
      phi2 = (y5 >= 0 ? 5 : -5) * (di + i);
      var j = 50, delta;
      do {
        i = min4(18, abs3(phi2) / 5);
        i0 = floor2(i);
        di = i - i0;
        ay = K3[i0][1];
        by = K3[i0 + 1][1];
        cy = K3[min4(19, i0 + 2)][1];
        phi2 -= (delta = sign3(y5) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y5) * degrees4;
      } while (abs3(delta) > epsilon24 && --j > 0);
      break;
    }
  } while (--i0 >= 0);
  var ax = K3[i0][0], bx = K3[i0 + 1][0], cx = K3[min4(19, i0 + 2)][0];
  return [
    x5 / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),
    phi2 * radians3
  ];
};

// node_modules/d3-geo-projection/src/stitch.js
var epsilon6 = 1e-4;
var x06 = -180;
var x0e = x06 + epsilon6;
var x12 = 180;
var x1e = x12 - epsilon6;
var y06 = -90;
var y0e = y06 + epsilon6;
var y12 = 90;
var y1e = y12 - epsilon6;

// node_modules/d3-geo-projection/src/times.js
function timesRaw(lambda, phi2) {
  var t4 = tan2(phi2 / 2), s2 = sin3(quarterPi2 * t4);
  return [
    lambda * (0.74482 - 0.34588 * s2 * s2),
    1.70711 * t4
  ];
}
timesRaw.invert = function(x5, y5) {
  var t4 = y5 / 1.70711, s2 = sin3(quarterPi2 * t4);
  return [
    x5 / (0.74482 - 0.34588 * s2 * s2),
    2 * atan3(t4)
  ];
};

// node_modules/d3-geo-projection/src/vanDerGrinten.js
function vanDerGrintenRaw(lambda, phi2) {
  if (abs3(phi2) < epsilon5)
    return [lambda, 0];
  var sinTheta = abs3(phi2 / halfPi3), theta = asin3(sinTheta);
  if (abs3(lambda) < epsilon5 || abs3(abs3(phi2) - halfPi3) < epsilon5)
    return [0, sign3(phi2) * pi4 * tan2(theta / 2)];
  var cosTheta = cos3(theta), A6 = abs3(pi4 / lambda - lambda / pi4) / 2, A22 = A6 * A6, G = cosTheta / (sinTheta + cosTheta - 1), P = G * (2 / sinTheta - 1), P2 = P * P, P2_A2 = P2 + A22, G_P2 = G - P2, Q = A22 + G;
  return [
    sign3(lambda) * pi4 * (A6 * G_P2 + sqrt5(A22 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,
    sign3(phi2) * pi4 * (P * Q - A6 * sqrt5((A22 + 1) * P2_A2 - Q * Q)) / P2_A2
  ];
}
vanDerGrintenRaw.invert = function(x5, y5) {
  if (abs3(y5) < epsilon5)
    return [x5, 0];
  if (abs3(x5) < epsilon5)
    return [0, halfPi3 * sin3(2 * atan3(y5 / pi4))];
  var x22 = (x5 /= pi4) * x5, y22 = (y5 /= pi4) * y5, x2_y2 = x22 + y22, z = x2_y2 * x2_y2, c1 = -abs3(y5) * (1 + x2_y2), c22 = c1 - 2 * y22 + x22, c3 = -2 * c1 + 1 + 2 * y22 + z, d = y22 / c3 + (2 * c22 * c22 * c22 / (c3 * c3 * c3) - 9 * c1 * c22 / (c3 * c3)) / 27, a1 = (c1 - c22 * c22 / (3 * c3)) / c3, m1 = 2 * sqrt5(-a1 / 3), theta1 = acos3(3 * d / (a1 * m1)) / 3;
  return [
    pi4 * (x2_y2 - 1 + sqrt5(1 + 2 * (x22 - y22) + z)) / (2 * x5),
    sign3(y5) * pi4 * (-m1 * cos3(theta1 + pi4 / 3) - c22 / (3 * c3))
  ];
};

// node_modules/d3-geo-projection/src/vanDerGrinten2.js
function vanDerGrinten2Raw(lambda, phi2) {
  if (abs3(phi2) < epsilon5)
    return [lambda, 0];
  var sinTheta = abs3(phi2 / halfPi3), theta = asin3(sinTheta);
  if (abs3(lambda) < epsilon5 || abs3(abs3(phi2) - halfPi3) < epsilon5)
    return [0, sign3(phi2) * pi4 * tan2(theta / 2)];
  var cosTheta = cos3(theta), A6 = abs3(pi4 / lambda - lambda / pi4) / 2, A22 = A6 * A6, x13 = cosTheta * (sqrt5(1 + A22) - A6 * cosTheta) / (1 + A22 * sinTheta * sinTheta);
  return [
    sign3(lambda) * pi4 * x13,
    sign3(phi2) * pi4 * sqrt5(1 - x13 * (2 * A6 + x13))
  ];
}
vanDerGrinten2Raw.invert = function(x5, y5) {
  if (!x5)
    return [0, halfPi3 * sin3(2 * atan3(y5 / pi4))];
  var x13 = abs3(x5 / pi4), A6 = (1 - x13 * x13 - (y5 /= pi4) * y5) / (2 * x13), A22 = A6 * A6, B4 = sqrt5(A22 + 1);
  return [
    sign3(x5) * pi4 * (B4 - A6),
    sign3(y5) * halfPi3 * sin3(2 * atan23(sqrt5((1 - 2 * A6 * x13) * (A6 + B4) - x13), sqrt5(B4 + A6 + x13)))
  ];
};

// node_modules/d3-geo-projection/src/vanDerGrinten3.js
function vanDerGrinten3Raw(lambda, phi2) {
  if (abs3(phi2) < epsilon5)
    return [lambda, 0];
  var sinTheta = phi2 / halfPi3, theta = asin3(sinTheta);
  if (abs3(lambda) < epsilon5 || abs3(abs3(phi2) - halfPi3) < epsilon5)
    return [0, pi4 * tan2(theta / 2)];
  var A6 = (pi4 / lambda - lambda / pi4) / 2, y13 = sinTheta / (1 + cos3(theta));
  return [
    pi4 * (sign3(lambda) * sqrt5(A6 * A6 + 1 - y13 * y13) - A6),
    pi4 * y13
  ];
}
vanDerGrinten3Raw.invert = function(x5, y5) {
  if (!y5)
    return [x5, 0];
  var y13 = y5 / pi4, A6 = (pi4 * pi4 * (1 - y13 * y13) - x5 * x5) / (2 * pi4 * x5);
  return [
    x5 ? pi4 * (sign3(x5) * sqrt5(A6 * A6 + 1) - A6) : 0,
    halfPi3 * sin3(2 * atan3(y13))
  ];
};

// node_modules/d3-geo-projection/src/vanDerGrinten4.js
function vanDerGrinten4Raw(lambda, phi2) {
  if (!phi2)
    return [lambda, 0];
  var phi03 = abs3(phi2);
  if (!lambda || phi03 === halfPi3)
    return [0, phi2];
  var B4 = phi03 / halfPi3, B22 = B4 * B4, C3 = (8 * B4 - B22 * (B22 + 2) - 5) / (2 * B22 * (B4 - 1)), C23 = C3 * C3, BC = B4 * C3, B_C2 = B22 + C23 + 2 * BC, B_3C = B4 + 3 * C3, lambda03 = lambda / halfPi3, lambda12 = lambda03 + 1 / lambda03, D3 = sign3(abs3(lambda) - halfPi3) * sqrt5(lambda12 * lambda12 - 4), D22 = D3 * D3, F = B_C2 * (B22 + C23 * D22 - 1) + (1 - B22) * (B22 * (B_3C * B_3C + 4 * C23) + 12 * BC * C23 + 4 * C23 * C23), x13 = (D3 * (B_C2 + C23 - 1) + 2 * sqrt5(F)) / (4 * B_C2 + D22);
  return [
    sign3(lambda) * halfPi3 * x13,
    sign3(phi2) * halfPi3 * sqrt5(1 + D3 * abs3(x13) - x13 * x13)
  ];
}
vanDerGrinten4Raw.invert = function(x5, y5) {
  var delta;
  if (!x5 || !y5)
    return [x5, y5];
  var sy = sign3(y5);
  y5 = abs3(y5) / pi4;
  var x13 = sign3(x5) * x5 / halfPi3, D3 = (x13 * x13 - 1 + 4 * y5 * y5) / abs3(x13), D22 = D3 * D3, B4 = y5 * (2 - (y5 > 0.5 ? min4(y5, abs3(x5)) : 0)), r = x5 * x5 + y5 * y5, i = 50;
  do {
    var B22 = B4 * B4, C3 = (8 * B4 - B22 * (B22 + 2) - 5) / (2 * B22 * (B4 - 1)), C_ = (3 * B4 - B22 * B4 - 10) / (2 * B22 * B4), C23 = C3 * C3, BC = B4 * C3, B_C = B4 + C3, B_C2 = B_C * B_C, B_3C = B4 + 3 * C3, F = B_C2 * (B22 + C23 * D22 - 1) + (1 - B22) * (B22 * (B_3C * B_3C + 4 * C23) + C23 * (12 * BC + 4 * C23)), F_ = -2 * B_C * (4 * BC * C23 + (1 - 4 * B22 + 3 * B22 * B22) * (1 + C_) + C23 * (-6 + 14 * B22 - D22 + (-8 + 8 * B22 - 2 * D22) * C_) + BC * (-8 + 12 * B22 + (-10 + 10 * B22 - D22) * C_)), sqrtF = sqrt5(F), f = D3 * (B_C2 + C23 - 1) + 2 * sqrtF - x13 * (4 * B_C2 + D22), f_ = D3 * (2 * C3 * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D3 * (-1 + C23 + B_C2) + 2 * sqrtF) * (1 + C_) / (D22 + 4 * B_C2);
    B4 -= delta = f / f_;
  } while (delta * r * r > epsilon5 && --i > 0);
  return [
    sign3(x5) * (sqrt5(D3 * D3 + 4) + D3) * pi4 / 4,
    sy * halfPi3 * B4
  ];
};

// node_modules/d3-geo-projection/src/wagner4.js
var A5 = 4 * pi4 + 3 * sqrt5(3);
var B2 = 2 * sqrt5(2 * pi4 * sqrt5(3) / A5);
var wagner4Raw = mollweideBromleyRaw(B2 * sqrt5(3) / pi4, B2, A5 / 6);

// node_modules/d3-geo-projection/src/wagner6.js
function wagner6Raw(lambda, phi2) {
  return [lambda * sqrt5(1 - 3 * phi2 * phi2 / (pi4 * pi4)), phi2];
}
wagner6Raw.invert = function(x5, y5) {
  return [x5 / sqrt5(1 - 3 * y5 * y5 / (pi4 * pi4)), y5];
};

// node_modules/d3-geo-projection/src/wiechel.js
function wiechelRaw(lambda, phi2) {
  var cosPhi = cos3(phi2), sinPhi = cos3(lambda) * cosPhi, sin1_Phi = 1 - sinPhi, cosLambda = cos3(lambda = atan23(sin3(lambda) * cosPhi, -sin3(phi2))), sinLambda = sin3(lambda);
  cosPhi = sqrt5(1 - sinPhi * sinPhi);
  return [
    sinLambda * cosPhi - cosLambda * sin1_Phi,
    -cosLambda * cosPhi - sinLambda * sin1_Phi
  ];
}
wiechelRaw.invert = function(x5, y5) {
  var w4 = (x5 * x5 + y5 * y5) / -2, k3 = sqrt5(-w4 * (2 + w4)), b2 = y5 * w4 + x5 * k3, a4 = x5 * w4 - y5 * k3, D3 = sqrt5(a4 * a4 + b2 * b2);
  return [
    atan23(k3 * b2, D3 * (1 + w4)),
    D3 ? -asin3(k3 * a4 / D3) : 0
  ];
};

// node_modules/d3-geo-projection/src/winkel3.js
function winkel3Raw(lambda, phi2) {
  var coordinates = aitoffRaw(lambda, phi2);
  return [
    (coordinates[0] + lambda / halfPi3) / 2,
    (coordinates[1] + phi2) / 2
  ];
}
winkel3Raw.invert = function(x5, y5) {
  var lambda = x5, phi2 = y5, i = 25;
  do {
    var cosphi = cos3(phi2), sinphi = sin3(phi2), sin_2phi = sin3(2 * phi2), sin2phi = sinphi * sinphi, cos2phi = cosphi * cosphi, sinlambda = sin3(lambda), coslambda_2 = cos3(lambda / 2), sinlambda_2 = sin3(lambda / 2), sin2lambda_2 = sinlambda_2 * sinlambda_2, C3 = 1 - cos2phi * coslambda_2 * coslambda_2, E2 = C3 ? acos3(cosphi * coslambda_2) * sqrt5(F = 1 / C3) : F = 0, F, fx = 0.5 * (2 * E2 * cosphi * sinlambda_2 + lambda / halfPi3) - x5, fy = 0.5 * (E2 * sinphi + phi2) - y5, dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E2 * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi3, dxdphi = F * (sinlambda * sin_2phi / 4 - E2 * sinphi * sinlambda_2), dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E2 * sinphi * cos2phi * sinlambda), dydphi = 0.5 * F * (sin2phi * coslambda_2 + E2 * sin2lambda_2 * cosphi) + 0.5, denominator = dxdphi * dydlambda - dydphi * dxdlambda, dlambda = (fy * dxdphi - fx * dydphi) / denominator, dphi = (fx * dydlambda - fy * dxdlambda) / denominator;
    lambda -= dlambda, phi2 -= dphi;
  } while ((abs3(dlambda) > epsilon5 || abs3(dphi) > epsilon5) && --i > 0);
  return [lambda, phi2];
};

// node_modules/vega-projection/build/vega-projection.module.js
var defaultPath = path_default2();
var projectionProperties = [
  "clipAngle",
  "clipExtent",
  "scale",
  "translate",
  "center",
  "rotate",
  "parallels",
  "precision",
  "reflectX",
  "reflectY",
  "coefficient",
  "distance",
  "fraction",
  "lobes",
  "parallel",
  "radius",
  "ratio",
  "spacing",
  "tilt"
];
function create2(type3, constructor) {
  return function projection3() {
    const p = constructor();
    p.type = type3;
    p.path = path_default2().projection(p);
    p.copy = p.copy || function() {
      const c3 = projection3();
      projectionProperties.forEach((prop) => {
        if (p[prop])
          c3[prop](p[prop]());
      });
      c3.path.pointRadius(p.path.pointRadius());
      return c3;
    };
    return p;
  };
}
function projection2(type3, proj) {
  if (!type3 || typeof type3 !== "string") {
    throw new Error("Projection type must be a name string.");
  }
  type3 = type3.toLowerCase();
  if (arguments.length > 1) {
    projections[type3] = create2(type3, proj);
    return this;
  } else {
    return projections[type3] || null;
  }
}
function getProjectionPath(proj) {
  return proj && proj.path || defaultPath;
}
var projections = {
  albers: albers_default,
  albersusa: albersUsa_default,
  azimuthalequalarea: azimuthalEqualArea_default,
  azimuthalequidistant: azimuthalEquidistant_default,
  conicconformal: conicConformal_default,
  conicequalarea: conicEqualArea_default,
  conicequidistant: conicEquidistant_default,
  equalEarth: equalEarth_default,
  equirectangular: equirectangular_default,
  gnomonic: gnomonic_default,
  identity: identity_default5,
  mercator: mercator_default,
  mollweide: mollweide_default,
  naturalEarth1: naturalEarth1_default,
  orthographic: orthographic_default,
  stereographic: stereographic_default,
  transversemercator: transverseMercator_default
};
for (const key2 in projections) {
  projection2(key2, projections[key2]);
}

// node_modules/vega-geo/build/vega-geo.module.js
function noop3() {
}
var cases = [[], [[[1, 1.5], [0.5, 1]]], [[[1.5, 1], [1, 1.5]]], [[[1.5, 1], [0.5, 1]]], [[[1, 0.5], [1.5, 1]]], [[[1, 1.5], [0.5, 1]], [[1, 0.5], [1.5, 1]]], [[[1, 0.5], [1, 1.5]]], [[[1, 0.5], [0.5, 1]]], [[[0.5, 1], [1, 0.5]]], [[[1, 1.5], [1, 0.5]]], [[[0.5, 1], [1, 0.5]], [[1.5, 1], [1, 1.5]]], [[[1.5, 1], [1, 0.5]]], [[[0.5, 1], [1.5, 1]]], [[[1, 1.5], [1.5, 1]]], [[[0.5, 1], [1, 1.5]]], []];
function contours() {
  var dx = 1, dy = 1, smooth = smoothLinear;
  function contours2(values5, tz) {
    return tz.map((value3) => contour(values5, value3));
  }
  function contour(values5, value3) {
    var polygons = [], holes = [];
    isorings(values5, value3, (ring) => {
      smooth(ring, values5, value3);
      if (area2(ring) > 0)
        polygons.push([ring]);
      else
        holes.push(ring);
    });
    holes.forEach((hole) => {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if (contains((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value: value3,
      coordinates: polygons
    };
  }
  function isorings(values5, value3, callback) {
    var fragmentByStart = new Array(), fragmentByEnd = new Array(), x5, y5, t04, t13, t22, t32;
    x5 = y5 = -1;
    t13 = values5[0] >= value3;
    cases[t13 << 1].forEach(stitch);
    while (++x5 < dx - 1) {
      t04 = t13, t13 = values5[x5 + 1] >= value3;
      cases[t04 | t13 << 1].forEach(stitch);
    }
    cases[t13 << 0].forEach(stitch);
    while (++y5 < dy - 1) {
      x5 = -1;
      t13 = values5[y5 * dx + dx] >= value3;
      t22 = values5[y5 * dx] >= value3;
      cases[t13 << 1 | t22 << 2].forEach(stitch);
      while (++x5 < dx - 1) {
        t04 = t13, t13 = values5[y5 * dx + dx + x5 + 1] >= value3;
        t32 = t22, t22 = values5[y5 * dx + x5 + 1] >= value3;
        cases[t04 | t13 << 1 | t22 << 2 | t32 << 3].forEach(stitch);
      }
      cases[t13 | t22 << 3].forEach(stitch);
    }
    x5 = -1;
    t22 = values5[y5 * dx] >= value3;
    cases[t22 << 2].forEach(stitch);
    while (++x5 < dx - 1) {
      t32 = t22, t22 = values5[y5 * dx + x5 + 1] >= value3;
      cases[t22 << 2 | t32 << 3].forEach(stitch);
    }
    cases[t22 << 3].forEach(stitch);
    function stitch(line4) {
      var start = [line4[0][0] + x5, line4[0][1] + y5], end = [line4[1][0] + x5, line4[1][1] + y5], startIndex = index5(start), endIndex = index5(end), f, g;
      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }
  function index5(point10) {
    return point10[0] * 2 + point10[1] * (dx + 1) * 4;
  }
  function smoothLinear(ring, values5, value3) {
    ring.forEach((point10) => {
      var x5 = point10[0], y5 = point10[1], xt = x5 | 0, yt = y5 | 0, v0, v1 = values5[yt * dx + xt];
      if (x5 > 0 && x5 < dx && xt === x5) {
        v0 = values5[yt * dx + xt - 1];
        point10[0] = x5 + (value3 - v0) / (v1 - v0) - 0.5;
      }
      if (y5 > 0 && y5 < dy && yt === y5) {
        v0 = values5[(yt - 1) * dx + xt];
        point10[1] = y5 + (value3 - v0) / (v1 - v0) - 0.5;
      }
    });
  }
  contours2.contour = contour;
  contours2.size = function(_) {
    if (!arguments.length)
      return [dx, dy];
    var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
    if (!(_0 >= 0 && _1 >= 0))
      error("invalid size");
    return dx = _0, dy = _1, contours2;
  };
  contours2.smooth = function(_) {
    return arguments.length ? (smooth = _ ? smoothLinear : noop3, contours2) : smooth === smoothLinear;
  };
  return contours2;
}
function area2(ring) {
  var i = 0, n = ring.length, area4 = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i < n)
    area4 += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  return area4;
}
function contains(ring, hole) {
  var i = -1, n = hole.length, c3;
  while (++i < n)
    if (c3 = ringContains(ring, hole[i]))
      return c3;
  return 0;
}
function ringContains(ring, point10) {
  var x5 = point10[0], y5 = point10[1], contains3 = -1;
  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi5 = ring[i], xi = pi5[0], yi = pi5[1], pj = ring[j], xj = pj[0], yj = pj[1];
    if (segmentContains(pi5, pj, point10))
      return 0;
    if (yi > y5 !== yj > y5 && x5 < (xj - xi) * (y5 - yi) / (yj - yi) + xi)
      contains3 = -contains3;
  }
  return contains3;
}
function segmentContains(a4, b2, c3) {
  var i;
  return collinear(a4, b2, c3) && within(a4[i = +(a4[0] === b2[0])], c3[i], b2[i]);
}
function collinear(a4, b2, c3) {
  return (b2[0] - a4[0]) * (c3[1] - a4[1]) === (c3[0] - a4[0]) * (b2[1] - a4[1]);
}
function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
function quantize2(k3, nice5, zero6) {
  return function(values5) {
    var ex = extent(values5), start = zero6 ? Math.min(ex[0], 0) : ex[0], stop3 = ex[1], span2 = stop3 - start, step = nice5 ? tickStep(start, stop3, k3) : span2 / (k3 + 1);
    return range(start + step, stop3, step);
  };
}
function Isocontour(params2) {
  Transform.call(this, null, params2);
}
Isocontour.Definition = {
  "type": "Isocontour",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "thresholds",
    "type": "number",
    "array": true
  }, {
    "name": "levels",
    "type": "number"
  }, {
    "name": "nice",
    "type": "boolean",
    "default": false
  }, {
    "name": "resolve",
    "type": "enum",
    "values": ["shared", "independent"],
    "default": "independent"
  }, {
    "name": "zero",
    "type": "boolean",
    "default": true
  }, {
    "name": "smooth",
    "type": "boolean",
    "default": true
  }, {
    "name": "scale",
    "type": "number",
    "expr": true
  }, {
    "name": "translate",
    "type": "number",
    "array": true,
    "expr": true
  }, {
    "name": "as",
    "type": "string",
    "null": true,
    "default": "contour"
  }]
};
inherits(Isocontour, Transform, {
  transform(_, pulse2) {
    if (this.value && !pulse2.changed() && !_.modified()) {
      return pulse2.StopPropagation;
    }
    var out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), source3 = pulse2.materialize(pulse2.SOURCE).source, field3 = _.field || identity, contour = contours().smooth(_.smooth !== false), tz = _.thresholds || levels(source3, field3, _), as = _.as === null ? null : _.as || "contour", values5 = [];
    source3.forEach((t4) => {
      const grid = field3(t4);
      const paths = contour.size([grid.width, grid.height])(grid.values, isArray(tz) ? tz : tz(grid.values));
      transformPaths(paths, grid, t4, _);
      paths.forEach((p) => {
        values5.push(rederive(t4, ingest$1(as != null ? {
          [as]: p
        } : p)));
      });
    });
    if (this.value)
      out.rem = this.value;
    this.value = out.source = out.add = values5;
    return out;
  }
});
function levels(values5, f, _) {
  const q = quantize2(_.levels || 10, _.nice, _.zero !== false);
  return _.resolve !== "shared" ? q : q(values5.map((t4) => max(f(t4).values)));
}
function transformPaths(paths, grid, datum2, _) {
  let s2 = _.scale || grid.scale, t4 = _.translate || grid.translate;
  if (isFunction(s2))
    s2 = s2(datum2, _);
  if (isFunction(t4))
    t4 = t4(datum2, _);
  if ((s2 === 1 || s2 == null) && !t4)
    return;
  const sx = (isNumber(s2) ? s2 : s2[0]) || 1, sy = (isNumber(s2) ? s2 : s2[1]) || 1, tx = t4 && t4[0] || 0, ty = t4 && t4[1] || 0;
  paths.forEach(transform2(grid, sx, sy, tx, ty));
}
function transform2(grid, sx, sy, tx, ty) {
  const x13 = grid.x1 || 0, y13 = grid.y1 || 0, flip2 = sx * sy < 0;
  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }
  function transformRing(coordinates) {
    if (flip2)
      coordinates.reverse();
    coordinates.forEach(transformPoint);
  }
  function transformPoint(coordinates) {
    coordinates[0] = (coordinates[0] - x13) * sx + tx;
    coordinates[1] = (coordinates[1] - y13) * sy + ty;
  }
  return function(geometry) {
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  };
}
function radius(bw, data3, f) {
  const v2 = bw >= 0 ? bw : estimateBandwidth(data3, f);
  return Math.round((Math.sqrt(4 * v2 * v2 + 1) - 1) / 2);
}
function number5(_) {
  return isFunction(_) ? _ : constant(+_);
}
function density2D() {
  var x5 = (d) => d[0], y5 = (d) => d[1], weight = one, bandwidth2 = [-1, -1], dx = 960, dy = 500, k3 = 2;
  function density(data3, counts) {
    const rx = radius(bandwidth2[0], data3, x5) >> k3, ry = radius(bandwidth2[1], data3, y5) >> k3, ox = rx ? rx + 2 : 0, oy = ry ? ry + 2 : 0, n = 2 * ox + (dx >> k3), m3 = 2 * oy + (dy >> k3), values0 = new Float32Array(n * m3), values1 = new Float32Array(n * m3);
    let values5 = values0;
    data3.forEach((d) => {
      const xi = ox + (+x5(d) >> k3), yi = oy + (+y5(d) >> k3);
      if (xi >= 0 && xi < n && yi >= 0 && yi < m3) {
        values0[xi + yi * n] += +weight(d);
      }
    });
    if (rx > 0 && ry > 0) {
      blurX(n, m3, values0, values1, rx);
      blurY(n, m3, values1, values0, ry);
      blurX(n, m3, values0, values1, rx);
      blurY(n, m3, values1, values0, ry);
      blurX(n, m3, values0, values1, rx);
      blurY(n, m3, values1, values0, ry);
    } else if (rx > 0) {
      blurX(n, m3, values0, values1, rx);
      blurX(n, m3, values1, values0, rx);
      blurX(n, m3, values0, values1, rx);
      values5 = values1;
    } else if (ry > 0) {
      blurY(n, m3, values0, values1, ry);
      blurY(n, m3, values1, values0, ry);
      blurY(n, m3, values0, values1, ry);
      values5 = values1;
    }
    const s2 = counts ? Math.pow(2, -2 * k3) : 1 / sum(values5);
    for (let i = 0, sz2 = n * m3; i < sz2; ++i)
      values5[i] *= s2;
    return {
      values: values5,
      scale: 1 << k3,
      width: n,
      height: m3,
      x1: ox,
      y1: oy,
      x2: ox + (dx >> k3),
      y2: oy + (dy >> k3)
    };
  }
  density.x = function(_) {
    return arguments.length ? (x5 = number5(_), density) : x5;
  };
  density.y = function(_) {
    return arguments.length ? (y5 = number5(_), density) : y5;
  };
  density.weight = function(_) {
    return arguments.length ? (weight = number5(_), density) : weight;
  };
  density.size = function(_) {
    if (!arguments.length)
      return [dx, dy];
    var _0 = +_[0], _1 = +_[1];
    if (!(_0 >= 0 && _1 >= 0))
      error("invalid size");
    return dx = _0, dy = _1, density;
  };
  density.cellSize = function(_) {
    if (!arguments.length)
      return 1 << k3;
    if (!((_ = +_) >= 1))
      error("invalid cell size");
    k3 = Math.floor(Math.log(_) / Math.LN2);
    return density;
  };
  density.bandwidth = function(_) {
    if (!arguments.length)
      return bandwidth2;
    _ = array(_);
    if (_.length === 1)
      _ = [+_[0], +_[0]];
    if (_.length !== 2)
      error("invalid bandwidth");
    return bandwidth2 = _, density;
  };
  return density;
}
function blurX(n, m3, source3, target2, r) {
  const w4 = (r << 1) + 1;
  for (let j = 0; j < m3; ++j) {
    for (let i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source3[i + j * n];
      }
      if (i >= r) {
        if (i >= w4) {
          sr -= source3[i - w4 + j * n];
        }
        target2[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w4 - i, w4);
      }
    }
  }
}
function blurY(n, m3, source3, target2, r) {
  const w4 = (r << 1) + 1;
  for (let i = 0; i < n; ++i) {
    for (let j = 0, sr = 0; j < m3 + r; ++j) {
      if (j < m3) {
        sr += source3[i + j * n];
      }
      if (j >= r) {
        if (j >= w4) {
          sr -= source3[i + (j - w4) * n];
        }
        target2[i + (j - r) * n] = sr / Math.min(j + 1, m3 - 1 + w4 - j, w4);
      }
    }
  }
}
function KDE2D(params2) {
  Transform.call(this, null, params2);
}
KDE2D.Definition = {
  "type": "KDE2D",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2,
    "required": true
  }, {
    "name": "x",
    "type": "field",
    "required": true
  }, {
    "name": "y",
    "type": "field",
    "required": true
  }, {
    "name": "weight",
    "type": "field"
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "cellSize",
    "type": "number"
  }, {
    "name": "bandwidth",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "counts",
    "type": "boolean",
    "default": false
  }, {
    "name": "as",
    "type": "string",
    "default": "grid"
  }]
};
var PARAMS = ["x", "y", "weight", "size", "cellSize", "bandwidth"];
function params(obj, _) {
  PARAMS.forEach((param2) => _[param2] != null ? obj[param2](_[param2]) : 0);
  return obj;
}
inherits(KDE2D, Transform, {
  transform(_, pulse2) {
    if (this.value && !pulse2.changed() && !_.modified())
      return pulse2.StopPropagation;
    var out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), source3 = pulse2.materialize(pulse2.SOURCE).source, groups3 = partition3(source3, _.groupby), names = (_.groupby || []).map(accessorName), kde2 = params(density2D(), _), as = _.as || "grid", values5 = [];
    function set7(t4, vals2) {
      for (let i = 0; i < names.length; ++i)
        t4[names[i]] = vals2[i];
      return t4;
    }
    values5 = groups3.map((g) => ingest$1(set7({
      [as]: kde2(g, _.counts)
    }, g.dims)));
    if (this.value)
      out.rem = this.value;
    this.value = out.source = out.add = values5;
    return out;
  }
});
function partition3(data3, groupby) {
  var groups3 = [], get7 = (f) => f(t4), map7, i, n, t4, k3, g;
  if (groupby == null) {
    groups3.push(data3);
  } else {
    for (map7 = {}, i = 0, n = data3.length; i < n; ++i) {
      t4 = data3[i];
      k3 = groupby.map(get7);
      g = map7[k3];
      if (!g) {
        map7[k3] = g = [];
        g.dims = k3;
        groups3.push(g);
      }
      g.push(t4);
    }
  }
  return groups3;
}
function Contour(params2) {
  Transform.call(this, null, params2);
}
Contour.Definition = {
  "type": "Contour",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2,
    "required": true
  }, {
    "name": "values",
    "type": "number",
    "array": true
  }, {
    "name": "x",
    "type": "field"
  }, {
    "name": "y",
    "type": "field"
  }, {
    "name": "weight",
    "type": "field"
  }, {
    "name": "cellSize",
    "type": "number"
  }, {
    "name": "bandwidth",
    "type": "number"
  }, {
    "name": "count",
    "type": "number"
  }, {
    "name": "nice",
    "type": "boolean",
    "default": false
  }, {
    "name": "thresholds",
    "type": "number",
    "array": true
  }, {
    "name": "smooth",
    "type": "boolean",
    "default": true
  }]
};
inherits(Contour, Transform, {
  transform(_, pulse2) {
    if (this.value && !pulse2.changed() && !_.modified()) {
      return pulse2.StopPropagation;
    }
    var out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS), contour = contours().smooth(_.smooth !== false), values5 = _.values, thresh = _.thresholds || quantize2(_.count || 10, _.nice, !!values5), size = _.size, grid, post2;
    if (!values5) {
      values5 = pulse2.materialize(pulse2.SOURCE).source;
      grid = params(density2D(), _)(values5, true);
      post2 = transform2(grid, grid.scale || 1, grid.scale || 1, 0, 0);
      size = [grid.width, grid.height];
      values5 = grid.values;
    }
    thresh = isArray(thresh) ? thresh : thresh(values5);
    values5 = contour.size(size)(values5, thresh);
    if (post2)
      values5.forEach(post2);
    if (this.value)
      out.rem = this.value;
    this.value = out.source = out.add = (values5 || []).map(ingest$1);
    return out;
  }
});
var Feature = "Feature";
var FeatureCollection = "FeatureCollection";
var MultiPoint = "MultiPoint";
function GeoJSON(params2) {
  Transform.call(this, null, params2);
}
GeoJSON.Definition = {
  "type": "GeoJSON",
  "metadata": {},
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "length": 2
  }, {
    "name": "geojson",
    "type": "field"
  }]
};
inherits(GeoJSON, Transform, {
  transform(_, pulse2) {
    var features = this._features, points2 = this._points, fields = _.fields, lon = fields && fields[0], lat = fields && fields[1], geojson = _.geojson || !fields && identity, flag2 = pulse2.ADD, mod;
    mod = _.modified() || pulse2.changed(pulse2.REM) || pulse2.modified(accessorFields(geojson)) || lon && pulse2.modified(accessorFields(lon)) || lat && pulse2.modified(accessorFields(lat));
    if (!this.value || mod) {
      flag2 = pulse2.SOURCE;
      this._features = features = [];
      this._points = points2 = [];
    }
    if (geojson) {
      pulse2.visit(flag2, (t4) => features.push(geojson(t4)));
    }
    if (lon && lat) {
      pulse2.visit(flag2, (t4) => {
        var x5 = lon(t4), y5 = lat(t4);
        if (x5 != null && y5 != null && (x5 = +x5) === x5 && (y5 = +y5) === y5) {
          points2.push([x5, y5]);
        }
      });
      features = features.concat({
        type: Feature,
        geometry: {
          type: MultiPoint,
          coordinates: points2
        }
      });
    }
    this.value = {
      type: FeatureCollection,
      features
    };
  }
});
function GeoPath(params2) {
  Transform.call(this, null, params2);
}
GeoPath.Definition = {
  "type": "GeoPath",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "projection",
    "type": "projection"
  }, {
    "name": "field",
    "type": "field"
  }, {
    "name": "pointRadius",
    "type": "number",
    "expr": true
  }, {
    "name": "as",
    "type": "string",
    "default": "path"
  }]
};
inherits(GeoPath, Transform, {
  transform(_, pulse2) {
    var out = pulse2.fork(pulse2.ALL), path3 = this.value, field3 = _.field || identity, as = _.as || "path", flag2 = out.SOURCE;
    if (!path3 || _.modified()) {
      this.value = path3 = getProjectionPath(_.projection);
      out.materialize().reflow();
    } else {
      flag2 = field3 === identity || pulse2.modified(field3.fields) ? out.ADD_MOD : out.ADD;
    }
    const prev = initPath(path3, _.pointRadius);
    out.visit(flag2, (t4) => t4[as] = path3(field3(t4)));
    path3.pointRadius(prev);
    return out.modifies(as);
  }
});
function initPath(path3, pointRadius) {
  const prev = path3.pointRadius();
  path3.context(null);
  if (pointRadius != null) {
    path3.pointRadius(pointRadius);
  }
  return prev;
}
function GeoPoint(params2) {
  Transform.call(this, null, params2);
}
GeoPoint.Definition = {
  "type": "GeoPoint",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "projection",
    "type": "projection",
    "required": true
  }, {
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 2,
    "default": ["x", "y"]
  }]
};
inherits(GeoPoint, Transform, {
  transform(_, pulse2) {
    var proj = _.projection, lon = _.fields[0], lat = _.fields[1], as = _.as || ["x", "y"], x5 = as[0], y5 = as[1], mod;
    function set7(t4) {
      const xy = proj([lon(t4), lat(t4)]);
      if (xy) {
        t4[x5] = xy[0];
        t4[y5] = xy[1];
      } else {
        t4[x5] = void 0;
        t4[y5] = void 0;
      }
    }
    if (_.modified()) {
      pulse2 = pulse2.materialize().reflow(true).visit(pulse2.SOURCE, set7);
    } else {
      mod = pulse2.modified(lon.fields) || pulse2.modified(lat.fields);
      pulse2.visit(mod ? pulse2.ADD_MOD : pulse2.ADD, set7);
    }
    return pulse2.modifies(as);
  }
});
function GeoShape(params2) {
  Transform.call(this, null, params2);
}
GeoShape.Definition = {
  "type": "GeoShape",
  "metadata": {
    "modifies": true,
    "nomod": true
  },
  "params": [{
    "name": "projection",
    "type": "projection"
  }, {
    "name": "field",
    "type": "field",
    "default": "datum"
  }, {
    "name": "pointRadius",
    "type": "number",
    "expr": true
  }, {
    "name": "as",
    "type": "string",
    "default": "shape"
  }]
};
inherits(GeoShape, Transform, {
  transform(_, pulse2) {
    var out = pulse2.fork(pulse2.ALL), shape2 = this.value, as = _.as || "shape", flag2 = out.ADD;
    if (!shape2 || _.modified()) {
      this.value = shape2 = shapeGenerator(getProjectionPath(_.projection), _.field || field("datum"), _.pointRadius);
      out.materialize().reflow();
      flag2 = out.SOURCE;
    }
    out.visit(flag2, (t4) => t4[as] = shape2);
    return out.modifies(as);
  }
});
function shapeGenerator(path3, field3, pointRadius) {
  const shape2 = pointRadius == null ? (_) => path3(field3(_)) : (_) => {
    var prev = path3.pointRadius(), value3 = path3.pointRadius(pointRadius)(field3(_));
    path3.pointRadius(prev);
    return value3;
  };
  shape2.context = (_) => {
    path3.context(_);
    return shape2;
  };
  return shape2;
}
function Graticule(params2) {
  Transform.call(this, [], params2);
  this.generator = graticule();
}
Graticule.Definition = {
  "type": "Graticule",
  "metadata": {
    "changes": true,
    "generates": true
  },
  "params": [{
    "name": "extent",
    "type": "array",
    "array": true,
    "length": 2,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "extentMajor",
    "type": "array",
    "array": true,
    "length": 2,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "extentMinor",
    "type": "array",
    "array": true,
    "length": 2,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "step",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "stepMajor",
    "type": "number",
    "array": true,
    "length": 2,
    "default": [90, 360]
  }, {
    "name": "stepMinor",
    "type": "number",
    "array": true,
    "length": 2,
    "default": [10, 10]
  }, {
    "name": "precision",
    "type": "number",
    "default": 2.5
  }]
};
inherits(Graticule, Transform, {
  transform(_, pulse2) {
    var src = this.value, gen = this.generator, t4;
    if (!src.length || _.modified()) {
      for (const prop in _) {
        if (isFunction(gen[prop])) {
          gen[prop](_[prop]);
        }
      }
    }
    t4 = gen();
    if (src.length) {
      pulse2.mod.push(replace(src[0], t4));
    } else {
      pulse2.add.push(ingest$1(t4));
    }
    src[0] = t4;
    return pulse2;
  }
});
function Heatmap(params2) {
  Transform.call(this, null, params2);
}
Heatmap.Definition = {
  "type": "heatmap",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "color",
    "type": "string",
    "expr": true
  }, {
    "name": "opacity",
    "type": "number",
    "expr": true
  }, {
    "name": "resolve",
    "type": "enum",
    "values": ["shared", "independent"],
    "default": "independent"
  }, {
    "name": "as",
    "type": "string",
    "default": "image"
  }]
};
inherits(Heatmap, Transform, {
  transform(_, pulse2) {
    if (!pulse2.changed() && !_.modified()) {
      return pulse2.StopPropagation;
    }
    var source3 = pulse2.materialize(pulse2.SOURCE).source, shared = _.resolve === "shared", field3 = _.field || identity, opacity2 = opacity_(_.opacity, _), color5 = color_(_.color, _), as = _.as || "image", obj = {
      $x: 0,
      $y: 0,
      $value: 0,
      $max: shared ? max(source3.map((t4) => max(field3(t4).values))) : 0
    };
    source3.forEach((t4) => {
      const v2 = field3(t4);
      const o = extend({}, t4, obj);
      if (!shared)
        o.$max = max(v2.values || []);
      t4[as] = toCanvas(v2, o, color5.dep ? color5 : constant(color5(o)), opacity2.dep ? opacity2 : constant(opacity2(o)));
    });
    return pulse2.reflow(true).modifies(as);
  }
});
function color_(color5, _) {
  let f;
  if (isFunction(color5)) {
    f = (obj) => rgb(color5(obj, _));
    f.dep = dependency(color5);
  } else {
    f = constant(rgb(color5 || "#888"));
  }
  return f;
}
function opacity_(opacity2, _) {
  let f;
  if (isFunction(opacity2)) {
    f = (obj) => opacity2(obj, _);
    f.dep = dependency(opacity2);
  } else if (opacity2) {
    f = constant(opacity2);
  } else {
    f = (obj) => obj.$value / obj.$max || 0;
    f.dep = true;
  }
  return f;
}
function dependency(f) {
  if (!isFunction(f))
    return false;
  const set7 = toSet(accessorFields(f));
  return set7.$x || set7.$y || set7.$value || set7.$max;
}
function toCanvas(grid, obj, color5, opacity2) {
  const n = grid.width, m3 = grid.height, x13 = grid.x1 || 0, y13 = grid.y1 || 0, x22 = grid.x2 || n, y22 = grid.y2 || m3, val = grid.values, value3 = val ? (i) => val[i] : zero, can = domCanvas(x22 - x13, y22 - y13), ctx = can.getContext("2d"), img = ctx.getImageData(0, 0, x22 - x13, y22 - y13), pix = img.data;
  for (let j = y13, k3 = 0; j < y22; ++j) {
    obj.$y = j - y13;
    for (let i = x13, r = j * n; i < x22; ++i, k3 += 4) {
      obj.$x = i - x13;
      obj.$value = value3(i + r);
      const v2 = color5(obj);
      pix[k3 + 0] = v2.r;
      pix[k3 + 1] = v2.g;
      pix[k3 + 2] = v2.b;
      pix[k3 + 3] = ~~(255 * opacity2(obj));
    }
  }
  ctx.putImageData(img, 0, 0);
  return can;
}
function Projection(params2) {
  Transform.call(this, null, params2);
  this.modified(true);
}
inherits(Projection, Transform, {
  transform(_, pulse2) {
    let proj = this.value;
    if (!proj || _.modified("type")) {
      this.value = proj = create3(_.type);
      projectionProperties.forEach((prop) => {
        if (_[prop] != null)
          set3(proj, prop, _[prop]);
      });
    } else {
      projectionProperties.forEach((prop) => {
        if (_.modified(prop))
          set3(proj, prop, _[prop]);
      });
    }
    if (_.pointRadius != null)
      proj.path.pointRadius(_.pointRadius);
    if (_.fit)
      fit2(proj, _);
    return pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
  }
});
function fit2(proj, _) {
  const data3 = collectGeoJSON(_.fit);
  _.extent ? proj.fitExtent(_.extent, data3) : _.size ? proj.fitSize(_.size, data3) : 0;
}
function create3(type3) {
  const constructor = projection2((type3 || "mercator").toLowerCase());
  if (!constructor)
    error("Unrecognized projection type: " + type3);
  return constructor();
}
function set3(proj, key2, value3) {
  if (isFunction(proj[key2]))
    proj[key2](value3);
}
function collectGeoJSON(data3) {
  data3 = array(data3);
  return data3.length === 1 ? data3[0] : {
    type: FeatureCollection,
    features: data3.reduce((a4, f) => a4.concat(featurize(f)), [])
  };
}
function featurize(f) {
  return f.type === FeatureCollection ? f.features : array(f).filter((d) => d != null).map((d) => d.type === Feature ? d : {
    type: Feature,
    geometry: d
  });
}

// node_modules/vega-force/build/vega-force.module.js
var vega_force_module_exports = {};
__export(vega_force_module_exports, {
  force: () => Force
});

// node_modules/d3-force/src/center.js
function center_default(x5, y5) {
  var nodes, strength = 1;
  if (x5 == null)
    x5 = 0;
  if (y5 == null)
    y5 = 0;
  function force() {
    var i, n = nodes.length, node, sx = 0, sy = 0;
    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }
    for (sx = (sx / n - x5) * strength, sy = (sy / n - y5) * strength, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }
  force.initialize = function(_) {
    nodes = _;
  };
  force.x = function(_) {
    return arguments.length ? (x5 = +_, force) : x5;
  };
  force.y = function(_) {
    return arguments.length ? (y5 = +_, force) : y5;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  return force;
}

// node_modules/d3-quadtree/src/add.js
function add_default(d) {
  const x5 = +this._x.call(null, d), y5 = +this._y.call(null, d);
  return add4(this.cover(x5, y5), x5, y5, d);
}
function add4(tree, x5, y5, d) {
  if (isNaN(x5) || isNaN(y5))
    return tree;
  var parent, node = tree._root, leaf = { data: d }, x07 = tree._x0, y07 = tree._y0, x13 = tree._x1, y13 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right = x5 >= (xm = (x07 + x13) / 2))
      x07 = xm;
    else
      x13 = xm;
    if (bottom = y5 >= (ym = (y07 + y13) / 2))
      y07 = ym;
    else
      y13 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right]))
      return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x5 === xp && y5 === yp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x5 >= (xm = (x07 + x13) / 2))
      x07 = xm;
    else
      x13 = xm;
    if (bottom = y5 >= (ym = (y07 + y13) / 2))
      y07 = ym;
    else
      y13 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data3) {
  var d, i, n = data3.length, x5, y5, xz = new Array(n), yz = new Array(n), x07 = Infinity, y07 = Infinity, x13 = -Infinity, y13 = -Infinity;
  for (i = 0; i < n; ++i) {
    if (isNaN(x5 = +this._x.call(null, d = data3[i])) || isNaN(y5 = +this._y.call(null, d)))
      continue;
    xz[i] = x5;
    yz[i] = y5;
    if (x5 < x07)
      x07 = x5;
    if (x5 > x13)
      x13 = x5;
    if (y5 < y07)
      y07 = y5;
    if (y5 > y13)
      y13 = y5;
  }
  if (x07 > x13 || y07 > y13)
    return this;
  this.cover(x07, y07).cover(x13, y13);
  for (i = 0; i < n; ++i) {
    add4(this, xz[i], yz[i], data3[i]);
  }
  return this;
}

// node_modules/d3-quadtree/src/cover.js
function cover_default(x5, y5) {
  if (isNaN(x5 = +x5) || isNaN(y5 = +y5))
    return this;
  var x07 = this._x0, y07 = this._y0, x13 = this._x1, y13 = this._y1;
  if (isNaN(x07)) {
    x13 = (x07 = Math.floor(x5)) + 1;
    y13 = (y07 = Math.floor(y5)) + 1;
  } else {
    var z = x13 - x07 || 1, node = this._root, parent, i;
    while (x07 > x5 || x5 >= x13 || y07 > y5 || y5 >= y13) {
      i = (y5 < y07) << 1 | x5 < x07;
      parent = new Array(4), parent[i] = node, node = parent, z *= 2;
      switch (i) {
        case 0:
          x13 = x07 + z, y13 = y07 + z;
          break;
        case 1:
          x07 = x13 - z, y13 = y07 + z;
          break;
        case 2:
          x13 = x07 + z, y07 = y13 - z;
          break;
        case 3:
          x07 = x13 - z, y07 = y13 - z;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x07;
  this._y0 = y07;
  this._x1 = x13;
  this._y1 = y13;
  return this;
}

// node_modules/d3-quadtree/src/data.js
function data_default() {
  var data3 = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data3.push(node.data);
      while (node = node.next);
  });
  return data3;
}

// node_modules/d3-quadtree/src/extent.js
function extent_default2(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
}

// node_modules/d3-quadtree/src/quad.js
function quad_default(node, x07, y07, x13, y13) {
  this.node = node;
  this.x0 = x07;
  this.y0 = y07;
  this.x1 = x13;
  this.y1 = y13;
}

// node_modules/d3-quadtree/src/find.js
function find_default(x5, y5, radius2) {
  var data3, x07 = this._x0, y07 = this._y0, x13, y13, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
  if (node)
    quads.push(new quad_default(node, x07, y07, x32, y32));
  if (radius2 == null)
    radius2 = Infinity;
  else {
    x07 = x5 - radius2, y07 = y5 - radius2;
    x32 = x5 + radius2, y32 = y5 + radius2;
    radius2 *= radius2;
  }
  while (q = quads.pop()) {
    if (!(node = q.node) || (x13 = q.x0) > x32 || (y13 = q.y0) > y32 || (x22 = q.x1) < x07 || (y22 = q.y1) < y07)
      continue;
    if (node.length) {
      var xm = (x13 + x22) / 2, ym = (y13 + y22) / 2;
      quads.push(
        new quad_default(node[3], xm, ym, x22, y22),
        new quad_default(node[2], x13, ym, xm, y22),
        new quad_default(node[1], xm, y13, x22, ym),
        new quad_default(node[0], x13, y13, xm, ym)
      );
      if (i = (y5 >= ym) << 1 | x5 >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } else {
      var dx = x5 - +this._x.call(null, node.data), dy = y5 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
      if (d2 < radius2) {
        var d = Math.sqrt(radius2 = d2);
        x07 = x5 - d, y07 = y5 - d;
        x32 = x5 + d, y32 = y5 + d;
        data3 = node.data;
      }
    }
  }
  return data3;
}

// node_modules/d3-quadtree/src/remove.js
function remove_default(d) {
  if (isNaN(x5 = +this._x.call(null, d)) || isNaN(y5 = +this._y.call(null, d)))
    return this;
  var parent, node = this._root, retainer, previous, next, x07 = this._x0, y07 = this._y0, x13 = this._x1, y13 = this._y1, x5, y5, xm, ym, right, bottom, i, j;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right = x5 >= (xm = (x07 + x13) / 2))
        x07 = xm;
      else
        x13 = xm;
      if (bottom = y5 >= (ym = (y07 + y13) / 2))
        y07 = ym;
      else
        y13 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right]))
        return this;
      if (!node.length)
        break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
        retainer = parent, j = i;
    }
  while (node.data !== d)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll(data3) {
  for (var i = 0, n = data3.length; i < n; ++i)
    this.remove(data3[i]);
  return this;
}

// node_modules/d3-quadtree/src/root.js
function root_default() {
  return this._root;
}

// node_modules/d3-quadtree/src/size.js
function size_default() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/d3-quadtree/src/visit.js
function visit_default(callback) {
  var quads = [], q, node = this._root, child, x07, y07, x13, y13;
  if (node)
    quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x07 = q.x0, y07 = q.y0, x13 = q.x1, y13 = q.y1) && node.length) {
      var xm = (x07 + x13) / 2, ym = (y07 + y13) / 2;
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x13, y13));
      if (child = node[2])
        quads.push(new quad_default(child, x07, ym, xm, y13));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y07, x13, ym));
      if (child = node[0])
        quads.push(new quad_default(child, x07, y07, xm, ym));
    }
  }
  return this;
}

// node_modules/d3-quadtree/src/visitAfter.js
function visitAfter_default(callback) {
  var quads = [], next = [], q;
  if (this._root)
    quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x07 = q.x0, y07 = q.y0, x13 = q.x1, y13 = q.y1, xm = (x07 + x13) / 2, ym = (y07 + y13) / 2;
      if (child = node[0])
        quads.push(new quad_default(child, x07, y07, xm, ym));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y07, x13, ym));
      if (child = node[2])
        quads.push(new quad_default(child, x07, ym, xm, y13));
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x13, y13));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}

// node_modules/d3-quadtree/src/x.js
function defaultX(d) {
  return d[0];
}
function x_default2(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}

// node_modules/d3-quadtree/src/y.js
function defaultY(d) {
  return d[1];
}
function y_default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}

// node_modules/d3-quadtree/src/quadtree.js
function quadtree(nodes, x5, y5) {
  var tree = new Quadtree(x5 == null ? defaultX : x5, y5 == null ? defaultY : y5, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Quadtree(x5, y5, x07, y07, x13, y13) {
  this._x = x5;
  this._y = y5;
  this._x0 = x07;
  this._y0 = y07;
  this._x1 = x13;
  this._y1 = y13;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy4 = { data: leaf.data }, next = copy4;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy4;
}
var treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function() {
  var copy4 = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
  if (!node)
    return copy4;
  if (!node.length)
    return copy4._root = leaf_copy(node), copy4;
  nodes = [{ source: node, target: copy4._root = new Array(4) }];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i] = new Array(4) });
        else
          node.target[i] = leaf_copy(child);
      }
    }
  }
  return copy4;
};
treeProto.add = add_default;
treeProto.addAll = addAll;
treeProto.cover = cover_default;
treeProto.data = data_default;
treeProto.extent = extent_default2;
treeProto.find = find_default;
treeProto.remove = remove_default;
treeProto.removeAll = removeAll;
treeProto.root = root_default;
treeProto.size = size_default;
treeProto.visit = visit_default;
treeProto.visitAfter = visitAfter_default;
treeProto.x = x_default2;
treeProto.y = y_default;

// node_modules/d3-force/src/constant.js
function constant_default4(x5) {
  return function() {
    return x5;
  };
}

// node_modules/d3-force/src/jiggle.js
function jiggle_default(random2) {
  return (random2() - 0.5) * 1e-6;
}

// node_modules/d3-force/src/collide.js
function x3(d) {
  return d.x + d.vx;
}
function y3(d) {
  return d.y + d.vy;
}
function collide_default(radius2) {
  var nodes, radii, random2, strength = 1, iterations2 = 1;
  if (typeof radius2 !== "function")
    radius2 = constant_default4(radius2 == null ? 1 : +radius2);
  function force() {
    var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
    for (var k3 = 0; k3 < iterations2; ++k3) {
      tree = quadtree(nodes, x3, y3).visitAfter(prepare2);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply3);
      }
    }
    function apply3(quad2, x07, y07, x13, y13) {
      var data3 = quad2.data, rj = quad2.r, r = ri + rj;
      if (data3) {
        if (data3.index > node.index) {
          var x5 = xi - data3.x - data3.vx, y5 = yi - data3.y - data3.vy, l = x5 * x5 + y5 * y5;
          if (l < r * r) {
            if (x5 === 0)
              x5 = jiggle_default(random2), l += x5 * x5;
            if (y5 === 0)
              y5 = jiggle_default(random2), l += y5 * y5;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x5 *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y5 *= l) * r;
            data3.vx -= x5 * (r = 1 - r);
            data3.vy -= y5 * r;
          }
        }
        return;
      }
      return x07 > xi + r || x13 < xi - r || y07 > yi + r || y13 < yi - r;
    }
  }
  function prepare2(quad2) {
    if (quad2.data)
      return quad2.r = radii[quad2.data.index];
    for (var i = quad2.r = 0; i < 4; ++i) {
      if (quad2[i] && quad2[i].r > quad2.r) {
        quad2.r = quad2[i].r;
      }
    }
  }
  function initialize3() {
    if (!nodes)
      return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i)
      node = nodes[i], radii[node.index] = +radius2(node, i, nodes);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random2 = _random;
    initialize3();
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations2 = +_, force) : iterations2;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  force.radius = function(_) {
    return arguments.length ? (radius2 = typeof _ === "function" ? _ : constant_default4(+_), initialize3(), force) : radius2;
  };
  return force;
}

// node_modules/d3-force/src/link.js
function index2(d) {
  return d.index;
}
function find2(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node)
    throw new Error("node not found: " + nodeId);
  return node;
}
function link_default(links) {
  var id2 = index2, strength = defaultStrength, strengths, distance = constant_default4(30), distances, nodes, count4, bias, random2, iterations2 = 1;
  if (links == null)
    links = [];
  function defaultStrength(link3) {
    return 1 / Math.min(count4[link3.source.index], count4[link3.target.index]);
  }
  function force(alpha) {
    for (var k3 = 0, n = links.length; k3 < iterations2; ++k3) {
      for (var i = 0, link3, source3, target2, x5, y5, l, b2; i < n; ++i) {
        link3 = links[i], source3 = link3.source, target2 = link3.target;
        x5 = target2.x + target2.vx - source3.x - source3.vx || jiggle_default(random2);
        y5 = target2.y + target2.vy - source3.y - source3.vy || jiggle_default(random2);
        l = Math.sqrt(x5 * x5 + y5 * y5);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x5 *= l, y5 *= l;
        target2.vx -= x5 * (b2 = bias[i]);
        target2.vy -= y5 * b2;
        source3.vx += x5 * (b2 = 1 - b2);
        source3.vy += y5 * b2;
      }
    }
  }
  function initialize3() {
    if (!nodes)
      return;
    var i, n = nodes.length, m3 = links.length, nodeById = new Map(nodes.map((d, i2) => [id2(d, i2, nodes), d])), link3;
    for (i = 0, count4 = new Array(n); i < m3; ++i) {
      link3 = links[i], link3.index = i;
      if (typeof link3.source !== "object")
        link3.source = find2(nodeById, link3.source);
      if (typeof link3.target !== "object")
        link3.target = find2(nodeById, link3.target);
      count4[link3.source.index] = (count4[link3.source.index] || 0) + 1;
      count4[link3.target.index] = (count4[link3.target.index] || 0) + 1;
    }
    for (i = 0, bias = new Array(m3); i < m3; ++i) {
      link3 = links[i], bias[i] = count4[link3.source.index] / (count4[link3.source.index] + count4[link3.target.index]);
    }
    strengths = new Array(m3), initializeStrength();
    distances = new Array(m3), initializeDistance();
  }
  function initializeStrength() {
    if (!nodes)
      return;
    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }
  function initializeDistance() {
    if (!nodes)
      return;
    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random2 = _random;
    initialize3();
  };
  force.links = function(_) {
    return arguments.length ? (links = _, initialize3(), force) : links;
  };
  force.id = function(_) {
    return arguments.length ? (id2 = _, force) : id2;
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations2 = +_, force) : iterations2;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default4(+_), initializeStrength(), force) : strength;
  };
  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant_default4(+_), initializeDistance(), force) : distance;
  };
  return force;
}

// node_modules/d3-dispatch/src/dispatch.js
var noop4 = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t4; i < n; ++i) {
    if (!(t4 = arguments[i] + "") || t4 in _ || /[\s.]/.test(t4))
      throw new Error("illegal type: " + t4);
    _[t4] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames(typenames, types4) {
  return typenames.trim().split(/^|\s+/).map(function(t4) {
    var name4 = "", i = t4.indexOf(".");
    if (i >= 0)
      name4 = t4.slice(i + 1), t4 = t4.slice(0, i);
    if (t4 && !types4.hasOwnProperty(t4))
      throw new Error("unknown type: " + t4);
    return { type: t4, name: name4 };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames(typename + "", _), t4, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t4 = (typename = T[i]).type) && (t4 = get5(_[t4], typename.name)))
          return t4;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t4 = (typename = T[i]).type)
        _[t4] = set4(_[t4], typename.name, callback);
      else if (callback == null)
        for (t4 in _)
          _[t4] = set4(_[t4], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy4 = {}, _ = this._;
    for (var t4 in _)
      copy4[t4] = _[t4].slice();
    return new Dispatch(copy4);
  },
  call: function(type3, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i = 0, n, t4; i < n; ++i)
        args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type3))
      throw new Error("unknown type: " + type3);
    for (t4 = this._[type3], i = 0, n = t4.length; i < n; ++i)
      t4[i].value.apply(that, args);
  },
  apply: function(type3, that, args) {
    if (!this._.hasOwnProperty(type3))
      throw new Error("unknown type: " + type3);
    for (var t4 = this._[type3], i = 0, n = t4.length; i < n; ++i)
      t4[i].value.apply(that, args);
  }
};
function get5(type3, name4) {
  for (var i = 0, n = type3.length, c3; i < n; ++i) {
    if ((c3 = type3[i]).name === name4) {
      return c3.value;
    }
  }
}
function set4(type3, name4, callback) {
  for (var i = 0, n = type3.length; i < n; ++i) {
    if (type3[i].name === name4) {
      type3[i] = noop4, type3 = type3.slice(0, i).concat(type3.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type3.push({ name: name4, value: callback });
  return type3;
}
var dispatch_default = dispatch;

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time3) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time3 = (time3 == null ? now() : +time3) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time3;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time3) {
  var t4 = new Timer();
  t4.restart(callback, delay, time3);
  return t4;
}
function timerFlush() {
  now();
  ++frame;
  var t4 = taskHead, e3;
  while (t4) {
    if ((e3 = clockNow - t4._time) >= 0)
      t4._call.call(void 0, e3);
    t4 = t4._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t04, t13 = taskHead, t22, time3 = Infinity;
  while (t13) {
    if (t13._call) {
      if (time3 > t13._time)
        time3 = t13._time;
      t04 = t13, t13 = t13._next;
    } else {
      t22 = t13._next, t13._next = null;
      t13 = t04 ? t04._next = t22 : taskHead = t22;
    }
  }
  taskTail = t04;
  sleep(time3);
}
function sleep(time3) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time3 - clockNow;
  if (delay > 24) {
    if (time3 < Infinity)
      timeout = setTimeout(wake, time3 - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/interval.js
function interval_default(callback, delay, time3) {
  var t4 = new Timer(), total = delay;
  if (delay == null)
    return t4.restart(callback, delay, time3), t4;
  t4._restart = t4.restart;
  t4.restart = function(callback2, delay2, time4) {
    delay2 = +delay2, time4 = time4 == null ? now() : +time4;
    t4._restart(function tick2(elapsed) {
      elapsed += total;
      t4._restart(tick2, total += delay2, time4);
      callback2(elapsed);
    }, delay2, time4);
  };
  t4.restart(callback, delay, time3);
  return t4;
}

// node_modules/d3-force/src/lcg.js
var a2 = 1664525;
var c = 1013904223;
var m = 4294967296;
function lcg_default() {
  let s2 = 1;
  return () => (s2 = (a2 * s2 + c) % m) / m;
}

// node_modules/d3-force/src/simulation.js
function x4(d) {
  return d.x;
}
function y4(d) {
  return d.y;
}
var initialRadius = 10;
var initialAngle = Math.PI * (3 - Math.sqrt(5));
function simulation_default(nodes) {
  var simulation2, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = timer(step), event2 = dispatch_default("tick", "end"), random2 = lcg_default();
  if (nodes == null)
    nodes = [];
  function step() {
    tick2();
    event2.call("tick", simulation2);
    if (alpha < alphaMin) {
      stepper.stop();
      event2.call("end", simulation2);
    }
  }
  function tick2(iterations2) {
    var i, n = nodes.length, node;
    if (iterations2 === void 0)
      iterations2 = 1;
    for (var k3 = 0; k3 < iterations2; ++k3) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.forEach(function(force) {
        force(alpha);
      });
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null)
          node.x += node.vx *= velocityDecay;
        else
          node.x = node.fx, node.vx = 0;
        if (node.fy == null)
          node.y += node.vy *= velocityDecay;
        else
          node.y = node.fy, node.vy = 0;
      }
    }
    return simulation2;
  }
  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null)
        node.x = node.fx;
      if (node.fy != null)
        node.y = node.fy;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius2 = initialRadius * Math.sqrt(0.5 + i), angle2 = i * initialAngle;
        node.x = radius2 * Math.cos(angle2);
        node.y = radius2 * Math.sin(angle2);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }
  function initializeForce(force) {
    if (force.initialize)
      force.initialize(nodes, random2);
    return force;
  }
  initializeNodes();
  return simulation2 = {
    tick: tick2,
    restart: function() {
      return stepper.restart(step), simulation2;
    },
    stop: function() {
      return stepper.stop(), simulation2;
    },
    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation2) : nodes;
    },
    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation2) : alpha;
    },
    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation2) : alphaMin;
    },
    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation2) : +alphaDecay;
    },
    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation2) : alphaTarget;
    },
    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation2) : 1 - velocityDecay;
    },
    randomSource: function(_) {
      return arguments.length ? (random2 = _, forces.forEach(initializeForce), simulation2) : random2;
    },
    force: function(name4, _) {
      return arguments.length > 1 ? (_ == null ? forces.delete(name4) : forces.set(name4, initializeForce(_)), simulation2) : forces.get(name4);
    },
    find: function(x5, y5, radius2) {
      var i = 0, n = nodes.length, dx, dy, d2, node, closest;
      if (radius2 == null)
        radius2 = Infinity;
      else
        radius2 *= radius2;
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x5 - node.x;
        dy = y5 - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius2)
          closest = node, radius2 = d2;
      }
      return closest;
    },
    on: function(name4, _) {
      return arguments.length > 1 ? (event2.on(name4, _), simulation2) : event2.on(name4);
    }
  };
}

// node_modules/d3-force/src/manyBody.js
function manyBody_default() {
  var nodes, node, random2, alpha, strength = constant_default4(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
  function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x4, y4).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i)
      node = nodes[i], tree.visit(apply3);
  }
  function initialize3() {
    if (!nodes)
      return;
    var i, n = nodes.length, node2;
    strengths = new Array(n);
    for (i = 0; i < n; ++i)
      node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
  }
  function accumulate(quad2) {
    var strength2 = 0, q, c3, weight = 0, x5, y5, i;
    if (quad2.length) {
      for (x5 = y5 = i = 0; i < 4; ++i) {
        if ((q = quad2[i]) && (c3 = Math.abs(q.value))) {
          strength2 += q.value, weight += c3, x5 += c3 * q.x, y5 += c3 * q.y;
        }
      }
      quad2.x = x5 / weight;
      quad2.y = y5 / weight;
    } else {
      q = quad2;
      q.x = q.data.x;
      q.y = q.data.y;
      do
        strength2 += strengths[q.data.index];
      while (q = q.next);
    }
    quad2.value = strength2;
  }
  function apply3(quad2, x13, _, x22) {
    if (!quad2.value)
      return true;
    var x5 = quad2.x - node.x, y5 = quad2.y - node.y, w4 = x22 - x13, l = x5 * x5 + y5 * y5;
    if (w4 * w4 / theta2 < l) {
      if (l < distanceMax2) {
        if (x5 === 0)
          x5 = jiggle_default(random2), l += x5 * x5;
        if (y5 === 0)
          y5 = jiggle_default(random2), l += y5 * y5;
        if (l < distanceMin2)
          l = Math.sqrt(distanceMin2 * l);
        node.vx += x5 * quad2.value * alpha / l;
        node.vy += y5 * quad2.value * alpha / l;
      }
      return true;
    } else if (quad2.length || l >= distanceMax2)
      return;
    if (quad2.data !== node || quad2.next) {
      if (x5 === 0)
        x5 = jiggle_default(random2), l += x5 * x5;
      if (y5 === 0)
        y5 = jiggle_default(random2), l += y5 * y5;
      if (l < distanceMin2)
        l = Math.sqrt(distanceMin2 * l);
    }
    do
      if (quad2.data !== node) {
        w4 = strengths[quad2.data.index] * alpha / l;
        node.vx += x5 * w4;
        node.vy += y5 * w4;
      }
    while (quad2 = quad2.next);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random2 = _random;
    initialize3();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default4(+_), initialize3(), force) : strength;
  };
  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };
  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };
  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };
  return force;
}

// node_modules/d3-force/src/x.js
function x_default3(x5) {
  var strength = constant_default4(0.1), nodes, strengths, xz;
  if (typeof x5 !== "function")
    x5 = constant_default4(x5 == null ? 0 : +x5);
  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }
  function initialize3() {
    if (!nodes)
      return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x5(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(_) {
    nodes = _;
    initialize3();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default4(+_), initialize3(), force) : strength;
  };
  force.x = function(_) {
    return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default4(+_), initialize3(), force) : x5;
  };
  return force;
}

// node_modules/d3-force/src/y.js
function y_default2(y5) {
  var strength = constant_default4(0.1), nodes, strengths, yz;
  if (typeof y5 !== "function")
    y5 = constant_default4(y5 == null ? 0 : +y5);
  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }
  function initialize3() {
    if (!nodes)
      return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y5(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(_) {
    nodes = _;
    initialize3();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default4(+_), initialize3(), force) : strength;
  };
  force.y = function(_) {
    return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default4(+_), initialize3(), force) : y5;
  };
  return force;
}

// node_modules/vega-force/build/vega-force.module.js
var ForceMap = {
  center: center_default,
  collide: collide_default,
  nbody: manyBody_default,
  link: link_default,
  x: x_default3,
  y: y_default2
};
var Forces = "forces";
var ForceParams = ["alpha", "alphaMin", "alphaTarget", "velocityDecay", "forces"];
var ForceConfig = ["static", "iterations"];
var ForceOutput = ["x", "y", "vx", "vy"];
function Force(params2) {
  Transform.call(this, null, params2);
}
Force.Definition = {
  "type": "Force",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "static",
    "type": "boolean",
    "default": false
  }, {
    "name": "restart",
    "type": "boolean",
    "default": false
  }, {
    "name": "iterations",
    "type": "number",
    "default": 300
  }, {
    "name": "alpha",
    "type": "number",
    "default": 1
  }, {
    "name": "alphaMin",
    "type": "number",
    "default": 1e-3
  }, {
    "name": "alphaTarget",
    "type": "number",
    "default": 0
  }, {
    "name": "velocityDecay",
    "type": "number",
    "default": 0.4
  }, {
    "name": "forces",
    "type": "param",
    "array": true,
    "params": [{
      "key": {
        "force": "center"
      },
      "params": [{
        "name": "x",
        "type": "number",
        "default": 0
      }, {
        "name": "y",
        "type": "number",
        "default": 0
      }]
    }, {
      "key": {
        "force": "collide"
      },
      "params": [{
        "name": "radius",
        "type": "number",
        "expr": true
      }, {
        "name": "strength",
        "type": "number",
        "default": 0.7
      }, {
        "name": "iterations",
        "type": "number",
        "default": 1
      }]
    }, {
      "key": {
        "force": "nbody"
      },
      "params": [{
        "name": "strength",
        "type": "number",
        "default": -30
      }, {
        "name": "theta",
        "type": "number",
        "default": 0.9
      }, {
        "name": "distanceMin",
        "type": "number",
        "default": 1
      }, {
        "name": "distanceMax",
        "type": "number"
      }]
    }, {
      "key": {
        "force": "link"
      },
      "params": [{
        "name": "links",
        "type": "data"
      }, {
        "name": "id",
        "type": "field"
      }, {
        "name": "distance",
        "type": "number",
        "default": 30,
        "expr": true
      }, {
        "name": "strength",
        "type": "number",
        "expr": true
      }, {
        "name": "iterations",
        "type": "number",
        "default": 1
      }]
    }, {
      "key": {
        "force": "x"
      },
      "params": [{
        "name": "strength",
        "type": "number",
        "default": 0.1
      }, {
        "name": "x",
        "type": "field"
      }]
    }, {
      "key": {
        "force": "y"
      },
      "params": [{
        "name": "strength",
        "type": "number",
        "default": 0.1
      }, {
        "name": "y",
        "type": "field"
      }]
    }]
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "modify": false,
    "default": ForceOutput
  }]
};
inherits(Force, Transform, {
  transform(_, pulse2) {
    var sim = this.value, change2 = pulse2.changed(pulse2.ADD_REM), params2 = _.modified(ForceParams), iters = _.iterations || 300;
    if (!sim) {
      this.value = sim = simulation(pulse2.source, _);
      sim.on("tick", rerun(pulse2.dataflow, this));
      if (!_.static) {
        change2 = true;
        sim.tick();
      }
      pulse2.modifies("index");
    } else {
      if (change2) {
        pulse2.modifies("index");
        sim.nodes(pulse2.source);
      }
      if (params2 || pulse2.changed(pulse2.MOD)) {
        setup(sim, _, 0, pulse2);
      }
    }
    if (params2 || change2 || _.modified(ForceConfig) || pulse2.changed() && _.restart) {
      sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));
      if (_.static) {
        for (sim.stop(); --iters >= 0; )
          sim.tick();
      } else {
        if (sim.stopped())
          sim.restart();
        if (!change2)
          return pulse2.StopPropagation;
      }
    }
    return this.finish(_, pulse2);
  },
  finish(_, pulse2) {
    const dataflow = pulse2.dataflow;
    for (let args = this._argops, j = 0, m3 = args.length, arg; j < m3; ++j) {
      arg = args[j];
      if (arg.name !== Forces || arg.op._argval.force !== "link") {
        continue;
      }
      for (var ops2 = arg.op._argops, i = 0, n = ops2.length, op; i < n; ++i) {
        if (ops2[i].name === "links" && (op = ops2[i].op.source)) {
          dataflow.pulse(op, dataflow.changeset().reflow());
          break;
        }
      }
    }
    return pulse2.reflow(_.modified()).modifies(ForceOutput);
  }
});
function rerun(df, op) {
  return () => df.touch(op).run();
}
function simulation(nodes, _) {
  const sim = simulation_default(nodes), stop3 = sim.stop, restart = sim.restart;
  let stopped = false;
  sim.stopped = () => stopped;
  sim.restart = () => (stopped = false, restart());
  sim.stop = () => (stopped = true, stop3());
  return setup(sim, _, true).on("end", () => stopped = true);
}
function setup(sim, _, init2, pulse2) {
  var f = array(_.forces), i, n, p, name4;
  for (i = 0, n = ForceParams.length; i < n; ++i) {
    p = ForceParams[i];
    if (p !== Forces && _.modified(p))
      sim[p](_[p]);
  }
  for (i = 0, n = f.length; i < n; ++i) {
    name4 = Forces + i;
    p = init2 || _.modified(Forces, i) ? getForce(f[i]) : pulse2 && modified(f[i], pulse2) ? sim.force(name4) : null;
    if (p)
      sim.force(name4, p);
  }
  for (n = sim.numForces || 0; i < n; ++i) {
    sim.force(Forces + i, null);
  }
  sim.numForces = f.length;
  return sim;
}
function modified(f, pulse2) {
  var k3, v2;
  for (k3 in f) {
    if (isFunction(v2 = f[k3]) && pulse2.modified(accessorFields(v2)))
      return 1;
  }
  return 0;
}
function getForce(_) {
  var f, p;
  if (!has(ForceMap, _.force)) {
    error("Unrecognized force: " + _.force);
  }
  f = ForceMap[_.force]();
  for (p in _) {
    if (isFunction(f[p]))
      setForceParam(f[p], _[p], _);
  }
  return f;
}
function setForceParam(f, v2, _) {
  f(isFunction(v2) ? (d) => v2(d, _) : v2);
}

// node_modules/vega-hierarchy/build/vega-hierarchy.module.js
var vega_hierarchy_module_exports = {};
__export(vega_hierarchy_module_exports, {
  nest: () => Nest,
  pack: () => Pack,
  partition: () => Partition,
  stratify: () => Stratify,
  tree: () => Tree,
  treelinks: () => TreeLinks,
  treemap: () => Treemap
});

// node_modules/d3-hierarchy/src/cluster.js
function defaultSeparation(a4, b2) {
  return a4.parent === b2.parent ? 1 : 2;
}
function meanX(children3) {
  return children3.reduce(meanXReduce, 0) / children3.length;
}
function meanXReduce(x5, c3) {
  return x5 + c3.x;
}
function maxY(children3) {
  return 1 + children3.reduce(maxYReduce, 0);
}
function maxYReduce(y5, c3) {
  return Math.max(y5, c3.y);
}
function leafLeft(node) {
  var children3;
  while (children3 = node.children)
    node = children3[0];
  return node;
}
function leafRight(node) {
  var children3;
  while (children3 = node.children)
    node = children3[children3.length - 1];
  return node;
}
function cluster_default() {
  var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
  function cluster(root) {
    var previousNode, x5 = 0;
    root.eachAfter(function(node) {
      var children3 = node.children;
      if (children3) {
        node.x = meanX(children3);
        node.y = maxY(children3);
      } else {
        node.x = previousNode ? x5 += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root), right = leafRight(root), x07 = left.x - separation(left, right) / 2, x13 = right.x + separation(right, left) / 2;
    return root.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x07) / (x13 - x07) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }
  cluster.separation = function(x5) {
    return arguments.length ? (separation = x5, cluster) : separation;
  };
  cluster.size = function(x5) {
    return arguments.length ? (nodeSize = false, dx = +x5[0], dy = +x5[1], cluster) : nodeSize ? null : [dx, dy];
  };
  cluster.nodeSize = function(x5) {
    return arguments.length ? (nodeSize = true, dx = +x5[0], dy = +x5[1], cluster) : nodeSize ? [dx, dy] : null;
  };
  return cluster;
}

// node_modules/d3-hierarchy/src/hierarchy/count.js
function count2(node) {
  var sum5 = 0, children3 = node.children, i = children3 && children3.length;
  if (!i)
    sum5 = 1;
  else
    while (--i >= 0)
      sum5 += children3[i].value;
  node.value = sum5;
}
function count_default() {
  return this.eachAfter(count2);
}

// node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default(callback, that) {
  let index5 = -1;
  for (const node of this) {
    callback.call(that, node, ++index5, this);
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback, that) {
  var node = this, nodes = [node], children3, i, index5 = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index5, this);
    if (children3 = node.children) {
      for (i = children3.length - 1; i >= 0; --i) {
        nodes.push(children3[i]);
      }
    }
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback, that) {
  var node = this, nodes = [node], next = [], children3, i, n, index5 = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children3 = node.children) {
      for (i = 0, n = children3.length; i < n; ++i) {
        nodes.push(children3[i]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index5, this);
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/find.js
function find_default2(callback, that) {
  let index5 = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index5, this)) {
      return node;
    }
  }
}

// node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default(value3) {
  return this.eachAfter(function(node) {
    var sum5 = +value3(node.data) || 0, children3 = node.children, i = children3 && children3.length;
    while (--i >= 0)
      sum5 += children3[i].value;
    node.value = sum5;
  });
}

// node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default(compare5) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare5);
    }
  });
}

// node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default3(end) {
  var start = this, ancestor = leastCommonAncestor(start, end), nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k3 = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k3, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a4, b2) {
  if (a4 === b2)
    return a4;
  var aNodes = a4.ancestors(), bNodes = b2.ancestors(), c3 = null;
  a4 = aNodes.pop();
  b2 = bNodes.pop();
  while (a4 === b2) {
    c3 = a4;
    a4 = aNodes.pop();
    b2 = bNodes.pop();
  }
  return c3;
}

// node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

// node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  return Array.from(this);
}

// node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

// node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}

// node_modules/d3-hierarchy/src/hierarchy/iterator.js
function* iterator_default() {
  var node = this, current2, next = [node], children3, i, n;
  do {
    current2 = next.reverse(), next = [];
    while (node = current2.pop()) {
      yield node;
      if (children3 = node.children) {
        for (i = 0, n = children3.length; i < n; ++i) {
          next.push(children3[i]);
        }
      }
    }
  } while (next.length);
}

// node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data3, children3) {
  if (data3 instanceof Map) {
    data3 = [void 0, data3];
    if (children3 === void 0)
      children3 = mapChildren;
  } else if (children3 === void 0) {
    children3 = objectChildren;
  }
  var root = new Node(data3), node, nodes = [root], child, childs, i, n;
  while (node = nodes.pop()) {
    if ((childs = children3(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = childs[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d) {
  return d.children;
}
function mapChildren(d) {
  return Array.isArray(d) ? d[1] : null;
}
function copyData(node) {
  if (node.data.value !== void 0)
    node.value = node.data.value;
  node.data = node.data.data;
}
function computeHeight(node) {
  var height2 = 0;
  do
    node.height = height2;
  while ((node = node.parent) && node.height < ++height2);
}
function Node(data3) {
  this.data = data3;
  this.depth = this.height = 0;
  this.parent = null;
}
Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: count_default,
  each: each_default,
  eachAfter: eachAfter_default,
  eachBefore: eachBefore_default,
  find: find_default2,
  sum: sum_default,
  sort: sort_default,
  path: path_default3,
  ancestors: ancestors_default,
  descendants: descendants_default,
  leaves: leaves_default,
  links: links_default,
  copy: node_copy,
  [Symbol.iterator]: iterator_default
};

// node_modules/d3-hierarchy/src/accessors.js
function optional(f) {
  return f == null ? null : required(f);
}
function required(f) {
  if (typeof f !== "function")
    throw new Error();
  return f;
}

// node_modules/d3-hierarchy/src/constant.js
function constantZero() {
  return 0;
}
function constant_default5(x5) {
  return function() {
    return x5;
  };
}

// node_modules/d3-hierarchy/src/lcg.js
var a3 = 1664525;
var c2 = 1013904223;
var m2 = 4294967296;
function lcg_default2() {
  let s2 = 1;
  return () => (s2 = (a3 * s2 + c2) % m2) / m2;
}

// node_modules/d3-hierarchy/src/array.js
function array_default3(x5) {
  return typeof x5 === "object" && "length" in x5 ? x5 : Array.from(x5);
}
function shuffle(array6, random2) {
  let m3 = array6.length, t4, i;
  while (m3) {
    i = random2() * m3-- | 0;
    t4 = array6[m3];
    array6[m3] = array6[i];
    array6[i] = t4;
  }
  return array6;
}

// node_modules/d3-hierarchy/src/pack/enclose.js
function packEncloseRandom(circles, random2) {
  var i = 0, n = (circles = shuffle(Array.from(circles), random2)).length, B4 = [], p, e3;
  while (i < n) {
    p = circles[i];
    if (e3 && enclosesWeak(e3, p))
      ++i;
    else
      e3 = encloseBasis(B4 = extendBasis(B4, p)), i = 0;
  }
  return e3;
}
function extendBasis(B4, p) {
  var i, j;
  if (enclosesWeakAll(p, B4))
    return [p];
  for (i = 0; i < B4.length; ++i) {
    if (enclosesNot(p, B4[i]) && enclosesWeakAll(encloseBasis2(B4[i], p), B4)) {
      return [B4[i], p];
    }
  }
  for (i = 0; i < B4.length - 1; ++i) {
    for (j = i + 1; j < B4.length; ++j) {
      if (enclosesNot(encloseBasis2(B4[i], B4[j]), p) && enclosesNot(encloseBasis2(B4[i], p), B4[j]) && enclosesNot(encloseBasis2(B4[j], p), B4[i]) && enclosesWeakAll(encloseBasis3(B4[i], B4[j], p), B4)) {
        return [B4[i], B4[j], p];
      }
    }
  }
  throw new Error();
}
function enclosesNot(a4, b2) {
  var dr = a4.r - b2.r, dx = b2.x - a4.x, dy = b2.y - a4.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}
function enclosesWeak(a4, b2) {
  var dr = a4.r - b2.r + Math.max(a4.r, b2.r, 1) * 1e-9, dx = b2.x - a4.x, dy = b2.y - a4.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function enclosesWeakAll(a4, B4) {
  for (var i = 0; i < B4.length; ++i) {
    if (!enclosesWeak(a4, B4[i])) {
      return false;
    }
  }
  return true;
}
function encloseBasis(B4) {
  switch (B4.length) {
    case 1:
      return encloseBasis1(B4[0]);
    case 2:
      return encloseBasis2(B4[0], B4[1]);
    case 3:
      return encloseBasis3(B4[0], B4[1], B4[2]);
  }
}
function encloseBasis1(a4) {
  return {
    x: a4.x,
    y: a4.y,
    r: a4.r
  };
}
function encloseBasis2(a4, b2) {
  var x13 = a4.x, y13 = a4.y, r1 = a4.r, x22 = b2.x, y22 = b2.y, r2 = b2.r, x21 = x22 - x13, y21 = y22 - y13, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x13 + x22 + x21 / l * r21) / 2,
    y: (y13 + y22 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}
function encloseBasis3(a4, b2, c3) {
  var x13 = a4.x, y13 = a4.y, r1 = a4.r, x22 = b2.x, y22 = b2.y, r2 = b2.r, x32 = c3.x, y32 = c3.y, r3 = c3.r, a22 = x13 - x22, a32 = x13 - x32, b22 = y13 - y22, b3 = y13 - y32, c22 = r2 - r1, c32 = r3 - r1, d1 = x13 * x13 + y13 * y13 - r1 * r1, d2 = d1 - x22 * x22 - y22 * y22 + r2 * r2, d3 = d1 - x32 * x32 - y32 * y32 + r3 * r3, ab4 = a32 * b22 - a22 * b3, xa = (b22 * d3 - b3 * d2) / (ab4 * 2) - x13, xb = (b3 * c22 - b22 * c32) / ab4, ya = (a32 * d2 - a22 * d3) / (ab4 * 2) - y13, yb = (a22 * c32 - a32 * c22) / ab4, A6 = xb * xb + yb * yb - 1, B4 = 2 * (r1 + xa * xb + ya * yb), C3 = xa * xa + ya * ya - r1 * r1, r = -(Math.abs(A6) > 1e-6 ? (B4 + Math.sqrt(B4 * B4 - 4 * A6 * C3)) / (2 * A6) : C3 / B4);
  return {
    x: x13 + xa + xb * r,
    y: y13 + ya + yb * r,
    r
  };
}

// node_modules/d3-hierarchy/src/pack/siblings.js
function place(b2, a4, c3) {
  var dx = b2.x - a4.x, x5, a22, dy = b2.y - a4.y, y5, b22, d2 = dx * dx + dy * dy;
  if (d2) {
    a22 = a4.r + c3.r, a22 *= a22;
    b22 = b2.r + c3.r, b22 *= b22;
    if (a22 > b22) {
      x5 = (d2 + b22 - a22) / (2 * d2);
      y5 = Math.sqrt(Math.max(0, b22 / d2 - x5 * x5));
      c3.x = b2.x - x5 * dx - y5 * dy;
      c3.y = b2.y - x5 * dy + y5 * dx;
    } else {
      x5 = (d2 + a22 - b22) / (2 * d2);
      y5 = Math.sqrt(Math.max(0, a22 / d2 - x5 * x5));
      c3.x = a4.x + x5 * dx - y5 * dy;
      c3.y = a4.y + x5 * dy + y5 * dx;
    }
  } else {
    c3.x = a4.x + c3.r;
    c3.y = a4.y;
  }
}
function intersects(a4, b2) {
  var dr = a4.r + b2.r - 1e-6, dx = b2.x - a4.x, dy = b2.y - a4.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function score(node) {
  var a4 = node._, b2 = node.next._, ab4 = a4.r + b2.r, dx = (a4.x * b2.r + b2.x * a4.r) / ab4, dy = (a4.y * b2.r + b2.y * a4.r) / ab4;
  return dx * dx + dy * dy;
}
function Node2(circle3) {
  this._ = circle3;
  this.next = null;
  this.previous = null;
}
function packSiblingsRandom(circles, random2) {
  if (!(n = (circles = array_default3(circles)).length))
    return 0;
  var a4, b2, c3, n, aa2, ca3, i, j, k3, sj, sk;
  a4 = circles[0], a4.x = 0, a4.y = 0;
  if (!(n > 1))
    return a4.r;
  b2 = circles[1], a4.x = -b2.r, b2.x = a4.r, b2.y = 0;
  if (!(n > 2))
    return a4.r + b2.r;
  place(b2, a4, c3 = circles[2]);
  a4 = new Node2(a4), b2 = new Node2(b2), c3 = new Node2(c3);
  a4.next = c3.previous = b2;
  b2.next = a4.previous = c3;
  c3.next = b2.previous = a4;
  pack:
    for (i = 3; i < n; ++i) {
      place(a4._, b2._, c3 = circles[i]), c3 = new Node2(c3);
      j = b2.next, k3 = a4.previous, sj = b2._.r, sk = a4._.r;
      do {
        if (sj <= sk) {
          if (intersects(j._, c3._)) {
            b2 = j, a4.next = b2, b2.previous = a4, --i;
            continue pack;
          }
          sj += j._.r, j = j.next;
        } else {
          if (intersects(k3._, c3._)) {
            a4 = k3, a4.next = b2, b2.previous = a4, --i;
            continue pack;
          }
          sk += k3._.r, k3 = k3.previous;
        }
      } while (j !== k3.next);
      c3.previous = a4, c3.next = b2, a4.next = b2.previous = b2 = c3;
      aa2 = score(a4);
      while ((c3 = c3.next) !== b2) {
        if ((ca3 = score(c3)) < aa2) {
          a4 = c3, aa2 = ca3;
        }
      }
      b2 = a4.next;
    }
  a4 = [b2._], c3 = b2;
  while ((c3 = c3.next) !== b2)
    a4.push(c3._);
  c3 = packEncloseRandom(a4, random2);
  for (i = 0; i < n; ++i)
    a4 = circles[i], a4.x -= c3.x, a4.y -= c3.y;
  return c3.r;
}

// node_modules/d3-hierarchy/src/pack/index.js
function defaultRadius(d) {
  return Math.sqrt(d.value);
}
function pack_default() {
  var radius2 = null, dx = 1, dy = 1, padding3 = constantZero;
  function pack(root) {
    const random2 = lcg_default2();
    root.x = dx / 2, root.y = dy / 2;
    if (radius2) {
      root.eachBefore(radiusLeaf(radius2)).eachAfter(packChildrenRandom(padding3, 0.5, random2)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildrenRandom(constantZero, 1, random2)).eachAfter(packChildrenRandom(padding3, root.r / Math.min(dx, dy), random2)).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }
    return root;
  }
  pack.radius = function(x5) {
    return arguments.length ? (radius2 = optional(x5), pack) : radius2;
  };
  pack.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], pack) : [dx, dy];
  };
  pack.padding = function(x5) {
    return arguments.length ? (padding3 = typeof x5 === "function" ? x5 : constant_default5(+x5), pack) : padding3;
  };
  return pack;
}
function radiusLeaf(radius2) {
  return function(node) {
    if (!node.children) {
      node.r = Math.max(0, +radius2(node) || 0);
    }
  };
}
function packChildrenRandom(padding3, k3, random2) {
  return function(node) {
    if (children3 = node.children) {
      var children3, i, n = children3.length, r = padding3(node) * k3 || 0, e3;
      if (r)
        for (i = 0; i < n; ++i)
          children3[i].r += r;
      e3 = packSiblingsRandom(children3, random2);
      if (r)
        for (i = 0; i < n; ++i)
          children3[i].r -= r;
      node.r = e3 + r;
    }
  };
}
function translateChild(k3) {
  return function(node) {
    var parent = node.parent;
    node.r *= k3;
    if (parent) {
      node.x = parent.x + k3 * node.x;
      node.y = parent.y + k3 * node.y;
    }
  };
}

// node_modules/d3-hierarchy/src/treemap/round.js
function round_default2(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}

// node_modules/d3-hierarchy/src/treemap/dice.js
function dice_default(parent, x07, y07, x13, y13) {
  var nodes = parent.children, node, i = -1, n = nodes.length, k3 = parent.value && (x13 - x07) / parent.value;
  while (++i < n) {
    node = nodes[i], node.y0 = y07, node.y1 = y13;
    node.x0 = x07, node.x1 = x07 += node.value * k3;
  }
}

// node_modules/d3-hierarchy/src/partition.js
function partition_default() {
  var dx = 1, dy = 1, padding3 = 0, round2 = false;
  function partition5(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding3;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round2)
      root.eachBefore(round_default2);
    return root;
  }
  function positionNode(dy2, n) {
    return function(node) {
      if (node.children) {
        dice_default(node, node.x0, dy2 * (node.depth + 1) / n, node.x1, dy2 * (node.depth + 2) / n);
      }
      var x07 = node.x0, y07 = node.y0, x13 = node.x1 - padding3, y13 = node.y1 - padding3;
      if (x13 < x07)
        x07 = x13 = (x07 + x13) / 2;
      if (y13 < y07)
        y07 = y13 = (y07 + y13) / 2;
      node.x0 = x07;
      node.y0 = y07;
      node.x1 = x13;
      node.y1 = y13;
    };
  }
  partition5.round = function(x5) {
    return arguments.length ? (round2 = !!x5, partition5) : round2;
  };
  partition5.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], partition5) : [dx, dy];
  };
  partition5.padding = function(x5) {
    return arguments.length ? (padding3 = +x5, partition5) : padding3;
  };
  return partition5;
}

// node_modules/d3-hierarchy/src/stratify.js
var preroot = { depth: -1 };
var ambiguous = {};
var imputed = {};
function defaultId(d) {
  return d.id;
}
function defaultParentId(d) {
  return d.parentId;
}
function stratify_default() {
  var id2 = defaultId, parentId = defaultParentId, path3;
  function stratify(data3) {
    var nodes = Array.from(data3), currentId = id2, currentParentId = parentId, n, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = /* @__PURE__ */ new Map();
    if (path3 != null) {
      const I = nodes.map((d2, i2) => normalize2(path3(d2, i2, data3)));
      const P = I.map(parentof);
      const S = new Set(I).add("");
      for (const i2 of P) {
        if (!S.has(i2)) {
          S.add(i2);
          I.push(i2);
          P.push(parentof(i2));
          nodes.push(imputed);
        }
      }
      currentId = (_, i2) => I[i2];
      currentParentId = (_, i2) => P[i2];
    }
    for (i = 0, n = nodes.length; i < n; ++i) {
      d = nodes[i], node = nodes[i] = new Node(d);
      if ((nodeId = currentId(d, i, data3)) != null && (nodeId += "")) {
        nodeKey = node.id = nodeId;
        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
      }
      if ((nodeId = currentParentId(d, i, data3)) != null && (nodeId += "")) {
        node.parent = nodeId;
      }
    }
    for (i = 0; i < n; ++i) {
      node = nodes[i];
      if (nodeId = node.parent) {
        parent = nodeByKey.get(nodeId);
        if (!parent)
          throw new Error("missing: " + nodeId);
        if (parent === ambiguous)
          throw new Error("ambiguous: " + nodeId);
        if (parent.children)
          parent.children.push(node);
        else
          parent.children = [node];
        node.parent = parent;
      } else {
        if (root)
          throw new Error("multiple roots");
        root = node;
      }
    }
    if (!root)
      throw new Error("no root");
    if (path3 != null) {
      while (root.data === imputed && root.children.length === 1) {
        root = root.children[0], --n;
      }
      for (let i2 = nodes.length - 1; i2 >= 0; --i2) {
        node = nodes[i2];
        if (node.data !== imputed)
          break;
        node.data = null;
      }
    }
    root.parent = preroot;
    root.eachBefore(function(node2) {
      node2.depth = node2.parent.depth + 1;
      --n;
    }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0)
      throw new Error("cycle");
    return root;
  }
  stratify.id = function(x5) {
    return arguments.length ? (id2 = optional(x5), stratify) : id2;
  };
  stratify.parentId = function(x5) {
    return arguments.length ? (parentId = optional(x5), stratify) : parentId;
  };
  stratify.path = function(x5) {
    return arguments.length ? (path3 = optional(x5), stratify) : path3;
  };
  return stratify;
}
function normalize2(path3) {
  path3 = `${path3}`;
  let i = path3.length;
  if (slash(path3, i - 1) && !slash(path3, i - 2))
    path3 = path3.slice(0, -1);
  return path3[0] === "/" ? path3 : `/${path3}`;
}
function parentof(path3) {
  let i = path3.length;
  if (i < 2)
    return "";
  while (--i > 1)
    if (slash(path3, i))
      break;
  return path3.slice(0, i);
}
function slash(path3, i) {
  if (path3[i] === "/") {
    let k3 = 0;
    while (i > 0 && path3[--i] === "\\")
      ++k3;
    if ((k3 & 1) === 0)
      return true;
  }
  return false;
}

// node_modules/d3-hierarchy/src/tree.js
function defaultSeparation2(a4, b2) {
  return a4.parent === b2.parent ? 1 : 2;
}
function nextLeft(v2) {
  var children3 = v2.children;
  return children3 ? children3[0] : v2.t;
}
function nextRight(v2) {
  var children3 = v2.children;
  return children3 ? children3[children3.length - 1] : v2.t;
}
function moveSubtree(wm, wp, shift) {
  var change2 = shift / (wp.i - wm.i);
  wp.c -= change2;
  wp.s += shift;
  wm.c += change2;
  wp.z += shift;
  wp.m += shift;
}
function executeShifts(v2) {
  var shift = 0, change2 = 0, children3 = v2.children, i = children3.length, w4;
  while (--i >= 0) {
    w4 = children3[i];
    w4.z += shift;
    w4.m += shift;
    shift += w4.s + (change2 += w4.c);
  }
}
function nextAncestor(vim, v2, ancestor) {
  return vim.a.parent === v2.parent ? vim.a : ancestor;
}
function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null;
  this.a = this;
  this.z = 0;
  this.m = 0;
  this.c = 0;
  this.s = 0;
  this.t = null;
  this.i = i;
}
TreeNode.prototype = Object.create(Node.prototype);
function treeRoot(root) {
  var tree = new TreeNode(root, 0), node, nodes = [tree], child, children3, i, n;
  while (node = nodes.pop()) {
    if (children3 = node._.children) {
      node.children = new Array(n = children3.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children3[i], i));
        child.parent = node;
      }
    }
  }
  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}
function tree_default() {
  var separation = defaultSeparation2, dx = 1, dy = 1, nodeSize = null;
  function tree(root) {
    var t4 = treeRoot(root);
    t4.eachAfter(firstWalk), t4.parent.m = -t4.z;
    t4.eachBefore(secondWalk);
    if (nodeSize)
      root.eachBefore(sizeNode);
    else {
      var left = root, right = root, bottom = root;
      root.eachBefore(function(node) {
        if (node.x < left.x)
          left = node;
        if (node.x > right.x)
          right = node;
        if (node.depth > bottom.depth)
          bottom = node;
      });
      var s2 = left === right ? 1 : separation(left, right) / 2, tx = s2 - left.x, kx3 = dx / (right.x + s2 + tx), ky2 = dy / (bottom.depth || 1);
      root.eachBefore(function(node) {
        node.x = (node.x + tx) * kx3;
        node.y = node.depth * ky2;
      });
    }
    return root;
  }
  function firstWalk(v2) {
    var children3 = v2.children, siblings = v2.parent.children, w4 = v2.i ? siblings[v2.i - 1] : null;
    if (children3) {
      executeShifts(v2);
      var midpoint = (children3[0].z + children3[children3.length - 1].z) / 2;
      if (w4) {
        v2.z = w4.z + separation(v2._, w4._);
        v2.m = v2.z - midpoint;
      } else {
        v2.z = midpoint;
      }
    } else if (w4) {
      v2.z = w4.z + separation(v2._, w4._);
    }
    v2.parent.A = apportion(v2, w4, v2.parent.A || siblings[0]);
  }
  function secondWalk(v2) {
    v2._.x = v2.z + v2.parent.m;
    v2.m += v2.parent.m;
  }
  function apportion(v2, w4, ancestor) {
    if (w4) {
      var vip = v2, vop = v2, vim = w4, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v2;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v2, ancestor), v2, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v2;
      }
    }
    return ancestor;
  }
  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }
  tree.separation = function(x5) {
    return arguments.length ? (separation = x5, tree) : separation;
  };
  tree.size = function(x5) {
    return arguments.length ? (nodeSize = false, dx = +x5[0], dy = +x5[1], tree) : nodeSize ? null : [dx, dy];
  };
  tree.nodeSize = function(x5) {
    return arguments.length ? (nodeSize = true, dx = +x5[0], dy = +x5[1], tree) : nodeSize ? [dx, dy] : null;
  };
  return tree;
}

// node_modules/d3-hierarchy/src/treemap/slice.js
function slice_default(parent, x07, y07, x13, y13) {
  var nodes = parent.children, node, i = -1, n = nodes.length, k3 = parent.value && (y13 - y07) / parent.value;
  while (++i < n) {
    node = nodes[i], node.x0 = x07, node.x1 = x13;
    node.y0 = y07, node.y1 = y07 += node.value * k3;
  }
}

// node_modules/d3-hierarchy/src/treemap/squarify.js
var phi = (1 + Math.sqrt(5)) / 2;
function squarifyRatio(ratio, parent, x07, y07, x13, y13) {
  var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value3 = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
  while (i0 < n) {
    dx = x13 - x07, dy = y13 - y07;
    do
      sumValue = nodes[i1++].value;
    while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value3 * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue)
        minValue = nodeValue;
      if (nodeValue > maxValue)
        maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }
      minRatio = newRatio;
    }
    rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
    if (row.dice)
      dice_default(row, x07, y07, x13, value3 ? y07 += dy * sumValue / value3 : y13);
    else
      slice_default(row, x07, y07, value3 ? x07 += dx * sumValue / value3 : x13, y13);
    value3 -= sumValue, i0 = i1;
  }
  return rows;
}
var squarify_default = function custom9(ratio) {
  function squarify(parent, x07, y07, x13, y13) {
    squarifyRatio(ratio, parent, x07, y07, x13, y13);
  }
  squarify.ratio = function(x5) {
    return custom9((x5 = +x5) > 1 ? x5 : 1);
  };
  return squarify;
}(phi);

// node_modules/d3-hierarchy/src/treemap/index.js
function treemap_default() {
  var tile = squarify_default, round2 = false, dx = 1, dy = 1, paddingStack = [0], paddingInner2 = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round2)
      root.eachBefore(round_default2);
    return root;
  }
  function positionNode(node) {
    var p = paddingStack[node.depth], x07 = node.x0 + p, y07 = node.y0 + p, x13 = node.x1 - p, y13 = node.y1 - p;
    if (x13 < x07)
      x07 = x13 = (x07 + x13) / 2;
    if (y13 < y07)
      y07 = y13 = (y07 + y13) / 2;
    node.x0 = x07;
    node.y0 = y07;
    node.x1 = x13;
    node.y1 = y13;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner2(node) / 2;
      x07 += paddingLeft(node) - p;
      y07 += paddingTop(node) - p;
      x13 -= paddingRight(node) - p;
      y13 -= paddingBottom(node) - p;
      if (x13 < x07)
        x07 = x13 = (x07 + x13) / 2;
      if (y13 < y07)
        y07 = y13 = (y07 + y13) / 2;
      tile(node, x07, y07, x13, y13);
    }
  }
  treemap.round = function(x5) {
    return arguments.length ? (round2 = !!x5, treemap) : round2;
  };
  treemap.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], treemap) : [dx, dy];
  };
  treemap.tile = function(x5) {
    return arguments.length ? (tile = required(x5), treemap) : tile;
  };
  treemap.padding = function(x5) {
    return arguments.length ? treemap.paddingInner(x5).paddingOuter(x5) : treemap.paddingInner();
  };
  treemap.paddingInner = function(x5) {
    return arguments.length ? (paddingInner2 = typeof x5 === "function" ? x5 : constant_default5(+x5), treemap) : paddingInner2;
  };
  treemap.paddingOuter = function(x5) {
    return arguments.length ? treemap.paddingTop(x5).paddingRight(x5).paddingBottom(x5).paddingLeft(x5) : treemap.paddingTop();
  };
  treemap.paddingTop = function(x5) {
    return arguments.length ? (paddingTop = typeof x5 === "function" ? x5 : constant_default5(+x5), treemap) : paddingTop;
  };
  treemap.paddingRight = function(x5) {
    return arguments.length ? (paddingRight = typeof x5 === "function" ? x5 : constant_default5(+x5), treemap) : paddingRight;
  };
  treemap.paddingBottom = function(x5) {
    return arguments.length ? (paddingBottom = typeof x5 === "function" ? x5 : constant_default5(+x5), treemap) : paddingBottom;
  };
  treemap.paddingLeft = function(x5) {
    return arguments.length ? (paddingLeft = typeof x5 === "function" ? x5 : constant_default5(+x5), treemap) : paddingLeft;
  };
  return treemap;
}

// node_modules/d3-hierarchy/src/treemap/binary.js
function binary_default(parent, x07, y07, x13, y13) {
  var nodes = parent.children, i, n = nodes.length, sum5, sums = new Array(n + 1);
  for (sums[0] = sum5 = i = 0; i < n; ++i) {
    sums[i + 1] = sum5 += nodes[i].value;
  }
  partition5(0, n, parent.value, x07, y07, x13, y13);
  function partition5(i2, j, value3, x08, y08, x14, y14) {
    if (i2 >= j - 1) {
      var node = nodes[i2];
      node.x0 = x08, node.y0 = y08;
      node.x1 = x14, node.y1 = y14;
      return;
    }
    var valueOffset = sums[i2], valueTarget = value3 / 2 + valueOffset, k3 = i2 + 1, hi = j - 1;
    while (k3 < hi) {
      var mid = k3 + hi >>> 1;
      if (sums[mid] < valueTarget)
        k3 = mid + 1;
      else
        hi = mid;
    }
    if (valueTarget - sums[k3 - 1] < sums[k3] - valueTarget && i2 + 1 < k3)
      --k3;
    var valueLeft = sums[k3] - valueOffset, valueRight = value3 - valueLeft;
    if (x14 - x08 > y14 - y08) {
      var xk = value3 ? (x08 * valueRight + x14 * valueLeft) / value3 : x14;
      partition5(i2, k3, valueLeft, x08, y08, xk, y14);
      partition5(k3, j, valueRight, xk, y08, x14, y14);
    } else {
      var yk = value3 ? (y08 * valueRight + y14 * valueLeft) / value3 : y14;
      partition5(i2, k3, valueLeft, x08, y08, x14, yk);
      partition5(k3, j, valueRight, x08, yk, x14, y14);
    }
  }
}

// node_modules/d3-hierarchy/src/treemap/sliceDice.js
function sliceDice_default(parent, x07, y07, x13, y13) {
  (parent.depth & 1 ? slice_default : dice_default)(parent, x07, y07, x13, y13);
}

// node_modules/d3-hierarchy/src/treemap/resquarify.js
var resquarify_default = function custom10(ratio) {
  function resquarify(parent, x07, y07, x13, y13) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows, row, nodes, i, j = -1, n, m3 = rows.length, value3 = parent.value;
      while (++j < m3) {
        row = rows[j], nodes = row.children;
        for (i = row.value = 0, n = nodes.length; i < n; ++i)
          row.value += nodes[i].value;
        if (row.dice)
          dice_default(row, x07, y07, x13, value3 ? y07 += (y13 - y07) * row.value / value3 : y13);
        else
          slice_default(row, x07, y07, value3 ? x07 += (x13 - x07) * row.value / value3 : x13, y13);
        value3 -= row.value;
      }
    } else {
      parent._squarify = rows = squarifyRatio(ratio, parent, x07, y07, x13, y13);
      rows.ratio = ratio;
    }
  }
  resquarify.ratio = function(x5) {
    return custom10((x5 = +x5) > 1 ? x5 : 1);
  };
  return resquarify;
}(phi);

// node_modules/vega-hierarchy/build/vega-hierarchy.module.js
function lookup3(tree, key2, filter5) {
  const map7 = {};
  tree.each((node) => {
    const t4 = node.data;
    if (filter5(t4))
      map7[key2(t4)] = node;
  });
  tree.lookup = map7;
  return tree;
}
function Nest(params2) {
  Transform.call(this, null, params2);
}
Nest.Definition = {
  "type": "Nest",
  "metadata": {
    "treesource": true,
    "changes": true
  },
  "params": [{
    "name": "keys",
    "type": "field",
    "array": true
  }, {
    "name": "generate",
    "type": "boolean"
  }]
};
var children = (n) => n.values;
inherits(Nest, Transform, {
  transform(_, pulse2) {
    if (!pulse2.source) {
      error("Nest transform requires an upstream data source.");
    }
    var gen = _.generate, mod = _.modified(), out = pulse2.clone(), tree = this.value;
    if (!tree || mod || pulse2.changed()) {
      if (tree) {
        tree.each((node) => {
          if (node.children && isTuple(node.data)) {
            out.rem.push(node.data);
          }
        });
      }
      this.value = tree = hierarchy({
        values: array(_.keys).reduce((n, k3) => {
          n.key(k3);
          return n;
        }, nest()).entries(out.source)
      }, children);
      if (gen) {
        tree.each((node) => {
          if (node.children) {
            node = ingest$1(node.data);
            out.add.push(node);
            out.source.push(node);
          }
        });
      }
      lookup3(tree, tupleid, tupleid);
    }
    out.source.root = tree;
    return out;
  }
});
function nest() {
  const keys5 = [], nest2 = {
    entries: (array6) => entries3(apply3(array6, 0), 0),
    key: (d) => (keys5.push(d), nest2)
  };
  function apply3(array6, depth) {
    if (depth >= keys5.length) {
      return array6;
    }
    const n = array6.length, key2 = keys5[depth++], valuesByKey = {}, result = {};
    let i = -1, keyValue, value3, values5;
    while (++i < n) {
      keyValue = key2(value3 = array6[i]) + "";
      if (values5 = valuesByKey[keyValue]) {
        values5.push(value3);
      } else {
        valuesByKey[keyValue] = [value3];
      }
    }
    for (keyValue in valuesByKey) {
      result[keyValue] = apply3(valuesByKey[keyValue], depth);
    }
    return result;
  }
  function entries3(map7, depth) {
    if (++depth > keys5.length)
      return map7;
    const array6 = [];
    for (const key2 in map7) {
      array6.push({
        key: key2,
        values: entries3(map7[key2], depth)
      });
    }
    return array6;
  }
  return nest2;
}
function HierarchyLayout(params2) {
  Transform.call(this, null, params2);
}
var defaultSeparation3 = (a4, b2) => a4.parent === b2.parent ? 1 : 2;
inherits(HierarchyLayout, Transform, {
  transform(_, pulse2) {
    if (!pulse2.source || !pulse2.source.root) {
      error(this.constructor.name + " transform requires a backing tree data source.");
    }
    const layout = this.layout(_.method), fields = this.fields, root = pulse2.source.root, as = _.as || fields;
    if (_.field)
      root.sum(_.field);
    else
      root.count();
    if (_.sort)
      root.sort(stableCompare(_.sort, (d) => d.data));
    setParams(layout, this.params, _);
    if (layout.separation) {
      layout.separation(_.separation !== false ? defaultSeparation3 : one);
    }
    try {
      this.value = layout(root);
    } catch (err) {
      error(err);
    }
    root.each((node) => setFields(node, fields, as));
    return pulse2.reflow(_.modified()).modifies(as).modifies("leaf");
  }
});
function setParams(layout, params2, _) {
  for (let p, i = 0, n = params2.length; i < n; ++i) {
    p = params2[i];
    if (p in _)
      layout[p](_[p]);
  }
}
function setFields(node, fields, as) {
  const t4 = node.data, n = fields.length - 1;
  for (let i = 0; i < n; ++i) {
    t4[as[i]] = node[fields[i]];
  }
  t4[as[n]] = node.children ? node.children.length : 0;
}
var Output$3 = ["x", "y", "r", "depth", "children"];
function Pack(params2) {
  HierarchyLayout.call(this, params2);
}
Pack.Definition = {
  "type": "Pack",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "padding",
    "type": "number",
    "default": 0
  }, {
    "name": "radius",
    "type": "field",
    "default": null
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output$3.length,
    "default": Output$3
  }]
};
inherits(Pack, HierarchyLayout, {
  layout: pack_default,
  params: ["radius", "size", "padding"],
  fields: Output$3
});
var Output$2 = ["x0", "y0", "x1", "y1", "depth", "children"];
function Partition(params2) {
  HierarchyLayout.call(this, params2);
}
Partition.Definition = {
  "type": "Partition",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "padding",
    "type": "number",
    "default": 0
  }, {
    "name": "round",
    "type": "boolean",
    "default": false
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output$2.length,
    "default": Output$2
  }]
};
inherits(Partition, HierarchyLayout, {
  layout: partition_default,
  params: ["size", "round", "padding"],
  fields: Output$2
});
function Stratify(params2) {
  Transform.call(this, null, params2);
}
Stratify.Definition = {
  "type": "Stratify",
  "metadata": {
    "treesource": true
  },
  "params": [{
    "name": "key",
    "type": "field",
    "required": true
  }, {
    "name": "parentKey",
    "type": "field",
    "required": true
  }]
};
inherits(Stratify, Transform, {
  transform(_, pulse2) {
    if (!pulse2.source) {
      error("Stratify transform requires an upstream data source.");
    }
    let tree = this.value;
    const mod = _.modified(), out = pulse2.fork(pulse2.ALL).materialize(pulse2.SOURCE), run2 = !tree || mod || pulse2.changed(pulse2.ADD_REM) || pulse2.modified(_.key.fields) || pulse2.modified(_.parentKey.fields);
    out.source = out.source.slice();
    if (run2) {
      tree = out.source.length ? lookup3(stratify_default().id(_.key).parentId(_.parentKey)(out.source), _.key, truthy) : lookup3(stratify_default()([{}]), _.key, _.key);
    }
    out.source.root = this.value = tree;
    return out;
  }
});
var Layouts = {
  tidy: tree_default,
  cluster: cluster_default
};
var Output$1 = ["x", "y", "depth", "children"];
function Tree(params2) {
  HierarchyLayout.call(this, params2);
}
Tree.Definition = {
  "type": "Tree",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "method",
    "type": "enum",
    "default": "tidy",
    "values": ["tidy", "cluster"]
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "nodeSize",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "separation",
    "type": "boolean",
    "default": true
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output$1.length,
    "default": Output$1
  }]
};
inherits(Tree, HierarchyLayout, {
  layout(method2) {
    const m3 = method2 || "tidy";
    if (has(Layouts, m3))
      return Layouts[m3]();
    else
      error("Unrecognized Tree layout method: " + m3);
  },
  params: ["size", "nodeSize"],
  fields: Output$1
});
function TreeLinks(params2) {
  Transform.call(this, [], params2);
}
TreeLinks.Definition = {
  "type": "TreeLinks",
  "metadata": {
    "tree": true,
    "generates": true,
    "changes": true
  },
  "params": []
};
inherits(TreeLinks, Transform, {
  transform(_, pulse2) {
    const links = this.value, tree = pulse2.source && pulse2.source.root, out = pulse2.fork(pulse2.NO_SOURCE), lut = {};
    if (!tree)
      error("TreeLinks transform requires a tree data source.");
    if (pulse2.changed(pulse2.ADD_REM)) {
      out.rem = links;
      pulse2.visit(pulse2.SOURCE, (t4) => lut[tupleid(t4)] = 1);
      tree.each((node) => {
        const t4 = node.data, p = node.parent && node.parent.data;
        if (p && lut[tupleid(t4)] && lut[tupleid(p)]) {
          out.add.push(ingest$1({
            source: p,
            target: t4
          }));
        }
      });
      this.value = out.add;
    } else if (pulse2.changed(pulse2.MOD)) {
      pulse2.visit(pulse2.MOD, (t4) => lut[tupleid(t4)] = 1);
      links.forEach((link3) => {
        if (lut[tupleid(link3.source)] || lut[tupleid(link3.target)]) {
          out.mod.push(link3);
        }
      });
    }
    return out;
  }
});
var Tiles = {
  binary: binary_default,
  dice: dice_default,
  slice: slice_default,
  slicedice: sliceDice_default,
  squarify: squarify_default,
  resquarify: resquarify_default
};
var Output2 = ["x0", "y0", "x1", "y1", "depth", "children"];
function Treemap(params2) {
  HierarchyLayout.call(this, params2);
}
Treemap.Definition = {
  "type": "Treemap",
  "metadata": {
    "tree": true,
    "modifies": true
  },
  "params": [{
    "name": "field",
    "type": "field"
  }, {
    "name": "sort",
    "type": "compare"
  }, {
    "name": "method",
    "type": "enum",
    "default": "squarify",
    "values": ["squarify", "resquarify", "binary", "dice", "slice", "slicedice"]
  }, {
    "name": "padding",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingInner",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingOuter",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingTop",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingRight",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingBottom",
    "type": "number",
    "default": 0
  }, {
    "name": "paddingLeft",
    "type": "number",
    "default": 0
  }, {
    "name": "ratio",
    "type": "number",
    "default": 1.618033988749895
  }, {
    "name": "round",
    "type": "boolean",
    "default": false
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": Output2.length,
    "default": Output2
  }]
};
inherits(Treemap, HierarchyLayout, {
  layout() {
    const x5 = treemap_default();
    x5.ratio = (_) => {
      const t4 = x5.tile();
      if (t4.ratio)
        x5.tile(t4.ratio(_));
    };
    x5.method = (_) => {
      if (has(Tiles, _))
        x5.tile(Tiles[_]);
      else
        error("Unrecognized Treemap layout method: " + _);
    };
    return x5;
  },
  params: ["method", "ratio", "size", "round", "padding", "paddingInner", "paddingOuter", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
  fields: Output2
});

// node_modules/vega-label/build/vega-label.module.js
var vega_label_module_exports = {};
__export(vega_label_module_exports, {
  label: () => Label
});
var ALPHA_MASK = 4278190080;
function baseBitmaps($2, data3) {
  const bitmap = $2.bitmap();
  (data3 || []).forEach((d) => bitmap.set($2(d.boundary[0]), $2(d.boundary[3])));
  return [bitmap, void 0];
}
function markBitmaps($2, baseMark, avoidMarks, labelInside, isGroupArea) {
  const width2 = $2.width, height2 = $2.height, border = labelInside || isGroupArea, context3 = domCanvas(width2, height2).getContext("2d"), baseMarkContext = domCanvas(width2, height2).getContext("2d"), strokeContext = border && domCanvas(width2, height2).getContext("2d");
  avoidMarks.forEach((items) => draw2(context3, items, false));
  draw2(baseMarkContext, baseMark, false);
  if (border) {
    draw2(strokeContext, baseMark, true);
  }
  const buffer = getBuffer(context3, width2, height2), baseMarkBuffer = getBuffer(baseMarkContext, width2, height2), strokeBuffer = border && getBuffer(strokeContext, width2, height2), layer1 = $2.bitmap(), layer2 = border && $2.bitmap();
  let x5, y5, u4, v2, index5, alpha, strokeAlpha, baseMarkAlpha;
  for (y5 = 0; y5 < height2; ++y5) {
    for (x5 = 0; x5 < width2; ++x5) {
      index5 = y5 * width2 + x5;
      alpha = buffer[index5] & ALPHA_MASK;
      baseMarkAlpha = baseMarkBuffer[index5] & ALPHA_MASK;
      strokeAlpha = border && strokeBuffer[index5] & ALPHA_MASK;
      if (alpha || strokeAlpha || baseMarkAlpha) {
        u4 = $2(x5);
        v2 = $2(y5);
        if (!isGroupArea && (alpha || baseMarkAlpha))
          layer1.set(u4, v2);
        if (border && (alpha || strokeAlpha))
          layer2.set(u4, v2);
      }
    }
  }
  return [layer1, layer2];
}
function getBuffer(context3, width2, height2) {
  return new Uint32Array(context3.getImageData(0, 0, width2, height2).data.buffer);
}
function draw2(context3, items, interior) {
  if (!items.length)
    return;
  const type3 = items[0].mark.marktype;
  if (type3 === "group") {
    items.forEach((group4) => {
      group4.items.forEach((mark2) => draw2(context3, mark2.items, interior));
    });
  } else {
    Marks[type3].draw(context3, {
      items: interior ? items.map(prepare) : items
    });
  }
}
function prepare(source3) {
  const item = rederive(source3, {});
  if (item.stroke && item.strokeOpacity !== 0 || item.fill && item.fillOpacity !== 0) {
    return {
      ...item,
      strokeOpacity: 1,
      stroke: "#000",
      fillOpacity: 0
    };
  }
  return item;
}
var DIV = 5;
var MOD2 = 31;
var SIZE = 32;
var RIGHT0 = new Uint32Array(SIZE + 1);
var RIGHT1 = new Uint32Array(SIZE + 1);
RIGHT1[0] = 0;
RIGHT0[0] = ~RIGHT1[0];
for (let i = 1; i <= SIZE; ++i) {
  RIGHT1[i] = RIGHT1[i - 1] << 1 | 1;
  RIGHT0[i] = ~RIGHT1[i];
}
function Bitmap(w4, h2) {
  const array6 = new Uint32Array(~~((w4 * h2 + SIZE) / SIZE));
  function _set(index5, mask) {
    array6[index5] |= mask;
  }
  function _clear(index5, mask) {
    array6[index5] &= mask;
  }
  return {
    array: array6,
    get: (x5, y5) => {
      const index5 = y5 * w4 + x5;
      return array6[index5 >>> DIV] & 1 << (index5 & MOD2);
    },
    set: (x5, y5) => {
      const index5 = y5 * w4 + x5;
      _set(index5 >>> DIV, 1 << (index5 & MOD2));
    },
    clear: (x5, y5) => {
      const index5 = y5 * w4 + x5;
      _clear(index5 >>> DIV, ~(1 << (index5 & MOD2)));
    },
    getRange: (x5, y5, x22, y22) => {
      let r = y22, start, end, indexStart, indexEnd;
      for (; r >= y5; --r) {
        start = r * w4 + x5;
        end = r * w4 + x22;
        indexStart = start >>> DIV;
        indexEnd = end >>> DIV;
        if (indexStart === indexEnd) {
          if (array6[indexStart] & RIGHT0[start & MOD2] & RIGHT1[(end & MOD2) + 1]) {
            return true;
          }
        } else {
          if (array6[indexStart] & RIGHT0[start & MOD2])
            return true;
          if (array6[indexEnd] & RIGHT1[(end & MOD2) + 1])
            return true;
          for (let i = indexStart + 1; i < indexEnd; ++i) {
            if (array6[i])
              return true;
          }
        }
      }
      return false;
    },
    setRange: (x5, y5, x22, y22) => {
      let start, end, indexStart, indexEnd, i;
      for (; y5 <= y22; ++y5) {
        start = y5 * w4 + x5;
        end = y5 * w4 + x22;
        indexStart = start >>> DIV;
        indexEnd = end >>> DIV;
        if (indexStart === indexEnd) {
          _set(indexStart, RIGHT0[start & MOD2] & RIGHT1[(end & MOD2) + 1]);
        } else {
          _set(indexStart, RIGHT0[start & MOD2]);
          _set(indexEnd, RIGHT1[(end & MOD2) + 1]);
          for (i = indexStart + 1; i < indexEnd; ++i)
            _set(i, 4294967295);
        }
      }
    },
    clearRange: (x5, y5, x22, y22) => {
      let start, end, indexStart, indexEnd, i;
      for (; y5 <= y22; ++y5) {
        start = y5 * w4 + x5;
        end = y5 * w4 + x22;
        indexStart = start >>> DIV;
        indexEnd = end >>> DIV;
        if (indexStart === indexEnd) {
          _clear(indexStart, RIGHT1[start & MOD2] | RIGHT0[(end & MOD2) + 1]);
        } else {
          _clear(indexStart, RIGHT1[start & MOD2]);
          _clear(indexEnd, RIGHT0[(end & MOD2) + 1]);
          for (i = indexStart + 1; i < indexEnd; ++i)
            _clear(i, 0);
        }
      }
    },
    outOfBounds: (x5, y5, x22, y22) => x5 < 0 || y5 < 0 || y22 >= h2 || x22 >= w4
  };
}
function scaler(width2, height2, padding3) {
  const ratio = Math.max(1, Math.sqrt(width2 * height2 / 1e6)), w4 = ~~((width2 + 2 * padding3 + ratio) / ratio), h2 = ~~((height2 + 2 * padding3 + ratio) / ratio), scale7 = (_) => ~~((_ + padding3) / ratio);
  scale7.invert = (_) => _ * ratio - padding3;
  scale7.bitmap = () => Bitmap(w4, h2);
  scale7.ratio = ratio;
  scale7.padding = padding3;
  scale7.width = width2;
  scale7.height = height2;
  return scale7;
}
function placeAreaLabelNaive($2, bitmaps, avoidBaseMark, markIndex) {
  const width2 = $2.width, height2 = $2.height;
  return function(d) {
    const items = d.datum.datum.items[markIndex].items, n = items.length, textHeight = d.datum.fontSize, textWidth = textMetrics.width(d.datum, d.datum.text);
    let maxAreaWidth = 0, x13, x22, y13, y22, x5, y5, areaWidth;
    for (let i = 0; i < n; ++i) {
      x13 = items[i].x;
      y13 = items[i].y;
      x22 = items[i].x2 === void 0 ? x13 : items[i].x2;
      y22 = items[i].y2 === void 0 ? y13 : items[i].y2;
      x5 = (x13 + x22) / 2;
      y5 = (y13 + y22) / 2;
      areaWidth = Math.abs(x22 - x13 + y22 - y13);
      if (areaWidth >= maxAreaWidth) {
        maxAreaWidth = areaWidth;
        d.x = x5;
        d.y = y5;
      }
    }
    x5 = textWidth / 2;
    y5 = textHeight / 2;
    x13 = d.x - x5;
    x22 = d.x + x5;
    y13 = d.y - y5;
    y22 = d.y + y5;
    d.align = "center";
    if (x13 < 0 && x22 <= width2) {
      d.align = "left";
    } else if (0 <= x13 && width2 < x22) {
      d.align = "right";
    }
    d.baseline = "middle";
    if (y13 < 0 && y22 <= height2) {
      d.baseline = "top";
    } else if (0 <= y13 && height2 < y22) {
      d.baseline = "bottom";
    }
    return true;
  };
}
function outOfBounds(x5, y5, textWidth, textHeight, width2, height2) {
  let r = textWidth / 2;
  return x5 - r < 0 || x5 + r > width2 || y5 - (r = textHeight / 2) < 0 || y5 + r > height2;
}
function collision($2, x5, y5, textHeight, textWidth, h2, bm0, bm1) {
  const w4 = textWidth * h2 / (textHeight * 2), x13 = $2(x5 - w4), x22 = $2(x5 + w4), y13 = $2(y5 - (h2 = h2 / 2)), y22 = $2(y5 + h2);
  return bm0.outOfBounds(x13, y13, x22, y22) || bm0.getRange(x13, y13, x22, y22) || bm1 && bm1.getRange(x13, y13, x22, y22);
}
function placeAreaLabelReducedSearch($2, bitmaps, avoidBaseMark, markIndex) {
  const width2 = $2.width, height2 = $2.height, bm0 = bitmaps[0], bm1 = bitmaps[1];
  function tryLabel(_x3, _y3, maxSize, textWidth, textHeight) {
    const x5 = $2.invert(_x3), y5 = $2.invert(_y3);
    let lo = maxSize, hi = height2, mid;
    if (!outOfBounds(x5, y5, textWidth, textHeight, width2, height2) && !collision($2, x5, y5, textHeight, textWidth, lo, bm0, bm1) && !collision($2, x5, y5, textHeight, textWidth, textHeight, bm0, null)) {
      while (hi - lo >= 1) {
        mid = (lo + hi) / 2;
        if (collision($2, x5, y5, textHeight, textWidth, mid, bm0, bm1)) {
          hi = mid;
        } else {
          lo = mid;
        }
      }
      if (lo > maxSize) {
        return [x5, y5, lo, true];
      }
    }
  }
  return function(d) {
    const items = d.datum.datum.items[markIndex].items, n = items.length, textHeight = d.datum.fontSize, textWidth = textMetrics.width(d.datum, d.datum.text);
    let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x13, x22, y13, y22, x5, y5, _x3, _y3, _x1, _xMid, _x22, _y1, _yMid, _y22, areaWidth, result, swapTmp;
    for (let i = 0; i < n; ++i) {
      x13 = items[i].x;
      y13 = items[i].y;
      x22 = items[i].x2 === void 0 ? x13 : items[i].x2;
      y22 = items[i].y2 === void 0 ? y13 : items[i].y2;
      if (x13 > x22) {
        swapTmp = x13;
        x13 = x22;
        x22 = swapTmp;
      }
      if (y13 > y22) {
        swapTmp = y13;
        y13 = y22;
        y22 = swapTmp;
      }
      _x1 = $2(x13);
      _x22 = $2(x22);
      _xMid = ~~((_x1 + _x22) / 2);
      _y1 = $2(y13);
      _y22 = $2(y22);
      _yMid = ~~((_y1 + _y22) / 2);
      for (_x3 = _xMid; _x3 >= _x1; --_x3) {
        for (_y3 = _yMid; _y3 >= _y1; --_y3) {
          result = tryLabel(_x3, _y3, maxSize, textWidth, textHeight);
          if (result) {
            [d.x, d.y, maxSize, labelPlaced] = result;
          }
        }
      }
      for (_x3 = _xMid; _x3 <= _x22; ++_x3) {
        for (_y3 = _yMid; _y3 <= _y22; ++_y3) {
          result = tryLabel(_x3, _y3, maxSize, textWidth, textHeight);
          if (result) {
            [d.x, d.y, maxSize, labelPlaced] = result;
          }
        }
      }
      if (!labelPlaced && !avoidBaseMark) {
        areaWidth = Math.abs(x22 - x13 + y22 - y13);
        x5 = (x13 + x22) / 2;
        y5 = (y13 + y22) / 2;
        if (areaWidth >= maxAreaWidth && !outOfBounds(x5, y5, textWidth, textHeight, width2, height2) && !collision($2, x5, y5, textHeight, textWidth, textHeight, bm0, null)) {
          maxAreaWidth = areaWidth;
          d.x = x5;
          d.y = y5;
          labelPlaced2 = true;
        }
      }
    }
    if (labelPlaced || labelPlaced2) {
      x5 = textWidth / 2;
      y5 = textHeight / 2;
      bm0.setRange($2(d.x - x5), $2(d.y - y5), $2(d.x + x5), $2(d.y + y5));
      d.align = "center";
      d.baseline = "middle";
      return true;
    } else {
      return false;
    }
  };
}
var X_DIR = [-1, -1, 1, 1];
var Y_DIR = [-1, 1, -1, 1];
function placeAreaLabelFloodFill($2, bitmaps, avoidBaseMark, markIndex) {
  const width2 = $2.width, height2 = $2.height, bm0 = bitmaps[0], bm1 = bitmaps[1], bm2 = $2.bitmap();
  return function(d) {
    const items = d.datum.datum.items[markIndex].items, n = items.length, textHeight = d.datum.fontSize, textWidth = textMetrics.width(d.datum, d.datum.text), stack2 = [];
    let maxSize = avoidBaseMark ? textHeight : 0, labelPlaced = false, labelPlaced2 = false, maxAreaWidth = 0, x13, x22, y13, y22, x5, y5, _x3, _y3, lo, hi, mid, areaWidth;
    for (let i = 0; i < n; ++i) {
      x13 = items[i].x;
      y13 = items[i].y;
      x22 = items[i].x2 === void 0 ? x13 : items[i].x2;
      y22 = items[i].y2 === void 0 ? y13 : items[i].y2;
      stack2.push([$2((x13 + x22) / 2), $2((y13 + y22) / 2)]);
      while (stack2.length) {
        [_x3, _y3] = stack2.pop();
        if (bm0.get(_x3, _y3) || bm1.get(_x3, _y3) || bm2.get(_x3, _y3))
          continue;
        bm2.set(_x3, _y3);
        for (let j = 0; j < 4; ++j) {
          x5 = _x3 + X_DIR[j];
          y5 = _y3 + Y_DIR[j];
          if (!bm2.outOfBounds(x5, y5, x5, y5))
            stack2.push([x5, y5]);
        }
        x5 = $2.invert(_x3);
        y5 = $2.invert(_y3);
        lo = maxSize;
        hi = height2;
        if (!outOfBounds(x5, y5, textWidth, textHeight, width2, height2) && !collision($2, x5, y5, textHeight, textWidth, lo, bm0, bm1) && !collision($2, x5, y5, textHeight, textWidth, textHeight, bm0, null)) {
          while (hi - lo >= 1) {
            mid = (lo + hi) / 2;
            if (collision($2, x5, y5, textHeight, textWidth, mid, bm0, bm1)) {
              hi = mid;
            } else {
              lo = mid;
            }
          }
          if (lo > maxSize) {
            d.x = x5;
            d.y = y5;
            maxSize = lo;
            labelPlaced = true;
          }
        }
      }
      if (!labelPlaced && !avoidBaseMark) {
        areaWidth = Math.abs(x22 - x13 + y22 - y13);
        x5 = (x13 + x22) / 2;
        y5 = (y13 + y22) / 2;
        if (areaWidth >= maxAreaWidth && !outOfBounds(x5, y5, textWidth, textHeight, width2, height2) && !collision($2, x5, y5, textHeight, textWidth, textHeight, bm0, null)) {
          maxAreaWidth = areaWidth;
          d.x = x5;
          d.y = y5;
          labelPlaced2 = true;
        }
      }
    }
    if (labelPlaced || labelPlaced2) {
      x5 = textWidth / 2;
      y5 = textHeight / 2;
      bm0.setRange($2(d.x - x5), $2(d.y - y5), $2(d.x + x5), $2(d.y + y5));
      d.align = "center";
      d.baseline = "middle";
      return true;
    } else {
      return false;
    }
  };
}
var Aligns = ["right", "center", "left"];
var Baselines = ["bottom", "middle", "top"];
function placeMarkLabel($2, bitmaps, anchors, offsets2) {
  const width2 = $2.width, height2 = $2.height, bm0 = bitmaps[0], bm1 = bitmaps[1], n = offsets2.length;
  return function(d) {
    var _d$textWidth;
    const boundary = d.boundary, textHeight = d.datum.fontSize;
    if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width2 || boundary[3] > height2) {
      return false;
    }
    let textWidth = (_d$textWidth = d.textWidth) !== null && _d$textWidth !== void 0 ? _d$textWidth : 0, dx, dy, isInside, sizeFactor, insideFactor, x13, x22, y13, y22, xc, yc, _x1, _x22, _y1, _y22;
    for (let i = 0; i < n; ++i) {
      dx = (anchors[i] & 3) - 1;
      dy = (anchors[i] >>> 2 & 3) - 1;
      isInside = dx === 0 && dy === 0 || offsets2[i] < 0;
      sizeFactor = dx && dy ? Math.SQRT1_2 : 1;
      insideFactor = offsets2[i] < 0 ? -1 : 1;
      x13 = boundary[1 + dx] + offsets2[i] * dx * sizeFactor;
      yc = boundary[4 + dy] + insideFactor * textHeight * dy / 2 + offsets2[i] * dy * sizeFactor;
      y13 = yc - textHeight / 2;
      y22 = yc + textHeight / 2;
      _x1 = $2(x13);
      _y1 = $2(y13);
      _y22 = $2(y22);
      if (!textWidth) {
        if (!test(_x1, _x1, _y1, _y22, bm0, bm1, x13, x13, y13, y22, boundary, isInside)) {
          continue;
        } else {
          textWidth = textMetrics.width(d.datum, d.datum.text);
        }
      }
      xc = x13 + insideFactor * textWidth * dx / 2;
      x13 = xc - textWidth / 2;
      x22 = xc + textWidth / 2;
      _x1 = $2(x13);
      _x22 = $2(x22);
      if (test(_x1, _x22, _y1, _y22, bm0, bm1, x13, x22, y13, y22, boundary, isInside)) {
        d.x = !dx ? xc : dx * insideFactor < 0 ? x22 : x13;
        d.y = !dy ? yc : dy * insideFactor < 0 ? y22 : y13;
        d.align = Aligns[dx * insideFactor + 1];
        d.baseline = Baselines[dy * insideFactor + 1];
        bm0.setRange(_x1, _y1, _x22, _y22);
        return true;
      }
    }
    return false;
  };
}
function test(_x1, _x22, _y1, _y22, bm0, bm1, x13, x22, y13, y22, boundary, isInside) {
  return !(bm0.outOfBounds(_x1, _y1, _x22, _y22) || (isInside && bm1 || bm0).getRange(_x1, _y1, _x22, _y22));
}
var TOP = 0;
var MIDDLE = 4;
var BOTTOM = 8;
var LEFT = 0;
var CENTER = 1;
var RIGHT = 2;
var anchorCode = {
  "top-left": TOP + LEFT,
  "top": TOP + CENTER,
  "top-right": TOP + RIGHT,
  "left": MIDDLE + LEFT,
  "middle": MIDDLE + CENTER,
  "right": MIDDLE + RIGHT,
  "bottom-left": BOTTOM + LEFT,
  "bottom": BOTTOM + CENTER,
  "bottom-right": BOTTOM + RIGHT
};
var placeAreaLabel = {
  "naive": placeAreaLabelNaive,
  "reduced-search": placeAreaLabelReducedSearch,
  "floodfill": placeAreaLabelFloodFill
};
function labelLayout(texts, size, compare5, offset4, anchor, avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding3, method2) {
  if (!texts.length)
    return texts;
  const positions = Math.max(offset4.length, anchor.length), offsets2 = getOffsets(offset4, positions), anchors = getAnchors(anchor, positions), marktype = markType(texts[0].datum), grouptype = marktype === "group" && texts[0].datum.items[markIndex].marktype, isGroupArea = grouptype === "area", boundary = markBoundary(marktype, grouptype, lineAnchor, markIndex), infPadding = padding3 === null || padding3 === Infinity, isNaiveGroupArea = isGroupArea && method2 === "naive";
  let maxTextWidth = -1, maxTextHeight = -1;
  const data3 = texts.map((d) => {
    const textWidth = infPadding ? textMetrics.width(d, d.text) : void 0;
    maxTextWidth = Math.max(maxTextWidth, textWidth);
    maxTextHeight = Math.max(maxTextHeight, d.fontSize);
    return {
      datum: d,
      opacity: 0,
      x: void 0,
      y: void 0,
      align: void 0,
      baseline: void 0,
      boundary: boundary(d),
      textWidth
    };
  });
  padding3 = padding3 === null || padding3 === Infinity ? Math.max(maxTextWidth, maxTextHeight) + Math.max(...offset4) : padding3;
  const $2 = scaler(size[0], size[1], padding3);
  let bitmaps;
  if (!isNaiveGroupArea) {
    if (compare5) {
      data3.sort((a4, b2) => compare5(a4.datum, b2.datum));
    }
    let labelInside = false;
    for (let i = 0; i < anchors.length && !labelInside; ++i) {
      labelInside = anchors[i] === 5 || offsets2[i] < 0;
    }
    const baseMark = (marktype && avoidBaseMark || isGroupArea) && texts.map((d) => d.datum);
    bitmaps = avoidMarks.length || baseMark ? markBitmaps($2, baseMark || [], avoidMarks, labelInside, isGroupArea) : baseBitmaps($2, avoidBaseMark && data3);
  }
  const place2 = isGroupArea ? placeAreaLabel[method2]($2, bitmaps, avoidBaseMark, markIndex) : placeMarkLabel($2, bitmaps, anchors, offsets2);
  data3.forEach((d) => d.opacity = +place2(d));
  return data3;
}
function getOffsets(_, count4) {
  const offsets2 = new Float64Array(count4), n = _.length;
  for (let i = 0; i < n; ++i)
    offsets2[i] = _[i] || 0;
  for (let i = n; i < count4; ++i)
    offsets2[i] = offsets2[n - 1];
  return offsets2;
}
function getAnchors(_, count4) {
  const anchors = new Int8Array(count4), n = _.length;
  for (let i = 0; i < n; ++i)
    anchors[i] |= anchorCode[_[i]];
  for (let i = n; i < count4; ++i)
    anchors[i] = anchors[n - 1];
  return anchors;
}
function markType(item) {
  return item && item.mark && item.mark.marktype;
}
function markBoundary(marktype, grouptype, lineAnchor, markIndex) {
  const xy = (d) => [d.x, d.x, d.x, d.y, d.y, d.y];
  if (!marktype) {
    return xy;
  } else if (marktype === "line" || marktype === "area") {
    return (d) => xy(d.datum);
  } else if (grouptype === "line") {
    return (d) => {
      const items = d.datum.items[markIndex].items;
      return xy(items.length ? items[lineAnchor === "start" ? 0 : items.length - 1] : {
        x: NaN,
        y: NaN
      });
    };
  } else {
    return (d) => {
      const b2 = d.datum.bounds;
      return [b2.x1, (b2.x1 + b2.x2) / 2, b2.x2, b2.y1, (b2.y1 + b2.y2) / 2, b2.y2];
    };
  }
}
var Output3 = ["x", "y", "opacity", "align", "baseline"];
var Anchors = ["top-left", "left", "bottom-left", "top", "bottom", "top-right", "right", "bottom-right"];
function Label(params2) {
  Transform.call(this, null, params2);
}
Label.Definition = {
  type: "Label",
  metadata: {
    modifies: true
  },
  params: [{
    name: "size",
    type: "number",
    array: true,
    length: 2,
    required: true
  }, {
    name: "sort",
    type: "compare"
  }, {
    name: "anchor",
    type: "string",
    array: true,
    default: Anchors
  }, {
    name: "offset",
    type: "number",
    array: true,
    default: [1]
  }, {
    name: "padding",
    type: "number",
    default: 0,
    null: true
  }, {
    name: "lineAnchor",
    type: "string",
    values: ["start", "end"],
    default: "end"
  }, {
    name: "markIndex",
    type: "number",
    default: 0
  }, {
    name: "avoidBaseMark",
    type: "boolean",
    default: true
  }, {
    name: "avoidMarks",
    type: "data",
    array: true
  }, {
    name: "method",
    type: "string",
    default: "naive"
  }, {
    name: "as",
    type: "string",
    array: true,
    length: Output3.length,
    default: Output3
  }]
};
inherits(Label, Transform, {
  transform(_, pulse2) {
    function modp(param2) {
      const p = _[param2];
      return isFunction(p) && pulse2.modified(p.fields);
    }
    const mod = _.modified();
    if (!(mod || pulse2.changed(pulse2.ADD_REM) || modp("sort")))
      return;
    if (!_.size || _.size.length !== 2) {
      error("Size parameter should be specified as a [width, height] array.");
    }
    const as = _.as || Output3;
    labelLayout(pulse2.materialize(pulse2.SOURCE).source || [], _.size, _.sort, array(_.offset == null ? 1 : _.offset), array(_.anchor || Anchors), _.avoidMarks || [], _.avoidBaseMark !== false, _.lineAnchor || "end", _.markIndex || 0, _.padding === void 0 ? 0 : _.padding, _.method || "naive").forEach((l) => {
      const t4 = l.datum;
      t4[as[0]] = l.x;
      t4[as[1]] = l.y;
      t4[as[2]] = l.opacity;
      t4[as[3]] = l.align;
      t4[as[4]] = l.baseline;
    });
    return pulse2.reflow(mod).modifies(as);
  }
});

// node_modules/vega-regression/build/vega-regression.module.js
var vega_regression_module_exports = {};
__export(vega_regression_module_exports, {
  loess: () => Loess,
  regression: () => Regression
});
function partition4(data3, groupby) {
  var groups3 = [], get7 = function(f) {
    return f(t4);
  }, map7, i, n, t4, k3, g;
  if (groupby == null) {
    groups3.push(data3);
  } else {
    for (map7 = {}, i = 0, n = data3.length; i < n; ++i) {
      t4 = data3[i];
      k3 = groupby.map(get7);
      g = map7[k3];
      if (!g) {
        map7[k3] = g = [];
        g.dims = k3;
        groups3.push(g);
      }
      g.push(t4);
    }
  }
  return groups3;
}
function Loess(params2) {
  Transform.call(this, null, params2);
}
Loess.Definition = {
  "type": "Loess",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "x",
    "type": "field",
    "required": true
  }, {
    "name": "y",
    "type": "field",
    "required": true
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "bandwidth",
    "type": "number",
    "default": 0.3
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }]
};
inherits(Loess, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    if (!this.value || pulse2.changed() || _.modified()) {
      const source3 = pulse2.materialize(pulse2.SOURCE).source, groups3 = partition4(source3, _.groupby), names = (_.groupby || []).map(accessorName), m3 = names.length, as = _.as || [accessorName(_.x), accessorName(_.y)], values5 = [];
      groups3.forEach((g) => {
        loess(g, _.x, _.y, _.bandwidth || 0.3).forEach((p) => {
          const t4 = {};
          for (let i = 0; i < m3; ++i) {
            t4[names[i]] = g.dims[i];
          }
          t4[as[0]] = p[0];
          t4[as[1]] = p[1];
          values5.push(ingest$1(t4));
        });
      });
      if (this.value)
        out.rem = this.value;
      this.value = out.add = out.source = values5;
    }
    return out;
  }
});
var Methods2 = {
  linear,
  log: log2,
  exp: exp2,
  pow: pow2,
  quad,
  poly
};
var degreesOfFreedom = (method2, order) => method2 === "poly" ? order : method2 === "quad" ? 2 : 1;
function Regression(params2) {
  Transform.call(this, null, params2);
}
Regression.Definition = {
  "type": "Regression",
  "metadata": {
    "generates": true
  },
  "params": [{
    "name": "x",
    "type": "field",
    "required": true
  }, {
    "name": "y",
    "type": "field",
    "required": true
  }, {
    "name": "groupby",
    "type": "field",
    "array": true
  }, {
    "name": "method",
    "type": "string",
    "default": "linear",
    "values": Object.keys(Methods2)
  }, {
    "name": "order",
    "type": "number",
    "default": 3
  }, {
    "name": "extent",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "params",
    "type": "boolean",
    "default": false
  }, {
    "name": "as",
    "type": "string",
    "array": true
  }]
};
inherits(Regression, Transform, {
  transform(_, pulse2) {
    const out = pulse2.fork(pulse2.NO_SOURCE | pulse2.NO_FIELDS);
    if (!this.value || pulse2.changed() || _.modified()) {
      const source3 = pulse2.materialize(pulse2.SOURCE).source, groups3 = partition4(source3, _.groupby), names = (_.groupby || []).map(accessorName), method2 = _.method || "linear", order = _.order || 3, dof = degreesOfFreedom(method2, order), as = _.as || [accessorName(_.x), accessorName(_.y)], fit3 = Methods2[method2], values5 = [];
      let domain4 = _.extent;
      if (!has(Methods2, method2)) {
        error("Invalid regression method: " + method2);
      }
      if (domain4 != null) {
        if (method2 === "log" && domain4[0] <= 0) {
          pulse2.dataflow.warn("Ignoring extent with values <= 0 for log regression.");
          domain4 = null;
        }
      }
      groups3.forEach((g) => {
        const n = g.length;
        if (n <= dof) {
          pulse2.dataflow.warn("Skipping regression with more parameters than data points.");
          return;
        }
        const model = fit3(g, _.x, _.y, order);
        if (_.params) {
          values5.push(ingest$1({
            keys: g.dims,
            coef: model.coef,
            rSquared: model.rSquared
          }));
          return;
        }
        const dom = domain4 || extent(g, _.x), add6 = (p) => {
          const t4 = {};
          for (let i = 0; i < names.length; ++i) {
            t4[names[i]] = g.dims[i];
          }
          t4[as[0]] = p[0];
          t4[as[1]] = p[1];
          values5.push(ingest$1(t4));
        };
        if (method2 === "linear") {
          dom.forEach((x5) => add6([x5, model.predict(x5)]));
        } else {
          sampleCurve(model.predict, dom, 25, 200).forEach(add6);
        }
      });
      if (this.value)
        out.rem = this.value;
      this.value = out.add = out.source = values5;
    }
    return out;
  }
});

// node_modules/vega-voronoi/build/vega-voronoi.module.js
var vega_voronoi_module_exports = {};
__export(vega_voronoi_module_exports, {
  voronoi: () => Voronoi2
});

// node_modules/robust-predicates/esm/util.js
var epsilon7 = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon7) * epsilon7;
function sum3(elen, e3, flen, f, h2) {
  let Q, Qnew, hh, bvirt;
  let enow = e3[0];
  let fnow = f[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q = enow;
    enow = e3[++eindex];
  } else {
    Q = fnow;
    fnow = f[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q;
      hh = Q - (Qnew - enow);
      enow = e3[++eindex];
    } else {
      Qnew = fnow + Q;
      hh = Q - (Qnew - fnow);
      fnow = f[++findex];
    }
    Q = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e3[++eindex];
      } else {
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h2[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q + enow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (enow - bvirt);
    enow = e3[++eindex];
    Q = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q + fnow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f[++findex];
    Q = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  if (Q !== 0 || hindex === 0) {
    h2[hindex++] = Q;
  }
  return hindex;
}
function estimate(elen, e3) {
  let Q = e3[0];
  for (let i = 1; i < elen; i++)
    Q += e3[i];
  return Q;
}
function vec(n) {
  return new Float64Array(n);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon7) * epsilon7;
var ccwerrboundB = (2 + 12 * epsilon7) * epsilon7;
var ccwerrboundC = (9 + 64 * epsilon7) * epsilon7 * epsilon7;
var B3 = vec(4);
var C1 = vec(8);
var C22 = vec(12);
var D2 = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c3, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t13, t04, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c3 = splitter * acx;
  ahi = c3 - (c3 - acx);
  alo = acx - ahi;
  c3 = splitter * bcy;
  bhi = c3 - (c3 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcx;
  c3 = splitter * acy;
  ahi = c3 - (c3 - acy);
  alo = acy - ahi;
  c3 = splitter * bcx;
  bhi = c3 - (c3 - bcx);
  blo = bcx - bhi;
  t04 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  B3[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  B3[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B3[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B3[3] = u32;
  let det = estimate(4, B3);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound)
    return det;
  s1 = acxtail * bcy;
  c3 = splitter * acxtail;
  ahi = c3 - (c3 - acxtail);
  alo = acxtail - ahi;
  c3 = splitter * bcy;
  bhi = c3 - (c3 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcx;
  c3 = splitter * acytail;
  ahi = c3 - (c3 - acytail);
  alo = acytail - ahi;
  c3 = splitter * bcx;
  bhi = c3 - (c3 - bcx);
  blo = bcx - bhi;
  t04 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C1len = sum3(4, B3, 4, u, C1);
  s1 = acx * bcytail;
  c3 = splitter * acx;
  ahi = c3 - (c3 - acx);
  alo = acx - ahi;
  c3 = splitter * bcytail;
  bhi = c3 - (c3 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcxtail;
  c3 = splitter * acy;
  ahi = c3 - (c3 - acy);
  alo = acy - ahi;
  c3 = splitter * bcxtail;
  bhi = c3 - (c3 - bcxtail);
  blo = bcxtail - bhi;
  t04 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C2len = sum3(C1len, C1, 4, u, C22);
  s1 = acxtail * bcytail;
  c3 = splitter * acxtail;
  ahi = c3 - (c3 - acxtail);
  alo = acxtail - ahi;
  c3 = splitter * bcytail;
  bhi = c3 - (c3 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcxtail;
  c3 = splitter * acytail;
  ahi = c3 - (c3 - acytail);
  alo = acytail - ahi;
  c3 = splitter * bcxtail;
  bhi = c3 - (c3 - bcxtail);
  blo = bcxtail - bhi;
  t04 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const Dlen = sum3(C2len, C22, 4, u, D2);
  return D2[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  if (detleft === 0 || detright === 0 || detleft > 0 !== detright > 0)
    return det;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum)
    return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon7) * epsilon7;
var o3derrboundB = (3 + 28 * epsilon7) * epsilon7;
var o3derrboundC = (26 + 288 * epsilon7) * epsilon7 * epsilon7;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon7) * epsilon7;
var iccerrboundB = (4 + 48 * epsilon7) * epsilon7;
var iccerrboundC = (44 + 576 * epsilon7) * epsilon7 * epsilon7;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon7) * epsilon7;
var isperrboundB = (5 + 72 * epsilon7) * epsilon7;
var isperrboundC = (71 + 1408 * epsilon7) * epsilon7 * epsilon7;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea2 = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON2 = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class {
  static from(points2, getX = defaultGetX, getY = defaultGetY) {
    const n = points2.length;
    const coords = new Float64Array(n * 2);
    for (let i = 0; i < n; i++) {
      const p = points2[i];
      coords[2 * i] = getX(p);
      coords[2 * i + 1] = getY(p);
    }
    return new Delaunator(coords);
  }
  constructor(coords) {
    const n = coords.length >> 1;
    if (n > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n));
    this._hullPrev = new Uint32Array(n);
    this._hullNext = new Uint32Array(n);
    this._hullTri = new Uint32Array(n);
    this._hullHash = new Int32Array(this._hashSize).fill(-1);
    this._ids = new Uint32Array(n);
    this._dists = new Float64Array(n);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY2 = -Infinity;
    for (let i = 0; i < n; i++) {
      const x5 = coords[2 * i];
      const y5 = coords[2 * i + 1];
      if (x5 < minX)
        minX = x5;
      if (y5 < minY)
        minY = y5;
      if (x5 > maxX)
        maxX = x5;
      if (y5 > maxY2)
        maxY2 = y5;
      this._ids[i] = i;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY2) / 2;
    let minDist = Infinity;
    let i0, i1, i2;
    for (let i = 0; i < n; i++) {
      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist) {
        i0 = i;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    minDist = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0)
        continue;
      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
      if (d < minDist && d > 0) {
        i1 = i;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i = 0; i < n; i++) {
      if (i === i0 || i === i1)
        continue;
      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
      if (r < minRadius) {
        i2 = i;
        minRadius = r;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i = 0; i < n; i++) {
        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n - 1);
      const hull = new Uint32Array(n);
      let j = 0;
      for (let i = 0, d0 = -Infinity; i < n; i++) {
        const id2 = this._ids[i];
        if (this._dists[id2] > d0) {
          hull[j++] = id2;
          d0 = this._dists[id2];
        }
      }
      this.hull = hull.subarray(0, j);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i = i1;
      const x5 = i1x;
      const y5 = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i;
      i2x = x5;
      i2y = y5;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i = 0; i < n; i++) {
      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k3 = 0, xp, yp; k3 < this._ids.length; k3++) {
      const i = this._ids[k3];
      const x5 = coords[2 * i];
      const y5 = coords[2 * i + 1];
      if (k3 > 0 && Math.abs(x5 - xp) <= EPSILON2 && Math.abs(y5 - yp) <= EPSILON2)
        continue;
      xp = x5;
      yp = y5;
      if (i === i0 || i === i1 || i === i2)
        continue;
      let start = 0;
      for (let j = 0, key2 = this._hashKey(x5, y5); j < this._hashSize; j++) {
        start = hullHash[(key2 + j) % this._hashSize];
        if (start !== -1 && start !== hullNext[start])
          break;
      }
      start = hullPrev[start];
      let e3 = start, q;
      while (q = hullNext[e3], orient2d(x5, y5, coords[2 * e3], coords[2 * e3 + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
        e3 = q;
        if (e3 === start) {
          e3 = -1;
          break;
        }
      }
      if (e3 === -1)
        continue;
      let t4 = this._addTriangle(e3, i, hullNext[e3], -1, -1, hullTri[e3]);
      hullTri[i] = this._legalize(t4 + 2);
      hullTri[e3] = t4;
      hullSize++;
      let n2 = hullNext[e3];
      while (q = hullNext[n2], orient2d(x5, y5, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
        t4 = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
        hullTri[i] = this._legalize(t4 + 2);
        hullNext[n2] = n2;
        hullSize--;
        n2 = q;
      }
      if (e3 === start) {
        while (q = hullPrev[e3], orient2d(x5, y5, coords[2 * q], coords[2 * q + 1], coords[2 * e3], coords[2 * e3 + 1]) < 0) {
          t4 = this._addTriangle(q, i, e3, -1, hullTri[e3], hullTri[q]);
          this._legalize(t4 + 2);
          hullTri[q] = t4;
          hullNext[e3] = e3;
          hullSize--;
          e3 = q;
        }
      }
      this._hullStart = hullPrev[i] = e3;
      hullNext[e3] = hullPrev[n2] = i;
      hullNext[i] = n2;
      hullHash[this._hashKey(x5, y5)] = i;
      hullHash[this._hashKey(coords[2 * e3], coords[2 * e3 + 1])] = e3;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i = 0, e3 = this._hullStart; i < hullSize; i++) {
      this.hull[i] = e3;
      e3 = hullNext[e3];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x5, y5) {
    return Math.floor(pseudoAngle(x5 - this._cx, y5 - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a4) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i = 0;
    let ar = 0;
    while (true) {
      const b2 = halfedges[a4];
      const a0 = a4 - a4 % 3;
      ar = a0 + (a4 + 2) % 3;
      if (b2 === -1) {
        if (i === 0)
          break;
        a4 = EDGE_STACK[--i];
        continue;
      }
      const b0 = b2 - b2 % 3;
      const al = a0 + (a4 + 1) % 3;
      const bl2 = b0 + (b2 + 2) % 3;
      const p02 = triangles[ar];
      const pr = triangles[a4];
      const pl = triangles[al];
      const p1 = triangles[bl2];
      const illegal = inCircle(
        coords[2 * p02],
        coords[2 * p02 + 1],
        coords[2 * pr],
        coords[2 * pr + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a4] = p1;
        triangles[b2] = p02;
        const hbl = halfedges[bl2];
        if (hbl === -1) {
          let e3 = this._hullStart;
          do {
            if (this._hullTri[e3] === bl2) {
              this._hullTri[e3] = a4;
              break;
            }
            e3 = this._hullPrev[e3];
          } while (e3 !== this._hullStart);
        }
        this._link(a4, hbl);
        this._link(b2, halfedges[ar]);
        this._link(ar, bl2);
        const br2 = b0 + (b2 + 1) % 3;
        if (i < EDGE_STACK.length) {
          EDGE_STACK[i++] = br2;
        }
      } else {
        if (i === 0)
          break;
        a4 = EDGE_STACK[--i];
      }
    }
    return ar;
  }
  _link(a4, b2) {
    this._halfedges[a4] = b2;
    if (b2 !== -1)
      this._halfedges[b2] = a4;
  }
  _addTriangle(i0, i1, i2, a4, b2, c3) {
    const t4 = this.trianglesLen;
    this._triangles[t4] = i0;
    this._triangles[t4 + 1] = i1;
    this._triangles[t4 + 2] = i2;
    this._link(t4, a4);
    this._link(t4 + 1, b2);
    this._link(t4 + 2, c3);
    this.trianglesLen += 3;
    return t4;
  }
};
function pseudoAngle(dx, dy) {
  const p = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p : 1 + p) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px2, py2) {
  const dx = ax - px2;
  const dy = ay - py2;
  const ex = bx - px2;
  const ey = by - py2;
  const fx = cx - px2;
  const fy = cy - py2;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl2 = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x5 = (ey * bl2 - dy * cl) * d;
  const y5 = (dx * cl - ex * bl2) * d;
  return x5 * x5 + y5 * y5;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl2 = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x5 = ax + (ey * bl2 - dy * cl) * d;
  const y5 = ay + (dx * cl - ex * bl2) * d;
  return { x: x5, y: y5 };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i = left + 1; i <= right; i++) {
      const temp2 = ids[i];
      const tempDist = dists[temp2];
      let j = i - 1;
      while (j >= left && dists[ids[j]] > tempDist)
        ids[j + 1] = ids[j--];
      ids[j + 1] = temp2;
    }
  } else {
    const median3 = left + right >> 1;
    let i = left + 1;
    let j = right;
    swap2(ids, median3, i);
    if (dists[ids[left]] > dists[ids[right]])
      swap2(ids, left, right);
    if (dists[ids[i]] > dists[ids[right]])
      swap2(ids, i, right);
    if (dists[ids[left]] > dists[ids[i]])
      swap2(ids, left, i);
    const temp2 = ids[i];
    const tempDist = dists[temp2];
    while (true) {
      do
        i++;
      while (dists[ids[i]] < tempDist);
      do
        j--;
      while (dists[ids[j]] > tempDist);
      if (j < i)
        break;
      swap2(ids, i, j);
    }
    ids[left + 1] = ids[j];
    ids[j] = temp2;
    if (right - i + 1 >= j - left) {
      quicksort(ids, dists, i, right);
      quicksort(ids, dists, left, j - 1);
    } else {
      quicksort(ids, dists, left, j - 1);
      quicksort(ids, dists, i, right);
    }
  }
}
function swap2(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}
function defaultGetX(p) {
  return p[0];
}
function defaultGetY(p) {
  return p[1];
}

// node_modules/d3-delaunay/src/path.js
var epsilon8 = 1e-6;
var Path2 = class {
  constructor() {
    this._x0 = this._y0 = this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x5, y5) {
    this._ += `M${this._x0 = this._x1 = +x5},${this._y0 = this._y1 = +y5}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x5, y5) {
    this._ += `L${this._x1 = +x5},${this._y1 = +y5}`;
  }
  arc(x5, y5, r) {
    x5 = +x5, y5 = +y5, r = +r;
    const x07 = x5 + r;
    const y07 = y5;
    if (r < 0)
      throw new Error("negative radius");
    if (this._x1 === null)
      this._ += `M${x07},${y07}`;
    else if (Math.abs(this._x1 - x07) > epsilon8 || Math.abs(this._y1 - y07) > epsilon8)
      this._ += "L" + x07 + "," + y07;
    if (!r)
      return;
    this._ += `A${r},${r},0,1,1,${x5 - r},${y5}A${r},${r},0,1,1,${this._x1 = x07},${this._y1 = y07}`;
  }
  rect(x5, y5, w4, h2) {
    this._ += `M${this._x0 = this._x1 = +x5},${this._y0 = this._y1 = +y5}h${+w4}v${+h2}h${-w4}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x5, y5) {
    this._.push([x5, y5]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x5, y5) {
    this._.push([x5, y5]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
      throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points: points2, hull, triangles }, vectors } = this;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i = 0, j = 0, n = triangles.length, x5, y5; i < n; i += 3, j += 2) {
      const t13 = triangles[i] * 2;
      const t22 = triangles[i + 1] * 2;
      const t32 = triangles[i + 2] * 2;
      const x14 = points2[t13];
      const y14 = points2[t13 + 1];
      const x22 = points2[t22];
      const y22 = points2[t22 + 1];
      const x32 = points2[t32];
      const y32 = points2[t32 + 1];
      const dx = x22 - x14;
      const dy = y22 - y14;
      const ex = x32 - x14;
      const ey = y32 - y14;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        let a4 = 1e9;
        const r = triangles[0] * 2;
        a4 *= Math.sign((points2[r] - x14) * ey - (points2[r + 1] - y14) * ex);
        x5 = (x14 + x32) / 2 - a4 * ey;
        y5 = (y14 + y32) / 2 + a4 * ex;
      } else {
        const d = 1 / ab4;
        const bl2 = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x5 = x14 + (ey * bl2 - dy * cl) * d;
        y5 = y14 + (dx * cl - ex * bl2) * d;
      }
      circumcenters[j] = x5;
      circumcenters[j + 1] = y5;
    }
    let h2 = hull[hull.length - 1];
    let p02, p1 = h2 * 4;
    let x07, x13 = points2[2 * h2];
    let y07, y13 = points2[2 * h2 + 1];
    vectors.fill(0);
    for (let i = 0; i < hull.length; ++i) {
      h2 = hull[i];
      p02 = p1, x07 = x13, y07 = y13;
      p1 = h2 * 4, x13 = points2[2 * h2], y13 = points2[2 * h2 + 1];
      vectors[p02 + 2] = vectors[p1] = y07 - y13;
      vectors[p02 + 3] = vectors[p1 + 1] = x13 - x07;
    }
  }
  render(context3) {
    const buffer = context3 == null ? context3 = new Path2() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1)
      return null;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i)
        continue;
      const ti = Math.floor(i / 3) * 2;
      const tj = Math.floor(j / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context3);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i = 0; i < hull.length; ++i) {
      h0 = h1, h1 = hull[i];
      const t4 = Math.floor(inedges[h1] / 3) * 2;
      const x5 = circumcenters[t4];
      const y5 = circumcenters[t4 + 1];
      const v2 = h0 * 4;
      const p = this._project(x5, y5, vectors[v2 + 2], vectors[v2 + 3]);
      if (p)
        this._renderSegment(x5, y5, p[0], p[1], context3);
    }
    return buffer && buffer.value();
  }
  renderBounds(context3) {
    const buffer = context3 == null ? context3 = new Path2() : void 0;
    context3.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i, context3) {
    const buffer = context3 == null ? context3 = new Path2() : void 0;
    const points2 = this._clip(i);
    if (points2 === null || !points2.length)
      return;
    context3.moveTo(points2[0], points2[1]);
    let n = points2.length;
    while (points2[0] === points2[n - 2] && points2[1] === points2[n - 1] && n > 1)
      n -= 2;
    for (let i2 = 2; i2 < n; i2 += 2) {
      if (points2[i2] !== points2[i2 - 2] || points2[i2 + 1] !== points2[i2 - 1])
        context3.lineTo(points2[i2], points2[i2 + 1]);
    }
    context3.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points: points2 } } = this;
    for (let i = 0, n = points2.length / 2; i < n; ++i) {
      const cell2 = this.cellPolygon(i);
      if (cell2)
        cell2.index = i, yield cell2;
    }
  }
  cellPolygon(i) {
    const polygon = new Polygon();
    this.renderCell(i, polygon);
    return polygon.value();
  }
  _renderSegment(x07, y07, x13, y13, context3) {
    let S;
    const c0 = this._regioncode(x07, y07);
    const c1 = this._regioncode(x13, y13);
    if (c0 === 0 && c1 === 0) {
      context3.moveTo(x07, y07);
      context3.lineTo(x13, y13);
    } else if (S = this._clipSegment(x07, y07, x13, y13, c0, c1)) {
      context3.moveTo(S[0], S[1]);
      context3.lineTo(S[2], S[3]);
    }
  }
  contains(i, x5, y5) {
    if ((x5 = +x5, x5 !== x5) || (y5 = +y5, y5 !== y5))
      return false;
    return this.delaunay._step(i, x5, y5) === i;
  }
  *neighbors(i) {
    const ci = this._clip(i);
    if (ci)
      for (const j of this.delaunay.neighbors(i)) {
        const cj = this._clip(j);
        if (cj)
          loop:
            for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
                  yield j;
                  break loop;
                }
              }
            }
      }
  }
  _cell(i) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i];
    if (e0 === -1)
      return null;
    const points2 = [];
    let e3 = e0;
    do {
      const t4 = Math.floor(e3 / 3);
      points2.push(circumcenters[t4 * 2], circumcenters[t4 * 2 + 1]);
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i)
        break;
      e3 = halfedges[e3];
    } while (e3 !== e0 && e3 !== -1);
    return points2;
  }
  _clip(i) {
    if (i === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points2 = this._cell(i);
    if (points2 === null)
      return null;
    const { vectors: V } = this;
    const v2 = i * 4;
    return V[v2] || V[v2 + 1] ? this._clipInfinite(i, points2, V[v2], V[v2 + 1], V[v2 + 2], V[v2 + 3]) : this._clipFinite(i, points2);
  }
  _clipFinite(i, points2) {
    const n = points2.length;
    let P = null;
    let x07, y07, x13 = points2[n - 2], y13 = points2[n - 1];
    let c0, c1 = this._regioncode(x13, y13);
    let e0, e1 = 0;
    for (let j = 0; j < n; j += 2) {
      x07 = x13, y07 = y13, x13 = points2[j], y13 = points2[j + 1];
      c0 = c1, c1 = this._regioncode(x13, y13);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P)
          P.push(x13, y13);
        else
          P = [x13, y13];
      } else {
        let S, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S = this._clipSegment(x07, y07, x13, y13, c0, c1)) === null)
            continue;
          [sx0, sy0, sx1, sy1] = S;
        } else {
          if ((S = this._clipSegment(x13, y13, x07, y07, c1, c0)) === null)
            continue;
          [sx1, sy1, sx0, sy0] = S;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1)
            this._edge(i, e0, e1, P, P.length);
          if (P)
            P.push(sx0, sy0);
          else
            P = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1)
          this._edge(i, e0, e1, P, P.length);
        if (P)
          P.push(sx1, sy1);
        else
          P = [sx1, sy1];
      }
    }
    if (P) {
      e0 = e1, e1 = this._edgecode(P[0], P[1]);
      if (e0 && e1)
        this._edge(i, e0, e1, P, P.length);
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P;
  }
  _clipSegment(x07, y07, x13, y13, c0, c1) {
    while (true) {
      if (c0 === 0 && c1 === 0)
        return [x07, y07, x13, y13];
      if (c0 & c1)
        return null;
      let x5, y5, c3 = c0 || c1;
      if (c3 & 8)
        x5 = x07 + (x13 - x07) * (this.ymax - y07) / (y13 - y07), y5 = this.ymax;
      else if (c3 & 4)
        x5 = x07 + (x13 - x07) * (this.ymin - y07) / (y13 - y07), y5 = this.ymin;
      else if (c3 & 2)
        y5 = y07 + (y13 - y07) * (this.xmax - x07) / (x13 - x07), x5 = this.xmax;
      else
        y5 = y07 + (y13 - y07) * (this.xmin - x07) / (x13 - x07), x5 = this.xmin;
      if (c0)
        x07 = x5, y07 = y5, c0 = this._regioncode(x07, y07);
      else
        x13 = x5, y13 = y5, c1 = this._regioncode(x13, y13);
    }
  }
  _clipInfinite(i, points2, vx0, vy0, vxn, vyn) {
    let P = Array.from(points2), p;
    if (p = this._project(P[0], P[1], vx0, vy0))
      P.unshift(p[0], p[1]);
    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn))
      P.push(p[0], p[1]);
    if (P = this._clipFinite(i, P)) {
      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
        if (c0 && c1)
          j = this._edge(i, c0, c1, P, j), n = P.length;
      }
    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P;
  }
  _edge(i, e0, e1, P, j) {
    while (e0 !== e1) {
      let x5, y5;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x5 = this.xmax, y5 = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x5 = this.xmax, y5 = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x5 = this.xmin, y5 = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x5 = this.xmin, y5 = this.ymin;
          break;
      }
      if ((P[j] !== x5 || P[j + 1] !== y5) && this.contains(i, x5, y5)) {
        P.splice(j, 0, x5, y5), j += 2;
      }
    }
    if (P.length > 4) {
      for (let i2 = 0; i2 < P.length; i2 += 2) {
        const j2 = (i2 + 2) % P.length, k3 = (i2 + 4) % P.length;
        if (P[i2] === P[j2] && P[j2] === P[k3] || P[i2 + 1] === P[j2 + 1] && P[j2 + 1] === P[k3 + 1])
          P.splice(j2, 2), i2 -= 2;
      }
    }
    return j;
  }
  _project(x07, y07, vx, vy) {
    let t4 = Infinity, c3, x5, y5;
    if (vy < 0) {
      if (y07 <= this.ymin)
        return null;
      if ((c3 = (this.ymin - y07) / vy) < t4)
        y5 = this.ymin, x5 = x07 + (t4 = c3) * vx;
    } else if (vy > 0) {
      if (y07 >= this.ymax)
        return null;
      if ((c3 = (this.ymax - y07) / vy) < t4)
        y5 = this.ymax, x5 = x07 + (t4 = c3) * vx;
    }
    if (vx > 0) {
      if (x07 >= this.xmax)
        return null;
      if ((c3 = (this.xmax - x07) / vx) < t4)
        x5 = this.xmax, y5 = y07 + (t4 = c3) * vy;
    } else if (vx < 0) {
      if (x07 <= this.xmin)
        return null;
      if ((c3 = (this.xmin - x07) / vx) < t4)
        x5 = this.xmin, y5 = y07 + (t4 = c3) * vy;
    }
    return [x5, y5];
  }
  _edgecode(x5, y5) {
    return (x5 === this.xmin ? 1 : x5 === this.xmax ? 2 : 0) | (y5 === this.ymin ? 4 : y5 === this.ymax ? 8 : 0);
  }
  _regioncode(x5, y5) {
    return (x5 < this.xmin ? 1 : x5 > this.xmax ? 2 : 0) | (y5 < this.ymin ? 4 : y5 > this.ymax ? 8 : 0);
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau5 = 2 * Math.PI;
var pow6 = Math.pow;
function pointX(p) {
  return p[0];
}
function pointY(p) {
  return p[1];
}
function collinear2(d) {
  const { triangles, coords } = d;
  for (let i = 0; i < triangles.length; i += 3) {
    const a4 = 2 * triangles[i], b2 = 2 * triangles[i + 1], c3 = 2 * triangles[i + 2], cross4 = (coords[c3] - coords[a4]) * (coords[b2 + 1] - coords[a4 + 1]) - (coords[b2] - coords[a4]) * (coords[c3 + 1] - coords[a4 + 1]);
    if (cross4 > 1e-10)
      return false;
  }
  return true;
}
function jitter(x5, y5, r) {
  return [x5 + Math.sin(x5 + y5) * r, y5 + Math.cos(x5 - y5) * r];
}
var Delaunay = class {
  static from(points2, fx = pointX, fy = pointY, that) {
    return new Delaunay("length" in points2 ? flatArray(points2, fx, fy, that) : Float64Array.from(flatIterable(points2, fx, fy, that)));
  }
  constructor(points2) {
    this._delaunator = new Delaunator(points2);
    this.inedges = new Int32Array(points2.length / 2);
    this._hullIndex = new Int32Array(points2.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points2 = this.points;
    if (d.hull && d.hull.length > 2 && collinear2(d)) {
      this.collinear = Int32Array.from({ length: points2.length / 2 }, (_, i) => i).sort((i, j) => points2[2 * i] - points2[2 * j] || points2[2 * i + 1] - points2[2 * j + 1]);
      const e3 = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds2 = [points2[2 * e3], points2[2 * e3 + 1], points2[2 * f], points2[2 * f + 1]], r = 1e-8 * Math.hypot(bounds2[3] - bounds2[1], bounds2[2] - bounds2[0]);
      for (let i = 0, n = points2.length / 2; i < n; ++i) {
        const p = jitter(points2[2 * i], points2[2 * i + 1], r);
        points2[2 * i] = p[0];
        points2[2 * i + 1] = p[1];
      }
      this._delaunator = new Delaunator(points2);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e3 = 0, n = halfedges.length; e3 < n; ++e3) {
      const p = triangles[e3 % 3 === 2 ? e3 - 2 : e3 + 1];
      if (halfedges[e3] === -1 || inedges[p] === -1)
        inedges[p] = e3;
    }
    for (let i = 0, n = hull.length; i < n; ++i) {
      hullIndex[hull[i]] = i;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      inedges[hull[0]] = 1;
      if (hull.length === 2) {
        inedges[hull[1]] = 0;
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
      }
    }
  }
  voronoi(bounds2) {
    return new Voronoi(this, bounds2);
  }
  *neighbors(i) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear3 } = this;
    if (collinear3) {
      const l = collinear3.indexOf(i);
      if (l > 0)
        yield collinear3[l - 1];
      if (l < collinear3.length - 1)
        yield collinear3[l + 1];
      return;
    }
    const e0 = inedges[i];
    if (e0 === -1)
      return;
    let e3 = e0, p02 = -1;
    do {
      yield p02 = triangles[e3];
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i)
        return;
      e3 = halfedges[e3];
      if (e3 === -1) {
        const p = hull[(_hullIndex[i] + 1) % hull.length];
        if (p !== p02)
          yield p;
        return;
      }
    } while (e3 !== e0);
  }
  find(x5, y5, i = 0) {
    if ((x5 = +x5, x5 !== x5) || (y5 = +y5, y5 !== y5))
      return -1;
    const i0 = i;
    let c3;
    while ((c3 = this._step(i, x5, y5)) >= 0 && c3 !== i && c3 !== i0)
      i = c3;
    return c3;
  }
  _step(i, x5, y5) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points: points2 } = this;
    if (inedges[i] === -1 || !points2.length)
      return (i + 1) % (points2.length >> 1);
    let c3 = i;
    let dc = pow6(x5 - points2[i * 2], 2) + pow6(y5 - points2[i * 2 + 1], 2);
    const e0 = inedges[i];
    let e3 = e0;
    do {
      let t4 = triangles[e3];
      const dt = pow6(x5 - points2[t4 * 2], 2) + pow6(y5 - points2[t4 * 2 + 1], 2);
      if (dt < dc)
        dc = dt, c3 = t4;
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i)
        break;
      e3 = halfedges[e3];
      if (e3 === -1) {
        e3 = hull[(_hullIndex[i] + 1) % hull.length];
        if (e3 !== t4) {
          if (pow6(x5 - points2[e3 * 2], 2) + pow6(y5 - points2[e3 * 2 + 1], 2) < dc)
            return e3;
        }
        break;
      }
    } while (e3 !== e0);
    return c3;
  }
  render(context3) {
    const buffer = context3 == null ? context3 = new Path2() : void 0;
    const { points: points2, halfedges, triangles } = this;
    for (let i = 0, n = halfedges.length; i < n; ++i) {
      const j = halfedges[i];
      if (j < i)
        continue;
      const ti = triangles[i] * 2;
      const tj = triangles[j] * 2;
      context3.moveTo(points2[ti], points2[ti + 1]);
      context3.lineTo(points2[tj], points2[tj + 1]);
    }
    this.renderHull(context3);
    return buffer && buffer.value();
  }
  renderPoints(context3, r) {
    if (r === void 0 && (!context3 || typeof context3.moveTo !== "function"))
      r = context3, context3 = null;
    r = r == void 0 ? 2 : +r;
    const buffer = context3 == null ? context3 = new Path2() : void 0;
    const { points: points2 } = this;
    for (let i = 0, n = points2.length; i < n; i += 2) {
      const x5 = points2[i], y5 = points2[i + 1];
      context3.moveTo(x5 + r, y5);
      context3.arc(x5, y5, r, 0, tau5);
    }
    return buffer && buffer.value();
  }
  renderHull(context3) {
    const buffer = context3 == null ? context3 = new Path2() : void 0;
    const { hull, points: points2 } = this;
    const h2 = hull[0] * 2, n = hull.length;
    context3.moveTo(points2[h2], points2[h2 + 1]);
    for (let i = 1; i < n; ++i) {
      const h3 = 2 * hull[i];
      context3.lineTo(points2[h3], points2[h3 + 1]);
    }
    context3.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i, context3) {
    const buffer = context3 == null ? context3 = new Path2() : void 0;
    const { points: points2, triangles } = this;
    const t04 = triangles[i *= 3] * 2;
    const t13 = triangles[i + 1] * 2;
    const t22 = triangles[i + 2] * 2;
    context3.moveTo(points2[t04], points2[t04 + 1]);
    context3.lineTo(points2[t13], points2[t13 + 1]);
    context3.lineTo(points2[t22], points2[t22 + 1]);
    context3.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i = 0, n = triangles.length / 3; i < n; ++i) {
      yield this.trianglePolygon(i);
    }
  }
  trianglePolygon(i) {
    const polygon = new Polygon();
    this.renderTriangle(i, polygon);
    return polygon.value();
  }
};
function flatArray(points2, fx, fy, that) {
  const n = points2.length;
  const array6 = new Float64Array(n * 2);
  for (let i = 0; i < n; ++i) {
    const p = points2[i];
    array6[i * 2] = fx.call(that, p, i, points2);
    array6[i * 2 + 1] = fy.call(that, p, i, points2);
  }
  return array6;
}
function* flatIterable(points2, fx, fy, that) {
  let i = 0;
  for (const p of points2) {
    yield fx.call(that, p, i, points2);
    yield fy.call(that, p, i, points2);
    ++i;
  }
}

// node_modules/vega-voronoi/build/vega-voronoi.module.js
function Voronoi2(params2) {
  Transform.call(this, null, params2);
}
Voronoi2.Definition = {
  "type": "Voronoi",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "x",
    "type": "field",
    "required": true
  }, {
    "name": "y",
    "type": "field",
    "required": true
  }, {
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "extent",
    "type": "array",
    "array": true,
    "length": 2,
    "default": [[-1e5, -1e5], [1e5, 1e5]],
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }, {
    "name": "as",
    "type": "string",
    "default": "path"
  }]
};
var defaultExtent = [-1e5, -1e5, 1e5, 1e5];
inherits(Voronoi2, Transform, {
  transform(_, pulse2) {
    const as = _.as || "path", data3 = pulse2.source;
    if (!data3 || !data3.length)
      return pulse2;
    let s2 = _.size;
    s2 = s2 ? [0, 0, s2[0], s2[1]] : (s2 = _.extent) ? [s2[0][0], s2[0][1], s2[1][0], s2[1][1]] : defaultExtent;
    const voronoi = this.value = Delaunay.from(data3, _.x, _.y).voronoi(s2);
    for (let i = 0, n = data3.length; i < n; ++i) {
      const polygon = voronoi.cellPolygon(i);
      data3[i][as] = polygon ? toPathString(polygon) : null;
    }
    return pulse2.reflow(_.modified()).modifies(as);
  }
});
function toPathString(p) {
  const x5 = p[0][0], y5 = p[0][1];
  let n = p.length - 1;
  for (; p[n][0] === x5 && p[n][1] === y5; --n)
    ;
  return "M" + p.slice(0, n + 1).join("L") + "Z";
}

// node_modules/vega-wordcloud/build/vega-wordcloud.module.js
var vega_wordcloud_module_exports = {};
__export(vega_wordcloud_module_exports, {
  wordcloud: () => Wordcloud
});
var cloudRadians = Math.PI / 180;
var cw = 1 << 11 >> 5;
var ch = 1 << 11;
function cloud() {
  var size = [256, 256], text4, font3, fontSize2, fontStyle, fontWeight, rotate2, padding3, spiral = archimedeanSpiral, words = [], random2 = Math.random, cloud2 = {};
  cloud2.layout = function() {
    var contextAndRatio = getContext2(domCanvas()), board = zeroArray((size[0] >> 5) * size[1]), bounds2 = null, n = words.length, i = -1, tags = [], data3 = words.map((d2) => ({
      text: text4(d2),
      font: font3(d2),
      style: fontStyle(d2),
      weight: fontWeight(d2),
      rotate: rotate2(d2),
      size: ~~(fontSize2(d2) + 1e-14),
      padding: padding3(d2),
      xoff: 0,
      yoff: 0,
      x1: 0,
      y1: 0,
      x0: 0,
      y0: 0,
      hasText: false,
      sprite: null,
      datum: d2
    })).sort((a4, b2) => b2.size - a4.size);
    while (++i < n) {
      var d = data3[i];
      d.x = size[0] * (random2() + 0.5) >> 1;
      d.y = size[1] * (random2() + 0.5) >> 1;
      cloudSprite(contextAndRatio, d, data3, i);
      if (d.hasText && place2(board, d, bounds2)) {
        tags.push(d);
        if (bounds2)
          cloudBounds(bounds2, d);
        else
          bounds2 = [{
            x: d.x + d.x0,
            y: d.y + d.y0
          }, {
            x: d.x + d.x1,
            y: d.y + d.y1
          }];
        d.x -= size[0] >> 1;
        d.y -= size[1] >> 1;
      }
    }
    return tags;
  };
  function getContext2(canvas) {
    canvas.width = canvas.height = 1;
    var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
    canvas.width = (cw << 5) / ratio;
    canvas.height = ch / ratio;
    var context3 = canvas.getContext("2d");
    context3.fillStyle = context3.strokeStyle = "red";
    context3.textAlign = "center";
    return {
      context: context3,
      ratio
    };
  }
  function place2(board, tag, bounds2) {
    var startX = tag.x, startY = tag.y, maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]), s2 = spiral(size), dt = random2() < 0.5 ? 1 : -1, t4 = -dt, dxdy, dx, dy;
    while (dxdy = s2(t4 += dt)) {
      dx = ~~dxdy[0];
      dy = ~~dxdy[1];
      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta)
        break;
      tag.x = startX + dx;
      tag.y = startY + dy;
      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1])
        continue;
      if (!bounds2 || !cloudCollide(tag, board, size[0])) {
        if (!bounds2 || collideRects(tag, bounds2)) {
          var sprite = tag.sprite, w4 = tag.width >> 5, sw = size[0] >> 5, lx2 = tag.x - (w4 << 4), sx = lx2 & 127, msx = 32 - sx, h2 = tag.y1 - tag.y0, x5 = (tag.y + tag.y0) * sw + (lx2 >> 5), last;
          for (var j = 0; j < h2; j++) {
            last = 0;
            for (var i = 0; i <= w4; i++) {
              board[x5 + i] |= last << msx | (i < w4 ? (last = sprite[j * w4 + i]) >>> sx : 0);
            }
            x5 += sw;
          }
          tag.sprite = null;
          return true;
        }
      }
    }
    return false;
  }
  cloud2.words = function(_) {
    if (arguments.length) {
      words = _;
      return cloud2;
    } else {
      return words;
    }
  };
  cloud2.size = function(_) {
    if (arguments.length) {
      size = [+_[0], +_[1]];
      return cloud2;
    } else {
      return size;
    }
  };
  cloud2.font = function(_) {
    if (arguments.length) {
      font3 = functor(_);
      return cloud2;
    } else {
      return font3;
    }
  };
  cloud2.fontStyle = function(_) {
    if (arguments.length) {
      fontStyle = functor(_);
      return cloud2;
    } else {
      return fontStyle;
    }
  };
  cloud2.fontWeight = function(_) {
    if (arguments.length) {
      fontWeight = functor(_);
      return cloud2;
    } else {
      return fontWeight;
    }
  };
  cloud2.rotate = function(_) {
    if (arguments.length) {
      rotate2 = functor(_);
      return cloud2;
    } else {
      return rotate2;
    }
  };
  cloud2.text = function(_) {
    if (arguments.length) {
      text4 = functor(_);
      return cloud2;
    } else {
      return text4;
    }
  };
  cloud2.spiral = function(_) {
    if (arguments.length) {
      spiral = spirals[_] || _;
      return cloud2;
    } else {
      return spiral;
    }
  };
  cloud2.fontSize = function(_) {
    if (arguments.length) {
      fontSize2 = functor(_);
      return cloud2;
    } else {
      return fontSize2;
    }
  };
  cloud2.padding = function(_) {
    if (arguments.length) {
      padding3 = functor(_);
      return cloud2;
    } else {
      return padding3;
    }
  };
  cloud2.random = function(_) {
    if (arguments.length) {
      random2 = _;
      return cloud2;
    } else {
      return random2;
    }
  };
  return cloud2;
}
function cloudSprite(contextAndRatio, d, data3, di) {
  if (d.sprite)
    return;
  var c3 = contextAndRatio.context, ratio = contextAndRatio.ratio;
  c3.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
  var x5 = 0, y5 = 0, maxh = 0, n = data3.length, w4, w32, h2, i, j;
  --di;
  while (++di < n) {
    d = data3[di];
    c3.save();
    c3.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
    w4 = c3.measureText(d.text + "m").width * ratio;
    h2 = d.size << 1;
    if (d.rotate) {
      var sr = Math.sin(d.rotate * cloudRadians), cr2 = Math.cos(d.rotate * cloudRadians), wcr = w4 * cr2, wsr = w4 * sr, hcr = h2 * cr2, hsr = h2 * sr;
      w4 = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 31 >> 5 << 5;
      h2 = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
    } else {
      w4 = w4 + 31 >> 5 << 5;
    }
    if (h2 > maxh)
      maxh = h2;
    if (x5 + w4 >= cw << 5) {
      x5 = 0;
      y5 += maxh;
      maxh = 0;
    }
    if (y5 + h2 >= ch)
      break;
    c3.translate((x5 + (w4 >> 1)) / ratio, (y5 + (h2 >> 1)) / ratio);
    if (d.rotate)
      c3.rotate(d.rotate * cloudRadians);
    c3.fillText(d.text, 0, 0);
    if (d.padding) {
      c3.lineWidth = 2 * d.padding;
      c3.strokeText(d.text, 0, 0);
    }
    c3.restore();
    d.width = w4;
    d.height = h2;
    d.xoff = x5;
    d.yoff = y5;
    d.x1 = w4 >> 1;
    d.y1 = h2 >> 1;
    d.x0 = -d.x1;
    d.y0 = -d.y1;
    d.hasText = true;
    x5 += w4;
  }
  var pixels = c3.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data, sprite = [];
  while (--di >= 0) {
    d = data3[di];
    if (!d.hasText)
      continue;
    w4 = d.width;
    w32 = w4 >> 5;
    h2 = d.y1 - d.y0;
    for (i = 0; i < h2 * w32; i++)
      sprite[i] = 0;
    x5 = d.xoff;
    if (x5 == null)
      return;
    y5 = d.yoff;
    var seen = 0, seenRow = -1;
    for (j = 0; j < h2; j++) {
      for (i = 0; i < w4; i++) {
        var k3 = w32 * j + (i >> 5), m3 = pixels[(y5 + j) * (cw << 5) + (x5 + i) << 2] ? 1 << 31 - i % 32 : 0;
        sprite[k3] |= m3;
        seen |= m3;
      }
      if (seen)
        seenRow = j;
      else {
        d.y0++;
        h2--;
        j--;
        y5++;
      }
    }
    d.y1 = d.y0 + seenRow;
    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
  }
}
function cloudCollide(tag, board, sw) {
  sw >>= 5;
  var sprite = tag.sprite, w4 = tag.width >> 5, lx2 = tag.x - (w4 << 4), sx = lx2 & 127, msx = 32 - sx, h2 = tag.y1 - tag.y0, x5 = (tag.y + tag.y0) * sw + (lx2 >> 5), last;
  for (var j = 0; j < h2; j++) {
    last = 0;
    for (var i = 0; i <= w4; i++) {
      if ((last << msx | (i < w4 ? (last = sprite[j * w4 + i]) >>> sx : 0)) & board[x5 + i])
        return true;
    }
    x5 += sw;
  }
  return false;
}
function cloudBounds(bounds2, d) {
  var b0 = bounds2[0], b1 = bounds2[1];
  if (d.x + d.x0 < b0.x)
    b0.x = d.x + d.x0;
  if (d.y + d.y0 < b0.y)
    b0.y = d.y + d.y0;
  if (d.x + d.x1 > b1.x)
    b1.x = d.x + d.x1;
  if (d.y + d.y1 > b1.y)
    b1.y = d.y + d.y1;
}
function collideRects(a4, b2) {
  return a4.x + a4.x1 > b2[0].x && a4.x + a4.x0 < b2[1].x && a4.y + a4.y1 > b2[0].y && a4.y + a4.y0 < b2[1].y;
}
function archimedeanSpiral(size) {
  var e3 = size[0] / size[1];
  return function(t4) {
    return [e3 * (t4 *= 0.1) * Math.cos(t4), t4 * Math.sin(t4)];
  };
}
function rectangularSpiral(size) {
  var dy = 4, dx = dy * size[0] / size[1], x5 = 0, y5 = 0;
  return function(t4) {
    var sign4 = t4 < 0 ? -1 : 1;
    switch (Math.sqrt(1 + 4 * sign4 * t4) - sign4 & 3) {
      case 0:
        x5 += dx;
        break;
      case 1:
        y5 += dy;
        break;
      case 2:
        x5 -= dx;
        break;
      default:
        y5 -= dy;
        break;
    }
    return [x5, y5];
  };
}
function zeroArray(n) {
  var a4 = [], i = -1;
  while (++i < n)
    a4[i] = 0;
  return a4;
}
function functor(d) {
  return typeof d === "function" ? d : function() {
    return d;
  };
}
var spirals = {
  archimedean: archimedeanSpiral,
  rectangular: rectangularSpiral
};
var Output4 = ["x", "y", "font", "fontSize", "fontStyle", "fontWeight", "angle"];
var Params2 = ["text", "font", "rotate", "fontSize", "fontStyle", "fontWeight"];
function Wordcloud(params2) {
  Transform.call(this, cloud(), params2);
}
Wordcloud.Definition = {
  "type": "Wordcloud",
  "metadata": {
    "modifies": true
  },
  "params": [{
    "name": "size",
    "type": "number",
    "array": true,
    "length": 2
  }, {
    "name": "font",
    "type": "string",
    "expr": true,
    "default": "sans-serif"
  }, {
    "name": "fontStyle",
    "type": "string",
    "expr": true,
    "default": "normal"
  }, {
    "name": "fontWeight",
    "type": "string",
    "expr": true,
    "default": "normal"
  }, {
    "name": "fontSize",
    "type": "number",
    "expr": true,
    "default": 14
  }, {
    "name": "fontSizeRange",
    "type": "number",
    "array": "nullable",
    "default": [10, 50]
  }, {
    "name": "rotate",
    "type": "number",
    "expr": true,
    "default": 0
  }, {
    "name": "text",
    "type": "field"
  }, {
    "name": "spiral",
    "type": "string",
    "values": ["archimedean", "rectangular"]
  }, {
    "name": "padding",
    "type": "number",
    "expr": true
  }, {
    "name": "as",
    "type": "string",
    "array": true,
    "length": 7,
    "default": Output4
  }]
};
inherits(Wordcloud, Transform, {
  transform(_, pulse2) {
    if (_.size && !(_.size[0] && _.size[1])) {
      error("Wordcloud size dimensions must be non-zero.");
    }
    function modp(param2) {
      const p = _[param2];
      return isFunction(p) && pulse2.modified(p.fields);
    }
    const mod = _.modified();
    if (!(mod || pulse2.changed(pulse2.ADD_REM) || Params2.some(modp)))
      return;
    const data3 = pulse2.materialize(pulse2.SOURCE).source, layout = this.value, as = _.as || Output4;
    let fontSize2 = _.fontSize || 14, range8;
    isFunction(fontSize2) ? range8 = _.fontSizeRange : fontSize2 = constant(fontSize2);
    if (range8) {
      const fsize = fontSize2, sizeScale = scale("sqrt")().domain(extent(data3, fsize)).range(range8);
      fontSize2 = (x5) => sizeScale(fsize(x5));
    }
    data3.forEach((t4) => {
      t4[as[0]] = NaN;
      t4[as[1]] = NaN;
      t4[as[3]] = 0;
    });
    const words = layout.words(data3).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || "archimedean").rotate(_.rotate || 0).font(_.font || "sans-serif").fontStyle(_.fontStyle || "normal").fontWeight(_.fontWeight || "normal").fontSize(fontSize2).random(random).layout();
    const size = layout.size(), dx = size[0] >> 1, dy = size[1] >> 1, n = words.length;
    for (let i = 0, w4, t4; i < n; ++i) {
      w4 = words[i];
      t4 = w4.datum;
      t4[as[0]] = w4.x + dx;
      t4[as[1]] = w4.y + dy;
      t4[as[2]] = w4.font;
      t4[as[3]] = w4.size;
      t4[as[4]] = w4.style;
      t4[as[5]] = w4.weight;
      t4[as[6]] = w4.rotate;
    }
    return pulse2.reflow(mod).modifies(as);
  }
});

// node_modules/vega-crossfilter/build/vega-crossfilter.module.js
var vega_crossfilter_module_exports = {};
__export(vega_crossfilter_module_exports, {
  crossfilter: () => CrossFilter,
  resolvefilter: () => ResolveFilter
});
var array8 = (n) => new Uint8Array(n);
var array16 = (n) => new Uint16Array(n);
var array32 = (n) => new Uint32Array(n);
function Bitmaps() {
  let width2 = 8, data3 = [], seen = array32(0), curr = array3(0, width2), prev = array3(0, width2);
  return {
    data: () => data3,
    seen: () => seen = lengthen(seen, data3.length),
    add(array6) {
      for (let i = 0, j = data3.length, n = array6.length, t4; i < n; ++i) {
        t4 = array6[i];
        t4._index = j++;
        data3.push(t4);
      }
    },
    remove(num, map7) {
      const n = data3.length, copy4 = Array(n - num), reindex = data3;
      let t4, i, j;
      for (i = 0; !map7[i] && i < n; ++i) {
        copy4[i] = data3[i];
        reindex[i] = i;
      }
      for (j = i; i < n; ++i) {
        t4 = data3[i];
        if (!map7[i]) {
          reindex[i] = j;
          curr[j] = curr[i];
          prev[j] = prev[i];
          copy4[j] = t4;
          t4._index = j++;
        } else {
          reindex[i] = -1;
        }
        curr[i] = 0;
      }
      data3 = copy4;
      return reindex;
    },
    size: () => data3.length,
    curr: () => curr,
    prev: () => prev,
    reset: (k3) => prev[k3] = curr[k3],
    all: () => width2 < 257 ? 255 : width2 < 65537 ? 65535 : 4294967295,
    set(k3, one4) {
      curr[k3] |= one4;
    },
    clear(k3, one4) {
      curr[k3] &= ~one4;
    },
    resize(n, m3) {
      const k3 = curr.length;
      if (n > k3 || m3 > width2) {
        width2 = Math.max(m3, width2);
        curr = array3(n, width2, curr);
        prev = array3(n, width2);
      }
    }
  };
}
function lengthen(array6, length2, copy4) {
  if (array6.length >= length2)
    return array6;
  copy4 = copy4 || new array6.constructor(length2);
  copy4.set(array6);
  return copy4;
}
function array3(n, m3, array6) {
  const copy4 = (m3 < 257 ? array8 : m3 < 65537 ? array16 : array32)(n);
  if (array6)
    copy4.set(array6);
  return copy4;
}
function Dimension(index5, i, query) {
  const bit = 1 << i;
  return {
    one: bit,
    zero: ~bit,
    range: query.slice(),
    bisect: index5.bisect,
    index: index5.index,
    size: index5.size,
    onAdd(added, curr) {
      const dim = this, range8 = dim.bisect(dim.range, added.value), idx = added.index, lo = range8[0], hi = range8[1], n1 = idx.length;
      let i2;
      for (i2 = 0; i2 < lo; ++i2)
        curr[idx[i2]] |= bit;
      for (i2 = hi; i2 < n1; ++i2)
        curr[idx[i2]] |= bit;
      return dim;
    }
  };
}
function SortedIndex() {
  let index5 = array32(0), value3 = [], size = 0;
  function insert3(key2, data3, base2) {
    if (!data3.length)
      return [];
    const n0 = size, n1 = data3.length, addi = array32(n1);
    let addv = Array(n1), oldv, oldi, i;
    for (i = 0; i < n1; ++i) {
      addv[i] = key2(data3[i]);
      addi[i] = i;
    }
    addv = sort2(addv, addi);
    if (n0) {
      oldv = value3;
      oldi = index5;
      value3 = Array(n0 + n1);
      index5 = array32(n0 + n1);
      merge3(base2, oldv, oldi, n0, addv, addi, n1, value3, index5);
    } else {
      if (base2 > 0)
        for (i = 0; i < n1; ++i) {
          addi[i] += base2;
        }
      value3 = addv;
      index5 = addi;
    }
    size = n0 + n1;
    return {
      index: addi,
      value: addv
    };
  }
  function remove2(num, map7) {
    const n = size;
    let idx, i, j;
    for (i = 0; !map7[index5[i]] && i < n; ++i)
      ;
    for (j = i; i < n; ++i) {
      if (!map7[idx = index5[i]]) {
        index5[j] = idx;
        value3[j] = value3[i];
        ++j;
      }
    }
    size = n - num;
  }
  function reindex(map7) {
    for (let i = 0, n = size; i < n; ++i) {
      index5[i] = map7[index5[i]];
    }
  }
  function bisect2(range8, array6) {
    let n;
    if (array6) {
      n = array6.length;
    } else {
      array6 = value3;
      n = size;
    }
    return [bisectLeft(array6, range8[0], 0, n), bisectRight(array6, range8[1], 0, n)];
  }
  return {
    insert: insert3,
    remove: remove2,
    bisect: bisect2,
    reindex,
    index: () => index5,
    size: () => size
  };
}
function sort2(values5, index5) {
  values5.sort.call(index5, (a4, b2) => {
    const x5 = values5[a4], y5 = values5[b2];
    return x5 < y5 ? -1 : x5 > y5 ? 1 : 0;
  });
  return permute(values5, index5);
}
function merge3(base2, value0, index0, n0, value1, index1, n1, value3, index5) {
  let i0 = 0, i1 = 0, i;
  for (i = 0; i0 < n0 && i1 < n1; ++i) {
    if (value0[i0] < value1[i1]) {
      value3[i] = value0[i0];
      index5[i] = index0[i0++];
    } else {
      value3[i] = value1[i1];
      index5[i] = index1[i1++] + base2;
    }
  }
  for (; i0 < n0; ++i0, ++i) {
    value3[i] = value0[i0];
    index5[i] = index0[i0];
  }
  for (; i1 < n1; ++i1, ++i) {
    value3[i] = value1[i1];
    index5[i] = index1[i1] + base2;
  }
}
function CrossFilter(params2) {
  Transform.call(this, Bitmaps(), params2);
  this._indices = null;
  this._dims = null;
}
CrossFilter.Definition = {
  "type": "CrossFilter",
  "metadata": {},
  "params": [{
    "name": "fields",
    "type": "field",
    "array": true,
    "required": true
  }, {
    "name": "query",
    "type": "array",
    "array": true,
    "required": true,
    "content": {
      "type": "number",
      "array": true,
      "length": 2
    }
  }]
};
inherits(CrossFilter, Transform, {
  transform(_, pulse2) {
    if (!this._dims) {
      return this.init(_, pulse2);
    } else {
      var init2 = _.modified("fields") || _.fields.some((f) => pulse2.modified(f.fields));
      return init2 ? this.reinit(_, pulse2) : this.eval(_, pulse2);
    }
  },
  init(_, pulse2) {
    const fields = _.fields, query = _.query, indices = this._indices = {}, dims = this._dims = [], m3 = query.length;
    let i = 0, key2, index5;
    for (; i < m3; ++i) {
      key2 = fields[i].fname;
      index5 = indices[key2] || (indices[key2] = SortedIndex());
      dims.push(Dimension(index5, i, query[i]));
    }
    return this.eval(_, pulse2);
  },
  reinit(_, pulse2) {
    const output3 = pulse2.materialize().fork(), fields = _.fields, query = _.query, indices = this._indices, dims = this._dims, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), out = output3.rem = output3.add, mod = output3.mod, m3 = query.length, adds = {};
    let add6, index5, key2, mods, remMap, modMap, i, n, f;
    prev.set(curr);
    if (pulse2.rem.length) {
      remMap = this.remove(_, pulse2, output3);
    }
    if (pulse2.add.length) {
      bits.add(pulse2.add);
    }
    if (pulse2.mod.length) {
      modMap = {};
      for (mods = pulse2.mod, i = 0, n = mods.length; i < n; ++i) {
        modMap[mods[i]._index] = 1;
      }
    }
    for (i = 0; i < m3; ++i) {
      f = fields[i];
      if (!dims[i] || _.modified("fields", i) || pulse2.modified(f.fields)) {
        key2 = f.fname;
        if (!(add6 = adds[key2])) {
          indices[key2] = index5 = SortedIndex();
          adds[key2] = add6 = index5.insert(f, pulse2.source, 0);
        }
        dims[i] = Dimension(index5, i, query[i]).onAdd(add6, curr);
      }
    }
    for (i = 0, n = bits.data().length; i < n; ++i) {
      if (remMap[i]) {
        continue;
      } else if (prev[i] !== curr[i]) {
        out.push(i);
      } else if (modMap[i] && curr[i] !== all) {
        mod.push(i);
      }
    }
    bits.mask = (1 << m3) - 1;
    return output3;
  },
  eval(_, pulse2) {
    const output3 = pulse2.materialize().fork(), m3 = this._dims.length;
    let mask = 0;
    if (pulse2.rem.length) {
      this.remove(_, pulse2, output3);
      mask |= (1 << m3) - 1;
    }
    if (_.modified("query") && !_.modified("fields")) {
      mask |= this.update(_, pulse2, output3);
    }
    if (pulse2.add.length) {
      this.insert(_, pulse2, output3);
      mask |= (1 << m3) - 1;
    }
    if (pulse2.mod.length) {
      this.modify(pulse2, output3);
      mask |= (1 << m3) - 1;
    }
    this.value.mask = mask;
    return output3;
  },
  insert(_, pulse2, output3) {
    const tuples = pulse2.add, bits = this.value, dims = this._dims, indices = this._indices, fields = _.fields, adds = {}, out = output3.add, n = bits.size() + tuples.length, m3 = dims.length;
    let k3 = bits.size(), j, key2, add6;
    bits.resize(n, m3);
    bits.add(tuples);
    const curr = bits.curr(), prev = bits.prev(), all = bits.all();
    for (j = 0; j < m3; ++j) {
      key2 = fields[j].fname;
      add6 = adds[key2] || (adds[key2] = indices[key2].insert(fields[j], tuples, k3));
      dims[j].onAdd(add6, curr);
    }
    for (; k3 < n; ++k3) {
      prev[k3] = all;
      if (curr[k3] !== all)
        out.push(k3);
    }
  },
  modify(pulse2, output3) {
    const out = output3.mod, bits = this.value, curr = bits.curr(), all = bits.all(), tuples = pulse2.mod;
    let i, n, k3;
    for (i = 0, n = tuples.length; i < n; ++i) {
      k3 = tuples[i]._index;
      if (curr[k3] !== all)
        out.push(k3);
    }
  },
  remove(_, pulse2, output3) {
    const indices = this._indices, bits = this.value, curr = bits.curr(), prev = bits.prev(), all = bits.all(), map7 = {}, out = output3.rem, tuples = pulse2.rem;
    let i, n, k3, f;
    for (i = 0, n = tuples.length; i < n; ++i) {
      k3 = tuples[i]._index;
      map7[k3] = 1;
      prev[k3] = f = curr[k3];
      curr[k3] = all;
      if (f !== all)
        out.push(k3);
    }
    for (k3 in indices) {
      indices[k3].remove(n, map7);
    }
    this.reindex(pulse2, n, map7);
    return map7;
  },
  reindex(pulse2, num, map7) {
    const indices = this._indices, bits = this.value;
    pulse2.runAfter(() => {
      const indexMap = bits.remove(num, map7);
      for (const key2 in indices)
        indices[key2].reindex(indexMap);
    });
  },
  update(_, pulse2, output3) {
    const dims = this._dims, query = _.query, stamp = pulse2.stamp, m3 = dims.length;
    let mask = 0, i, q;
    output3.filters = 0;
    for (q = 0; q < m3; ++q) {
      if (_.modified("query", q)) {
        i = q;
        ++mask;
      }
    }
    if (mask === 1) {
      mask = dims[i].one;
      this.incrementOne(dims[i], query[i], output3.add, output3.rem);
    } else {
      for (q = 0, mask = 0; q < m3; ++q) {
        if (!_.modified("query", q))
          continue;
        mask |= dims[q].one;
        this.incrementAll(dims[q], query[q], stamp, output3.add);
        output3.rem = output3.add;
      }
    }
    return mask;
  },
  incrementAll(dim, query, stamp, out) {
    const bits = this.value, seen = bits.seen(), curr = bits.curr(), prev = bits.prev(), index5 = dim.index(), old = dim.bisect(dim.range), range8 = dim.bisect(query), lo1 = range8[0], hi1 = range8[1], lo0 = old[0], hi0 = old[1], one4 = dim.one;
    let i, j, k3;
    if (lo1 < lo0) {
      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
        k3 = index5[i];
        if (seen[k3] !== stamp) {
          prev[k3] = curr[k3];
          seen[k3] = stamp;
          out.push(k3);
        }
        curr[k3] ^= one4;
      }
    } else if (lo1 > lo0) {
      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
        k3 = index5[i];
        if (seen[k3] !== stamp) {
          prev[k3] = curr[k3];
          seen[k3] = stamp;
          out.push(k3);
        }
        curr[k3] ^= one4;
      }
    }
    if (hi1 > hi0) {
      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
        k3 = index5[i];
        if (seen[k3] !== stamp) {
          prev[k3] = curr[k3];
          seen[k3] = stamp;
          out.push(k3);
        }
        curr[k3] ^= one4;
      }
    } else if (hi1 < hi0) {
      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
        k3 = index5[i];
        if (seen[k3] !== stamp) {
          prev[k3] = curr[k3];
          seen[k3] = stamp;
          out.push(k3);
        }
        curr[k3] ^= one4;
      }
    }
    dim.range = query.slice();
  },
  incrementOne(dim, query, add6, rem2) {
    const bits = this.value, curr = bits.curr(), index5 = dim.index(), old = dim.bisect(dim.range), range8 = dim.bisect(query), lo1 = range8[0], hi1 = range8[1], lo0 = old[0], hi0 = old[1], one4 = dim.one;
    let i, j, k3;
    if (lo1 < lo0) {
      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
        k3 = index5[i];
        curr[k3] ^= one4;
        add6.push(k3);
      }
    } else if (lo1 > lo0) {
      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
        k3 = index5[i];
        curr[k3] ^= one4;
        rem2.push(k3);
      }
    }
    if (hi1 > hi0) {
      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
        k3 = index5[i];
        curr[k3] ^= one4;
        add6.push(k3);
      }
    } else if (hi1 < hi0) {
      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
        k3 = index5[i];
        curr[k3] ^= one4;
        rem2.push(k3);
      }
    }
    dim.range = query.slice();
  }
});
function ResolveFilter(params2) {
  Transform.call(this, null, params2);
}
ResolveFilter.Definition = {
  "type": "ResolveFilter",
  "metadata": {},
  "params": [{
    "name": "ignore",
    "type": "number",
    "required": true,
    "description": "A bit mask indicating which filters to ignore."
  }, {
    "name": "filter",
    "type": "object",
    "required": true,
    "description": "Per-tuple filter bitmaps from a CrossFilter transform."
  }]
};
inherits(ResolveFilter, Transform, {
  transform(_, pulse2) {
    const ignore = ~(_.ignore || 0), bitmap = _.filter, mask = bitmap.mask;
    if ((mask & ignore) === 0)
      return pulse2.StopPropagation;
    const output3 = pulse2.fork(pulse2.ALL), data3 = bitmap.data(), curr = bitmap.curr(), prev = bitmap.prev(), pass = (k3) => !(curr[k3] & ignore) ? data3[k3] : null;
    output3.filter(output3.MOD, pass);
    if (!(mask & mask - 1)) {
      output3.filter(output3.ADD, pass);
      output3.filter(output3.REM, (k3) => (curr[k3] & ignore) === mask ? data3[k3] : null);
    } else {
      output3.filter(output3.ADD, (k3) => {
        const c3 = curr[k3] & ignore, f = !c3 && c3 ^ prev[k3] & ignore;
        return f ? data3[k3] : null;
      });
      output3.filter(output3.REM, (k3) => {
        const c3 = curr[k3] & ignore, f = c3 && !(c3 ^ (c3 ^ prev[k3] & ignore));
        return f ? data3[k3] : null;
      });
    }
    return output3.filter(output3.SOURCE, (t4) => pass(t4._index));
  }
});

// node_modules/vega-expression/build/vega-expression.module.js
var RawCode = "RawCode";
var Literal = "Literal";
var Property = "Property";
var Identifier2 = "Identifier";
var ArrayExpression = "ArrayExpression";
var BinaryExpression = "BinaryExpression";
var CallExpression = "CallExpression";
var ConditionalExpression = "ConditionalExpression";
var LogicalExpression = "LogicalExpression";
var MemberExpression = "MemberExpression";
var ObjectExpression = "ObjectExpression";
var UnaryExpression = "UnaryExpression";
function ASTNode(type3) {
  this.type = type3;
}
ASTNode.prototype.visit = function(visitor) {
  let c3, i, n;
  if (visitor(this))
    return 1;
  for (c3 = children2(this), i = 0, n = c3.length; i < n; ++i) {
    if (c3[i].visit(visitor))
      return 1;
  }
};
function children2(node) {
  switch (node.type) {
    case ArrayExpression:
      return node.elements;
    case BinaryExpression:
    case LogicalExpression:
      return [node.left, node.right];
    case CallExpression:
      return [node.callee].concat(node.arguments);
    case ConditionalExpression:
      return [node.test, node.consequent, node.alternate];
    case MemberExpression:
      return [node.object, node.property];
    case ObjectExpression:
      return node.properties;
    case Property:
      return [node.key, node.value];
    case UnaryExpression:
      return [node.argument];
    case Identifier2:
    case Literal:
    case RawCode:
    default:
      return [];
  }
}
var TokenName;
var source2;
var index3;
var length;
var lookahead;
var TokenBooleanLiteral = 1;
var TokenEOF = 2;
var TokenIdentifier = 3;
var TokenKeyword = 4;
var TokenNullLiteral = 5;
var TokenNumericLiteral = 6;
var TokenPunctuator = 7;
var TokenStringLiteral = 8;
var TokenRegularExpression = 9;
TokenName = {};
TokenName[TokenBooleanLiteral] = "Boolean";
TokenName[TokenEOF] = "<end>";
TokenName[TokenIdentifier] = "Identifier";
TokenName[TokenKeyword] = "Keyword";
TokenName[TokenNullLiteral] = "Null";
TokenName[TokenNumericLiteral] = "Numeric";
TokenName[TokenPunctuator] = "Punctuator";
TokenName[TokenStringLiteral] = "String";
TokenName[TokenRegularExpression] = "RegularExpression";
var SyntaxArrayExpression = "ArrayExpression";
var SyntaxBinaryExpression = "BinaryExpression";
var SyntaxCallExpression = "CallExpression";
var SyntaxConditionalExpression = "ConditionalExpression";
var SyntaxIdentifier = "Identifier";
var SyntaxLiteral = "Literal";
var SyntaxLogicalExpression = "LogicalExpression";
var SyntaxMemberExpression = "MemberExpression";
var SyntaxObjectExpression = "ObjectExpression";
var SyntaxProperty = "Property";
var SyntaxUnaryExpression = "UnaryExpression";
var MessageUnexpectedToken = "Unexpected token %0";
var MessageUnexpectedNumber = "Unexpected number";
var MessageUnexpectedString = "Unexpected string";
var MessageUnexpectedIdentifier = "Unexpected identifier";
var MessageUnexpectedReserved = "Unexpected reserved word";
var MessageUnexpectedEOS = "Unexpected end of input";
var MessageInvalidRegExp = "Invalid regular expression";
var MessageUnterminatedRegExp = "Invalid regular expression: missing /";
var MessageStrictOctalLiteral = "Octal literals are not allowed in strict mode.";
var MessageStrictDuplicateProperty = "Duplicate data property in object literal not allowed in strict mode";
var ILLEGAL = "ILLEGAL";
var DISABLED = "Disabled.";
var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");
var RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");
function assert(condition, message) {
  if (!condition) {
    throw new Error("ASSERT: " + message);
  }
}
function isDecimalDigit(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
function isHexDigit(ch2) {
  return "0123456789abcdefABCDEF".indexOf(ch2) >= 0;
}
function isOctalDigit(ch2) {
  return "01234567".indexOf(ch2) >= 0;
}
function isWhiteSpace(ch2) {
  return ch2 === 32 || ch2 === 9 || ch2 === 11 || ch2 === 12 || ch2 === 160 || ch2 >= 5760 && [5760, 6158, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(ch2) >= 0;
}
function isLineTerminator(ch2) {
  return ch2 === 10 || ch2 === 13 || ch2 === 8232 || ch2 === 8233;
}
function isIdentifierStart(ch2) {
  return ch2 === 36 || ch2 === 95 || ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 === 92 || ch2 >= 128 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch2));
}
function isIdentifierPart(ch2) {
  return ch2 === 36 || ch2 === 95 || ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 48 && ch2 <= 57 || ch2 === 92 || ch2 >= 128 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch2));
}
var keywords = {
  "if": 1,
  "in": 1,
  "do": 1,
  "var": 1,
  "for": 1,
  "new": 1,
  "try": 1,
  "let": 1,
  "this": 1,
  "else": 1,
  "case": 1,
  "void": 1,
  "with": 1,
  "enum": 1,
  "while": 1,
  "break": 1,
  "catch": 1,
  "throw": 1,
  "const": 1,
  "yield": 1,
  "class": 1,
  "super": 1,
  "return": 1,
  "typeof": 1,
  "delete": 1,
  "switch": 1,
  "export": 1,
  "import": 1,
  "public": 1,
  "static": 1,
  "default": 1,
  "finally": 1,
  "extends": 1,
  "package": 1,
  "private": 1,
  "function": 1,
  "continue": 1,
  "debugger": 1,
  "interface": 1,
  "protected": 1,
  "instanceof": 1,
  "implements": 1
};
function skipComment() {
  while (index3 < length) {
    const ch2 = source2.charCodeAt(index3);
    if (isWhiteSpace(ch2) || isLineTerminator(ch2)) {
      ++index3;
    } else {
      break;
    }
  }
}
function scanHexEscape(prefix) {
  var i, len, ch2, code = 0;
  len = prefix === "u" ? 4 : 2;
  for (i = 0; i < len; ++i) {
    if (index3 < length && isHexDigit(source2[index3])) {
      ch2 = source2[index3++];
      code = code * 16 + "0123456789abcdef".indexOf(ch2.toLowerCase());
    } else {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
  }
  return String.fromCharCode(code);
}
function scanUnicodeCodePointEscape() {
  var ch2, code, cu1, cu2;
  ch2 = source2[index3];
  code = 0;
  if (ch2 === "}") {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  while (index3 < length) {
    ch2 = source2[index3++];
    if (!isHexDigit(ch2)) {
      break;
    }
    code = code * 16 + "0123456789abcdef".indexOf(ch2.toLowerCase());
  }
  if (code > 1114111 || ch2 !== "}") {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  if (code <= 65535) {
    return String.fromCharCode(code);
  }
  cu1 = (code - 65536 >> 10) + 55296;
  cu2 = (code - 65536 & 1023) + 56320;
  return String.fromCharCode(cu1, cu2);
}
function getEscapedIdentifier() {
  var ch2, id2;
  ch2 = source2.charCodeAt(index3++);
  id2 = String.fromCharCode(ch2);
  if (ch2 === 92) {
    if (source2.charCodeAt(index3) !== 117) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    ++index3;
    ch2 = scanHexEscape("u");
    if (!ch2 || ch2 === "\\" || !isIdentifierStart(ch2.charCodeAt(0))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
    id2 = ch2;
  }
  while (index3 < length) {
    ch2 = source2.charCodeAt(index3);
    if (!isIdentifierPart(ch2)) {
      break;
    }
    ++index3;
    id2 += String.fromCharCode(ch2);
    if (ch2 === 92) {
      id2 = id2.substr(0, id2.length - 1);
      if (source2.charCodeAt(index3) !== 117) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      ++index3;
      ch2 = scanHexEscape("u");
      if (!ch2 || ch2 === "\\" || !isIdentifierPart(ch2.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
      id2 += ch2;
    }
  }
  return id2;
}
function getIdentifier() {
  var start, ch2;
  start = index3++;
  while (index3 < length) {
    ch2 = source2.charCodeAt(index3);
    if (ch2 === 92) {
      index3 = start;
      return getEscapedIdentifier();
    }
    if (isIdentifierPart(ch2)) {
      ++index3;
    } else {
      break;
    }
  }
  return source2.slice(start, index3);
}
function scanIdentifier() {
  var start, id2, type3;
  start = index3;
  id2 = source2.charCodeAt(index3) === 92 ? getEscapedIdentifier() : getIdentifier();
  if (id2.length === 1) {
    type3 = TokenIdentifier;
  } else if (keywords.hasOwnProperty(id2)) {
    type3 = TokenKeyword;
  } else if (id2 === "null") {
    type3 = TokenNullLiteral;
  } else if (id2 === "true" || id2 === "false") {
    type3 = TokenBooleanLiteral;
  } else {
    type3 = TokenIdentifier;
  }
  return {
    type: type3,
    value: id2,
    start,
    end: index3
  };
}
function scanPunctuator() {
  var start = index3, code = source2.charCodeAt(index3), code2, ch1 = source2[index3], ch2, ch3, ch4;
  switch (code) {
    case 46:
    case 40:
    case 41:
    case 59:
    case 44:
    case 123:
    case 125:
    case 91:
    case 93:
    case 58:
    case 63:
    case 126:
      ++index3;
      return {
        type: TokenPunctuator,
        value: String.fromCharCode(code),
        start,
        end: index3
      };
    default:
      code2 = source2.charCodeAt(index3 + 1);
      if (code2 === 61) {
        switch (code) {
          case 43:
          case 45:
          case 47:
          case 60:
          case 62:
          case 94:
          case 124:
          case 37:
          case 38:
          case 42:
            index3 += 2;
            return {
              type: TokenPunctuator,
              value: String.fromCharCode(code) + String.fromCharCode(code2),
              start,
              end: index3
            };
          case 33:
          case 61:
            index3 += 2;
            if (source2.charCodeAt(index3) === 61) {
              ++index3;
            }
            return {
              type: TokenPunctuator,
              value: source2.slice(start, index3),
              start,
              end: index3
            };
        }
      }
  }
  ch4 = source2.substr(index3, 4);
  if (ch4 === ">>>=") {
    index3 += 4;
    return {
      type: TokenPunctuator,
      value: ch4,
      start,
      end: index3
    };
  }
  ch3 = ch4.substr(0, 3);
  if (ch3 === ">>>" || ch3 === "<<=" || ch3 === ">>=") {
    index3 += 3;
    return {
      type: TokenPunctuator,
      value: ch3,
      start,
      end: index3
    };
  }
  ch2 = ch3.substr(0, 2);
  if (ch1 === ch2[1] && "+-<>&|".indexOf(ch1) >= 0 || ch2 === "=>") {
    index3 += 2;
    return {
      type: TokenPunctuator,
      value: ch2,
      start,
      end: index3
    };
  }
  if (ch2 === "//") {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
    ++index3;
    return {
      type: TokenPunctuator,
      value: ch1,
      start,
      end: index3
    };
  }
  throwError({}, MessageUnexpectedToken, ILLEGAL);
}
function scanHexLiteral(start) {
  let number9 = "";
  while (index3 < length) {
    if (!isHexDigit(source2[index3])) {
      break;
    }
    number9 += source2[index3++];
  }
  if (number9.length === 0) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  if (isIdentifierStart(source2.charCodeAt(index3))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  return {
    type: TokenNumericLiteral,
    value: parseInt("0x" + number9, 16),
    start,
    end: index3
  };
}
function scanOctalLiteral(start) {
  let number9 = "0" + source2[index3++];
  while (index3 < length) {
    if (!isOctalDigit(source2[index3])) {
      break;
    }
    number9 += source2[index3++];
  }
  if (isIdentifierStart(source2.charCodeAt(index3)) || isDecimalDigit(source2.charCodeAt(index3))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  return {
    type: TokenNumericLiteral,
    value: parseInt(number9, 8),
    octal: true,
    start,
    end: index3
  };
}
function scanNumericLiteral() {
  var number9, start, ch2;
  ch2 = source2[index3];
  assert(isDecimalDigit(ch2.charCodeAt(0)) || ch2 === ".", "Numeric literal must start with a decimal digit or a decimal point");
  start = index3;
  number9 = "";
  if (ch2 !== ".") {
    number9 = source2[index3++];
    ch2 = source2[index3];
    if (number9 === "0") {
      if (ch2 === "x" || ch2 === "X") {
        ++index3;
        return scanHexLiteral(start);
      }
      if (isOctalDigit(ch2)) {
        return scanOctalLiteral(start);
      }
      if (ch2 && isDecimalDigit(ch2.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }
    while (isDecimalDigit(source2.charCodeAt(index3))) {
      number9 += source2[index3++];
    }
    ch2 = source2[index3];
  }
  if (ch2 === ".") {
    number9 += source2[index3++];
    while (isDecimalDigit(source2.charCodeAt(index3))) {
      number9 += source2[index3++];
    }
    ch2 = source2[index3];
  }
  if (ch2 === "e" || ch2 === "E") {
    number9 += source2[index3++];
    ch2 = source2[index3];
    if (ch2 === "+" || ch2 === "-") {
      number9 += source2[index3++];
    }
    if (isDecimalDigit(source2.charCodeAt(index3))) {
      while (isDecimalDigit(source2.charCodeAt(index3))) {
        number9 += source2[index3++];
      }
    } else {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }
  }
  if (isIdentifierStart(source2.charCodeAt(index3))) {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  return {
    type: TokenNumericLiteral,
    value: parseFloat(number9),
    start,
    end: index3
  };
}
function scanStringLiteral() {
  var str = "", quote, start, ch2, code, octal = false;
  quote = source2[index3];
  assert(quote === "'" || quote === '"', "String literal must starts with a quote");
  start = index3;
  ++index3;
  while (index3 < length) {
    ch2 = source2[index3++];
    if (ch2 === quote) {
      quote = "";
      break;
    } else if (ch2 === "\\") {
      ch2 = source2[index3++];
      if (!ch2 || !isLineTerminator(ch2.charCodeAt(0))) {
        switch (ch2) {
          case "u":
          case "x":
            if (source2[index3] === "{") {
              ++index3;
              str += scanUnicodeCodePointEscape();
            } else {
              str += scanHexEscape(ch2);
            }
            break;
          case "n":
            str += "\n";
            break;
          case "r":
            str += "\r";
            break;
          case "t":
            str += "	";
            break;
          case "b":
            str += "\b";
            break;
          case "f":
            str += "\f";
            break;
          case "v":
            str += "\v";
            break;
          default:
            if (isOctalDigit(ch2)) {
              code = "01234567".indexOf(ch2);
              if (code !== 0) {
                octal = true;
              }
              if (index3 < length && isOctalDigit(source2[index3])) {
                octal = true;
                code = code * 8 + "01234567".indexOf(source2[index3++]);
                if ("0123".indexOf(ch2) >= 0 && index3 < length && isOctalDigit(source2[index3])) {
                  code = code * 8 + "01234567".indexOf(source2[index3++]);
                }
              }
              str += String.fromCharCode(code);
            } else {
              str += ch2;
            }
            break;
        }
      } else {
        if (ch2 === "\r" && source2[index3] === "\n") {
          ++index3;
        }
      }
    } else if (isLineTerminator(ch2.charCodeAt(0))) {
      break;
    } else {
      str += ch2;
    }
  }
  if (quote !== "") {
    throwError({}, MessageUnexpectedToken, ILLEGAL);
  }
  return {
    type: TokenStringLiteral,
    value: str,
    octal,
    start,
    end: index3
  };
}
function testRegExp(pattern, flags) {
  let tmp = pattern;
  if (flags.indexOf("u") >= 0) {
    tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, ($0, $1) => {
      if (parseInt($1, 16) <= 1114111) {
        return "x";
      }
      throwError({}, MessageInvalidRegExp);
    }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
  }
  try {
    new RegExp(tmp);
  } catch (e3) {
    throwError({}, MessageInvalidRegExp);
  }
  try {
    return new RegExp(pattern, flags);
  } catch (exception) {
    return null;
  }
}
function scanRegExpBody() {
  var ch2, str, classMarker, terminated, body;
  ch2 = source2[index3];
  assert(ch2 === "/", "Regular expression literal must start with a slash");
  str = source2[index3++];
  classMarker = false;
  terminated = false;
  while (index3 < length) {
    ch2 = source2[index3++];
    str += ch2;
    if (ch2 === "\\") {
      ch2 = source2[index3++];
      if (isLineTerminator(ch2.charCodeAt(0))) {
        throwError({}, MessageUnterminatedRegExp);
      }
      str += ch2;
    } else if (isLineTerminator(ch2.charCodeAt(0))) {
      throwError({}, MessageUnterminatedRegExp);
    } else if (classMarker) {
      if (ch2 === "]") {
        classMarker = false;
      }
    } else {
      if (ch2 === "/") {
        terminated = true;
        break;
      } else if (ch2 === "[") {
        classMarker = true;
      }
    }
  }
  if (!terminated) {
    throwError({}, MessageUnterminatedRegExp);
  }
  body = str.substr(1, str.length - 2);
  return {
    value: body,
    literal: str
  };
}
function scanRegExpFlags() {
  var ch2, str, flags;
  str = "";
  flags = "";
  while (index3 < length) {
    ch2 = source2[index3];
    if (!isIdentifierPart(ch2.charCodeAt(0))) {
      break;
    }
    ++index3;
    if (ch2 === "\\" && index3 < length) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    } else {
      flags += ch2;
      str += ch2;
    }
  }
  if (flags.search(/[^gimuy]/g) >= 0) {
    throwError({}, MessageInvalidRegExp, flags);
  }
  return {
    value: flags,
    literal: str
  };
}
function scanRegExp() {
  var start, body, flags, value3;
  lookahead = null;
  skipComment();
  start = index3;
  body = scanRegExpBody();
  flags = scanRegExpFlags();
  value3 = testRegExp(body.value, flags.value);
  return {
    literal: body.literal + flags.literal,
    value: value3,
    regex: {
      pattern: body.value,
      flags: flags.value
    },
    start,
    end: index3
  };
}
function isIdentifierName(token) {
  return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
}
function advance() {
  skipComment();
  if (index3 >= length) {
    return {
      type: TokenEOF,
      start: index3,
      end: index3
    };
  }
  const ch2 = source2.charCodeAt(index3);
  if (isIdentifierStart(ch2)) {
    return scanIdentifier();
  }
  if (ch2 === 40 || ch2 === 41 || ch2 === 59) {
    return scanPunctuator();
  }
  if (ch2 === 39 || ch2 === 34) {
    return scanStringLiteral();
  }
  if (ch2 === 46) {
    if (isDecimalDigit(source2.charCodeAt(index3 + 1))) {
      return scanNumericLiteral();
    }
    return scanPunctuator();
  }
  if (isDecimalDigit(ch2)) {
    return scanNumericLiteral();
  }
  return scanPunctuator();
}
function lex() {
  const token = lookahead;
  index3 = token.end;
  lookahead = advance();
  index3 = token.end;
  return token;
}
function peek2() {
  const pos = index3;
  lookahead = advance();
  index3 = pos;
}
function finishArrayExpression(elements) {
  const node = new ASTNode(SyntaxArrayExpression);
  node.elements = elements;
  return node;
}
function finishBinaryExpression(operator2, left, right) {
  const node = new ASTNode(operator2 === "||" || operator2 === "&&" ? SyntaxLogicalExpression : SyntaxBinaryExpression);
  node.operator = operator2;
  node.left = left;
  node.right = right;
  return node;
}
function finishCallExpression(callee, args) {
  const node = new ASTNode(SyntaxCallExpression);
  node.callee = callee;
  node.arguments = args;
  return node;
}
function finishConditionalExpression(test2, consequent, alternate) {
  const node = new ASTNode(SyntaxConditionalExpression);
  node.test = test2;
  node.consequent = consequent;
  node.alternate = alternate;
  return node;
}
function finishIdentifier(name4) {
  const node = new ASTNode(SyntaxIdentifier);
  node.name = name4;
  return node;
}
function finishLiteral(token) {
  const node = new ASTNode(SyntaxLiteral);
  node.value = token.value;
  node.raw = source2.slice(token.start, token.end);
  if (token.regex) {
    if (node.raw === "//") {
      node.raw = "/(?:)/";
    }
    node.regex = token.regex;
  }
  return node;
}
function finishMemberExpression(accessor2, object2, property2) {
  const node = new ASTNode(SyntaxMemberExpression);
  node.computed = accessor2 === "[";
  node.object = object2;
  node.property = property2;
  if (!node.computed)
    property2.member = true;
  return node;
}
function finishObjectExpression(properties) {
  const node = new ASTNode(SyntaxObjectExpression);
  node.properties = properties;
  return node;
}
function finishProperty(kind, key2, value3) {
  const node = new ASTNode(SyntaxProperty);
  node.key = key2;
  node.value = value3;
  node.kind = kind;
  return node;
}
function finishUnaryExpression(operator2, argument) {
  const node = new ASTNode(SyntaxUnaryExpression);
  node.operator = operator2;
  node.argument = argument;
  node.prefix = true;
  return node;
}
function throwError(token, messageFormat) {
  var error2, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, (whole, index5) => {
    assert(index5 < args.length, "Message reference must be in range");
    return args[index5];
  });
  error2 = new Error(msg);
  error2.index = index3;
  error2.description = msg;
  throw error2;
}
function throwUnexpected(token) {
  if (token.type === TokenEOF) {
    throwError(token, MessageUnexpectedEOS);
  }
  if (token.type === TokenNumericLiteral) {
    throwError(token, MessageUnexpectedNumber);
  }
  if (token.type === TokenStringLiteral) {
    throwError(token, MessageUnexpectedString);
  }
  if (token.type === TokenIdentifier) {
    throwError(token, MessageUnexpectedIdentifier);
  }
  if (token.type === TokenKeyword) {
    throwError(token, MessageUnexpectedReserved);
  }
  throwError(token, MessageUnexpectedToken, token.value);
}
function expect(value3) {
  const token = lex();
  if (token.type !== TokenPunctuator || token.value !== value3) {
    throwUnexpected(token);
  }
}
function match(value3) {
  return lookahead.type === TokenPunctuator && lookahead.value === value3;
}
function matchKeyword(keyword) {
  return lookahead.type === TokenKeyword && lookahead.value === keyword;
}
function parseArrayInitialiser() {
  const elements = [];
  index3 = lookahead.start;
  expect("[");
  while (!match("]")) {
    if (match(",")) {
      lex();
      elements.push(null);
    } else {
      elements.push(parseConditionalExpression());
      if (!match("]")) {
        expect(",");
      }
    }
  }
  lex();
  return finishArrayExpression(elements);
}
function parseObjectPropertyKey() {
  index3 = lookahead.start;
  const token = lex();
  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
    if (token.octal) {
      throwError(token, MessageStrictOctalLiteral);
    }
    return finishLiteral(token);
  }
  return finishIdentifier(token.value);
}
function parseObjectProperty() {
  var token, key2, id2, value3;
  index3 = lookahead.start;
  token = lookahead;
  if (token.type === TokenIdentifier) {
    id2 = parseObjectPropertyKey();
    expect(":");
    value3 = parseConditionalExpression();
    return finishProperty("init", id2, value3);
  }
  if (token.type === TokenEOF || token.type === TokenPunctuator) {
    throwUnexpected(token);
  } else {
    key2 = parseObjectPropertyKey();
    expect(":");
    value3 = parseConditionalExpression();
    return finishProperty("init", key2, value3);
  }
}
function parseObjectInitialiser() {
  var properties = [], property2, name4, key2, map7 = {}, toString2 = String;
  index3 = lookahead.start;
  expect("{");
  while (!match("}")) {
    property2 = parseObjectProperty();
    if (property2.key.type === SyntaxIdentifier) {
      name4 = property2.key.name;
    } else {
      name4 = toString2(property2.key.value);
    }
    key2 = "$" + name4;
    if (Object.prototype.hasOwnProperty.call(map7, key2)) {
      throwError({}, MessageStrictDuplicateProperty);
    } else {
      map7[key2] = true;
    }
    properties.push(property2);
    if (!match("}")) {
      expect(",");
    }
  }
  expect("}");
  return finishObjectExpression(properties);
}
function parseGroupExpression() {
  expect("(");
  const expr2 = parseExpression();
  expect(")");
  return expr2;
}
var legalKeywords = {
  "if": 1
};
function parsePrimaryExpression() {
  var type3, token, expr2;
  if (match("(")) {
    return parseGroupExpression();
  }
  if (match("[")) {
    return parseArrayInitialiser();
  }
  if (match("{")) {
    return parseObjectInitialiser();
  }
  type3 = lookahead.type;
  index3 = lookahead.start;
  if (type3 === TokenIdentifier || legalKeywords[lookahead.value]) {
    expr2 = finishIdentifier(lex().value);
  } else if (type3 === TokenStringLiteral || type3 === TokenNumericLiteral) {
    if (lookahead.octal) {
      throwError(lookahead, MessageStrictOctalLiteral);
    }
    expr2 = finishLiteral(lex());
  } else if (type3 === TokenKeyword) {
    throw new Error(DISABLED);
  } else if (type3 === TokenBooleanLiteral) {
    token = lex();
    token.value = token.value === "true";
    expr2 = finishLiteral(token);
  } else if (type3 === TokenNullLiteral) {
    token = lex();
    token.value = null;
    expr2 = finishLiteral(token);
  } else if (match("/") || match("/=")) {
    expr2 = finishLiteral(scanRegExp());
    peek2();
  } else {
    throwUnexpected(lex());
  }
  return expr2;
}
function parseArguments() {
  const args = [];
  expect("(");
  if (!match(")")) {
    while (index3 < length) {
      args.push(parseConditionalExpression());
      if (match(")")) {
        break;
      }
      expect(",");
    }
  }
  expect(")");
  return args;
}
function parseNonComputedProperty() {
  index3 = lookahead.start;
  const token = lex();
  if (!isIdentifierName(token)) {
    throwUnexpected(token);
  }
  return finishIdentifier(token.value);
}
function parseNonComputedMember() {
  expect(".");
  return parseNonComputedProperty();
}
function parseComputedMember() {
  expect("[");
  const expr2 = parseExpression();
  expect("]");
  return expr2;
}
function parseLeftHandSideExpressionAllowCall() {
  var expr2, args, property2;
  expr2 = parsePrimaryExpression();
  for (; ; ) {
    if (match(".")) {
      property2 = parseNonComputedMember();
      expr2 = finishMemberExpression(".", expr2, property2);
    } else if (match("(")) {
      args = parseArguments();
      expr2 = finishCallExpression(expr2, args);
    } else if (match("[")) {
      property2 = parseComputedMember();
      expr2 = finishMemberExpression("[", expr2, property2);
    } else {
      break;
    }
  }
  return expr2;
}
function parsePostfixExpression() {
  const expr2 = parseLeftHandSideExpressionAllowCall();
  if (lookahead.type === TokenPunctuator) {
    if (match("++") || match("--")) {
      throw new Error(DISABLED);
    }
  }
  return expr2;
}
function parseUnaryExpression() {
  var token, expr2;
  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
    expr2 = parsePostfixExpression();
  } else if (match("++") || match("--")) {
    throw new Error(DISABLED);
  } else if (match("+") || match("-") || match("~") || match("!")) {
    token = lex();
    expr2 = parseUnaryExpression();
    expr2 = finishUnaryExpression(token.value, expr2);
  } else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
    throw new Error(DISABLED);
  } else {
    expr2 = parsePostfixExpression();
  }
  return expr2;
}
function binaryPrecedence(token) {
  let prec = 0;
  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
    return 0;
  }
  switch (token.value) {
    case "||":
      prec = 1;
      break;
    case "&&":
      prec = 2;
      break;
    case "|":
      prec = 3;
      break;
    case "^":
      prec = 4;
      break;
    case "&":
      prec = 5;
      break;
    case "==":
    case "!=":
    case "===":
    case "!==":
      prec = 6;
      break;
    case "<":
    case ">":
    case "<=":
    case ">=":
    case "instanceof":
    case "in":
      prec = 7;
      break;
    case "<<":
    case ">>":
    case ">>>":
      prec = 8;
      break;
    case "+":
    case "-":
      prec = 9;
      break;
    case "*":
    case "/":
    case "%":
      prec = 11;
      break;
  }
  return prec;
}
function parseBinaryExpression() {
  var marker, markers, expr2, token, prec, stack2, right, operator2, left, i;
  marker = lookahead;
  left = parseUnaryExpression();
  token = lookahead;
  prec = binaryPrecedence(token);
  if (prec === 0) {
    return left;
  }
  token.prec = prec;
  lex();
  markers = [marker, lookahead];
  right = parseUnaryExpression();
  stack2 = [left, token, right];
  while ((prec = binaryPrecedence(lookahead)) > 0) {
    while (stack2.length > 2 && prec <= stack2[stack2.length - 2].prec) {
      right = stack2.pop();
      operator2 = stack2.pop().value;
      left = stack2.pop();
      markers.pop();
      expr2 = finishBinaryExpression(operator2, left, right);
      stack2.push(expr2);
    }
    token = lex();
    token.prec = prec;
    stack2.push(token);
    markers.push(lookahead);
    expr2 = parseUnaryExpression();
    stack2.push(expr2);
  }
  i = stack2.length - 1;
  expr2 = stack2[i];
  markers.pop();
  while (i > 1) {
    markers.pop();
    expr2 = finishBinaryExpression(stack2[i - 1].value, stack2[i - 2], expr2);
    i -= 2;
  }
  return expr2;
}
function parseConditionalExpression() {
  var expr2, consequent, alternate;
  expr2 = parseBinaryExpression();
  if (match("?")) {
    lex();
    consequent = parseConditionalExpression();
    expect(":");
    alternate = parseConditionalExpression();
    expr2 = finishConditionalExpression(expr2, consequent, alternate);
  }
  return expr2;
}
function parseExpression() {
  const expr2 = parseConditionalExpression();
  if (match(",")) {
    throw new Error(DISABLED);
  }
  return expr2;
}
function parser(code) {
  source2 = code;
  index3 = 0;
  length = source2.length;
  lookahead = null;
  peek2();
  const expr2 = parseExpression();
  if (lookahead.type !== TokenEOF) {
    throw new Error("Unexpect token after expression.");
  }
  return expr2;
}
var Constants = {
  NaN: "NaN",
  E: "Math.E",
  LN2: "Math.LN2",
  LN10: "Math.LN10",
  LOG2E: "Math.LOG2E",
  LOG10E: "Math.LOG10E",
  PI: "Math.PI",
  SQRT1_2: "Math.SQRT1_2",
  SQRT2: "Math.SQRT2",
  MIN_VALUE: "Number.MIN_VALUE",
  MAX_VALUE: "Number.MAX_VALUE"
};
function Functions(codegen2) {
  function fncall(name4, args, cast, type3) {
    let obj = codegen2(args[0]);
    if (cast) {
      obj = cast + "(" + obj + ")";
      if (cast.lastIndexOf("new ", 0) === 0)
        obj = "(" + obj + ")";
    }
    return obj + "." + name4 + (type3 < 0 ? "" : type3 === 0 ? "()" : "(" + args.slice(1).map(codegen2).join(",") + ")");
  }
  function fn(name4, cast, type3) {
    return (args) => fncall(name4, args, cast, type3);
  }
  const DATE2 = "new Date", STRING = "String", REGEXP = "RegExp";
  return {
    isNaN: "Number.isNaN",
    isFinite: "Number.isFinite",
    abs: "Math.abs",
    acos: "Math.acos",
    asin: "Math.asin",
    atan: "Math.atan",
    atan2: "Math.atan2",
    ceil: "Math.ceil",
    cos: "Math.cos",
    exp: "Math.exp",
    floor: "Math.floor",
    log: "Math.log",
    max: "Math.max",
    min: "Math.min",
    pow: "Math.pow",
    random: "Math.random",
    round: "Math.round",
    sin: "Math.sin",
    sqrt: "Math.sqrt",
    tan: "Math.tan",
    clamp: function(args) {
      if (args.length < 3)
        error("Missing arguments to clamp function.");
      if (args.length > 3)
        error("Too many arguments to clamp function.");
      const a4 = args.map(codegen2);
      return "Math.max(" + a4[1] + ", Math.min(" + a4[2] + "," + a4[0] + "))";
    },
    now: "Date.now",
    utc: "Date.UTC",
    datetime: DATE2,
    date: fn("getDate", DATE2, 0),
    day: fn("getDay", DATE2, 0),
    year: fn("getFullYear", DATE2, 0),
    month: fn("getMonth", DATE2, 0),
    hours: fn("getHours", DATE2, 0),
    minutes: fn("getMinutes", DATE2, 0),
    seconds: fn("getSeconds", DATE2, 0),
    milliseconds: fn("getMilliseconds", DATE2, 0),
    time: fn("getTime", DATE2, 0),
    timezoneoffset: fn("getTimezoneOffset", DATE2, 0),
    utcdate: fn("getUTCDate", DATE2, 0),
    utcday: fn("getUTCDay", DATE2, 0),
    utcyear: fn("getUTCFullYear", DATE2, 0),
    utcmonth: fn("getUTCMonth", DATE2, 0),
    utchours: fn("getUTCHours", DATE2, 0),
    utcminutes: fn("getUTCMinutes", DATE2, 0),
    utcseconds: fn("getUTCSeconds", DATE2, 0),
    utcmilliseconds: fn("getUTCMilliseconds", DATE2, 0),
    length: fn("length", null, -1),
    parseFloat: "parseFloat",
    parseInt: "parseInt",
    upper: fn("toUpperCase", STRING, 0),
    lower: fn("toLowerCase", STRING, 0),
    substring: fn("substring", STRING),
    split: fn("split", STRING),
    trim: fn("trim", STRING, 0),
    regexp: REGEXP,
    test: fn("test", REGEXP),
    if: function(args) {
      if (args.length < 3)
        error("Missing arguments to if function.");
      if (args.length > 3)
        error("Too many arguments to if function.");
      const a4 = args.map(codegen2);
      return "(" + a4[0] + "?" + a4[1] + ":" + a4[2] + ")";
    }
  };
}
function stripQuotes(s2) {
  const n = s2 && s2.length - 1;
  return n && (s2[0] === '"' && s2[n] === '"' || s2[0] === "'" && s2[n] === "'") ? s2.slice(1, -1) : s2;
}
function codegen(opt) {
  opt = opt || {};
  const allowed = opt.allowed ? toSet(opt.allowed) : {}, forbidden = opt.forbidden ? toSet(opt.forbidden) : {}, constants3 = opt.constants || Constants, functions = (opt.functions || Functions)(visit2), globalvar = opt.globalvar, fieldvar = opt.fieldvar, outputGlobal = isFunction(globalvar) ? globalvar : (id2) => `${globalvar}["${id2}"]`;
  let globals = {}, fields = {}, memberDepth = 0;
  function visit2(ast) {
    if (isString(ast))
      return ast;
    const generator = Generators[ast.type];
    if (generator == null)
      error("Unsupported type: " + ast.type);
    return generator(ast);
  }
  const Generators = {
    Literal: (n) => n.raw,
    Identifier: (n) => {
      const id2 = n.name;
      if (memberDepth > 0) {
        return id2;
      } else if (has(forbidden, id2)) {
        return error("Illegal identifier: " + id2);
      } else if (has(constants3, id2)) {
        return constants3[id2];
      } else if (has(allowed, id2)) {
        return id2;
      } else {
        globals[id2] = 1;
        return outputGlobal(id2);
      }
    },
    MemberExpression: (n) => {
      const d = !n.computed, o = visit2(n.object);
      if (d)
        memberDepth += 1;
      const p = visit2(n.property);
      if (o === fieldvar) {
        fields[stripQuotes(p)] = 1;
      }
      if (d)
        memberDepth -= 1;
      return o + (d ? "." + p : "[" + p + "]");
    },
    CallExpression: (n) => {
      if (n.callee.type !== "Identifier") {
        error("Illegal callee type: " + n.callee.type);
      }
      const callee = n.callee.name, args = n.arguments, fn = has(functions, callee) && functions[callee];
      if (!fn)
        error("Unrecognized function: " + callee);
      return isFunction(fn) ? fn(args) : fn + "(" + args.map(visit2).join(",") + ")";
    },
    ArrayExpression: (n) => "[" + n.elements.map(visit2).join(",") + "]",
    BinaryExpression: (n) => "(" + visit2(n.left) + " " + n.operator + " " + visit2(n.right) + ")",
    UnaryExpression: (n) => "(" + n.operator + visit2(n.argument) + ")",
    ConditionalExpression: (n) => "(" + visit2(n.test) + "?" + visit2(n.consequent) + ":" + visit2(n.alternate) + ")",
    LogicalExpression: (n) => "(" + visit2(n.left) + n.operator + visit2(n.right) + ")",
    ObjectExpression: (n) => "{" + n.properties.map(visit2).join(",") + "}",
    Property: (n) => {
      memberDepth += 1;
      const k3 = visit2(n.key);
      memberDepth -= 1;
      return k3 + ":" + visit2(n.value);
    }
  };
  function codegen2(ast) {
    const result = {
      code: visit2(ast),
      globals: Object.keys(globals),
      fields: Object.keys(fields)
    };
    globals = {};
    fields = {};
    return result;
  }
  codegen2.functions = functions;
  codegen2.constants = constants3;
  return codegen2;
}

// node_modules/vega-selections/node_modules/d3-array/src/ascending.js
function ascending4(a4, b2) {
  return a4 == null || b2 == null ? NaN : a4 < b2 ? -1 : a4 > b2 ? 1 : a4 >= b2 ? 0 : NaN;
}

// node_modules/vega-selections/node_modules/d3-array/src/bisector.js
function bisector2(f) {
  let delta = f;
  let compare12 = f;
  let compare22 = f;
  if (f.length !== 2) {
    delta = (d, x5) => f(d) - x5;
    compare12 = ascending4;
    compare22 = (d, x5) => ascending4(f(d), x5);
  }
  function left(a4, x5, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare12(x5, x5) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare22(a4[mid], x5) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a4, x5, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare12(x5, x5) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare22(a4[mid], x5) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a4, x5, lo = 0, hi = a4.length) {
    const i = left(a4, x5, lo, hi - 1);
    return i > lo && delta(a4[i - 1], x5) > -delta(a4[i], x5) ? i - 1 : i;
  }
  return { left, center, right };
}

// node_modules/vega-selections/node_modules/d3-array/src/number.js
function number6(x5) {
  return x5 === null ? NaN : +x5;
}

// node_modules/vega-selections/node_modules/d3-array/src/bisect.js
var ascendingBisect2 = bisector2(ascending4);
var bisectRight2 = ascendingBisect2.right;
var bisectLeft2 = ascendingBisect2.left;
var bisectCenter2 = bisector2(number6).center;

// node_modules/vega-selections/node_modules/d3-array/src/array.js
var array4 = Array.prototype;
var slice4 = array4.slice;
var map5 = array4.map;

// node_modules/vega-selections/node_modules/d3-array/src/ticks.js
var e102 = Math.sqrt(50);
var e52 = Math.sqrt(10);
var e22 = Math.sqrt(2);

// node_modules/vega-selections/node_modules/d3-array/src/shuffle.js
var shuffle_default2 = shuffler2(Math.random);
function shuffler2(random2) {
  return function shuffle2(array6, i0 = 0, i1 = array6.length) {
    let m3 = i1 - (i0 = +i0);
    while (m3) {
      const i = random2() * m3-- | 0, t4 = array6[m3 + i0];
      array6[m3 + i0] = array6[i + i0];
      array6[i + i0] = t4;
    }
    return array6;
  };
}

// node_modules/vega-selections/node_modules/d3-array/src/intersection.js
function intersection2(values5, ...others) {
  values5 = new InternSet(values5);
  others = others.map(set5);
  out:
    for (const value3 of values5) {
      for (const other of others) {
        if (!other.has(value3)) {
          values5.delete(value3);
          continue out;
        }
      }
    }
  return values5;
}
function set5(values5) {
  return values5 instanceof InternSet ? values5 : new InternSet(values5);
}

// node_modules/vega-selections/node_modules/d3-array/src/union.js
function union2(...others) {
  const set7 = new InternSet();
  for (const other of others) {
    for (const o of other) {
      set7.add(o);
    }
  }
  return set7;
}

// node_modules/vega-selections/build/vega-selection.module.js
var Intersect = "intersect";
var Union = "union";
var VlMulti = "vlMulti";
var VlPoint = "vlPoint";
var Or = "or";
var And = "and";
var SelectionId = "_vgsid_";
var $selectionId = field(SelectionId);
var TYPE_ENUM = "E";
var TYPE_RANGE_INC = "R";
var TYPE_RANGE_EXC = "R-E";
var TYPE_RANGE_LE = "R-LE";
var TYPE_RANGE_RE = "R-RE";
var UNIT_INDEX = "index:unit";
function testPoint(datum2, entry2) {
  var fields = entry2.fields, values5 = entry2.values, n = fields.length, i = 0, dval, f;
  for (; i < n; ++i) {
    f = fields[i];
    f.getter = field.getter || field(f.field);
    dval = f.getter(datum2);
    if (isDate(dval))
      dval = toNumber(dval);
    if (isDate(values5[i]))
      values5[i] = toNumber(values5[i]);
    if (isDate(values5[i][0]))
      values5[i] = values5[i].map(toNumber);
    if (f.type === TYPE_ENUM) {
      if (isArray(values5[i]) ? values5[i].indexOf(dval) < 0 : dval !== values5[i]) {
        return false;
      }
    } else {
      if (f.type === TYPE_RANGE_INC) {
        if (!inrange(dval, values5[i]))
          return false;
      } else if (f.type === TYPE_RANGE_RE) {
        if (!inrange(dval, values5[i], true, false))
          return false;
      } else if (f.type === TYPE_RANGE_EXC) {
        if (!inrange(dval, values5[i], false, false))
          return false;
      } else if (f.type === TYPE_RANGE_LE) {
        if (!inrange(dval, values5[i], false, true))
          return false;
      }
    }
  }
  return true;
}
function selectionTest(name4, datum2, op) {
  var data3 = this.context.data[name4], entries3 = data3 ? data3.values.value : [], unitIdx = data3 ? data3[UNIT_INDEX] && data3[UNIT_INDEX].value : void 0, intersect5 = op === Intersect, n = entries3.length, i = 0, entry2, miss, count4, unit2, b2;
  for (; i < n; ++i) {
    entry2 = entries3[i];
    if (unitIdx && intersect5) {
      miss = miss || {};
      count4 = miss[unit2 = entry2.unit] || 0;
      if (count4 === -1)
        continue;
      b2 = testPoint(datum2, entry2);
      miss[unit2] = b2 ? -1 : ++count4;
      if (b2 && unitIdx.size === 1)
        return true;
      if (!b2 && count4 === unitIdx.get(unit2).count)
        return false;
    } else {
      b2 = testPoint(datum2, entry2);
      if (intersect5 ^ b2)
        return b2;
    }
  }
  return n && intersect5;
}
var bisect = bisector2($selectionId);
var bisectLeft3 = bisect.left;
var bisectRight3 = bisect.right;
function selectionIdTest(name4, datum2, op) {
  const data3 = this.context.data[name4], entries3 = data3 ? data3.values.value : [], unitIdx = data3 ? data3[UNIT_INDEX] && data3[UNIT_INDEX].value : void 0, intersect5 = op === Intersect, value3 = $selectionId(datum2), index5 = bisectLeft3(entries3, value3);
  if (index5 === entries3.length)
    return false;
  if ($selectionId(entries3[index5]) !== value3)
    return false;
  if (unitIdx && intersect5) {
    if (unitIdx.size === 1)
      return true;
    if (bisectRight3(entries3, value3) - index5 < unitIdx.size)
      return false;
  }
  return true;
}
function selectionTuples(array6, base2) {
  return array6.map((x5) => extend(base2.fields ? {
    values: base2.fields.map((f) => (f.getter || (f.getter = field(f.field)))(x5.datum))
  } : {
    [SelectionId]: $selectionId(x5.datum)
  }, base2));
}
function selectionResolve(name4, op, isMulti, vl5) {
  var data3 = this.context.data[name4], entries3 = data3 ? data3.values.value : [], resolved = {}, multiRes = {}, types4 = {}, entry2, fields, values5, unit2, field3, value3, res, resUnit, type3, union3, n = entries3.length, i = 0, j, m3;
  for (; i < n; ++i) {
    entry2 = entries3[i];
    unit2 = entry2.unit;
    fields = entry2.fields;
    values5 = entry2.values;
    if (fields && values5) {
      for (j = 0, m3 = fields.length; j < m3; ++j) {
        field3 = fields[j];
        res = resolved[field3.field] || (resolved[field3.field] = {});
        resUnit = res[unit2] || (res[unit2] = []);
        types4[field3.field] = type3 = field3.type.charAt(0);
        union3 = ops["".concat(type3, "_union")];
        res[unit2] = union3(resUnit, array(values5[j]));
      }
      if (isMulti) {
        resUnit = multiRes[unit2] || (multiRes[unit2] = []);
        resUnit.push(array(values5).reduce((obj, curr, j2) => (obj[fields[j2].field] = curr, obj), {}));
      }
    } else {
      field3 = SelectionId;
      value3 = $selectionId(entry2);
      res = resolved[field3] || (resolved[field3] = {});
      resUnit = res[unit2] || (res[unit2] = []);
      resUnit.push(value3);
      if (isMulti) {
        resUnit = multiRes[unit2] || (multiRes[unit2] = []);
        resUnit.push({
          [SelectionId]: value3
        });
      }
    }
  }
  op = op || Union;
  if (resolved[SelectionId]) {
    resolved[SelectionId] = ops["".concat(SelectionId, "_").concat(op)](...Object.values(resolved[SelectionId]));
  } else {
    Object.keys(resolved).forEach((field4) => {
      resolved[field4] = Object.keys(resolved[field4]).map((unit3) => resolved[field4][unit3]).reduce((acc, curr) => acc === void 0 ? curr : ops["".concat(types4[field4], "_").concat(op)](acc, curr));
    });
  }
  entries3 = Object.keys(multiRes);
  if (isMulti && entries3.length) {
    const key2 = vl5 ? VlPoint : VlMulti;
    resolved[key2] = op === Union ? {
      [Or]: entries3.reduce((acc, k3) => (acc.push(...multiRes[k3]), acc), [])
    } : {
      [And]: entries3.map((k3) => ({
        [Or]: multiRes[k3]
      }))
    };
  }
  return resolved;
}
var ops = {
  ["".concat(SelectionId, "_union")]: union2,
  ["".concat(SelectionId, "_intersect")]: intersection2,
  E_union: function(base2, value3) {
    if (!base2.length)
      return value3;
    var i = 0, n = value3.length;
    for (; i < n; ++i)
      if (base2.indexOf(value3[i]) < 0)
        base2.push(value3[i]);
    return base2;
  },
  E_intersect: function(base2, value3) {
    return !base2.length ? value3 : base2.filter((v2) => value3.indexOf(v2) >= 0);
  },
  R_union: function(base2, value3) {
    var lo = toNumber(value3[0]), hi = toNumber(value3[1]);
    if (lo > hi) {
      lo = value3[1];
      hi = value3[0];
    }
    if (!base2.length)
      return [lo, hi];
    if (base2[0] > lo)
      base2[0] = lo;
    if (base2[1] < hi)
      base2[1] = hi;
    return base2;
  },
  R_intersect: function(base2, value3) {
    var lo = toNumber(value3[0]), hi = toNumber(value3[1]);
    if (lo > hi) {
      lo = value3[1];
      hi = value3[0];
    }
    if (!base2.length)
      return [lo, hi];
    if (hi < base2[0] || base2[1] < lo) {
      return [];
    } else {
      if (base2[0] < lo)
        base2[0] = lo;
      if (base2[1] > hi)
        base2[1] = hi;
    }
    return base2;
  }
};
var DataPrefix = ":";
var IndexPrefix = "@";
function selectionVisitor(name4, args, scope, params2) {
  if (args[0].type !== Literal)
    error("First argument to selection functions must be a string literal.");
  const data3 = args[0].value, op = args.length >= 2 && peek(args).value, field3 = "unit", indexName = IndexPrefix + field3, dataName = DataPrefix + data3;
  if (op === Intersect && !has(params2, indexName)) {
    params2[indexName] = scope.getData(data3).indataRef(scope, field3);
  }
  if (!has(params2, dataName)) {
    params2[dataName] = scope.getData(data3).tuplesRef();
  }
}

// node_modules/vega-functions/build/vega-functions.module.js
function data(name4) {
  const data3 = this.context.data[name4];
  return data3 ? data3.values.value : [];
}
function indata(name4, field3, value3) {
  const index5 = this.context.data[name4]["index:" + field3], entry2 = index5 ? index5.value.get(value3) : void 0;
  return entry2 ? entry2.count : entry2;
}
function setdata(name4, tuples) {
  const df = this.context.dataflow, data3 = this.context.data[name4], input = data3.input;
  df.pulse(input, df.changeset().remove(truthy).insert(tuples));
  return 1;
}
function encode(item, name4, retval) {
  if (item) {
    const df = this.context.dataflow, target2 = item.mark.source;
    df.pulse(target2, df.changeset().encode(item, name4));
  }
  return retval !== void 0 ? retval : item;
}
var wrap = (method2) => function(value3, spec) {
  const locale4 = this.context.dataflow.locale();
  return locale4[method2](spec)(value3);
};
var format4 = wrap("format");
var timeFormat2 = wrap("timeFormat");
var utcFormat2 = wrap("utcFormat");
var timeParse2 = wrap("timeParse");
var utcParse2 = wrap("utcParse");
var dateObj = new Date(2e3, 0, 1);
function time2(month2, day2, specifier) {
  if (!Number.isInteger(month2) || !Number.isInteger(day2))
    return "";
  dateObj.setYear(2e3);
  dateObj.setMonth(month2);
  dateObj.setDate(day2);
  return timeFormat2.call(this, dateObj, specifier);
}
function monthFormat(month2) {
  return time2.call(this, month2, 1, "%B");
}
function monthAbbrevFormat(month2) {
  return time2.call(this, month2, 1, "%b");
}
function dayFormat(day2) {
  return time2.call(this, 0, 2 + day2, "%A");
}
function dayAbbrevFormat(day2) {
  return time2.call(this, 0, 2 + day2, "%a");
}
var DataPrefix2 = ":";
var IndexPrefix2 = "@";
var ScalePrefix = "%";
var SignalPrefix = "$";
function dataVisitor(name4, args, scope, params2) {
  if (args[0].type !== Literal) {
    error("First argument to data functions must be a string literal.");
  }
  const data3 = args[0].value, dataName = DataPrefix2 + data3;
  if (!has(dataName, params2)) {
    try {
      params2[dataName] = scope.getData(data3).tuplesRef();
    } catch (err) {
    }
  }
}
function indataVisitor(name4, args, scope, params2) {
  if (args[0].type !== Literal)
    error("First argument to indata must be a string literal.");
  if (args[1].type !== Literal)
    error("Second argument to indata must be a string literal.");
  const data3 = args[0].value, field3 = args[1].value, indexName = IndexPrefix2 + field3;
  if (!has(indexName, params2)) {
    params2[indexName] = scope.getData(data3).indataRef(scope, field3);
  }
}
function scaleVisitor(name4, args, scope, params2) {
  if (args[0].type === Literal) {
    addScaleDependency(scope, params2, args[0].value);
  } else {
    for (name4 in scope.scales) {
      addScaleDependency(scope, params2, name4);
    }
  }
}
function addScaleDependency(scope, params2, name4) {
  const scaleName = ScalePrefix + name4;
  if (!has(params2, scaleName)) {
    try {
      params2[scaleName] = scope.scaleRef(name4);
    } catch (err) {
    }
  }
}
function getScale(name4, ctx) {
  let s2;
  return isFunction(name4) ? name4 : isString(name4) ? (s2 = ctx.scales[name4]) && s2.value : void 0;
}
function internalScaleFunctions(codegen2, fnctx, visitors) {
  fnctx.__bandwidth = (s2) => s2 && s2.bandwidth ? s2.bandwidth() : 0;
  visitors._bandwidth = scaleVisitor;
  visitors._range = scaleVisitor;
  visitors._scale = scaleVisitor;
  const ref2 = (arg) => "_[" + (arg.type === Literal ? $(ScalePrefix + arg.value) : $(ScalePrefix) + "+" + codegen2(arg)) + "]";
  return {
    _bandwidth: (args) => "this.__bandwidth(".concat(ref2(args[0]), ")"),
    _range: (args) => "".concat(ref2(args[0]), ".range()"),
    _scale: (args) => "".concat(ref2(args[0]), "(").concat(codegen2(args[1]), ")")
  };
}
function geoMethod(methodName, globalMethod) {
  return function(projection3, geojson, group4) {
    if (projection3) {
      const p = getScale(projection3, (group4 || this).context);
      return p && p.path[methodName](geojson);
    } else {
      return globalMethod(geojson);
    }
  };
}
var geoArea = geoMethod("area", area_default2);
var geoBounds = geoMethod("bounds", bounds_default);
var geoCentroid = geoMethod("centroid", centroid_default);
function inScope(item) {
  const group4 = this.context.group;
  let value3 = false;
  if (group4)
    while (item) {
      if (item === group4) {
        value3 = true;
        break;
      }
      item = item.mark.group;
    }
  return value3;
}
function log6(df, method2, args) {
  try {
    df[method2].apply(df, ["EXPRESSION"].concat([].slice.call(args)));
  } catch (err) {
    df.warn(err);
  }
  return args[args.length - 1];
}
function warn() {
  return log6(this.context.dataflow, "warn", arguments);
}
function info() {
  return log6(this.context.dataflow, "info", arguments);
}
function debug() {
  return log6(this.context.dataflow, "debug", arguments);
}
function channel_luminance_value(channelValue) {
  const val = channelValue / 255;
  if (val <= 0.03928) {
    return val / 12.92;
  }
  return Math.pow((val + 0.055) / 1.055, 2.4);
}
function luminance(color5) {
  const c3 = rgb(color5), r = channel_luminance_value(c3.r), g = channel_luminance_value(c3.g), b2 = channel_luminance_value(c3.b);
  return 0.2126 * r + 0.7152 * g + 0.0722 * b2;
}
function contrast(color1, color22) {
  const lum1 = luminance(color1), lum2 = luminance(color22), lumL = Math.max(lum1, lum2), lumD = Math.min(lum1, lum2);
  return (lumL + 0.05) / (lumD + 0.05);
}
function merge5() {
  const args = [].slice.call(arguments);
  args.unshift({});
  return extend(...args);
}
function equal(a4, b2) {
  return a4 === b2 || a4 !== a4 && b2 !== b2 ? true : isArray(a4) ? isArray(b2) && a4.length === b2.length ? equalArray(a4, b2) : false : isObject(a4) && isObject(b2) ? equalObject(a4, b2) : false;
}
function equalArray(a4, b2) {
  for (let i = 0, n = a4.length; i < n; ++i) {
    if (!equal(a4[i], b2[i]))
      return false;
  }
  return true;
}
function equalObject(a4, b2) {
  for (const key2 in a4) {
    if (!equal(a4[key2], b2[key2]))
      return false;
  }
  return true;
}
function removePredicate(props) {
  return (_) => equalObject(props, _);
}
function modify(name4, insert3, remove2, toggle2, modify2, values5) {
  const df = this.context.dataflow, data3 = this.context.data[name4], input = data3.input, stamp = df.stamp();
  let changes = data3.changes, predicate, key2;
  if (df._trigger === false || !(input.value.length || insert3 || toggle2)) {
    return 0;
  }
  if (!changes || changes.stamp < stamp) {
    data3.changes = changes = df.changeset();
    changes.stamp = stamp;
    df.runAfter(() => {
      data3.modified = true;
      df.pulse(input, changes).run();
    }, true, 1);
  }
  if (remove2) {
    predicate = remove2 === true ? truthy : isArray(remove2) || isTuple(remove2) ? remove2 : removePredicate(remove2);
    changes.remove(predicate);
  }
  if (insert3) {
    changes.insert(insert3);
  }
  if (toggle2) {
    predicate = removePredicate(toggle2);
    if (input.value.some(predicate)) {
      changes.remove(predicate);
    } else {
      changes.insert(toggle2);
    }
  }
  if (modify2) {
    for (key2 in values5) {
      changes.modify(modify2, key2, values5[key2]);
    }
  }
  return 1;
}
function pinchDistance(event2) {
  const t4 = event2.touches, dx = t4[0].clientX - t4[1].clientX, dy = t4[0].clientY - t4[1].clientY;
  return Math.sqrt(dx * dx + dy * dy);
}
function pinchAngle(event2) {
  const t4 = event2.touches;
  return Math.atan2(t4[0].clientY - t4[1].clientY, t4[0].clientX - t4[1].clientX);
}
var accessors = {};
function pluck(data3, name4) {
  const accessor2 = accessors[name4] || (accessors[name4] = field(name4));
  return isArray(data3) ? data3.map(accessor2) : accessor2(data3);
}
function array5(seq) {
  return isArray(seq) || ArrayBuffer.isView(seq) ? seq : null;
}
function sequence2(seq) {
  return array5(seq) || (isString(seq) ? seq : null);
}
function join2(seq) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return array5(seq).join(...args);
}
function indexof(seq) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }
  return sequence2(seq).indexOf(...args);
}
function lastindexof(seq) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  return sequence2(seq).lastIndexOf(...args);
}
function slice5(seq) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  return sequence2(seq).slice(...args);
}
function replace2(str, pattern, repl) {
  if (isFunction(repl))
    error("Function argument passed to replace.");
  return String(str).replace(pattern, repl);
}
function reverse3(seq) {
  return array5(seq).slice().reverse();
}
function bandspace(count4, paddingInner2, paddingOuter2) {
  return bandSpace(count4 || 0, paddingInner2 || 0, paddingOuter2 || 0);
}
function bandwidth(name4, group4) {
  const s2 = getScale(name4, (group4 || this).context);
  return s2 && s2.bandwidth ? s2.bandwidth() : 0;
}
function copy3(name4, group4) {
  const s2 = getScale(name4, (group4 || this).context);
  return s2 ? s2.copy() : void 0;
}
function domain(name4, group4) {
  const s2 = getScale(name4, (group4 || this).context);
  return s2 ? s2.domain() : [];
}
function invert(name4, range8, group4) {
  const s2 = getScale(name4, (group4 || this).context);
  return !s2 ? void 0 : isArray(range8) ? (s2.invertRange || s2.invert)(range8) : (s2.invert || s2.invertExtent)(range8);
}
function range4(name4, group4) {
  const s2 = getScale(name4, (group4 || this).context);
  return s2 && s2.range ? s2.range() : [];
}
function scale4(name4, value3, group4) {
  const s2 = getScale(name4, (group4 || this).context);
  return s2 ? s2(value3) : void 0;
}
function scaleGradient(scale7, p02, p1, count4, group4) {
  scale7 = getScale(scale7, (group4 || this).context);
  const gradient4 = Gradient(p02, p1);
  let stops = scale7.domain(), min6 = stops[0], max6 = peek(stops), fraction = identity;
  if (!(max6 - min6)) {
    scale7 = (scale7.interpolator ? scale("sequential")().interpolator(scale7.interpolator()) : scale("linear")().interpolate(scale7.interpolate()).range(scale7.range())).domain([min6 = 0, max6 = 1]);
  } else {
    fraction = scaleFraction(scale7, min6, max6);
  }
  if (scale7.ticks) {
    stops = scale7.ticks(+count4 || 15);
    if (min6 !== stops[0])
      stops.unshift(min6);
    if (max6 !== peek(stops))
      stops.push(max6);
  }
  stops.forEach((_) => gradient4.stop(fraction(_), scale7(_)));
  return gradient4;
}
function geoShape(projection3, geojson, group4) {
  const p = getScale(projection3, (group4 || this).context);
  return function(context3) {
    return p ? p.path.context(context3)(geojson) : "";
  };
}
function pathShape(path3) {
  let p = null;
  return function(context3) {
    return context3 ? pathRender(context3, p = p || parse4(path3)) : path3;
  };
}
var datum = (d) => d.data;
function treeNodes(name4, context3) {
  const tree = data.call(context3, name4);
  return tree.root && tree.root.lookup || {};
}
function treePath(name4, source3, target2) {
  const nodes = treeNodes(name4, this), s2 = nodes[source3], t4 = nodes[target2];
  return s2 && t4 ? s2.path(t4).map(datum) : void 0;
}
function treeAncestors(name4, node) {
  const n = treeNodes(name4, this)[node];
  return n ? n.ancestors().map(datum) : void 0;
}
var _window = () => typeof window !== "undefined" && window || null;
function screen() {
  const w4 = _window();
  return w4 ? w4.screen : {};
}
function windowSize() {
  const w4 = _window();
  return w4 ? [w4.innerWidth, w4.innerHeight] : [void 0, void 0];
}
function containerSize() {
  const view = this.context.dataflow, el = view.container && view.container();
  return el ? [el.clientWidth, el.clientHeight] : [void 0, void 0];
}
function intersect4(b2, opt, group4) {
  if (!b2)
    return [];
  const [u4, v2] = b2, box = new Bounds().set(u4[0], u4[1], v2[0], v2[1]), scene = group4 || this.context.dataflow.scenegraph().root;
  return intersect2(scene, box, filter4(opt));
}
function filter4(opt) {
  let p = null;
  if (opt) {
    const types4 = array(opt.marktype), names = array(opt.markname);
    p = (_) => (!types4.length || types4.some((t4) => _.marktype === t4)) && (!names.length || names.some((s2) => _.name === s2));
  }
  return p;
}
function lassoAppend(lasso, x5, y5) {
  let minDist = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5;
  const last = lasso[lasso.length - 1];
  if (last === void 0 || Math.sqrt((last[0] - x5) ** 2 + (last[1] - y5) ** 2) > minDist) {
    lasso.push([x5, y5]);
    return [...lasso];
  }
  return lasso;
}
function lassoPath(lasso) {
  return (lasso !== null && lasso !== void 0 ? lasso : []).reduce((svg, _ref, i) => {
    let [x5, y5] = _ref;
    return svg += i == 0 ? "M ".concat(x5, ",").concat(y5, " ") : i === lasso.length - 1 ? " Z" : "L ".concat(x5, ",").concat(y5, " ");
  }, "");
}
function intersectLasso(markname, pixelLasso, unit2) {
  const {
    x: x5,
    y: y5,
    mark: mark2
  } = unit2;
  const bb2 = new Bounds().set(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
  for (const [px2, py2] of pixelLasso) {
    if (px2 < bb2.x1)
      bb2.x1 = px2;
    if (px2 > bb2.x2)
      bb2.x2 = px2;
    if (py2 < bb2.y1)
      bb2.y1 = py2;
    if (py2 > bb2.y2)
      bb2.y2 = py2;
  }
  bb2.translate(x5, y5);
  const intersection3 = intersect4([[bb2.x1, bb2.y1], [bb2.x2, bb2.y2]], markname, mark2);
  return intersection3.filter((tuple) => pointInPolygon(tuple.x, tuple.y, pixelLasso));
}
function pointInPolygon(testx, testy, polygon) {
  let intersections = 0;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const [prevX, prevY] = polygon[j];
    const [x5, y5] = polygon[i];
    if (y5 > testy != prevY > testy && testx < (prevX - x5) * (testy - y5) / (prevY - y5) + x5) {
      intersections++;
    }
  }
  return intersections & 1;
}
var functionContext = {
  random() {
    return random();
  },
  cumulativeNormal,
  cumulativeLogNormal,
  cumulativeUniform,
  densityNormal,
  densityLogNormal,
  densityUniform,
  quantileNormal,
  quantileLogNormal,
  quantileUniform,
  sampleNormal,
  sampleLogNormal,
  sampleUniform,
  isArray,
  isBoolean,
  isDate,
  isDefined(_) {
    return _ !== void 0;
  },
  isNumber,
  isObject,
  isRegExp,
  isString,
  isTuple,
  isValid(_) {
    return _ != null && _ === _;
  },
  toBoolean,
  toDate(_) {
    return toDate(_);
  },
  toNumber,
  toString,
  indexof,
  join: join2,
  lastindexof,
  replace: replace2,
  reverse: reverse3,
  slice: slice5,
  flush,
  lerp,
  merge: merge5,
  pad,
  peek,
  pluck,
  span,
  inrange,
  truncate,
  rgb,
  lab,
  hcl,
  hsl,
  luminance,
  contrast,
  sequence: range,
  format: format4,
  utcFormat: utcFormat2,
  utcParse: utcParse2,
  utcOffset,
  utcSequence,
  timeFormat: timeFormat2,
  timeParse: timeParse2,
  timeOffset,
  timeSequence,
  timeUnitSpecifier,
  monthFormat,
  monthAbbrevFormat,
  dayFormat,
  dayAbbrevFormat,
  quarter,
  utcquarter,
  week,
  utcweek,
  dayofyear,
  utcdayofyear,
  warn,
  info,
  debug,
  extent(_) {
    return extent(_);
  },
  inScope,
  intersect: intersect4,
  clampRange,
  pinchDistance,
  pinchAngle,
  screen,
  containerSize,
  windowSize,
  bandspace,
  setdata,
  pathShape,
  panLinear,
  panLog,
  panPow,
  panSymlog,
  zoomLinear,
  zoomLog,
  zoomPow,
  zoomSymlog,
  encode,
  modify,
  lassoAppend,
  lassoPath,
  intersectLasso
};
var eventFunctions = ["view", "item", "group", "xy", "x", "y"];
var eventPrefix = "event.vega.";
var thisPrefix = "this.";
var astVisitors = {};
var codegenParams = {
  forbidden: ["_"],
  allowed: ["datum", "event", "item"],
  fieldvar: "datum",
  globalvar: (id2) => "_[".concat($(SignalPrefix + id2), "]"),
  functions: buildFunctions,
  constants: Constants,
  visitors: astVisitors
};
var codeGenerator = codegen(codegenParams);
function buildFunctions(codegen2) {
  const fn = Functions(codegen2);
  eventFunctions.forEach((name4) => fn[name4] = eventPrefix + name4);
  for (const name4 in functionContext) {
    fn[name4] = thisPrefix + name4;
  }
  extend(fn, internalScaleFunctions(codegen2, functionContext, astVisitors));
  return fn;
}
function expressionFunction(name4, fn, visitor) {
  if (arguments.length === 1) {
    return functionContext[name4];
  }
  functionContext[name4] = fn;
  if (visitor)
    astVisitors[name4] = visitor;
  if (codeGenerator)
    codeGenerator.functions[name4] = thisPrefix + name4;
  return this;
}
expressionFunction("bandwidth", bandwidth, scaleVisitor);
expressionFunction("copy", copy3, scaleVisitor);
expressionFunction("domain", domain, scaleVisitor);
expressionFunction("range", range4, scaleVisitor);
expressionFunction("invert", invert, scaleVisitor);
expressionFunction("scale", scale4, scaleVisitor);
expressionFunction("gradient", scaleGradient, scaleVisitor);
expressionFunction("geoArea", geoArea, scaleVisitor);
expressionFunction("geoBounds", geoBounds, scaleVisitor);
expressionFunction("geoCentroid", geoCentroid, scaleVisitor);
expressionFunction("geoShape", geoShape, scaleVisitor);
expressionFunction("indata", indata, indataVisitor);
expressionFunction("data", data, dataVisitor);
expressionFunction("treePath", treePath, dataVisitor);
expressionFunction("treeAncestors", treeAncestors, dataVisitor);
expressionFunction("vlSelectionTest", selectionTest, selectionVisitor);
expressionFunction("vlSelectionIdTest", selectionIdTest, selectionVisitor);
expressionFunction("vlSelectionResolve", selectionResolve, selectionVisitor);
expressionFunction("vlSelectionTuples", selectionTuples);
function parser2(expr2, scope) {
  const params2 = {};
  let ast;
  try {
    expr2 = isString(expr2) ? expr2 : $(expr2) + "";
    ast = parser(expr2);
  } catch (err) {
    error("Expression parse error: " + expr2);
  }
  ast.visit((node) => {
    if (node.type !== CallExpression)
      return;
    const name4 = node.callee.name, visit2 = codegenParams.visitors[name4];
    if (visit2)
      visit2(name4, node.arguments, scope, params2);
  });
  const gen = codeGenerator(ast);
  gen.globals.forEach((name4) => {
    const signalName = SignalPrefix + name4;
    if (!has(params2, signalName) && scope.getSignal(name4)) {
      params2[signalName] = scope.signalRef(name4);
    }
  });
  return {
    $expr: extend({
      code: gen.code
    }, scope.options.ast ? {
      ast
    } : null),
    $fields: gen.fields,
    $params: params2
  };
}

// node_modules/vega-runtime/build/vega-runtime.module.js
function parse5(spec) {
  const ctx = this, operators = spec.operators || [];
  if (spec.background) {
    ctx.background = spec.background;
  }
  if (spec.eventConfig) {
    ctx.eventConfig = spec.eventConfig;
  }
  if (spec.locale) {
    ctx.locale = spec.locale;
  }
  operators.forEach((entry2) => ctx.parseOperator(entry2));
  operators.forEach((entry2) => ctx.parseOperatorParameters(entry2));
  (spec.streams || []).forEach((entry2) => ctx.parseStream(entry2));
  (spec.updates || []).forEach((entry2) => ctx.parseUpdate(entry2));
  return ctx.resolve();
}
var Skip = toSet(["rule"]);
var Swap = toSet(["group", "image", "rect"]);
function adjustSpatial(encode2, marktype) {
  let code = "";
  if (Skip[marktype])
    return code;
  if (encode2.x2) {
    if (encode2.x) {
      if (Swap[marktype]) {
        code += "if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;";
      }
      code += "o.width=o.x2-o.x;";
    } else {
      code += "o.x=o.x2-(o.width||0);";
    }
  }
  if (encode2.xc) {
    code += "o.x=o.xc-(o.width||0)/2;";
  }
  if (encode2.y2) {
    if (encode2.y) {
      if (Swap[marktype]) {
        code += "if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;";
      }
      code += "o.height=o.y2-o.y;";
    } else {
      code += "o.y=o.y2-(o.height||0);";
    }
  }
  if (encode2.yc) {
    code += "o.y=o.yc-(o.height||0)/2;";
  }
  return code;
}
function canonicalType(type3) {
  return (type3 + "").toLowerCase();
}
function isOperator(type3) {
  return canonicalType(type3) === "operator";
}
function isCollect(type3) {
  return canonicalType(type3) === "collect";
}
function expression(ctx, args, code) {
  if (code[code.length - 1] !== ";") {
    code = "return(" + code + ");";
  }
  const fn = Function(...args.concat(code));
  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
}
function _compare(u4, v2, lt2, gt2) {
  return "((u = ".concat(u4, ") < (v = ").concat(v2, ") || u == null) && v != null ? ").concat(lt2, "\n  : (u > v || v == null) && u != null ? ").concat(gt2, "\n  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ").concat(lt2, "\n  : v !== v && u === u ? ").concat(gt2, " : ");
}
var expressionCodegen = {
  operator: (ctx, expr2) => expression(ctx, ["_"], expr2.code),
  parameter: (ctx, expr2) => expression(ctx, ["datum", "_"], expr2.code),
  event: (ctx, expr2) => expression(ctx, ["event"], expr2.code),
  handler: (ctx, expr2) => {
    const code = "var datum=event.item&&event.item.datum;return ".concat(expr2.code, ";");
    return expression(ctx, ["_", "event"], code);
  },
  encode: (ctx, encode2) => {
    const {
      marktype,
      channels
    } = encode2;
    let code = "var o=item,datum=o.datum,m=0,$;";
    for (const name4 in channels) {
      const o = "o[" + $(name4) + "]";
      code += "$=".concat(channels[name4].code, ";if(").concat(o, "!==$)").concat(o, "=$,m=1;");
    }
    code += adjustSpatial(channels, marktype);
    code += "return m;";
    return expression(ctx, ["item", "_"], code);
  },
  codegen: {
    get(path3) {
      const ref2 = "[".concat(path3.map($).join("]["), "]");
      const get7 = Function("_", "return _".concat(ref2, ";"));
      get7.path = ref2;
      return get7;
    },
    comparator(fields, orders) {
      let t4;
      const map7 = (f, i) => {
        const o = orders[i];
        let u4, v2;
        if (f.path) {
          u4 = "a".concat(f.path);
          v2 = "b".concat(f.path);
        } else {
          (t4 = t4 || {})["f" + i] = f;
          u4 = "this.f".concat(i, "(a)");
          v2 = "this.f".concat(i, "(b)");
        }
        return _compare(u4, v2, -o, o);
      };
      const fn = Function("a", "b", "var u, v; return " + fields.map(map7).join("") + "0;");
      return t4 ? fn.bind(t4) : fn;
    }
  }
};
function parseOperator(spec) {
  const ctx = this;
  if (isOperator(spec.type) || !spec.type) {
    ctx.operator(spec, spec.update ? ctx.operatorExpression(spec.update) : null);
  } else {
    ctx.transform(spec, spec.type);
  }
}
function parseOperatorParameters(spec) {
  const ctx = this;
  if (spec.params) {
    const op = ctx.get(spec.id);
    if (!op)
      error("Invalid operator id: " + spec.id);
    ctx.dataflow.connect(op, op.parameters(ctx.parseParameters(spec.params), spec.react, spec.initonly));
  }
}
function parseParameters(spec, params2) {
  params2 = params2 || {};
  const ctx = this;
  for (const key2 in spec) {
    const value3 = spec[key2];
    params2[key2] = isArray(value3) ? value3.map((v2) => parseParameter(v2, ctx, params2)) : parseParameter(value3, ctx, params2);
  }
  return params2;
}
function parseParameter(spec, ctx, params2) {
  if (!spec || !isObject(spec))
    return spec;
  for (let i = 0, n = PARSERS.length, p; i < n; ++i) {
    p = PARSERS[i];
    if (has(spec, p.key)) {
      return p.parse(spec, ctx, params2);
    }
  }
  return spec;
}
var PARSERS = [{
  key: "$ref",
  parse: getOperator
}, {
  key: "$key",
  parse: getKey
}, {
  key: "$expr",
  parse: getExpression
}, {
  key: "$field",
  parse: getField2
}, {
  key: "$encode",
  parse: getEncode
}, {
  key: "$compare",
  parse: getCompare
}, {
  key: "$context",
  parse: getContext
}, {
  key: "$subflow",
  parse: getSubflow
}, {
  key: "$tupleid",
  parse: getTupleId
}];
function getOperator(_, ctx) {
  return ctx.get(_.$ref) || error("Operator not defined: " + _.$ref);
}
function getExpression(_, ctx, params2) {
  if (_.$params) {
    ctx.parseParameters(_.$params, params2);
  }
  const k3 = "e:" + _.$expr.code + "_" + _.$name;
  return ctx.fn[k3] || (ctx.fn[k3] = accessor(ctx.parameterExpression(_.$expr), _.$fields, _.$name));
}
function getKey(_, ctx) {
  const k3 = "k:" + _.$key + "_" + !!_.$flat;
  return ctx.fn[k3] || (ctx.fn[k3] = key(_.$key, _.$flat, ctx.expr.codegen));
}
function getField2(_, ctx) {
  if (!_.$field)
    return null;
  const k3 = "f:" + _.$field + "_" + _.$name;
  return ctx.fn[k3] || (ctx.fn[k3] = field(_.$field, _.$name, ctx.expr.codegen));
}
function getCompare(_, ctx) {
  const k3 = "c:" + _.$compare + "_" + _.$order, c3 = array(_.$compare).map((_2) => _2 && _2.$tupleid ? tupleid : _2);
  return ctx.fn[k3] || (ctx.fn[k3] = compare2(c3, _.$order, ctx.expr.codegen));
}
function getEncode(_, ctx) {
  const spec = _.$encode, encode2 = {};
  for (const name4 in spec) {
    const enc = spec[name4];
    encode2[name4] = accessor(ctx.encodeExpression(enc.$expr), enc.$fields);
    encode2[name4].output = enc.$output;
  }
  return encode2;
}
function getContext(_, ctx) {
  return ctx;
}
function getSubflow(_, ctx) {
  const spec = _.$subflow;
  return function(dataflow, key2, parent) {
    const subctx = ctx.fork().parse(spec), op = subctx.get(spec.operators[0].id), p = subctx.signals.parent;
    if (p)
      p.set(parent);
    op.detachSubflow = () => ctx.detach(subctx);
    return op;
  };
}
function getTupleId() {
  return tupleid;
}
function parseStream(spec) {
  var ctx = this, filter5 = spec.filter != null ? ctx.eventExpression(spec.filter) : void 0, stream2 = spec.stream != null ? ctx.get(spec.stream) : void 0, args;
  if (spec.source) {
    stream2 = ctx.events(spec.source, spec.type, filter5);
  } else if (spec.merge) {
    args = spec.merge.map((_) => ctx.get(_));
    stream2 = args[0].merge.apply(args[0], args.slice(1));
  }
  if (spec.between) {
    args = spec.between.map((_) => ctx.get(_));
    stream2 = stream2.between(args[0], args[1]);
  }
  if (spec.filter) {
    stream2 = stream2.filter(filter5);
  }
  if (spec.throttle != null) {
    stream2 = stream2.throttle(+spec.throttle);
  }
  if (spec.debounce != null) {
    stream2 = stream2.debounce(+spec.debounce);
  }
  if (stream2 == null) {
    error("Invalid stream definition: " + JSON.stringify(spec));
  }
  if (spec.consume)
    stream2.consume(true);
  ctx.stream(spec, stream2);
}
function parseUpdate(spec) {
  var ctx = this, srcid = isObject(srcid = spec.source) ? srcid.$ref : srcid, source3 = ctx.get(srcid), target2 = null, update3 = spec.update, params2 = void 0;
  if (!source3)
    error("Source not defined: " + spec.source);
  target2 = spec.target && spec.target.$expr ? ctx.eventExpression(spec.target.$expr) : ctx.get(spec.target);
  if (update3 && update3.$expr) {
    if (update3.$params) {
      params2 = ctx.parseParameters(update3.$params);
    }
    update3 = ctx.handlerExpression(update3.$expr);
  }
  ctx.update(spec, source3, target2, update3, params2);
}
var SKIP3 = {
  skip: true
};
function getState(options) {
  var ctx = this, state = {};
  if (options.signals) {
    var signals = state.signals = {};
    Object.keys(ctx.signals).forEach((key2) => {
      const op = ctx.signals[key2];
      if (options.signals(key2, op)) {
        signals[key2] = op.value;
      }
    });
  }
  if (options.data) {
    var data3 = state.data = {};
    Object.keys(ctx.data).forEach((key2) => {
      const dataset = ctx.data[key2];
      if (options.data(key2, dataset)) {
        data3[key2] = dataset.input.value;
      }
    });
  }
  if (ctx.subcontext && options.recurse !== false) {
    state.subcontext = ctx.subcontext.map((ctx2) => ctx2.getState(options));
  }
  return state;
}
function setState(state) {
  var ctx = this, df = ctx.dataflow, data3 = state.data, signals = state.signals;
  Object.keys(signals || {}).forEach((key2) => {
    df.update(ctx.signals[key2], signals[key2], SKIP3);
  });
  Object.keys(data3 || {}).forEach((key2) => {
    df.pulse(ctx.data[key2].input, df.changeset().remove(truthy).insert(data3[key2]));
  });
  (state.subcontext || []).forEach((substate, i) => {
    const subctx = ctx.subcontext[i];
    if (subctx)
      subctx.setState(substate);
  });
}
function context2(df, transforms2, functions, expr2) {
  return new Context(df, transforms2, functions, expr2);
}
function Context(df, transforms2, functions, expr2) {
  this.dataflow = df;
  this.transforms = transforms2;
  this.events = df.events.bind(df);
  this.expr = expr2 || expressionCodegen, this.signals = {};
  this.scales = {};
  this.nodes = {};
  this.data = {};
  this.fn = {};
  if (functions) {
    this.functions = Object.create(functions);
    this.functions.context = this;
  }
}
function Subcontext(ctx) {
  this.dataflow = ctx.dataflow;
  this.transforms = ctx.transforms;
  this.events = ctx.events;
  this.expr = ctx.expr;
  this.signals = Object.create(ctx.signals);
  this.scales = Object.create(ctx.scales);
  this.nodes = Object.create(ctx.nodes);
  this.data = Object.create(ctx.data);
  this.fn = Object.create(ctx.fn);
  if (ctx.functions) {
    this.functions = Object.create(ctx.functions);
    this.functions.context = this;
  }
}
Context.prototype = Subcontext.prototype = {
  fork() {
    const ctx = new Subcontext(this);
    (this.subcontext || (this.subcontext = [])).push(ctx);
    return ctx;
  },
  detach(ctx) {
    this.subcontext = this.subcontext.filter((c3) => c3 !== ctx);
    const keys5 = Object.keys(ctx.nodes);
    for (const key2 of keys5)
      ctx.nodes[key2]._targets = null;
    for (const key2 of keys5)
      ctx.nodes[key2].detach();
    ctx.nodes = null;
  },
  get(id2) {
    return this.nodes[id2];
  },
  set(id2, node) {
    return this.nodes[id2] = node;
  },
  add(spec, op) {
    const ctx = this, df = ctx.dataflow, data3 = spec.value;
    ctx.set(spec.id, op);
    if (isCollect(spec.type) && data3) {
      if (data3.$ingest) {
        df.ingest(op, data3.$ingest, data3.$format);
      } else if (data3.$request) {
        df.preload(op, data3.$request, data3.$format);
      } else {
        df.pulse(op, df.changeset().insert(data3));
      }
    }
    if (spec.root) {
      ctx.root = op;
    }
    if (spec.parent) {
      let p = ctx.get(spec.parent.$ref);
      if (p) {
        df.connect(p, [op]);
        op.targets().add(p);
      } else {
        (ctx.unresolved = ctx.unresolved || []).push(() => {
          p = ctx.get(spec.parent.$ref);
          df.connect(p, [op]);
          op.targets().add(p);
        });
      }
    }
    if (spec.signal) {
      ctx.signals[spec.signal] = op;
    }
    if (spec.scale) {
      ctx.scales[spec.scale] = op;
    }
    if (spec.data) {
      for (const name4 in spec.data) {
        const data4 = ctx.data[name4] || (ctx.data[name4] = {});
        spec.data[name4].forEach((role) => data4[role] = op);
      }
    }
  },
  resolve() {
    (this.unresolved || []).forEach((fn) => fn());
    delete this.unresolved;
    return this;
  },
  operator(spec, update3) {
    this.add(spec, this.dataflow.add(spec.value, update3));
  },
  transform(spec, type3) {
    this.add(spec, this.dataflow.add(this.transforms[canonicalType(type3)]));
  },
  stream(spec, stream2) {
    this.set(spec.id, stream2);
  },
  update(spec, stream2, target2, update3, params2) {
    this.dataflow.on(stream2, target2, update3, params2, spec.options);
  },
  operatorExpression(expr2) {
    return this.expr.operator(this, expr2);
  },
  parameterExpression(expr2) {
    return this.expr.parameter(this, expr2);
  },
  eventExpression(expr2) {
    return this.expr.event(this, expr2);
  },
  handlerExpression(expr2) {
    return this.expr.handler(this, expr2);
  },
  encodeExpression(encode2) {
    return this.expr.encode(this, encode2);
  },
  parse: parse5,
  parseOperator,
  parseOperatorParameters,
  parseParameters,
  parseStream,
  parseUpdate,
  getState,
  setState
};

// node_modules/vega-view/build/vega-view.module.js
function initializeAria(view) {
  const el = view.container();
  if (el) {
    el.setAttribute("role", "graphics-document");
    el.setAttribute("aria-roleDescription", "visualization");
    ariaLabel(el, view.description());
  }
}
function ariaLabel(el, desc) {
  if (el)
    desc == null ? el.removeAttribute("aria-label") : el.setAttribute("aria-label", desc);
}
function background2(view) {
  view.add(null, (_) => {
    view._background = _.bg;
    view._resize = 1;
    return _.bg;
  }, {
    bg: view._signals.background
  });
}
var Default = "default";
function cursor(view) {
  const cursor3 = view._signals.cursor || (view._signals.cursor = view.add({
    user: Default,
    item: null
  }));
  view.on(view.events("view", "mousemove"), cursor3, (_, event2) => {
    const value3 = cursor3.value, user = value3 ? isString(value3) ? value3 : value3.user : Default, item = event2.item && event2.item.cursor || null;
    return value3 && user === value3.user && item == value3.item ? value3 : {
      user,
      item
    };
  });
  view.add(null, function(_) {
    let user = _.cursor, item = this.value;
    if (!isString(user)) {
      item = user.item;
      user = user.user;
    }
    setCursor(view, user && user !== Default ? user : item || user);
    return item;
  }, {
    cursor: cursor3
  });
}
function setCursor(view, cursor3) {
  const el = view.globalCursor() ? typeof document !== "undefined" && document.body : view.container();
  if (el) {
    return cursor3 == null ? el.style.removeProperty("cursor") : el.style.cursor = cursor3;
  }
}
function dataref(view, name4) {
  var data3 = view._runtime.data;
  if (!has(data3, name4)) {
    error("Unrecognized data set: " + name4);
  }
  return data3[name4];
}
function data2(name4, values5) {
  return arguments.length < 2 ? dataref(this, name4).values.value : change.call(this, name4, changeset().remove(truthy).insert(values5));
}
function change(name4, changes) {
  if (!isChangeSet(changes)) {
    error("Second argument to changes must be a changeset.");
  }
  const dataset = dataref(this, name4);
  dataset.modified = true;
  return this.pulse(dataset.input, changes);
}
function insert(name4, _) {
  return change.call(this, name4, changeset().insert(_));
}
function remove(name4, _) {
  return change.call(this, name4, changeset().remove(_));
}
function width(view) {
  var padding3 = view.padding();
  return Math.max(0, view._viewWidth + padding3.left + padding3.right);
}
function height(view) {
  var padding3 = view.padding();
  return Math.max(0, view._viewHeight + padding3.top + padding3.bottom);
}
function offset3(view) {
  var padding3 = view.padding(), origin = view._origin;
  return [padding3.left + origin[0], padding3.top + origin[1]];
}
function resizeRenderer(view) {
  var origin = offset3(view), w4 = width(view), h2 = height(view);
  view._renderer.background(view.background());
  view._renderer.resize(w4, h2, origin);
  view._handler.origin(origin);
  view._resizeListeners.forEach((handler) => {
    try {
      handler(w4, h2);
    } catch (error2) {
      view.error(error2);
    }
  });
}
function eventExtend(view, event2, item) {
  var r = view._renderer, el = r && r.canvas(), p, e3, translate4;
  if (el) {
    translate4 = offset3(view);
    e3 = event2.changedTouches ? event2.changedTouches[0] : event2;
    p = point7(e3, el);
    p[0] -= translate4[0];
    p[1] -= translate4[1];
  }
  event2.dataflow = view;
  event2.item = item;
  event2.vega = extension(view, item, p);
  return event2;
}
function extension(view, item, point10) {
  const itemGroup = item ? item.mark.marktype === "group" ? item : item.mark.group : null;
  function group4(name4) {
    var g = itemGroup, i;
    if (name4)
      for (i = item; i; i = i.mark.group) {
        if (i.mark.name === name4) {
          g = i;
          break;
        }
      }
    return g && g.mark && g.mark.interactive ? g : {};
  }
  function xy(item2) {
    if (!item2)
      return point10;
    if (isString(item2))
      item2 = group4(item2);
    const p = point10.slice();
    while (item2) {
      p[0] -= item2.x || 0;
      p[1] -= item2.y || 0;
      item2 = item2.mark && item2.mark.group;
    }
    return p;
  }
  return {
    view: constant(view),
    item: constant(item || {}),
    group: group4,
    xy,
    x: (item2) => xy(item2)[0],
    y: (item2) => xy(item2)[1]
  };
}
var VIEW = "view";
var TIMER = "timer";
var WINDOW = "window";
var NO_TRAP = {
  trap: false
};
function initializeEventConfig(config) {
  const events4 = extend({
    defaults: {}
  }, config);
  const unpack = (obj, keys5) => {
    keys5.forEach((k3) => {
      if (isArray(obj[k3]))
        obj[k3] = toSet(obj[k3]);
    });
  };
  unpack(events4.defaults, ["prevent", "allow"]);
  unpack(events4, ["view", "window", "selector"]);
  return events4;
}
function trackEventListener(view, sources, type3, handler) {
  view._eventListeners.push({
    type: type3,
    sources: array(sources),
    handler
  });
}
function prevent(view, type3) {
  var def2 = view._eventConfig.defaults, prevent2 = def2.prevent, allow = def2.allow;
  return prevent2 === false || allow === true ? false : prevent2 === true || allow === false ? true : prevent2 ? prevent2[type3] : allow ? !allow[type3] : view.preventDefault();
}
function permit(view, key2, type3) {
  const rule4 = view._eventConfig && view._eventConfig[key2];
  if (rule4 === false || isObject(rule4) && !rule4[type3]) {
    view.warn("Blocked ".concat(key2, " ").concat(type3, " event listener."));
    return false;
  }
  return true;
}
function events2(source3, type3, filter5) {
  var view = this, s2 = new EventStream(filter5), send = function(e3, item) {
    view.runAsync(null, () => {
      if (source3 === VIEW && prevent(view, type3)) {
        e3.preventDefault();
      }
      s2.receive(eventExtend(view, e3, item));
    });
  }, sources;
  if (source3 === TIMER) {
    if (permit(view, "timer", type3)) {
      view.timer(send, type3);
    }
  } else if (source3 === VIEW) {
    if (permit(view, "view", type3)) {
      view.addEventListener(type3, send, NO_TRAP);
    }
  } else {
    if (source3 === WINDOW) {
      if (permit(view, "window", type3) && typeof window !== "undefined") {
        sources = [window];
      }
    } else if (typeof document !== "undefined") {
      if (permit(view, "selector", type3)) {
        sources = document.querySelectorAll(source3);
      }
    }
    if (!sources) {
      view.warn("Can not resolve event source: " + source3);
    } else {
      for (var i = 0, n = sources.length; i < n; ++i) {
        sources[i].addEventListener(type3, send);
      }
      trackEventListener(view, sources, type3, send);
    }
  }
  return s2;
}
function itemFilter(event2) {
  return event2.item;
}
function markTarget(event2) {
  return event2.item.mark.source;
}
function invoke(name4) {
  return function(_, event2) {
    return event2.vega.view().changeset().encode(event2.item, name4);
  };
}
function hover(hoverSet, leaveSet) {
  hoverSet = [hoverSet || "hover"];
  leaveSet = [leaveSet || "update", hoverSet[0]];
  this.on(this.events("view", "mouseover", itemFilter), markTarget, invoke(hoverSet));
  this.on(this.events("view", "mouseout", itemFilter), markTarget, invoke(leaveSet));
  return this;
}
function finalize() {
  var tooltip2 = this._tooltip, timers = this._timers, listeners = this._eventListeners, n, m3, e3;
  n = timers.length;
  while (--n >= 0) {
    timers[n].stop();
  }
  n = listeners.length;
  while (--n >= 0) {
    e3 = listeners[n];
    m3 = e3.sources.length;
    while (--m3 >= 0) {
      e3.sources[m3].removeEventListener(e3.type, e3.handler);
    }
  }
  if (tooltip2) {
    tooltip2.call(this, this._handler, null, null, null);
  }
  return this;
}
function element2(tag, attr2, text4) {
  const el = document.createElement(tag);
  for (const key2 in attr2)
    el.setAttribute(key2, attr2[key2]);
  if (text4 != null)
    el.textContent = text4;
  return el;
}
var BindClass = "vega-bind";
var NameClass = "vega-bind-name";
var RadioClass = "vega-bind-radio";
function bind2(view, el, binding) {
  if (!el)
    return;
  const param2 = binding.param;
  let bind3 = binding.state;
  if (!bind3) {
    bind3 = binding.state = {
      elements: null,
      active: false,
      set: null,
      update: (value3) => {
        if (value3 != view.signal(param2.signal)) {
          view.runAsync(null, () => {
            bind3.source = true;
            view.signal(param2.signal, value3);
          });
        }
      }
    };
    if (param2.debounce) {
      bind3.update = debounce(param2.debounce, bind3.update);
    }
  }
  const create4 = param2.input == null && param2.element ? target : generate2;
  create4(bind3, el, param2, view);
  if (!bind3.active) {
    view.on(view._signals[param2.signal], null, () => {
      bind3.source ? bind3.source = false : bind3.set(view.signal(param2.signal));
    });
    bind3.active = true;
  }
  return bind3;
}
function target(bind3, node, param2, view) {
  const type3 = param2.event || "input";
  const handler = () => bind3.update(node.value);
  view.signal(param2.signal, node.value);
  node.addEventListener(type3, handler);
  trackEventListener(view, node, type3, handler);
  bind3.set = (value3) => {
    node.value = value3;
    node.dispatchEvent(event(type3));
  };
}
function event(type3) {
  return typeof Event !== "undefined" ? new Event(type3) : {
    type: type3
  };
}
function generate2(bind3, el, param2, view) {
  const value3 = view.signal(param2.signal);
  const div = element2("div", {
    "class": BindClass
  });
  const wrapper = param2.input === "radio" ? div : div.appendChild(element2("label"));
  wrapper.appendChild(element2("span", {
    "class": NameClass
  }, param2.name || param2.signal));
  el.appendChild(div);
  let input = form;
  switch (param2.input) {
    case "checkbox":
      input = checkbox;
      break;
    case "select":
      input = select;
      break;
    case "radio":
      input = radio;
      break;
    case "range":
      input = range5;
      break;
  }
  input(bind3, wrapper, param2, value3);
}
function form(bind3, el, param2, value3) {
  const node = element2("input");
  for (const key2 in param2) {
    if (key2 !== "signal" && key2 !== "element") {
      node.setAttribute(key2 === "input" ? "type" : key2, param2[key2]);
    }
  }
  node.setAttribute("name", param2.signal);
  node.value = value3;
  el.appendChild(node);
  node.addEventListener("input", () => bind3.update(node.value));
  bind3.elements = [node];
  bind3.set = (value4) => node.value = value4;
}
function checkbox(bind3, el, param2, value3) {
  const attr2 = {
    type: "checkbox",
    name: param2.signal
  };
  if (value3)
    attr2.checked = true;
  const node = element2("input", attr2);
  el.appendChild(node);
  node.addEventListener("change", () => bind3.update(node.checked));
  bind3.elements = [node];
  bind3.set = (value4) => node.checked = !!value4 || null;
}
function select(bind3, el, param2, value3) {
  const node = element2("select", {
    name: param2.signal
  }), labels3 = param2.labels || [];
  param2.options.forEach((option, i) => {
    const attr2 = {
      value: option
    };
    if (valuesEqual(option, value3))
      attr2.selected = true;
    node.appendChild(element2("option", attr2, (labels3[i] || option) + ""));
  });
  el.appendChild(node);
  node.addEventListener("change", () => {
    bind3.update(param2.options[node.selectedIndex]);
  });
  bind3.elements = [node];
  bind3.set = (value4) => {
    for (let i = 0, n = param2.options.length; i < n; ++i) {
      if (valuesEqual(param2.options[i], value4)) {
        node.selectedIndex = i;
        return;
      }
    }
  };
}
function radio(bind3, el, param2, value3) {
  const group4 = element2("span", {
    "class": RadioClass
  }), labels3 = param2.labels || [];
  el.appendChild(group4);
  bind3.elements = param2.options.map((option, i) => {
    const attr2 = {
      type: "radio",
      name: param2.signal,
      value: option
    };
    if (valuesEqual(option, value3))
      attr2.checked = true;
    const input = element2("input", attr2);
    input.addEventListener("change", () => bind3.update(option));
    const label = element2("label", {}, (labels3[i] || option) + "");
    label.prepend(input);
    group4.appendChild(label);
    return input;
  });
  bind3.set = (value4) => {
    const nodes = bind3.elements, n = nodes.length;
    for (let i = 0; i < n; ++i) {
      if (valuesEqual(nodes[i].value, value4))
        nodes[i].checked = true;
    }
  };
}
function range5(bind3, el, param2, value3) {
  value3 = value3 !== void 0 ? value3 : (+param2.max + +param2.min) / 2;
  const max6 = param2.max != null ? param2.max : Math.max(100, +value3) || 100, min6 = param2.min || Math.min(0, max6, +value3) || 0, step = param2.step || tickStep(min6, max6, 100);
  const node = element2("input", {
    type: "range",
    name: param2.signal,
    min: min6,
    max: max6,
    step
  });
  node.value = value3;
  const span2 = element2("span", {}, +value3);
  el.appendChild(node);
  el.appendChild(span2);
  const update3 = () => {
    span2.textContent = node.value;
    bind3.update(+node.value);
  };
  node.addEventListener("input", update3);
  node.addEventListener("change", update3);
  bind3.elements = [node];
  bind3.set = (value4) => {
    node.value = value4;
    span2.textContent = value4;
  };
}
function valuesEqual(a4, b2) {
  return a4 === b2 || a4 + "" === b2 + "";
}
function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {
  r = r || new constructor(view.loader());
  return r.initialize(el, width(view), height(view), offset3(view), scaleFactor, opt).background(view.background());
}
function trap(view, fn) {
  return !fn ? null : function() {
    try {
      fn.apply(this, arguments);
    } catch (error2) {
      view.error(error2);
    }
  };
}
function initializeHandler(view, prevHandler, el, constructor) {
  const handler = new constructor(view.loader(), trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, offset3(view), view);
  if (prevHandler) {
    prevHandler.handlers().forEach((h2) => {
      handler.on(h2.type, h2.handler);
    });
  }
  return handler;
}
function initialize2(el, elBind) {
  const view = this, type3 = view._renderType, config = view._eventConfig.bind, module4 = renderModule(type3);
  el = view._el = el ? lookup4(view, el, true) : null;
  initializeAria(view);
  if (!module4)
    view.error("Unrecognized renderer type: " + type3);
  const Handler3 = module4.handler || CanvasHandler, Renderer2 = el ? module4.renderer : module4.headless;
  view._renderer = !Renderer2 ? null : initializeRenderer(view, view._renderer, el, Renderer2);
  view._handler = initializeHandler(view, view._handler, el, Handler3);
  view._redraw = true;
  if (el && config !== "none") {
    elBind = elBind ? view._elBind = lookup4(view, elBind, true) : el.appendChild(element2("form", {
      "class": "vega-bindings"
    }));
    view._bind.forEach((_) => {
      if (_.param.element && config !== "container") {
        _.element = lookup4(view, _.param.element, !!_.param.input);
      }
    });
    view._bind.forEach((_) => {
      bind2(view, _.element || elBind, _);
    });
  }
  return view;
}
function lookup4(view, el, clear2) {
  if (typeof el === "string") {
    if (typeof document !== "undefined") {
      el = document.querySelector(el);
      if (!el) {
        view.error("Signal bind element not found: " + el);
        return null;
      }
    } else {
      view.error("DOM document instance not found.");
      return null;
    }
  }
  if (el && clear2) {
    try {
      el.textContent = "";
    } catch (e3) {
      el = null;
      view.error(e3);
    }
  }
  return el;
}
var number7 = (_) => +_ || 0;
var paddingObject = (_) => ({
  top: _,
  bottom: _,
  left: _,
  right: _
});
function padding(_) {
  return isObject(_) ? {
    top: number7(_.top),
    bottom: number7(_.bottom),
    left: number7(_.left),
    right: number7(_.right)
  } : paddingObject(number7(_));
}
async function renderHeadless(view, type3, scaleFactor, opt) {
  const module4 = renderModule(type3), ctr = module4 && module4.headless;
  if (!ctr)
    error("Unrecognized renderer type: " + type3);
  await view.runAsync();
  return initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root);
}
async function renderToImageURL(type3, scaleFactor) {
  if (type3 !== RenderType.Canvas && type3 !== RenderType.SVG && type3 !== RenderType.PNG) {
    error("Unrecognized image type: " + type3);
  }
  const r = await renderHeadless(this, type3, scaleFactor);
  return type3 === RenderType.SVG ? toBlobURL(r.svg(), "image/svg+xml") : r.canvas().toDataURL("image/png");
}
function toBlobURL(data3, mime) {
  const blob = new Blob([data3], {
    type: mime
  });
  return window.URL.createObjectURL(blob);
}
async function renderToCanvas(scaleFactor, opt) {
  const r = await renderHeadless(this, RenderType.Canvas, scaleFactor, opt);
  return r.canvas();
}
async function renderToSVG(scaleFactor) {
  const r = await renderHeadless(this, RenderType.SVG, scaleFactor);
  return r.svg();
}
function runtime(view, spec, expr2) {
  return context2(view, transforms, functionContext, expr2).parse(spec);
}
function scale5(name4) {
  var scales2 = this._runtime.scales;
  if (!has(scales2, name4)) {
    error("Unrecognized scale or projection: " + name4);
  }
  return scales2[name4].value;
}
var Width = "width";
var Height = "height";
var Padding2 = "padding";
var Skip2 = {
  skip: true
};
function viewWidth(view, width2) {
  var a4 = view.autosize(), p = view.padding();
  return width2 - (a4 && a4.contains === Padding2 ? p.left + p.right : 0);
}
function viewHeight(view, height2) {
  var a4 = view.autosize(), p = view.padding();
  return height2 - (a4 && a4.contains === Padding2 ? p.top + p.bottom : 0);
}
function initializeResize(view) {
  var s2 = view._signals, w4 = s2[Width], h2 = s2[Height], p = s2[Padding2];
  function resetSize() {
    view._autosize = view._resize = 1;
  }
  view._resizeWidth = view.add(null, (_) => {
    view._width = _.size;
    view._viewWidth = viewWidth(view, _.size);
    resetSize();
  }, {
    size: w4
  });
  view._resizeHeight = view.add(null, (_) => {
    view._height = _.size;
    view._viewHeight = viewHeight(view, _.size);
    resetSize();
  }, {
    size: h2
  });
  const resizePadding = view.add(null, resetSize, {
    pad: p
  });
  view._resizeWidth.rank = w4.rank + 1;
  view._resizeHeight.rank = h2.rank + 1;
  resizePadding.rank = p.rank + 1;
}
function resizeView(viewWidth2, viewHeight2, width2, height2, origin, auto) {
  this.runAfter((view) => {
    let rerun2 = 0;
    view._autosize = 0;
    if (view.width() !== width2) {
      rerun2 = 1;
      view.signal(Width, width2, Skip2);
      view._resizeWidth.skip(true);
    }
    if (view.height() !== height2) {
      rerun2 = 1;
      view.signal(Height, height2, Skip2);
      view._resizeHeight.skip(true);
    }
    if (view._viewWidth !== viewWidth2) {
      view._resize = 1;
      view._viewWidth = viewWidth2;
    }
    if (view._viewHeight !== viewHeight2) {
      view._resize = 1;
      view._viewHeight = viewHeight2;
    }
    if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
      view._resize = 1;
      view._origin = origin;
    }
    if (rerun2)
      view.run("enter");
    if (auto)
      view.runAfter((v2) => v2.resize());
  }, false, 1);
}
function getState2(options) {
  return this._runtime.getState(options || {
    data: dataTest,
    signals: signalTest,
    recurse: true
  });
}
function dataTest(name4, data3) {
  return data3.modified && isArray(data3.input.value) && name4.indexOf("_:vega:_");
}
function signalTest(name4, op) {
  return !(name4 === "parent" || op instanceof transforms.proxy);
}
function setState2(state) {
  this.runAsync(null, (v2) => {
    v2._trigger = false;
    v2._runtime.setState(state);
  }, (v2) => {
    v2._trigger = true;
  });
  return this;
}
function timer2(callback, delay) {
  function tick2(elapsed) {
    callback({
      timestamp: Date.now(),
      elapsed
    });
  }
  this._timers.push(interval_default(tick2, delay));
}
function defaultTooltip2(handler, event2, item, value3) {
  const el = handler.element();
  if (el)
    el.setAttribute("title", formatTooltip(value3));
}
function formatTooltip(value3) {
  return value3 == null ? "" : isArray(value3) ? formatArray(value3) : isObject(value3) && !isDate(value3) ? formatObject(value3) : value3 + "";
}
function formatObject(obj) {
  return Object.keys(obj).map((key2) => {
    const v2 = obj[key2];
    return key2 + ": " + (isArray(v2) ? formatArray(v2) : formatValue2(v2));
  }).join("\n");
}
function formatArray(value3) {
  return "[" + value3.map(formatValue2).join(", ") + "]";
}
function formatValue2(value3) {
  return isArray(value3) ? "[\u2026]" : isObject(value3) && !isDate(value3) ? "{\u2026}" : value3;
}
function View(spec, options) {
  const view = this;
  options = options || {};
  Dataflow.call(view);
  if (options.loader)
    view.loader(options.loader);
  if (options.logger)
    view.logger(options.logger);
  if (options.logLevel != null)
    view.logLevel(options.logLevel);
  if (options.locale || spec.locale) {
    const loc = extend({}, spec.locale, options.locale);
    view.locale(locale3(loc.number, loc.time));
  }
  view._el = null;
  view._elBind = null;
  view._renderType = options.renderer || RenderType.Canvas;
  view._scenegraph = new Scenegraph();
  const root = view._scenegraph.root;
  view._renderer = null;
  view._tooltip = options.tooltip || defaultTooltip2, view._redraw = true;
  view._handler = new CanvasHandler().scene(root);
  view._globalCursor = false;
  view._preventDefault = false;
  view._timers = [];
  view._eventListeners = [];
  view._resizeListeners = [];
  view._eventConfig = initializeEventConfig(spec.eventConfig);
  view.globalCursor(view._eventConfig.globalCursor);
  const ctx = runtime(view, spec, options.expr);
  view._runtime = ctx;
  view._signals = ctx.signals;
  view._bind = (spec.bindings || []).map((_) => ({
    state: null,
    param: extend({}, _)
  }));
  if (ctx.root)
    ctx.root.set(root);
  root.source = ctx.data.root.input;
  view.pulse(ctx.data.root.input, view.changeset().insert(root.items));
  view._width = view.width();
  view._height = view.height();
  view._viewWidth = viewWidth(view, view._width);
  view._viewHeight = viewHeight(view, view._height);
  view._origin = [0, 0];
  view._resize = 0;
  view._autosize = 1;
  initializeResize(view);
  background2(view);
  cursor(view);
  view.description(spec.description);
  if (options.hover)
    view.hover();
  if (options.container)
    view.initialize(options.container, options.bind);
}
function lookupSignal(view, name4) {
  return has(view._signals, name4) ? view._signals[name4] : error("Unrecognized signal name: " + $(name4));
}
function findOperatorHandler(op, handler) {
  const h2 = (op._targets || []).filter((op2) => op2._update && op2._update.handler === handler);
  return h2.length ? h2[0] : null;
}
function addOperatorListener(view, name4, op, handler) {
  let h2 = findOperatorHandler(op, handler);
  if (!h2) {
    h2 = trap(view, () => handler(name4, op.value));
    h2.handler = handler;
    view.on(op, null, h2);
  }
  return view;
}
function removeOperatorListener(view, op, handler) {
  const h2 = findOperatorHandler(op, handler);
  if (h2)
    op._targets.remove(h2);
  return view;
}
inherits(View, Dataflow, {
  async evaluate(encode2, prerun, postrun) {
    await Dataflow.prototype.evaluate.call(this, encode2, prerun);
    if (this._redraw || this._resize) {
      try {
        if (this._renderer) {
          if (this._resize) {
            this._resize = 0;
            resizeRenderer(this);
          }
          await this._renderer.renderAsync(this._scenegraph.root);
        }
        this._redraw = false;
      } catch (e3) {
        this.error(e3);
      }
    }
    if (postrun)
      asyncCallback(this, postrun);
    return this;
  },
  dirty(item) {
    this._redraw = true;
    this._renderer && this._renderer.dirty(item);
  },
  description(text4) {
    if (arguments.length) {
      const desc = text4 != null ? text4 + "" : null;
      if (desc !== this._desc)
        ariaLabel(this._el, this._desc = desc);
      return this;
    }
    return this._desc;
  },
  container() {
    return this._el;
  },
  scenegraph() {
    return this._scenegraph;
  },
  origin() {
    return this._origin.slice();
  },
  signal(name4, value3, options) {
    const op = lookupSignal(this, name4);
    return arguments.length === 1 ? op.value : this.update(op, value3, options);
  },
  width(_) {
    return arguments.length ? this.signal("width", _) : this.signal("width");
  },
  height(_) {
    return arguments.length ? this.signal("height", _) : this.signal("height");
  },
  padding(_) {
    return arguments.length ? this.signal("padding", padding(_)) : padding(this.signal("padding"));
  },
  autosize(_) {
    return arguments.length ? this.signal("autosize", _) : this.signal("autosize");
  },
  background(_) {
    return arguments.length ? this.signal("background", _) : this.signal("background");
  },
  renderer(type3) {
    if (!arguments.length)
      return this._renderType;
    if (!renderModule(type3))
      error("Unrecognized renderer type: " + type3);
    if (type3 !== this._renderType) {
      this._renderType = type3;
      this._resetRenderer();
    }
    return this;
  },
  tooltip(handler) {
    if (!arguments.length)
      return this._tooltip;
    if (handler !== this._tooltip) {
      this._tooltip = handler;
      this._resetRenderer();
    }
    return this;
  },
  loader(loader2) {
    if (!arguments.length)
      return this._loader;
    if (loader2 !== this._loader) {
      Dataflow.prototype.loader.call(this, loader2);
      this._resetRenderer();
    }
    return this;
  },
  resize() {
    this._autosize = 1;
    return this.touch(lookupSignal(this, "autosize"));
  },
  _resetRenderer() {
    if (this._renderer) {
      this._renderer = null;
      this.initialize(this._el, this._elBind);
    }
  },
  _resizeView: resizeView,
  addEventListener(type3, handler, options) {
    let callback = handler;
    if (!(options && options.trap === false)) {
      callback = trap(this, handler);
      callback.raw = handler;
    }
    this._handler.on(type3, callback);
    return this;
  },
  removeEventListener(type3, handler) {
    var handlers = this._handler.handlers(type3), i = handlers.length, h2, t4;
    while (--i >= 0) {
      t4 = handlers[i].type;
      h2 = handlers[i].handler;
      if (type3 === t4 && (handler === h2 || handler === h2.raw)) {
        this._handler.off(t4, h2);
        break;
      }
    }
    return this;
  },
  addResizeListener(handler) {
    const l = this._resizeListeners;
    if (l.indexOf(handler) < 0) {
      l.push(handler);
    }
    return this;
  },
  removeResizeListener(handler) {
    var l = this._resizeListeners, i = l.indexOf(handler);
    if (i >= 0) {
      l.splice(i, 1);
    }
    return this;
  },
  addSignalListener(name4, handler) {
    return addOperatorListener(this, name4, lookupSignal(this, name4), handler);
  },
  removeSignalListener(name4, handler) {
    return removeOperatorListener(this, lookupSignal(this, name4), handler);
  },
  addDataListener(name4, handler) {
    return addOperatorListener(this, name4, dataref(this, name4).values, handler);
  },
  removeDataListener(name4, handler) {
    return removeOperatorListener(this, dataref(this, name4).values, handler);
  },
  globalCursor(_) {
    if (arguments.length) {
      if (this._globalCursor !== !!_) {
        const prev = setCursor(this, null);
        this._globalCursor = !!_;
        if (prev)
          setCursor(this, prev);
      }
      return this;
    } else {
      return this._globalCursor;
    }
  },
  preventDefault(_) {
    if (arguments.length) {
      this._preventDefault = _;
      return this;
    } else {
      return this._preventDefault;
    }
  },
  timer: timer2,
  events: events2,
  finalize,
  hover,
  data: data2,
  change,
  insert,
  remove,
  scale: scale5,
  initialize: initialize2,
  toImageURL: renderToImageURL,
  toCanvas: renderToCanvas,
  toSVG: renderToSVG,
  getState: getState2,
  setState: setState2
});

// node_modules/vega-event-selector/build/vega-event-selector.module.js
var VIEW2 = "view";
var LBRACK = "[";
var RBRACK = "]";
var LBRACE = "{";
var RBRACE = "}";
var COLON = ":";
var COMMA = ",";
var NAME = "@";
var GT = ">";
var ILLEGAL2 = /[[\]{}]/;
var DEFAULT_MARKS = {
  "*": 1,
  arc: 1,
  area: 1,
  group: 1,
  image: 1,
  line: 1,
  path: 1,
  rect: 1,
  rule: 1,
  shape: 1,
  symbol: 1,
  text: 1,
  trail: 1
};
var DEFAULT_SOURCE;
var MARKS;
function eventSelector(selector, source3, marks) {
  DEFAULT_SOURCE = source3 || VIEW2;
  MARKS = marks || DEFAULT_MARKS;
  return parseMerge(selector.trim()).map(parseSelector);
}
function isMarkType(type3) {
  return MARKS[type3];
}
function find3(s2, i, endChar, pushChar, popChar) {
  const n = s2.length;
  let count4 = 0, c3;
  for (; i < n; ++i) {
    c3 = s2[i];
    if (!count4 && c3 === endChar)
      return i;
    else if (popChar && popChar.indexOf(c3) >= 0)
      --count4;
    else if (pushChar && pushChar.indexOf(c3) >= 0)
      ++count4;
  }
  return i;
}
function parseMerge(s2) {
  const output3 = [], n = s2.length;
  let start = 0, i = 0;
  while (i < n) {
    i = find3(s2, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
    output3.push(s2.substring(start, i).trim());
    start = ++i;
  }
  if (output3.length === 0) {
    throw "Empty event selector: " + s2;
  }
  return output3;
}
function parseSelector(s2) {
  return s2[0] === "[" ? parseBetween(s2) : parseStream2(s2);
}
function parseBetween(s2) {
  const n = s2.length;
  let i = 1, b2;
  i = find3(s2, i, RBRACK, LBRACK, RBRACK);
  if (i === n) {
    throw "Empty between selector: " + s2;
  }
  b2 = parseMerge(s2.substring(1, i));
  if (b2.length !== 2) {
    throw "Between selector must have two elements: " + s2;
  }
  s2 = s2.slice(i + 1).trim();
  if (s2[0] !== GT) {
    throw "Expected '>' after between selector: " + s2;
  }
  b2 = b2.map(parseSelector);
  const stream2 = parseSelector(s2.slice(1).trim());
  if (stream2.between) {
    return {
      between: b2,
      stream: stream2
    };
  } else {
    stream2.between = b2;
  }
  return stream2;
}
function parseStream2(s2) {
  const stream2 = {
    source: DEFAULT_SOURCE
  }, source3 = [];
  let throttle = [0, 0], markname = 0, start = 0, n = s2.length, i = 0, j, filter5;
  if (s2[n - 1] === RBRACE) {
    i = s2.lastIndexOf(LBRACE);
    if (i >= 0) {
      try {
        throttle = parseThrottle(s2.substring(i + 1, n - 1));
      } catch (e3) {
        throw "Invalid throttle specification: " + s2;
      }
      s2 = s2.slice(0, i).trim();
      n = s2.length;
    } else
      throw "Unmatched right brace: " + s2;
    i = 0;
  }
  if (!n)
    throw s2;
  if (s2[0] === NAME)
    markname = ++i;
  j = find3(s2, i, COLON);
  if (j < n) {
    source3.push(s2.substring(start, j).trim());
    start = i = ++j;
  }
  i = find3(s2, i, LBRACK);
  if (i === n) {
    source3.push(s2.substring(start, n).trim());
  } else {
    source3.push(s2.substring(start, i).trim());
    filter5 = [];
    start = ++i;
    if (start === n)
      throw "Unmatched left bracket: " + s2;
  }
  while (i < n) {
    i = find3(s2, i, RBRACK);
    if (i === n)
      throw "Unmatched left bracket: " + s2;
    filter5.push(s2.substring(start, i).trim());
    if (i < n - 1 && s2[++i] !== LBRACK)
      throw "Expected left bracket: " + s2;
    start = ++i;
  }
  if (!(n = source3.length) || ILLEGAL2.test(source3[n - 1])) {
    throw "Invalid event selector: " + s2;
  }
  if (n > 1) {
    stream2.type = source3[1];
    if (markname) {
      stream2.markname = source3[0].slice(1);
    } else if (isMarkType(source3[0])) {
      stream2.marktype = source3[0];
    } else {
      stream2.source = source3[0];
    }
  } else {
    stream2.type = source3[0];
  }
  if (stream2.type.slice(-1) === "!") {
    stream2.consume = true;
    stream2.type = stream2.type.slice(0, -1);
  }
  if (filter5 != null)
    stream2.filter = filter5;
  if (throttle[0])
    stream2.throttle = throttle[0];
  if (throttle[1])
    stream2.debounce = throttle[1];
  return stream2;
}
function parseThrottle(s2) {
  const a4 = s2.split(COMMA);
  if (!s2.length || a4.length > 2)
    throw s2;
  return a4.map((_) => {
    const x5 = +_;
    if (x5 !== x5)
      throw s2;
    return x5;
  });
}

// node_modules/vega-parser/build/vega-parser.module.js
function parseAutosize(spec) {
  return isObject(spec) ? spec : {
    type: spec || "pad"
  };
}
var number8 = (_) => +_ || 0;
var paddingObject2 = (_) => ({
  top: _,
  bottom: _,
  left: _,
  right: _
});
function parsePadding(spec) {
  return !isObject(spec) ? paddingObject2(number8(spec)) : spec.signal ? spec : {
    top: number8(spec.top),
    bottom: number8(spec.bottom),
    left: number8(spec.left),
    right: number8(spec.right)
  };
}
var encoder = (_) => isObject(_) && !isArray(_) ? extend({}, _) : {
  value: _
};
function addEncode(object2, name4, value3, set7) {
  if (value3 != null) {
    const isEncoder = isObject(value3) && !isArray(value3) || isArray(value3) && value3.length && isObject(value3[0]);
    if (isEncoder) {
      object2.update[name4] = value3;
    } else {
      object2[set7 || "enter"][name4] = {
        value: value3
      };
    }
    return 1;
  } else {
    return 0;
  }
}
function addEncoders(object2, enter, update3) {
  for (const name4 in enter) {
    addEncode(object2, name4, enter[name4]);
  }
  for (const name4 in update3) {
    addEncode(object2, name4, update3[name4], "update");
  }
}
function extendEncode(encode2, extra, skip) {
  for (const name4 in extra) {
    if (skip && has(skip, name4))
      continue;
    encode2[name4] = extend(encode2[name4] || {}, extra[name4]);
  }
  return encode2;
}
function has2(key2, encode2) {
  return encode2 && (encode2.enter && encode2.enter[key2] || encode2.update && encode2.update[key2]);
}
var MarkRole = "mark";
var FrameRole2 = "frame";
var ScopeRole2 = "scope";
var AxisRole2 = "axis";
var AxisDomainRole = "axis-domain";
var AxisGridRole = "axis-grid";
var AxisLabelRole = "axis-label";
var AxisTickRole = "axis-tick";
var AxisTitleRole = "axis-title";
var LegendRole2 = "legend";
var LegendBandRole = "legend-band";
var LegendEntryRole = "legend-entry";
var LegendGradientRole = "legend-gradient";
var LegendLabelRole = "legend-label";
var LegendSymbolRole = "legend-symbol";
var LegendTitleRole = "legend-title";
var TitleRole2 = "title";
var TitleTextRole = "title-text";
var TitleSubtitleRole = "title-subtitle";
function applyDefaults(encode2, type3, role, style2, config) {
  const defaults2 = {}, enter = {};
  let update3, key2, skip, props;
  key2 = "lineBreak";
  if (type3 === "text" && config[key2] != null && !has2(key2, encode2)) {
    applyDefault(defaults2, key2, config[key2]);
  }
  if (role == "legend" || String(role).startsWith("axis")) {
    role = null;
  }
  props = role === FrameRole2 ? config.group : role === MarkRole ? extend({}, config.mark, config[type3]) : null;
  for (key2 in props) {
    skip = has2(key2, encode2) || (key2 === "fill" || key2 === "stroke") && (has2("fill", encode2) || has2("stroke", encode2));
    if (!skip)
      applyDefault(defaults2, key2, props[key2]);
  }
  array(style2).forEach((name4) => {
    const props2 = config.style && config.style[name4];
    for (const key3 in props2) {
      if (!has2(key3, encode2)) {
        applyDefault(defaults2, key3, props2[key3]);
      }
    }
  });
  encode2 = extend({}, encode2);
  for (key2 in defaults2) {
    props = defaults2[key2];
    if (props.signal) {
      (update3 = update3 || {})[key2] = props;
    } else {
      enter[key2] = props;
    }
  }
  encode2.enter = extend(enter, encode2.enter);
  if (update3)
    encode2.update = extend(update3, encode2.update);
  return encode2;
}
function applyDefault(defaults2, key2, value3) {
  defaults2[key2] = value3 && value3.signal ? {
    signal: value3.signal
  } : {
    value: value3
  };
}
var scaleRef = (scale7) => isString(scale7) ? $(scale7) : scale7.signal ? `(${scale7.signal})` : field2(scale7);
function entry$1(enc) {
  if (enc.gradient != null) {
    return gradient2(enc);
  }
  let value3 = enc.signal ? `(${enc.signal})` : enc.color ? color3(enc.color) : enc.field != null ? field2(enc.field) : enc.value !== void 0 ? $(enc.value) : void 0;
  if (enc.scale != null) {
    value3 = scale6(enc, value3);
  }
  if (value3 === void 0) {
    value3 = null;
  }
  if (enc.exponent != null) {
    value3 = `pow(${value3},${property(enc.exponent)})`;
  }
  if (enc.mult != null) {
    value3 += `*${property(enc.mult)}`;
  }
  if (enc.offset != null) {
    value3 += `+${property(enc.offset)}`;
  }
  if (enc.round) {
    value3 = `round(${value3})`;
  }
  return value3;
}
var _color = (type3, x5, y5, z) => `(${type3}(${[x5, y5, z].map(entry$1).join(",")})+'')`;
function color3(enc) {
  return enc.c ? _color("hcl", enc.h, enc.c, enc.l) : enc.h || enc.s ? _color("hsl", enc.h, enc.s, enc.l) : enc.l || enc.a ? _color("lab", enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? _color("rgb", enc.r, enc.g, enc.b) : null;
}
function gradient2(enc) {
  const args = [enc.start, enc.stop, enc.count].map((_) => _ == null ? null : $(_));
  while (args.length && peek(args) == null)
    args.pop();
  args.unshift(scaleRef(enc.gradient));
  return `gradient(${args.join(",")})`;
}
function property(property2) {
  return isObject(property2) ? "(" + entry$1(property2) + ")" : property2;
}
function field2(ref2) {
  return resolveField(isObject(ref2) ? ref2 : {
    datum: ref2
  });
}
function resolveField(ref2) {
  let object2, level, field3;
  if (ref2.signal) {
    object2 = "datum";
    field3 = ref2.signal;
  } else if (ref2.group || ref2.parent) {
    level = Math.max(1, ref2.level || 1);
    object2 = "item";
    while (level-- > 0) {
      object2 += ".mark.group";
    }
    if (ref2.parent) {
      field3 = ref2.parent;
      object2 += ".datum";
    } else {
      field3 = ref2.group;
    }
  } else if (ref2.datum) {
    object2 = "datum";
    field3 = ref2.datum;
  } else {
    error("Invalid field reference: " + $(ref2));
  }
  if (!ref2.signal) {
    field3 = isString(field3) ? splitAccessPath(field3).map($).join("][") : resolveField(field3);
  }
  return object2 + "[" + field3 + "]";
}
function scale6(enc, value3) {
  const scale7 = scaleRef(enc.scale);
  if (enc.range != null) {
    value3 = `lerp(_range(${scale7}), ${+enc.range})`;
  } else {
    if (value3 !== void 0)
      value3 = `_scale(${scale7}, ${value3})`;
    if (enc.band) {
      value3 = (value3 ? value3 + "+" : "") + `_bandwidth(${scale7})` + (+enc.band === 1 ? "" : "*" + property(enc.band));
      if (enc.extra) {
        value3 = `(datum.extra ? _scale(${scale7}, datum.extra.value) : ${value3})`;
      }
    }
    if (value3 == null)
      value3 = "0";
  }
  return value3;
}
function rule2(enc) {
  let code = "";
  enc.forEach((rule4) => {
    const value3 = entry$1(rule4);
    code += rule4.test ? `(${rule4.test})?${value3}:` : value3;
  });
  if (peek(code) === ":") {
    code += "null";
  }
  return code;
}
function parseEncode(encode2, type3, role, style2, scope, params2) {
  const enc = {};
  params2 = params2 || {};
  params2.encoders = {
    $encode: enc
  };
  encode2 = applyDefaults(encode2, type3, role, style2, scope.config);
  for (const key2 in encode2) {
    enc[key2] = parseBlock(encode2[key2], type3, params2, scope);
  }
  return params2;
}
function parseBlock(block, marktype, params2, scope) {
  const channels = {}, fields = {};
  for (const name4 in block) {
    if (block[name4] != null) {
      channels[name4] = parse$1(expr(block[name4]), scope, params2, fields);
    }
  }
  return {
    $expr: {
      marktype,
      channels
    },
    $fields: Object.keys(fields),
    $output: Object.keys(block)
  };
}
function expr(enc) {
  return isArray(enc) ? rule2(enc) : entry$1(enc);
}
function parse$1(code, scope, params2, fields) {
  const expr2 = parser2(code, scope);
  expr2.$fields.forEach((name4) => fields[name4] = 1);
  extend(params2, expr2.$params);
  return expr2.$expr;
}
var OUTER = "outer";
var OUTER_INVALID = ["value", "update", "init", "react", "bind"];
function outerError(prefix, name4) {
  error(prefix + ' for "outer" push: ' + $(name4));
}
function parseSignal(signal, scope) {
  const name4 = signal.name;
  if (signal.push === OUTER) {
    if (!scope.signals[name4])
      outerError("No prior signal definition", name4);
    OUTER_INVALID.forEach((prop) => {
      if (signal[prop] !== void 0)
        outerError("Invalid property ", prop);
    });
  } else {
    const op = scope.addSignal(name4, signal.value);
    if (signal.react === false)
      op.react = false;
    if (signal.bind)
      scope.addBinding(name4, signal.bind);
  }
}
function Entry(type3, value3, params2, parent) {
  this.id = -1;
  this.type = type3;
  this.value = value3;
  this.params = params2;
  if (parent)
    this.parent = parent;
}
function entry(type3, value3, params2, parent) {
  return new Entry(type3, value3, params2, parent);
}
function operator(value3, params2) {
  return entry("operator", value3, params2);
}
function ref(op) {
  const ref2 = {
    $ref: op.id
  };
  if (op.id < 0)
    (op.refs = op.refs || []).push(ref2);
  return ref2;
}
function fieldRef$1(field3, name4) {
  return name4 ? {
    $field: field3,
    $name: name4
  } : {
    $field: field3
  };
}
var keyFieldRef = fieldRef$1("key");
function compareRef(fields, orders) {
  return {
    $compare: fields,
    $order: orders
  };
}
function keyRef(fields, flat) {
  const ref2 = {
    $key: fields
  };
  if (flat)
    ref2.$flat = true;
  return ref2;
}
var Ascending = "ascending";
var Descending = "descending";
function sortKey(sort4) {
  return !isObject(sort4) ? "" : (sort4.order === Descending ? "-" : "+") + aggrField(sort4.op, sort4.field);
}
function aggrField(op, field3) {
  return (op && op.signal ? "$" + op.signal : op || "") + (op && field3 ? "_" : "") + (field3 && field3.signal ? "$" + field3.signal : field3 || "");
}
var Scope$1 = "scope";
var View2 = "view";
function isSignal(_) {
  return _ && _.signal;
}
function isExpr$1(_) {
  return _ && _.expr;
}
function hasSignal(_) {
  if (isSignal(_))
    return true;
  if (isObject(_))
    for (const key2 in _) {
      if (hasSignal(_[key2]))
        return true;
    }
  return false;
}
function value2(specValue, defaultValue) {
  return specValue != null ? specValue : defaultValue;
}
function deref(v2) {
  return v2 && v2.signal || v2;
}
var Timer2 = "timer";
function parseStream3(stream2, scope) {
  const method2 = stream2.merge ? mergeStream : stream2.stream ? nestedStream : stream2.type ? eventStream : error("Invalid stream specification: " + $(stream2));
  return method2(stream2, scope);
}
function eventSource(source3) {
  return source3 === Scope$1 ? View2 : source3 || View2;
}
function mergeStream(stream2, scope) {
  const list = stream2.merge.map((s2) => parseStream3(s2, scope)), entry2 = streamParameters({
    merge: list
  }, stream2, scope);
  return scope.addStream(entry2).id;
}
function nestedStream(stream2, scope) {
  const id2 = parseStream3(stream2.stream, scope), entry2 = streamParameters({
    stream: id2
  }, stream2, scope);
  return scope.addStream(entry2).id;
}
function eventStream(stream2, scope) {
  let id2;
  if (stream2.type === Timer2) {
    id2 = scope.event(Timer2, stream2.throttle);
    stream2 = {
      between: stream2.between,
      filter: stream2.filter
    };
  } else {
    id2 = scope.event(eventSource(stream2.source), stream2.type);
  }
  const entry2 = streamParameters({
    stream: id2
  }, stream2, scope);
  return Object.keys(entry2).length === 1 ? id2 : scope.addStream(entry2).id;
}
function streamParameters(entry2, stream2, scope) {
  let param2 = stream2.between;
  if (param2) {
    if (param2.length !== 2) {
      error('Stream "between" parameter must have 2 entries: ' + $(stream2));
    }
    entry2.between = [parseStream3(param2[0], scope), parseStream3(param2[1], scope)];
  }
  param2 = stream2.filter ? [].concat(stream2.filter) : [];
  if (stream2.marktype || stream2.markname || stream2.markrole) {
    param2.push(filterMark(stream2.marktype, stream2.markname, stream2.markrole));
  }
  if (stream2.source === Scope$1) {
    param2.push("inScope(event.item)");
  }
  if (param2.length) {
    entry2.filter = parser2("(" + param2.join(")&&(") + ")", scope).$expr;
  }
  if ((param2 = stream2.throttle) != null) {
    entry2.throttle = +param2;
  }
  if ((param2 = stream2.debounce) != null) {
    entry2.debounce = +param2;
  }
  if (stream2.consume) {
    entry2.consume = true;
  }
  return entry2;
}
function filterMark(type3, name4, role) {
  const item = "event.item";
  return item + (type3 && type3 !== "*" ? "&&" + item + ".mark.marktype==='" + type3 + "'" : "") + (role ? "&&" + item + ".mark.role==='" + role + "'" : "") + (name4 ? "&&" + item + ".mark.name==='" + name4 + "'" : "");
}
var OP_VALUE_EXPR = {
  code: "_.$value",
  ast: {
    type: "Identifier",
    value: "value"
  }
};
function parseUpdate2(spec, scope, target2) {
  const encode2 = spec.encode, entry2 = {
    target: target2
  };
  let events4 = spec.events, update3 = spec.update, sources = [];
  if (!events4) {
    error("Signal update missing events specification.");
  }
  if (isString(events4)) {
    events4 = eventSelector(events4, scope.isSubscope() ? Scope$1 : View2);
  }
  events4 = array(events4).filter((s2) => s2.signal || s2.scale ? (sources.push(s2), 0) : 1);
  if (sources.length > 1) {
    sources = [mergeSources(sources)];
  }
  if (events4.length) {
    sources.push(events4.length > 1 ? {
      merge: events4
    } : events4[0]);
  }
  if (encode2 != null) {
    if (update3)
      error("Signal encode and update are mutually exclusive.");
    update3 = "encode(item()," + $(encode2) + ")";
  }
  entry2.update = isString(update3) ? parser2(update3, scope) : update3.expr != null ? parser2(update3.expr, scope) : update3.value != null ? update3.value : update3.signal != null ? {
    $expr: OP_VALUE_EXPR,
    $params: {
      $value: scope.signalRef(update3.signal)
    }
  } : error("Invalid signal update specification.");
  if (spec.force) {
    entry2.options = {
      force: true
    };
  }
  sources.forEach((source3) => scope.addUpdate(extend(streamSource(source3, scope), entry2)));
}
function streamSource(stream2, scope) {
  return {
    source: stream2.signal ? scope.signalRef(stream2.signal) : stream2.scale ? scope.scaleRef(stream2.scale) : parseStream3(stream2, scope)
  };
}
function mergeSources(sources) {
  return {
    signal: "[" + sources.map((s2) => s2.scale ? 'scale("' + s2.scale + '")' : s2.signal) + "]"
  };
}
function parseSignalUpdates(signal, scope) {
  const op = scope.getSignal(signal.name);
  let expr2 = signal.update;
  if (signal.init) {
    if (expr2) {
      error("Signals can not include both init and update expressions.");
    } else {
      expr2 = signal.init;
      op.initonly = true;
    }
  }
  if (expr2) {
    expr2 = parser2(expr2, scope);
    op.update = expr2.$expr;
    op.params = expr2.$params;
  }
  if (signal.on) {
    signal.on.forEach((_) => parseUpdate2(_, scope, op.id));
  }
}
var transform3 = (name4) => (params2, value3, parent) => entry(name4, value3, params2 || void 0, parent);
var Aggregate2 = transform3("aggregate");
var AxisTicks2 = transform3("axisticks");
var Bound2 = transform3("bound");
var Collect2 = transform3("collect");
var Compare2 = transform3("compare");
var DataJoin2 = transform3("datajoin");
var Encode2 = transform3("encode");
var Expression2 = transform3("expression");
var Facet2 = transform3("facet");
var Field2 = transform3("field");
var Key2 = transform3("key");
var LegendEntries2 = transform3("legendentries");
var Load2 = transform3("load");
var Mark2 = transform3("mark");
var MultiExtent2 = transform3("multiextent");
var MultiValues2 = transform3("multivalues");
var Overlap2 = transform3("overlap");
var Params3 = transform3("params");
var PreFacet2 = transform3("prefacet");
var Projection2 = transform3("projection");
var Proxy3 = transform3("proxy");
var Relay2 = transform3("relay");
var Render2 = transform3("render");
var Scale2 = transform3("scale");
var Sieve2 = transform3("sieve");
var SortItems2 = transform3("sortitems");
var ViewLayout2 = transform3("viewlayout");
var Values2 = transform3("values");
var FIELD_REF_ID = 0;
var MULTIDOMAIN_SORT_OPS = {
  min: "min",
  max: "max",
  count: "sum"
};
function initScale(spec, scope) {
  const type3 = spec.type || "linear";
  if (!isValidScaleType(type3)) {
    error("Unrecognized scale type: " + $(type3));
  }
  scope.addScale(spec.name, {
    type: type3,
    domain: void 0
  });
}
function parseScale(spec, scope) {
  const params2 = scope.getScale(spec.name).params;
  let key2;
  params2.domain = parseScaleDomain(spec.domain, spec, scope);
  if (spec.range != null) {
    params2.range = parseScaleRange(spec, scope, params2);
  }
  if (spec.interpolate != null) {
    parseScaleInterpolate(spec.interpolate, params2);
  }
  if (spec.nice != null) {
    params2.nice = parseScaleNice(spec.nice);
  }
  if (spec.bins != null) {
    params2.bins = parseScaleBins(spec.bins, scope);
  }
  for (key2 in spec) {
    if (has(params2, key2) || key2 === "name")
      continue;
    params2[key2] = parseLiteral(spec[key2], scope);
  }
}
function parseLiteral(v2, scope) {
  return !isObject(v2) ? v2 : v2.signal ? scope.signalRef(v2.signal) : error("Unsupported object: " + $(v2));
}
function parseArray(v2, scope) {
  return v2.signal ? scope.signalRef(v2.signal) : v2.map((v3) => parseLiteral(v3, scope));
}
function dataLookupError(name4) {
  error("Can not find data set: " + $(name4));
}
function parseScaleDomain(domain4, spec, scope) {
  if (!domain4) {
    if (spec.domainMin != null || spec.domainMax != null) {
      error("No scale domain defined for domainMin/domainMax to override.");
    }
    return;
  }
  return domain4.signal ? scope.signalRef(domain4.signal) : (isArray(domain4) ? explicitDomain : domain4.fields ? multipleDomain : singularDomain)(domain4, spec, scope);
}
function explicitDomain(domain4, spec, scope) {
  return domain4.map((v2) => parseLiteral(v2, scope));
}
function singularDomain(domain4, spec, scope) {
  const data3 = scope.getData(domain4.data);
  if (!data3)
    dataLookupError(domain4.data);
  return isDiscrete(spec.type) ? data3.valuesRef(scope, domain4.field, parseSort(domain4.sort, false)) : isQuantile(spec.type) ? data3.domainRef(scope, domain4.field) : data3.extentRef(scope, domain4.field);
}
function multipleDomain(domain4, spec, scope) {
  const data3 = domain4.data, fields = domain4.fields.reduce((dom, d) => {
    d = isString(d) ? {
      data: data3,
      field: d
    } : isArray(d) || d.signal ? fieldRef(d, scope) : d;
    dom.push(d);
    return dom;
  }, []);
  return (isDiscrete(spec.type) ? ordinalMultipleDomain : isQuantile(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain4, scope, fields);
}
function fieldRef(data3, scope) {
  const name4 = "_:vega:_" + FIELD_REF_ID++, coll = Collect2({});
  if (isArray(data3)) {
    coll.value = {
      $ingest: data3
    };
  } else if (data3.signal) {
    const code = "setdata(" + $(name4) + "," + data3.signal + ")";
    coll.params.input = scope.signalRef(code);
  }
  scope.addDataPipeline(name4, [coll, Sieve2({})]);
  return {
    data: name4,
    field: "data"
  };
}
function ordinalMultipleDomain(domain4, scope, fields) {
  const sort4 = parseSort(domain4.sort, true);
  let a4, v2;
  const counts = fields.map((f) => {
    const data3 = scope.getData(f.data);
    if (!data3)
      dataLookupError(f.data);
    return data3.countsRef(scope, f.field, sort4);
  });
  const p = {
    groupby: keyFieldRef,
    pulse: counts
  };
  if (sort4) {
    a4 = sort4.op || "count";
    v2 = sort4.field ? aggrField(a4, sort4.field) : "count";
    p.ops = [MULTIDOMAIN_SORT_OPS[a4]];
    p.fields = [scope.fieldRef(v2)];
    p.as = [v2];
  }
  a4 = scope.add(Aggregate2(p));
  const c3 = scope.add(Collect2({
    pulse: ref(a4)
  }));
  v2 = scope.add(Values2({
    field: keyFieldRef,
    sort: scope.sortRef(sort4),
    pulse: ref(c3)
  }));
  return ref(v2);
}
function parseSort(sort4, multidomain) {
  if (sort4) {
    if (!sort4.field && !sort4.op) {
      if (isObject(sort4))
        sort4.field = "key";
      else
        sort4 = {
          field: "key"
        };
    } else if (!sort4.field && sort4.op !== "count") {
      error("No field provided for sort aggregate op: " + sort4.op);
    } else if (multidomain && sort4.field) {
      if (sort4.op && !MULTIDOMAIN_SORT_OPS[sort4.op]) {
        error("Multiple domain scales can not be sorted using " + sort4.op);
      }
    }
  }
  return sort4;
}
function quantileMultipleDomain(domain4, scope, fields) {
  const values5 = fields.map((f) => {
    const data3 = scope.getData(f.data);
    if (!data3)
      dataLookupError(f.data);
    return data3.domainRef(scope, f.field);
  });
  return ref(scope.add(MultiValues2({
    values: values5
  })));
}
function numericMultipleDomain(domain4, scope, fields) {
  const extents = fields.map((f) => {
    const data3 = scope.getData(f.data);
    if (!data3)
      dataLookupError(f.data);
    return data3.extentRef(scope, f.field);
  });
  return ref(scope.add(MultiExtent2({
    extents
  })));
}
function parseScaleBins(v2, scope) {
  return v2.signal || isArray(v2) ? parseArray(v2, scope) : scope.objectProperty(v2);
}
function parseScaleNice(nice5) {
  return isObject(nice5) ? {
    interval: parseLiteral(nice5.interval),
    step: parseLiteral(nice5.step)
  } : parseLiteral(nice5);
}
function parseScaleInterpolate(interpolate3, params2) {
  params2.interpolate = parseLiteral(interpolate3.type || interpolate3);
  if (interpolate3.gamma != null) {
    params2.interpolateGamma = parseLiteral(interpolate3.gamma);
  }
}
function parseScaleRange(spec, scope, params2) {
  const config = scope.config.range;
  let range8 = spec.range;
  if (range8.signal) {
    return scope.signalRef(range8.signal);
  } else if (isString(range8)) {
    if (config && has(config, range8)) {
      spec = extend({}, spec, {
        range: config[range8]
      });
      return parseScaleRange(spec, scope, params2);
    } else if (range8 === "width") {
      range8 = [0, {
        signal: "width"
      }];
    } else if (range8 === "height") {
      range8 = isDiscrete(spec.type) ? [0, {
        signal: "height"
      }] : [{
        signal: "height"
      }, 0];
    } else {
      error("Unrecognized scale range value: " + $(range8));
    }
  } else if (range8.scheme) {
    params2.scheme = isArray(range8.scheme) ? parseArray(range8.scheme, scope) : parseLiteral(range8.scheme, scope);
    if (range8.extent)
      params2.schemeExtent = parseArray(range8.extent, scope);
    if (range8.count)
      params2.schemeCount = parseLiteral(range8.count, scope);
    return;
  } else if (range8.step) {
    params2.rangeStep = parseLiteral(range8.step, scope);
    return;
  } else if (isDiscrete(spec.type) && !isArray(range8)) {
    return parseScaleDomain(range8, spec, scope);
  } else if (!isArray(range8)) {
    error("Unsupported range type: " + $(range8));
  }
  return range8.map((v2) => (isArray(v2) ? parseArray : parseLiteral)(v2, scope));
}
function parseProjection(proj, scope) {
  const config = scope.config.projection || {}, params2 = {};
  for (const name4 in proj) {
    if (name4 === "name")
      continue;
    params2[name4] = parseParameter$1(proj[name4], name4, scope);
  }
  for (const name4 in config) {
    if (params2[name4] == null) {
      params2[name4] = parseParameter$1(config[name4], name4, scope);
    }
  }
  scope.addProjection(proj.name, params2);
}
function parseParameter$1(_, name4, scope) {
  return isArray(_) ? _.map((_2) => parseParameter$1(_2, name4, scope)) : !isObject(_) ? _ : _.signal ? scope.signalRef(_.signal) : name4 === "fit" ? _ : error("Unsupported parameter object: " + $(_));
}
var Top2 = "top";
var Left2 = "left";
var Right2 = "right";
var Bottom2 = "bottom";
var Center2 = "center";
var Vertical = "vertical";
var Start2 = "start";
var Middle2 = "middle";
var End2 = "end";
var Index = "index";
var Label2 = "label";
var Offset = "offset";
var Perc = "perc";
var Perc2 = "perc2";
var Value = "value";
var GuideLabelStyle = "guide-label";
var GuideTitleStyle = "guide-title";
var GroupTitleStyle = "group-title";
var GroupSubtitleStyle = "group-subtitle";
var Symbols2 = "symbol";
var Gradient2 = "gradient";
var Discrete2 = "discrete";
var Size = "size";
var Shape = "shape";
var Fill = "fill";
var Stroke = "stroke";
var StrokeWidth = "strokeWidth";
var StrokeDash = "strokeDash";
var Opacity = "opacity";
var LegendScales = [Size, Shape, Fill, Stroke, StrokeWidth, StrokeDash, Opacity];
var Skip3 = {
  name: 1,
  style: 1,
  interactive: 1
};
var zero4 = {
  value: 0
};
var one3 = {
  value: 1
};
var GroupMark = "group";
var RectMark = "rect";
var RuleMark = "rule";
var SymbolMark = "symbol";
var TextMark = "text";
function guideGroup(mark2) {
  mark2.type = GroupMark;
  mark2.interactive = mark2.interactive || false;
  return mark2;
}
function lookup5(spec, config) {
  const _ = (name4, dflt) => value2(spec[name4], value2(config[name4], dflt));
  _.isVertical = (s2) => Vertical === value2(spec.direction, config.direction || (s2 ? config.symbolDirection : config.gradientDirection));
  _.gradientLength = () => value2(spec.gradientLength, config.gradientLength || config.gradientWidth);
  _.gradientThickness = () => value2(spec.gradientThickness, config.gradientThickness || config.gradientHeight);
  _.entryColumns = () => value2(spec.columns, value2(config.columns, +_.isVertical(true)));
  return _;
}
function getEncoding(name4, encode2) {
  const v2 = encode2 && (encode2.update && encode2.update[name4] || encode2.enter && encode2.enter[name4]);
  return v2 && v2.signal ? v2 : v2 ? v2.value : null;
}
function getStyle(name4, scope, style2) {
  const s2 = scope.config.style[style2];
  return s2 && s2[name4];
}
function anchorExpr(s2, e3, m3) {
  return `item.anchor === '${Start2}' ? ${s2} : item.anchor === '${End2}' ? ${e3} : ${m3}`;
}
var alignExpr$1 = anchorExpr($(Left2), $(Right2), $(Center2));
function tickBand(_) {
  const v2 = _("tickBand");
  let offset4 = _("tickOffset"), band3, extra;
  if (!v2) {
    band3 = _("bandPosition");
    extra = _("tickExtra");
  } else if (v2.signal) {
    band3 = {
      signal: `(${v2.signal}) === 'extent' ? 1 : 0.5`
    };
    extra = {
      signal: `(${v2.signal}) === 'extent'`
    };
    if (!isObject(offset4)) {
      offset4 = {
        signal: `(${v2.signal}) === 'extent' ? 0 : ${offset4}`
      };
    }
  } else if (v2 === "extent") {
    band3 = 1;
    extra = true;
    offset4 = 0;
  } else {
    band3 = 0.5;
    extra = false;
  }
  return {
    extra,
    band: band3,
    offset: offset4
  };
}
function extendOffset(value3, offset4) {
  return !offset4 ? value3 : !value3 ? offset4 : !isObject(value3) ? {
    value: value3,
    offset: offset4
  } : Object.assign({}, value3, {
    offset: extendOffset(value3.offset, offset4)
  });
}
function guideMark(mark2, extras) {
  if (extras) {
    mark2.name = extras.name;
    mark2.style = extras.style || mark2.style;
    mark2.interactive = !!extras.interactive;
    mark2.encode = extendEncode(mark2.encode, extras, Skip3);
  } else {
    mark2.interactive = false;
  }
  return mark2;
}
function legendGradient(spec, scale7, config, userEncode) {
  const _ = lookup5(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length2 = _.gradientLength();
  let enter, start, stop3, width2, height2;
  if (vertical) {
    start = [0, 1];
    stop3 = [0, 0];
    width2 = thickness;
    height2 = length2;
  } else {
    start = [0, 0];
    stop3 = [1, 0];
    width2 = length2;
    height2 = thickness;
  }
  const encode2 = {
    enter: enter = {
      opacity: zero4,
      x: zero4,
      y: zero4,
      width: encoder(width2),
      height: encoder(height2)
    },
    update: extend({}, enter, {
      opacity: one3,
      fill: {
        gradient: scale7,
        start,
        stop: stop3
      }
    }),
    exit: {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    stroke: _("gradientStrokeColor"),
    strokeWidth: _("gradientStrokeWidth")
  }, {
    opacity: _("gradientOpacity")
  });
  return guideMark({
    type: RectMark,
    role: LegendGradientRole,
    encode: encode2
  }, userEncode);
}
function legendGradientDiscrete(spec, scale7, config, userEncode, dataRef) {
  const _ = lookup5(spec, config), vertical = _.isVertical(), thickness = _.gradientThickness(), length2 = _.gradientLength();
  let u4, v2, uu, vv, adjust = "";
  vertical ? (u4 = "y", uu = "y2", v2 = "x", vv = "width", adjust = "1-") : (u4 = "x", uu = "x2", v2 = "y", vv = "height");
  const enter = {
    opacity: zero4,
    fill: {
      scale: scale7,
      field: Value
    }
  };
  enter[u4] = {
    signal: adjust + "datum." + Perc,
    mult: length2
  };
  enter[v2] = zero4;
  enter[uu] = {
    signal: adjust + "datum." + Perc2,
    mult: length2
  };
  enter[vv] = encoder(thickness);
  const encode2 = {
    enter,
    update: extend({}, enter, {
      opacity: one3
    }),
    exit: {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    stroke: _("gradientStrokeColor"),
    strokeWidth: _("gradientStrokeWidth")
  }, {
    opacity: _("gradientOpacity")
  });
  return guideMark({
    type: RectMark,
    role: LegendBandRole,
    key: Value,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
var alignExpr = `datum.${Perc}<=0?"${Left2}":datum.${Perc}>=1?"${Right2}":"${Center2}"`;
var baselineExpr = `datum.${Perc}<=0?"${Bottom2}":datum.${Perc}>=1?"${Top2}":"${Middle2}"`;
function legendGradientLabels(spec, config, userEncode, dataRef) {
  const _ = lookup5(spec, config), vertical = _.isVertical(), thickness = encoder(_.gradientThickness()), length2 = _.gradientLength();
  let overlap = _("labelOverlap"), enter, update3, u4, v2, adjust = "";
  const encode2 = {
    enter: enter = {
      opacity: zero4
    },
    update: update3 = {
      opacity: one3,
      text: {
        field: Label2
      }
    },
    exit: {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    fill: _("labelColor"),
    fillOpacity: _("labelOpacity"),
    font: _("labelFont"),
    fontSize: _("labelFontSize"),
    fontStyle: _("labelFontStyle"),
    fontWeight: _("labelFontWeight"),
    limit: value2(spec.labelLimit, config.gradientLabelLimit)
  });
  if (vertical) {
    enter.align = {
      value: "left"
    };
    enter.baseline = update3.baseline = {
      signal: baselineExpr
    };
    u4 = "y";
    v2 = "x";
    adjust = "1-";
  } else {
    enter.align = update3.align = {
      signal: alignExpr
    };
    enter.baseline = {
      value: "top"
    };
    u4 = "x";
    v2 = "y";
  }
  enter[u4] = update3[u4] = {
    signal: adjust + "datum." + Perc,
    mult: length2
  };
  enter[v2] = update3[v2] = thickness;
  thickness.offset = value2(spec.labelOffset, config.gradientLabelOffset) || 0;
  overlap = overlap ? {
    separation: _("labelSeparation"),
    method: overlap,
    order: "datum." + Index
  } : void 0;
  return guideMark({
    type: TextMark,
    role: LegendLabelRole,
    style: GuideLabelStyle,
    key: Value,
    from: dataRef,
    encode: encode2,
    overlap
  }, userEncode);
}
function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {
  const _ = lookup5(spec, config), entries3 = userEncode.entries, interactive2 = !!(entries3 && entries3.interactive), name4 = entries3 ? entries3.name : void 0, height2 = _("clipHeight"), symbolOffset = _("symbolOffset"), valueRef = {
    data: "value"
  }, xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`, yEncode = height2 ? encoder(height2) : {
    field: Size
  }, index5 = `datum.${Index}`, ncols = `max(1, ${columns})`;
  let encode2, enter, update3, nrows, sort4;
  yEncode.mult = 0.5;
  encode2 = {
    enter: enter = {
      opacity: zero4,
      x: {
        signal: xSignal,
        mult: 0.5,
        offset: symbolOffset
      },
      y: yEncode
    },
    update: update3 = {
      opacity: one3,
      x: enter.x,
      y: enter.y
    },
    exit: {
      opacity: zero4
    }
  };
  let baseFill = null, baseStroke = null;
  if (!spec.fill) {
    baseFill = config.symbolBaseFillColor;
    baseStroke = config.symbolBaseStrokeColor;
  }
  addEncoders(encode2, {
    fill: _("symbolFillColor", baseFill),
    shape: _("symbolType"),
    size: _("symbolSize"),
    stroke: _("symbolStrokeColor", baseStroke),
    strokeDash: _("symbolDash"),
    strokeDashOffset: _("symbolDashOffset"),
    strokeWidth: _("symbolStrokeWidth")
  }, {
    opacity: _("symbolOpacity")
  });
  LegendScales.forEach((scale7) => {
    if (spec[scale7]) {
      update3[scale7] = enter[scale7] = {
        scale: spec[scale7],
        field: Value
      };
    }
  });
  const symbols4 = guideMark({
    type: SymbolMark,
    role: LegendSymbolRole,
    key: Value,
    from: valueRef,
    clip: height2 ? true : void 0,
    encode: encode2
  }, userEncode.symbols);
  const labelOffset = encoder(symbolOffset);
  labelOffset.offset = _("labelOffset");
  encode2 = {
    enter: enter = {
      opacity: zero4,
      x: {
        signal: xSignal,
        offset: labelOffset
      },
      y: yEncode
    },
    update: update3 = {
      opacity: one3,
      text: {
        field: Label2
      },
      x: enter.x,
      y: enter.y
    },
    exit: {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    align: _("labelAlign"),
    baseline: _("labelBaseline"),
    fill: _("labelColor"),
    fillOpacity: _("labelOpacity"),
    font: _("labelFont"),
    fontSize: _("labelFontSize"),
    fontStyle: _("labelFontStyle"),
    fontWeight: _("labelFontWeight"),
    limit: _("labelLimit")
  });
  const labels3 = guideMark({
    type: TextMark,
    role: LegendLabelRole,
    style: GuideLabelStyle,
    key: Value,
    from: valueRef,
    encode: encode2
  }, userEncode.labels);
  encode2 = {
    enter: {
      noBound: {
        value: !height2
      },
      width: zero4,
      height: height2 ? encoder(height2) : zero4,
      opacity: zero4
    },
    exit: {
      opacity: zero4
    },
    update: update3 = {
      opacity: one3,
      row: {
        signal: null
      },
      column: {
        signal: null
      }
    }
  };
  if (_.isVertical(true)) {
    nrows = `ceil(item.mark.items.length / ${ncols})`;
    update3.row.signal = `${index5}%${nrows}`;
    update3.column.signal = `floor(${index5} / ${nrows})`;
    sort4 = {
      field: ["row", index5]
    };
  } else {
    update3.row.signal = `floor(${index5} / ${ncols})`;
    update3.column.signal = `${index5} % ${ncols}`;
    sort4 = {
      field: index5
    };
  }
  update3.column.signal = `(${columns})?${update3.column.signal}:${index5}`;
  dataRef = {
    facet: {
      data: dataRef,
      name: "value",
      groupby: Index
    }
  };
  return guideGroup({
    role: ScopeRole2,
    from: dataRef,
    encode: extendEncode(encode2, entries3, Skip3),
    marks: [symbols4, labels3],
    name: name4,
    interactive: interactive2,
    sort: sort4
  });
}
function legendSymbolLayout(spec, config) {
  const _ = lookup5(spec, config);
  return {
    align: _("gridAlign"),
    columns: _.entryColumns(),
    center: {
      row: true,
      column: false
    },
    padding: {
      row: _("rowPadding"),
      column: _("columnPadding")
    }
  };
}
var isL = 'item.orient === "left"';
var isR = 'item.orient === "right"';
var isLR = `(${isL} || ${isR})`;
var isVG = `datum.vgrad && ${isLR}`;
var baseline = anchorExpr('"top"', '"bottom"', '"middle"');
var alignFlip = anchorExpr('"right"', '"left"', '"center"');
var exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? "left" : ${alignExpr$1}`;
var exprAnchor = `item._anchor || (${isLR} ? "middle" : "start")`;
var exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`;
var exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? "bottom" : "top") : ${baseline}) : "top"`;
function legendTitle(spec, config, userEncode, dataRef) {
  const _ = lookup5(spec, config);
  const encode2 = {
    enter: {
      opacity: zero4
    },
    update: {
      opacity: one3,
      x: {
        field: {
          group: "padding"
        }
      },
      y: {
        field: {
          group: "padding"
        }
      }
    },
    exit: {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    orient: _("titleOrient"),
    _anchor: _("titleAnchor"),
    anchor: {
      signal: exprAnchor
    },
    angle: {
      signal: exprAngle
    },
    align: {
      signal: exprAlign
    },
    baseline: {
      signal: exprBaseline
    },
    text: spec.title,
    fill: _("titleColor"),
    fillOpacity: _("titleOpacity"),
    font: _("titleFont"),
    fontSize: _("titleFontSize"),
    fontStyle: _("titleFontStyle"),
    fontWeight: _("titleFontWeight"),
    limit: _("titleLimit"),
    lineHeight: _("titleLineHeight")
  }, {
    align: _("titleAlign"),
    baseline: _("titleBaseline")
  });
  return guideMark({
    type: TextMark,
    role: LegendTitleRole,
    style: GuideTitleStyle,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
function clip2(clip3, scope) {
  let expr2;
  if (isObject(clip3)) {
    if (clip3.signal) {
      expr2 = clip3.signal;
    } else if (clip3.path) {
      expr2 = "pathShape(" + param(clip3.path) + ")";
    } else if (clip3.sphere) {
      expr2 = "geoShape(" + param(clip3.sphere) + ', {type: "Sphere"})';
    }
  }
  return expr2 ? scope.signalRef(expr2) : !!clip3;
}
function param(value3) {
  return isObject(value3) && value3.signal ? value3.signal : $(value3);
}
function getRole(spec) {
  const role = spec.role || "";
  return !role.indexOf("axis") || !role.indexOf("legend") || !role.indexOf("title") ? role : spec.type === GroupMark ? ScopeRole2 : role || MarkRole;
}
function definition2(spec) {
  return {
    marktype: spec.type,
    name: spec.name || void 0,
    role: spec.role || getRole(spec),
    zindex: +spec.zindex || void 0,
    aria: spec.aria,
    description: spec.description
  };
}
function interactive(spec, scope) {
  return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
}
function parseTransform(spec, scope) {
  const def2 = definition(spec.type);
  if (!def2)
    error("Unrecognized transform type: " + $(spec.type));
  const t4 = entry(def2.type.toLowerCase(), null, parseParameters2(def2, spec, scope));
  if (spec.signal)
    scope.addSignal(spec.signal, scope.proxy(t4));
  t4.metadata = def2.metadata || {};
  return t4;
}
function parseParameters2(def2, spec, scope) {
  const params2 = {}, n = def2.params.length;
  for (let i = 0; i < n; ++i) {
    const pdef = def2.params[i];
    params2[pdef.name] = parseParameter2(pdef, spec, scope);
  }
  return params2;
}
function parseParameter2(def2, spec, scope) {
  const type3 = def2.type, value3 = spec[def2.name];
  if (type3 === "index") {
    return parseIndexParameter(def2, spec, scope);
  } else if (value3 === void 0) {
    if (def2.required) {
      error("Missing required " + $(spec.type) + " parameter: " + $(def2.name));
    }
    return;
  } else if (type3 === "param") {
    return parseSubParameters(def2, spec, scope);
  } else if (type3 === "projection") {
    return scope.projectionRef(spec[def2.name]);
  }
  return def2.array && !isSignal(value3) ? value3.map((v2) => parameterValue(def2, v2, scope)) : parameterValue(def2, value3, scope);
}
function parameterValue(def2, value3, scope) {
  const type3 = def2.type;
  if (isSignal(value3)) {
    return isExpr(type3) ? error("Expression references can not be signals.") : isField(type3) ? scope.fieldRef(value3) : isCompare(type3) ? scope.compareRef(value3) : scope.signalRef(value3.signal);
  } else {
    const expr2 = def2.expr || isField(type3);
    return expr2 && outerExpr(value3) ? scope.exprRef(value3.expr, value3.as) : expr2 && outerField(value3) ? fieldRef$1(value3.field, value3.as) : isExpr(type3) ? parser2(value3, scope) : isData(type3) ? ref(scope.getData(value3).values) : isField(type3) ? fieldRef$1(value3) : isCompare(type3) ? scope.compareRef(value3) : value3;
  }
}
function parseIndexParameter(def2, spec, scope) {
  if (!isString(spec.from)) {
    error('Lookup "from" parameter must be a string literal.');
  }
  return scope.getData(spec.from).lookupRef(scope, spec.key);
}
function parseSubParameters(def2, spec, scope) {
  const value3 = spec[def2.name];
  if (def2.array) {
    if (!isArray(value3)) {
      error("Expected an array of sub-parameters. Instead: " + $(value3));
    }
    return value3.map((v2) => parseSubParameter(def2, v2, scope));
  } else {
    return parseSubParameter(def2, value3, scope);
  }
}
function parseSubParameter(def2, value3, scope) {
  const n = def2.params.length;
  let pdef;
  for (let i = 0; i < n; ++i) {
    pdef = def2.params[i];
    for (const k3 in pdef.key) {
      if (pdef.key[k3] !== value3[k3]) {
        pdef = null;
        break;
      }
    }
    if (pdef)
      break;
  }
  if (!pdef)
    error("Unsupported parameter: " + $(value3));
  const params2 = extend(parseParameters2(pdef, value3, scope), pdef.key);
  return ref(scope.add(Params3(params2)));
}
var outerExpr = (_) => _ && _.expr;
var outerField = (_) => _ && _.field;
var isData = (_) => _ === "data";
var isExpr = (_) => _ === "expr";
var isField = (_) => _ === "field";
var isCompare = (_) => _ === "compare";
function parseData$1(from, group4, scope) {
  let facet, key2, op, dataRef, parent;
  if (!from) {
    dataRef = ref(scope.add(Collect2(null, [{}])));
  } else if (facet = from.facet) {
    if (!group4)
      error("Only group marks can be faceted.");
    if (facet.field != null) {
      dataRef = parent = getDataRef(facet, scope);
    } else {
      if (!from.data) {
        op = parseTransform(extend({
          type: "aggregate",
          groupby: array(facet.groupby)
        }, facet.aggregate), scope);
        op.params.key = scope.keyRef(facet.groupby);
        op.params.pulse = getDataRef(facet, scope);
        dataRef = parent = ref(scope.add(op));
      } else {
        parent = ref(scope.getData(from.data).aggregate);
      }
      key2 = scope.keyRef(facet.groupby, true);
    }
  }
  if (!dataRef) {
    dataRef = getDataRef(from, scope);
  }
  return {
    key: key2,
    pulse: dataRef,
    parent
  };
}
function getDataRef(from, scope) {
  return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);
}
function DataScope(scope, input, output3, values5, aggr) {
  this.scope = scope;
  this.input = input;
  this.output = output3;
  this.values = values5;
  this.aggregate = aggr;
  this.index = {};
}
DataScope.fromEntries = function(scope, entries3) {
  const n = entries3.length, values5 = entries3[n - 1], output3 = entries3[n - 2];
  let input = entries3[0], aggr = null, i = 1;
  if (input && input.type === "load") {
    input = entries3[1];
  }
  scope.add(entries3[0]);
  for (; i < n; ++i) {
    entries3[i].params.pulse = ref(entries3[i - 1]);
    scope.add(entries3[i]);
    if (entries3[i].type === "aggregate")
      aggr = entries3[i];
  }
  return new DataScope(scope, input, output3, values5, aggr);
};
function fieldKey(field3) {
  return isString(field3) ? field3 : null;
}
function addSortField(scope, p, sort4) {
  const as = aggrField(sort4.op, sort4.field);
  let s2;
  if (p.ops) {
    for (let i = 0, n = p.as.length; i < n; ++i) {
      if (p.as[i] === as)
        return;
    }
  } else {
    p.ops = ["count"];
    p.fields = [null];
    p.as = ["count"];
  }
  if (sort4.op) {
    p.ops.push((s2 = sort4.op.signal) ? scope.signalRef(s2) : sort4.op);
    p.fields.push(scope.fieldRef(sort4.field));
    p.as.push(as);
  }
}
function cache(scope, ds, name4, optype, field3, counts, index5) {
  const cache2 = ds[name4] || (ds[name4] = {}), sort4 = sortKey(counts);
  let k3 = fieldKey(field3), v2, op;
  if (k3 != null) {
    scope = ds.scope;
    k3 = k3 + (sort4 ? "|" + sort4 : "");
    v2 = cache2[k3];
  }
  if (!v2) {
    const params2 = counts ? {
      field: keyFieldRef,
      pulse: ds.countsRef(scope, field3, counts)
    } : {
      field: scope.fieldRef(field3),
      pulse: ref(ds.output)
    };
    if (sort4)
      params2.sort = scope.sortRef(counts);
    op = scope.add(entry(optype, void 0, params2));
    if (index5)
      ds.index[field3] = op;
    v2 = ref(op);
    if (k3 != null)
      cache2[k3] = v2;
  }
  return v2;
}
DataScope.prototype = {
  countsRef(scope, field3, sort4) {
    const ds = this, cache2 = ds.counts || (ds.counts = {}), k3 = fieldKey(field3);
    let v2, a4, p;
    if (k3 != null) {
      scope = ds.scope;
      v2 = cache2[k3];
    }
    if (!v2) {
      p = {
        groupby: scope.fieldRef(field3, "key"),
        pulse: ref(ds.output)
      };
      if (sort4 && sort4.field)
        addSortField(scope, p, sort4);
      a4 = scope.add(Aggregate2(p));
      v2 = scope.add(Collect2({
        pulse: ref(a4)
      }));
      v2 = {
        agg: a4,
        ref: ref(v2)
      };
      if (k3 != null)
        cache2[k3] = v2;
    } else if (sort4 && sort4.field) {
      addSortField(scope, v2.agg.params, sort4);
    }
    return v2.ref;
  },
  tuplesRef() {
    return ref(this.values);
  },
  extentRef(scope, field3) {
    return cache(scope, this, "extent", "extent", field3, false);
  },
  domainRef(scope, field3) {
    return cache(scope, this, "domain", "values", field3, false);
  },
  valuesRef(scope, field3, sort4) {
    return cache(scope, this, "vals", "values", field3, sort4 || true);
  },
  lookupRef(scope, field3) {
    return cache(scope, this, "lookup", "tupleindex", field3, false);
  },
  indataRef(scope, field3) {
    return cache(scope, this, "indata", "tupleindex", field3, true, true);
  }
};
function parseFacet(spec, scope, group4) {
  const facet = spec.from.facet, name4 = facet.name, data3 = getDataRef(facet, scope);
  let op;
  if (!facet.name) {
    error("Facet must have a name: " + $(facet));
  }
  if (!facet.data) {
    error("Facet must reference a data set: " + $(facet));
  }
  if (facet.field) {
    op = scope.add(PreFacet2({
      field: scope.fieldRef(facet.field),
      pulse: data3
    }));
  } else if (facet.groupby) {
    op = scope.add(Facet2({
      key: scope.keyRef(facet.groupby),
      group: ref(scope.proxy(group4.parent)),
      pulse: data3
    }));
  } else {
    error("Facet must specify groupby or field: " + $(facet));
  }
  const subscope = scope.fork(), source3 = subscope.add(Collect2()), values5 = subscope.add(Sieve2({
    pulse: ref(source3)
  }));
  subscope.addData(name4, new DataScope(subscope, source3, source3, values5));
  subscope.addSignal("parent", null);
  op.params.subflow = {
    $subflow: subscope.parse(spec).toRuntime()
  };
}
function parseSubflow(spec, scope, input) {
  const op = scope.add(PreFacet2({
    pulse: input.pulse
  })), subscope = scope.fork();
  subscope.add(Sieve2());
  subscope.addSignal("parent", null);
  op.params.subflow = {
    $subflow: subscope.parse(spec).toRuntime()
  };
}
function parseTrigger(spec, scope, name4) {
  const remove2 = spec.remove, insert3 = spec.insert, toggle2 = spec.toggle, modify2 = spec.modify, values5 = spec.values, op = scope.add(operator());
  const update3 = "if(" + spec.trigger + ',modify("' + name4 + '",' + [insert3, remove2, toggle2, modify2, values5].map((_) => _ == null ? "null" : _).join(",") + "),0)";
  const expr2 = parser2(update3, scope);
  op.update = expr2.$expr;
  op.params = expr2.$params;
}
function parseMark(spec, scope) {
  const role = getRole(spec), group4 = spec.type === GroupMark, facet = spec.from && spec.from.facet, overlap = spec.overlap;
  let layout = spec.layout || role === ScopeRole2 || role === FrameRole2, ops2, op, store, enc, name4, layoutRef, boundRef;
  const nested = role === MarkRole || layout || facet;
  const input = parseData$1(spec.from, group4, scope);
  op = scope.add(DataJoin2({
    key: input.key || (spec.key ? fieldRef$1(spec.key) : void 0),
    pulse: input.pulse,
    clean: !group4
  }));
  const joinRef = ref(op);
  op = store = scope.add(Collect2({
    pulse: joinRef
  }));
  op = scope.add(Mark2({
    markdef: definition2(spec),
    interactive: interactive(spec.interactive, scope),
    clip: clip2(spec.clip, scope),
    context: {
      $context: true
    },
    groups: scope.lookup(),
    parent: scope.signals.parent ? scope.signalRef("parent") : null,
    index: scope.markpath(),
    pulse: ref(op)
  }));
  const markRef = ref(op);
  op = enc = scope.add(Encode2(parseEncode(spec.encode, spec.type, role, spec.style, scope, {
    mod: false,
    pulse: markRef
  })));
  op.params.parent = scope.encode();
  if (spec.transform) {
    spec.transform.forEach((_) => {
      const tx = parseTransform(_, scope), md2 = tx.metadata;
      if (md2.generates || md2.changes) {
        error("Mark transforms should not generate new data.");
      }
      if (!md2.nomod)
        enc.params.mod = true;
      tx.params.pulse = ref(op);
      scope.add(op = tx);
    });
  }
  if (spec.sort) {
    op = scope.add(SortItems2({
      sort: scope.compareRef(spec.sort),
      pulse: ref(op)
    }));
  }
  const encodeRef = ref(op);
  if (facet || layout) {
    layout = scope.add(ViewLayout2({
      layout: scope.objectProperty(spec.layout),
      legends: scope.legends,
      mark: markRef,
      pulse: encodeRef
    }));
    layoutRef = ref(layout);
  }
  const bound2 = scope.add(Bound2({
    mark: markRef,
    pulse: layoutRef || encodeRef
  }));
  boundRef = ref(bound2);
  if (group4) {
    if (nested) {
      ops2 = scope.operators;
      ops2.pop();
      if (layout)
        ops2.pop();
    }
    scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
    facet ? parseFacet(spec, scope, input) : nested ? parseSubflow(spec, scope, input) : scope.parse(spec);
    scope.popState();
    if (nested) {
      if (layout)
        ops2.push(layout);
      ops2.push(bound2);
    }
  }
  if (overlap) {
    boundRef = parseOverlap(overlap, boundRef, scope);
  }
  const render = scope.add(Render2({
    pulse: boundRef
  })), sieve = scope.add(Sieve2({
    pulse: ref(render)
  }, void 0, scope.parent()));
  if (spec.name != null) {
    name4 = spec.name;
    scope.addData(name4, new DataScope(scope, store, render, sieve));
    if (spec.on)
      spec.on.forEach((on2) => {
        if (on2.insert || on2.remove || on2.toggle) {
          error("Marks only support modify triggers.");
        }
        parseTrigger(on2, scope, name4);
      });
  }
}
function parseOverlap(overlap, source3, scope) {
  const method2 = overlap.method, bound2 = overlap.bound, sep = overlap.separation;
  const params2 = {
    separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,
    method: isSignal(method2) ? scope.signalRef(method2.signal) : method2,
    pulse: source3
  };
  if (overlap.order) {
    params2.sort = scope.compareRef({
      field: overlap.order
    });
  }
  if (bound2) {
    const tol = bound2.tolerance;
    params2.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;
    params2.boundScale = scope.scaleRef(bound2.scale);
    params2.boundOrient = bound2.orient;
  }
  return ref(scope.add(Overlap2(params2)));
}
function parseLegend(spec, scope) {
  const config = scope.config.legend, encode2 = spec.encode || {}, _ = lookup5(spec, config), legendEncode = encode2.legend || {}, name4 = legendEncode.name || void 0, interactive2 = legendEncode.interactive, style2 = legendEncode.style, scales2 = {};
  let scale7 = 0, entryLayout, params2, children3;
  LegendScales.forEach((s2) => spec[s2] ? (scales2[s2] = spec[s2], scale7 = scale7 || spec[s2]) : 0);
  if (!scale7)
    error("Missing valid scale for legend.");
  const type3 = legendType(spec, scope.scaleType(scale7));
  const datum2 = {
    title: spec.title != null,
    scales: scales2,
    type: type3,
    vgrad: type3 !== "symbol" && _.isVertical()
  };
  const dataRef = ref(scope.add(Collect2(null, [datum2])));
  const entryEncode = {
    enter: {
      x: {
        value: 0
      },
      y: {
        value: 0
      }
    }
  };
  const entryRef = ref(scope.add(LegendEntries2(params2 = {
    type: type3,
    scale: scope.scaleRef(scale7),
    count: scope.objectProperty(_("tickCount")),
    limit: scope.property(_("symbolLimit")),
    values: scope.objectProperty(spec.values),
    minstep: scope.property(spec.tickMinStep),
    formatType: scope.property(spec.formatType),
    formatSpecifier: scope.property(spec.format)
  })));
  if (type3 === Gradient2) {
    children3 = [legendGradient(spec, scale7, config, encode2.gradient), legendGradientLabels(spec, config, encode2.labels, entryRef)];
    params2.count = params2.count || scope.signalRef(`max(2,2*floor((${deref(_.gradientLength())})/100))`);
  } else if (type3 === Discrete2) {
    children3 = [legendGradientDiscrete(spec, scale7, config, encode2.gradient, entryRef), legendGradientLabels(spec, config, encode2.labels, entryRef)];
  } else {
    entryLayout = legendSymbolLayout(spec, config);
    children3 = [legendSymbolGroups(spec, config, encode2, entryRef, deref(entryLayout.columns))];
    params2.size = sizeExpression(spec, scope, children3[0].marks);
  }
  children3 = [guideGroup({
    role: LegendEntryRole,
    from: dataRef,
    encode: entryEncode,
    marks: children3,
    layout: entryLayout,
    interactive: interactive2
  })];
  if (datum2.title) {
    children3.push(legendTitle(spec, config, encode2.title, dataRef));
  }
  return parseMark(guideGroup({
    role: LegendRole2,
    from: dataRef,
    encode: extendEncode(buildLegendEncode(_, spec, config), legendEncode, Skip3),
    marks: children3,
    aria: _("aria"),
    description: _("description"),
    zindex: _("zindex"),
    name: name4,
    interactive: interactive2,
    style: style2
  }), scope);
}
function legendType(spec, scaleType2) {
  let type3 = spec.type || Symbols2;
  if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {
    type3 = isContinuous(scaleType2) ? Gradient2 : isDiscretizing(scaleType2) ? Discrete2 : Symbols2;
  }
  return type3 !== Gradient2 ? type3 : isDiscretizing(scaleType2) ? Discrete2 : Gradient2;
}
function scaleCount(spec) {
  return LegendScales.reduce((count4, type3) => count4 + (spec[type3] ? 1 : 0), 0);
}
function buildLegendEncode(_, spec, config) {
  const encode2 = {
    enter: {},
    update: {}
  };
  addEncoders(encode2, {
    orient: _("orient"),
    offset: _("offset"),
    padding: _("padding"),
    titlePadding: _("titlePadding"),
    cornerRadius: _("cornerRadius"),
    fill: _("fillColor"),
    stroke: _("strokeColor"),
    strokeWidth: config.strokeWidth,
    strokeDash: config.strokeDash,
    x: _("legendX"),
    y: _("legendY"),
    format: spec.format,
    formatType: spec.formatType
  });
  return encode2;
}
function sizeExpression(spec, scope, marks) {
  const size = deref(getChannel("size", spec, marks)), strokeWidth = deref(getChannel("strokeWidth", spec, marks)), fontSize2 = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));
  return parser2(`max(ceil(sqrt(${size})+${strokeWidth}),${fontSize2})`, scope);
}
function getChannel(name4, spec, marks) {
  return spec[name4] ? `scale("${spec[name4]}",datum)` : getEncoding(name4, marks[0].encode);
}
function getFontSize(encode2, scope, style2) {
  return getEncoding("fontSize", encode2) || getStyle("fontSize", scope, style2);
}
var angleExpr = `item.orient==="${Left2}"?-90:item.orient==="${Right2}"?90:0`;
function parseTitle(spec, scope) {
  spec = isString(spec) ? {
    text: spec
  } : spec;
  const _ = lookup5(spec, scope.config.title), encode2 = spec.encode || {}, userEncode = encode2.group || {}, name4 = userEncode.name || void 0, interactive2 = userEncode.interactive, style2 = userEncode.style, children3 = [];
  const datum2 = {}, dataRef = ref(scope.add(Collect2(null, [datum2])));
  children3.push(buildTitle(spec, _, titleEncode(spec), dataRef));
  if (spec.subtitle) {
    children3.push(buildSubTitle(spec, _, encode2.subtitle, dataRef));
  }
  return parseMark(guideGroup({
    role: TitleRole2,
    from: dataRef,
    encode: groupEncode(_, userEncode),
    marks: children3,
    aria: _("aria"),
    description: _("description"),
    zindex: _("zindex"),
    name: name4,
    interactive: interactive2,
    style: style2
  }), scope);
}
function titleEncode(spec) {
  const encode2 = spec.encode;
  return encode2 && encode2.title || extend({
    name: spec.name,
    interactive: spec.interactive,
    style: spec.style
  }, encode2);
}
function groupEncode(_, userEncode) {
  const encode2 = {
    enter: {},
    update: {}
  };
  addEncoders(encode2, {
    orient: _("orient"),
    anchor: _("anchor"),
    align: {
      signal: alignExpr$1
    },
    angle: {
      signal: angleExpr
    },
    limit: _("limit"),
    frame: _("frame"),
    offset: _("offset") || 0,
    padding: _("subtitlePadding")
  });
  return extendEncode(encode2, userEncode, Skip3);
}
function buildTitle(spec, _, userEncode, dataRef) {
  const zero6 = {
    value: 0
  }, text4 = spec.text, encode2 = {
    enter: {
      opacity: zero6
    },
    update: {
      opacity: {
        value: 1
      }
    },
    exit: {
      opacity: zero6
    }
  };
  addEncoders(encode2, {
    text: text4,
    align: {
      signal: "item.mark.group.align"
    },
    angle: {
      signal: "item.mark.group.angle"
    },
    limit: {
      signal: "item.mark.group.limit"
    },
    baseline: "top",
    dx: _("dx"),
    dy: _("dy"),
    fill: _("color"),
    font: _("font"),
    fontSize: _("fontSize"),
    fontStyle: _("fontStyle"),
    fontWeight: _("fontWeight"),
    lineHeight: _("lineHeight")
  }, {
    align: _("align"),
    angle: _("angle"),
    baseline: _("baseline")
  });
  return guideMark({
    type: TextMark,
    role: TitleTextRole,
    style: GroupTitleStyle,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
function buildSubTitle(spec, _, userEncode, dataRef) {
  const zero6 = {
    value: 0
  }, text4 = spec.subtitle, encode2 = {
    enter: {
      opacity: zero6
    },
    update: {
      opacity: {
        value: 1
      }
    },
    exit: {
      opacity: zero6
    }
  };
  addEncoders(encode2, {
    text: text4,
    align: {
      signal: "item.mark.group.align"
    },
    angle: {
      signal: "item.mark.group.angle"
    },
    limit: {
      signal: "item.mark.group.limit"
    },
    baseline: "top",
    dx: _("dx"),
    dy: _("dy"),
    fill: _("subtitleColor"),
    font: _("subtitleFont"),
    fontSize: _("subtitleFontSize"),
    fontStyle: _("subtitleFontStyle"),
    fontWeight: _("subtitleFontWeight"),
    lineHeight: _("subtitleLineHeight")
  }, {
    align: _("align"),
    angle: _("angle"),
    baseline: _("baseline")
  });
  return guideMark({
    type: TextMark,
    role: TitleSubtitleRole,
    style: GroupSubtitleStyle,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
function parseData(data3, scope) {
  const transforms2 = [];
  if (data3.transform) {
    data3.transform.forEach((tx) => {
      transforms2.push(parseTransform(tx, scope));
    });
  }
  if (data3.on) {
    data3.on.forEach((on2) => {
      parseTrigger(on2, scope, data3.name);
    });
  }
  scope.addDataPipeline(data3.name, analyze(data3, scope, transforms2));
}
function analyze(data3, scope, ops2) {
  const output3 = [];
  let source3 = null, modify2 = false, generate3 = false, upstream, i, n, t4, m3;
  if (data3.values) {
    if (isSignal(data3.values) || hasSignal(data3.format)) {
      output3.push(load2(scope, data3));
      output3.push(source3 = collect());
    } else {
      output3.push(source3 = collect({
        $ingest: data3.values,
        $format: data3.format
      }));
    }
  } else if (data3.url) {
    if (hasSignal(data3.url) || hasSignal(data3.format)) {
      output3.push(load2(scope, data3));
      output3.push(source3 = collect());
    } else {
      output3.push(source3 = collect({
        $request: data3.url,
        $format: data3.format
      }));
    }
  } else if (data3.source) {
    source3 = upstream = array(data3.source).map((d) => ref(scope.getData(d).output));
    output3.push(null);
  }
  for (i = 0, n = ops2.length; i < n; ++i) {
    t4 = ops2[i];
    m3 = t4.metadata;
    if (!source3 && !m3.source) {
      output3.push(source3 = collect());
    }
    output3.push(t4);
    if (m3.generates)
      generate3 = true;
    if (m3.modifies && !generate3)
      modify2 = true;
    if (m3.source)
      source3 = t4;
    else if (m3.changes)
      source3 = null;
  }
  if (upstream) {
    n = upstream.length - 1;
    output3[0] = Relay2({
      derive: modify2,
      pulse: n ? upstream : upstream[0]
    });
    if (modify2 || n) {
      output3.splice(1, 0, collect());
    }
  }
  if (!source3)
    output3.push(collect());
  output3.push(Sieve2({}));
  return output3;
}
function collect(values5) {
  const s2 = Collect2({}, values5);
  s2.metadata = {
    source: true
  };
  return s2;
}
function load2(scope, data3) {
  return Load2({
    url: data3.url ? scope.property(data3.url) : void 0,
    async: data3.async ? scope.property(data3.async) : void 0,
    values: data3.values ? scope.property(data3.values) : void 0,
    format: scope.objectProperty(data3.format)
  });
}
var isX = (orient2) => orient2 === Bottom2 || orient2 === Top2;
var getSign = (orient2, a4, b2) => isSignal(orient2) ? ifLeftTopExpr(orient2.signal, a4, b2) : orient2 === Left2 || orient2 === Top2 ? a4 : b2;
var ifX = (orient2, a4, b2) => isSignal(orient2) ? ifXEnc(orient2.signal, a4, b2) : isX(orient2) ? a4 : b2;
var ifY = (orient2, a4, b2) => isSignal(orient2) ? ifYEnc(orient2.signal, a4, b2) : isX(orient2) ? b2 : a4;
var ifTop = (orient2, a4, b2) => isSignal(orient2) ? ifTopExpr(orient2.signal, a4, b2) : orient2 === Top2 ? {
  value: a4
} : {
  value: b2
};
var ifRight = (orient2, a4, b2) => isSignal(orient2) ? ifRightExpr(orient2.signal, a4, b2) : orient2 === Right2 ? {
  value: a4
} : {
  value: b2
};
var ifXEnc = ($orient, a4, b2) => ifEnc(`${$orient} === '${Top2}' || ${$orient} === '${Bottom2}'`, a4, b2);
var ifYEnc = ($orient, a4, b2) => ifEnc(`${$orient} !== '${Top2}' && ${$orient} !== '${Bottom2}'`, a4, b2);
var ifLeftTopExpr = ($orient, a4, b2) => ifExpr(`${$orient} === '${Left2}' || ${$orient} === '${Top2}'`, a4, b2);
var ifTopExpr = ($orient, a4, b2) => ifExpr(`${$orient} === '${Top2}'`, a4, b2);
var ifRightExpr = ($orient, a4, b2) => ifExpr(`${$orient} === '${Right2}'`, a4, b2);
var ifEnc = (test2, a4, b2) => {
  a4 = a4 != null ? encoder(a4) : a4;
  b2 = b2 != null ? encoder(b2) : b2;
  if (isSimple(a4) && isSimple(b2)) {
    a4 = a4 ? a4.signal || $(a4.value) : null;
    b2 = b2 ? b2.signal || $(b2.value) : null;
    return {
      signal: `${test2} ? (${a4}) : (${b2})`
    };
  } else {
    return [extend({
      test: test2
    }, a4)].concat(b2 || []);
  }
};
var isSimple = (enc) => enc == null || Object.keys(enc).length === 1;
var ifExpr = (test2, a4, b2) => ({
  signal: `${test2} ? (${toExpr(a4)}) : (${toExpr(b2)})`
});
var ifOrient = ($orient, t4, b2, l, r) => ({
  signal: (l != null ? `${$orient} === '${Left2}' ? (${toExpr(l)}) : ` : "") + (b2 != null ? `${$orient} === '${Bottom2}' ? (${toExpr(b2)}) : ` : "") + (r != null ? `${$orient} === '${Right2}' ? (${toExpr(r)}) : ` : "") + (t4 != null ? `${$orient} === '${Top2}' ? (${toExpr(t4)}) : ` : "") + "(null)"
});
var toExpr = (v2) => isSignal(v2) ? v2.signal : v2 == null ? null : $(v2);
var mult = (sign4, value3) => value3 === 0 ? 0 : isSignal(sign4) ? {
  signal: `(${sign4.signal}) * ${value3}`
} : {
  value: sign4 * value3
};
var patch = (value3, base2) => {
  const s2 = value3.signal;
  return s2 && s2.endsWith("(null)") ? {
    signal: s2.slice(0, -6) + base2.signal
  } : value3;
};
function fallback(prop, config, axisConfig2, style2) {
  let styleProp;
  if (config && has(config, prop)) {
    return config[prop];
  } else if (has(axisConfig2, prop)) {
    return axisConfig2[prop];
  } else if (prop.startsWith("title")) {
    switch (prop) {
      case "titleColor":
        styleProp = "fill";
        break;
      case "titleFont":
      case "titleFontSize":
      case "titleFontWeight":
        styleProp = prop[5].toLowerCase() + prop.slice(6);
    }
    return style2[GuideTitleStyle][styleProp];
  } else if (prop.startsWith("label")) {
    switch (prop) {
      case "labelColor":
        styleProp = "fill";
        break;
      case "labelFont":
      case "labelFontSize":
        styleProp = prop[5].toLowerCase() + prop.slice(6);
    }
    return style2[GuideLabelStyle][styleProp];
  }
  return null;
}
function keys2(objects) {
  const map7 = {};
  for (const obj of objects) {
    if (!obj)
      continue;
    for (const key2 in obj)
      map7[key2] = 1;
  }
  return Object.keys(map7);
}
function axisConfig(spec, scope) {
  var config = scope.config, style2 = config.style, axis = config.axis, band3 = scope.scaleType(spec.scale) === "band" && config.axisBand, orient2 = spec.orient, xy, or2, key2;
  if (isSignal(orient2)) {
    const xyKeys = keys2([config.axisX, config.axisY]), orientKeys = keys2([config.axisTop, config.axisBottom, config.axisLeft, config.axisRight]);
    xy = {};
    for (key2 of xyKeys) {
      xy[key2] = ifX(orient2, fallback(key2, config.axisX, axis, style2), fallback(key2, config.axisY, axis, style2));
    }
    or2 = {};
    for (key2 of orientKeys) {
      or2[key2] = ifOrient(orient2.signal, fallback(key2, config.axisTop, axis, style2), fallback(key2, config.axisBottom, axis, style2), fallback(key2, config.axisLeft, axis, style2), fallback(key2, config.axisRight, axis, style2));
    }
  } else {
    xy = orient2 === Top2 || orient2 === Bottom2 ? config.axisX : config.axisY;
    or2 = config["axis" + orient2[0].toUpperCase() + orient2.slice(1)];
  }
  const result = xy || or2 || band3 ? extend({}, axis, xy, or2, band3) : axis;
  return result;
}
function axisDomain(spec, config, userEncode, dataRef) {
  const _ = lookup5(spec, config), orient2 = spec.orient;
  let enter, update3;
  const encode2 = {
    enter: enter = {
      opacity: zero4
    },
    update: update3 = {
      opacity: one3
    },
    exit: {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    stroke: _("domainColor"),
    strokeCap: _("domainCap"),
    strokeDash: _("domainDash"),
    strokeDashOffset: _("domainDashOffset"),
    strokeWidth: _("domainWidth"),
    strokeOpacity: _("domainOpacity")
  });
  const pos0 = position(spec, 0);
  const pos1 = position(spec, 1);
  enter.x = update3.x = ifX(orient2, pos0, zero4);
  enter.x2 = update3.x2 = ifX(orient2, pos1);
  enter.y = update3.y = ifY(orient2, pos0, zero4);
  enter.y2 = update3.y2 = ifY(orient2, pos1);
  return guideMark({
    type: RuleMark,
    role: AxisDomainRole,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
function position(spec, pos) {
  return {
    scale: spec.scale,
    range: pos
  };
}
function axisGrid(spec, config, userEncode, dataRef, band3) {
  const _ = lookup5(spec, config), orient2 = spec.orient, vscale = spec.gridScale, sign4 = getSign(orient2, 1, -1), offset4 = offsetValue2(spec.offset, sign4);
  let enter, exit, update3;
  const encode2 = {
    enter: enter = {
      opacity: zero4
    },
    update: update3 = {
      opacity: one3
    },
    exit: exit = {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    stroke: _("gridColor"),
    strokeCap: _("gridCap"),
    strokeDash: _("gridDash"),
    strokeDashOffset: _("gridDashOffset"),
    strokeOpacity: _("gridOpacity"),
    strokeWidth: _("gridWidth")
  });
  const tickPos = {
    scale: spec.scale,
    field: Value,
    band: band3.band,
    extra: band3.extra,
    offset: band3.offset,
    round: _("tickRound")
  };
  const sz2 = ifX(orient2, {
    signal: "height"
  }, {
    signal: "width"
  });
  const gridStart = vscale ? {
    scale: vscale,
    range: 0,
    mult: sign4,
    offset: offset4
  } : {
    value: 0,
    offset: offset4
  };
  const gridEnd = vscale ? {
    scale: vscale,
    range: 1,
    mult: sign4,
    offset: offset4
  } : extend(sz2, {
    mult: sign4,
    offset: offset4
  });
  enter.x = update3.x = ifX(orient2, tickPos, gridStart);
  enter.y = update3.y = ifY(orient2, tickPos, gridStart);
  enter.x2 = update3.x2 = ifY(orient2, gridEnd);
  enter.y2 = update3.y2 = ifX(orient2, gridEnd);
  exit.x = ifX(orient2, tickPos);
  exit.y = ifY(orient2, tickPos);
  return guideMark({
    type: RuleMark,
    role: AxisGridRole,
    key: Value,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
function offsetValue2(offset4, sign4) {
  if (sign4 === 1)
    ;
  else if (!isObject(offset4)) {
    offset4 = isSignal(sign4) ? {
      signal: `(${sign4.signal}) * (${offset4 || 0})`
    } : sign4 * (offset4 || 0);
  } else {
    let entry2 = offset4 = extend({}, offset4);
    while (entry2.mult != null) {
      if (!isObject(entry2.mult)) {
        entry2.mult = isSignal(sign4) ? {
          signal: `(${entry2.mult}) * (${sign4.signal})`
        } : entry2.mult * sign4;
        return offset4;
      } else {
        entry2 = entry2.mult = extend({}, entry2.mult);
      }
    }
    entry2.mult = sign4;
  }
  return offset4;
}
function axisTicks(spec, config, userEncode, dataRef, size, band3) {
  const _ = lookup5(spec, config), orient2 = spec.orient, sign4 = getSign(orient2, -1, 1);
  let enter, exit, update3;
  const encode2 = {
    enter: enter = {
      opacity: zero4
    },
    update: update3 = {
      opacity: one3
    },
    exit: exit = {
      opacity: zero4
    }
  };
  addEncoders(encode2, {
    stroke: _("tickColor"),
    strokeCap: _("tickCap"),
    strokeDash: _("tickDash"),
    strokeDashOffset: _("tickDashOffset"),
    strokeOpacity: _("tickOpacity"),
    strokeWidth: _("tickWidth")
  });
  const tickSize = encoder(size);
  tickSize.mult = sign4;
  const tickPos = {
    scale: spec.scale,
    field: Value,
    band: band3.band,
    extra: band3.extra,
    offset: band3.offset,
    round: _("tickRound")
  };
  update3.y = enter.y = ifX(orient2, zero4, tickPos);
  update3.y2 = enter.y2 = ifX(orient2, tickSize);
  exit.x = ifX(orient2, tickPos);
  update3.x = enter.x = ifY(orient2, zero4, tickPos);
  update3.x2 = enter.x2 = ifY(orient2, tickSize);
  exit.y = ifY(orient2, tickPos);
  return guideMark({
    type: RuleMark,
    role: AxisTickRole,
    key: Value,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
function flushExpr(scale7, threshold2, a4, b2, c3) {
  return {
    signal: 'flush(range("' + scale7 + '"), scale("' + scale7 + '", datum.value), ' + threshold2 + "," + a4 + "," + b2 + "," + c3 + ")"
  };
}
function axisLabels(spec, config, userEncode, dataRef, size, band3) {
  const _ = lookup5(spec, config), orient2 = spec.orient, scale7 = spec.scale, sign4 = getSign(orient2, -1, 1), flush2 = deref(_("labelFlush")), flushOffset = deref(_("labelFlushOffset")), labelAlign = _("labelAlign"), labelBaseline = _("labelBaseline");
  let flushOn = flush2 === 0 || !!flush2, update3;
  const tickSize = encoder(size);
  tickSize.mult = sign4;
  tickSize.offset = encoder(_("labelPadding") || 0);
  tickSize.offset.mult = sign4;
  const tickPos = {
    scale: scale7,
    field: Value,
    band: 0.5,
    offset: extendOffset(band3.offset, _("labelOffset"))
  };
  const align2 = ifX(orient2, flushOn ? flushExpr(scale7, flush2, '"left"', '"right"', '"center"') : {
    value: "center"
  }, ifRight(orient2, "left", "right"));
  const baseline3 = ifX(orient2, ifTop(orient2, "bottom", "top"), flushOn ? flushExpr(scale7, flush2, '"top"', '"bottom"', '"middle"') : {
    value: "middle"
  });
  const offsetExpr = flushExpr(scale7, flush2, `-(${flushOffset})`, flushOffset, 0);
  flushOn = flushOn && flushOffset;
  const enter = {
    opacity: zero4,
    x: ifX(orient2, tickPos, tickSize),
    y: ifY(orient2, tickPos, tickSize)
  };
  const encode2 = {
    enter,
    update: update3 = {
      opacity: one3,
      text: {
        field: Label2
      },
      x: enter.x,
      y: enter.y,
      align: align2,
      baseline: baseline3
    },
    exit: {
      opacity: zero4,
      x: enter.x,
      y: enter.y
    }
  };
  addEncoders(encode2, {
    dx: !labelAlign && flushOn ? ifX(orient2, offsetExpr) : null,
    dy: !labelBaseline && flushOn ? ifY(orient2, offsetExpr) : null
  });
  addEncoders(encode2, {
    angle: _("labelAngle"),
    fill: _("labelColor"),
    fillOpacity: _("labelOpacity"),
    font: _("labelFont"),
    fontSize: _("labelFontSize"),
    fontWeight: _("labelFontWeight"),
    fontStyle: _("labelFontStyle"),
    limit: _("labelLimit"),
    lineHeight: _("labelLineHeight")
  }, {
    align: labelAlign,
    baseline: labelBaseline
  });
  const bound2 = _("labelBound");
  let overlap = _("labelOverlap");
  overlap = overlap || bound2 ? {
    separation: _("labelSeparation"),
    method: overlap,
    order: "datum.index",
    bound: bound2 ? {
      scale: scale7,
      orient: orient2,
      tolerance: bound2
    } : null
  } : void 0;
  if (update3.align !== align2) {
    update3.align = patch(update3.align, align2);
  }
  if (update3.baseline !== baseline3) {
    update3.baseline = patch(update3.baseline, baseline3);
  }
  return guideMark({
    type: TextMark,
    role: AxisLabelRole,
    style: GuideLabelStyle,
    key: Value,
    from: dataRef,
    encode: encode2,
    overlap
  }, userEncode);
}
function axisTitle(spec, config, userEncode, dataRef) {
  const _ = lookup5(spec, config), orient2 = spec.orient, sign4 = getSign(orient2, -1, 1);
  let enter, update3;
  const encode2 = {
    enter: enter = {
      opacity: zero4,
      anchor: encoder(_("titleAnchor", null)),
      align: {
        signal: alignExpr$1
      }
    },
    update: update3 = extend({}, enter, {
      opacity: one3,
      text: encoder(spec.title)
    }),
    exit: {
      opacity: zero4
    }
  };
  const titlePos = {
    signal: `lerp(range("${spec.scale}"), ${anchorExpr(0, 1, 0.5)})`
  };
  update3.x = ifX(orient2, titlePos);
  update3.y = ifY(orient2, titlePos);
  enter.angle = ifX(orient2, zero4, mult(sign4, 90));
  enter.baseline = ifX(orient2, ifTop(orient2, Bottom2, Top2), {
    value: Bottom2
  });
  update3.angle = enter.angle;
  update3.baseline = enter.baseline;
  addEncoders(encode2, {
    fill: _("titleColor"),
    fillOpacity: _("titleOpacity"),
    font: _("titleFont"),
    fontSize: _("titleFontSize"),
    fontStyle: _("titleFontStyle"),
    fontWeight: _("titleFontWeight"),
    limit: _("titleLimit"),
    lineHeight: _("titleLineHeight")
  }, {
    align: _("titleAlign"),
    angle: _("titleAngle"),
    baseline: _("titleBaseline")
  });
  autoLayout(_, orient2, encode2, userEncode);
  encode2.update.align = patch(encode2.update.align, enter.align);
  encode2.update.angle = patch(encode2.update.angle, enter.angle);
  encode2.update.baseline = patch(encode2.update.baseline, enter.baseline);
  return guideMark({
    type: TextMark,
    role: AxisTitleRole,
    style: GuideTitleStyle,
    from: dataRef,
    encode: encode2
  }, userEncode);
}
function autoLayout(_, orient2, encode2, userEncode) {
  const auto = (value3, dim) => value3 != null ? (encode2.update[dim] = patch(encoder(value3), encode2.update[dim]), false) : !has2(dim, userEncode) ? true : false;
  const autoY = auto(_("titleX"), "x"), autoX = auto(_("titleY"), "y");
  encode2.enter.auto = autoX === autoY ? encoder(autoX) : ifX(orient2, encoder(autoX), encoder(autoY));
}
function parseAxis(spec, scope) {
  const config = axisConfig(spec, scope), encode2 = spec.encode || {}, axisEncode = encode2.axis || {}, name4 = axisEncode.name || void 0, interactive2 = axisEncode.interactive, style2 = axisEncode.style, _ = lookup5(spec, config), band3 = tickBand(_);
  const datum2 = {
    scale: spec.scale,
    ticks: !!_("ticks"),
    labels: !!_("labels"),
    grid: !!_("grid"),
    domain: !!_("domain"),
    title: spec.title != null
  };
  const dataRef = ref(scope.add(Collect2({}, [datum2])));
  const ticksRef = ref(scope.add(AxisTicks2({
    scale: scope.scaleRef(spec.scale),
    extra: scope.property(band3.extra),
    count: scope.objectProperty(spec.tickCount),
    values: scope.objectProperty(spec.values),
    minstep: scope.property(spec.tickMinStep),
    formatType: scope.property(spec.formatType),
    formatSpecifier: scope.property(spec.format)
  })));
  const children3 = [];
  let size;
  if (datum2.grid) {
    children3.push(axisGrid(spec, config, encode2.grid, ticksRef, band3));
  }
  if (datum2.ticks) {
    size = _("tickSize");
    children3.push(axisTicks(spec, config, encode2.ticks, ticksRef, size, band3));
  }
  if (datum2.labels) {
    size = datum2.ticks ? size : 0;
    children3.push(axisLabels(spec, config, encode2.labels, ticksRef, size, band3));
  }
  if (datum2.domain) {
    children3.push(axisDomain(spec, config, encode2.domain, dataRef));
  }
  if (datum2.title) {
    children3.push(axisTitle(spec, config, encode2.title, dataRef));
  }
  return parseMark(guideGroup({
    role: AxisRole2,
    from: dataRef,
    encode: extendEncode(buildAxisEncode(_, spec), axisEncode, Skip3),
    marks: children3,
    aria: _("aria"),
    description: _("description"),
    zindex: _("zindex"),
    name: name4,
    interactive: interactive2,
    style: style2
  }), scope);
}
function buildAxisEncode(_, spec) {
  const encode2 = {
    enter: {},
    update: {}
  };
  addEncoders(encode2, {
    orient: _("orient"),
    offset: _("offset") || 0,
    position: value2(spec.position, 0),
    titlePadding: _("titlePadding"),
    minExtent: _("minExtent"),
    maxExtent: _("maxExtent"),
    range: {
      signal: `abs(span(range("${spec.scale}")))`
    },
    translate: _("translate"),
    format: spec.format,
    formatType: spec.formatType
  });
  return encode2;
}
function parseScope(spec, scope, preprocessed) {
  const signals = array(spec.signals), scales2 = array(spec.scales);
  if (!preprocessed)
    signals.forEach((_) => parseSignal(_, scope));
  array(spec.projections).forEach((_) => parseProjection(_, scope));
  scales2.forEach((_) => initScale(_, scope));
  array(spec.data).forEach((_) => parseData(_, scope));
  scales2.forEach((_) => parseScale(_, scope));
  (preprocessed || signals).forEach((_) => parseSignalUpdates(_, scope));
  array(spec.axes).forEach((_) => parseAxis(_, scope));
  array(spec.marks).forEach((_) => parseMark(_, scope));
  array(spec.legends).forEach((_) => parseLegend(_, scope));
  if (spec.title)
    parseTitle(spec.title, scope);
  scope.parseLambdas();
  return scope;
}
var rootEncode = (spec) => extendEncode({
  enter: {
    x: {
      value: 0
    },
    y: {
      value: 0
    }
  },
  update: {
    width: {
      signal: "width"
    },
    height: {
      signal: "height"
    }
  }
}, spec);
function parseView(spec, scope) {
  const config = scope.config;
  const root = ref(scope.root = scope.add(operator()));
  const signals = collectSignals(spec, config);
  signals.forEach((_) => parseSignal(_, scope));
  scope.description = spec.description || config.description;
  scope.eventConfig = config.events;
  scope.legends = scope.objectProperty(config.legend && config.legend.layout);
  scope.locale = config.locale;
  const input = scope.add(Collect2());
  const encode2 = scope.add(Encode2(parseEncode(rootEncode(spec.encode), GroupMark, FrameRole2, spec.style, scope, {
    pulse: ref(input)
  })));
  const parent = scope.add(ViewLayout2({
    layout: scope.objectProperty(spec.layout),
    legends: scope.legends,
    autosize: scope.signalRef("autosize"),
    mark: root,
    pulse: ref(encode2)
  }));
  scope.operators.pop();
  scope.pushState(ref(encode2), ref(parent), null);
  parseScope(spec, scope, signals);
  scope.operators.push(parent);
  let op = scope.add(Bound2({
    mark: root,
    pulse: ref(parent)
  }));
  op = scope.add(Render2({
    pulse: ref(op)
  }));
  op = scope.add(Sieve2({
    pulse: ref(op)
  }));
  scope.addData("root", new DataScope(scope, input, input, op));
  return scope;
}
function signalObject(name4, value3) {
  return value3 && value3.signal ? {
    name: name4,
    update: value3.signal
  } : {
    name: name4,
    value: value3
  };
}
function collectSignals(spec, config) {
  const _ = (name4) => value2(spec[name4], config[name4]), signals = [signalObject("background", _("background")), signalObject("autosize", parseAutosize(_("autosize"))), signalObject("padding", parsePadding(_("padding"))), signalObject("width", _("width") || 0), signalObject("height", _("height") || 0)], pre = signals.reduce((p, s2) => (p[s2.name] = s2, p), {}), map7 = {};
  array(spec.signals).forEach((s2) => {
    if (has(pre, s2.name)) {
      s2 = extend(pre[s2.name], s2);
    } else {
      signals.push(s2);
    }
    map7[s2.name] = s2;
  });
  array(config.signals).forEach((s2) => {
    if (!has(map7, s2.name) && !has(pre, s2.name)) {
      signals.push(s2);
    }
  });
  return signals;
}
function Scope(config, options) {
  this.config = config || {};
  this.options = options || {};
  this.bindings = [];
  this.field = {};
  this.signals = {};
  this.lambdas = {};
  this.scales = {};
  this.events = {};
  this.data = {};
  this.streams = [];
  this.updates = [];
  this.operators = [];
  this.eventConfig = null;
  this.locale = null;
  this._id = 0;
  this._subid = 0;
  this._nextsub = [0];
  this._parent = [];
  this._encode = [];
  this._lookup = [];
  this._markpath = [];
}
function Subscope(scope) {
  this.config = scope.config;
  this.options = scope.options;
  this.legends = scope.legends;
  this.field = Object.create(scope.field);
  this.signals = Object.create(scope.signals);
  this.lambdas = Object.create(scope.lambdas);
  this.scales = Object.create(scope.scales);
  this.events = Object.create(scope.events);
  this.data = Object.create(scope.data);
  this.streams = [];
  this.updates = [];
  this.operators = [];
  this._id = 0;
  this._subid = ++scope._nextsub[0];
  this._nextsub = scope._nextsub;
  this._parent = scope._parent.slice();
  this._encode = scope._encode.slice();
  this._lookup = scope._lookup.slice();
  this._markpath = scope._markpath;
}
Scope.prototype = Subscope.prototype = {
  parse(spec) {
    return parseScope(spec, this);
  },
  fork() {
    return new Subscope(this);
  },
  isSubscope() {
    return this._subid > 0;
  },
  toRuntime() {
    this.finish();
    return {
      description: this.description,
      operators: this.operators,
      streams: this.streams,
      updates: this.updates,
      bindings: this.bindings,
      eventConfig: this.eventConfig,
      locale: this.locale
    };
  },
  id() {
    return (this._subid ? this._subid + ":" : 0) + this._id++;
  },
  add(op) {
    this.operators.push(op);
    op.id = this.id();
    if (op.refs) {
      op.refs.forEach((ref2) => {
        ref2.$ref = op.id;
      });
      op.refs = null;
    }
    return op;
  },
  proxy(op) {
    const vref = op instanceof Entry ? ref(op) : op;
    return this.add(Proxy3({
      value: vref
    }));
  },
  addStream(stream2) {
    this.streams.push(stream2);
    stream2.id = this.id();
    return stream2;
  },
  addUpdate(update3) {
    this.updates.push(update3);
    return update3;
  },
  finish() {
    let name4, ds;
    if (this.root)
      this.root.root = true;
    for (name4 in this.signals) {
      this.signals[name4].signal = name4;
    }
    for (name4 in this.scales) {
      this.scales[name4].scale = name4;
    }
    function annotate(op, name5, type3) {
      let data3, list;
      if (op) {
        data3 = op.data || (op.data = {});
        list = data3[name5] || (data3[name5] = []);
        list.push(type3);
      }
    }
    for (name4 in this.data) {
      ds = this.data[name4];
      annotate(ds.input, name4, "input");
      annotate(ds.output, name4, "output");
      annotate(ds.values, name4, "values");
      for (const field3 in ds.index) {
        annotate(ds.index[field3], name4, "index:" + field3);
      }
    }
    return this;
  },
  pushState(encode2, parent, lookup6) {
    this._encode.push(ref(this.add(Sieve2({
      pulse: encode2
    }))));
    this._parent.push(parent);
    this._lookup.push(lookup6 ? ref(this.proxy(lookup6)) : null);
    this._markpath.push(-1);
  },
  popState() {
    this._encode.pop();
    this._parent.pop();
    this._lookup.pop();
    this._markpath.pop();
  },
  parent() {
    return peek(this._parent);
  },
  encode() {
    return peek(this._encode);
  },
  lookup() {
    return peek(this._lookup);
  },
  markpath() {
    const p = this._markpath;
    return ++p[p.length - 1];
  },
  fieldRef(field3, name4) {
    if (isString(field3))
      return fieldRef$1(field3, name4);
    if (!field3.signal) {
      error("Unsupported field reference: " + $(field3));
    }
    const s2 = field3.signal;
    let f = this.field[s2];
    if (!f) {
      const params2 = {
        name: this.signalRef(s2)
      };
      if (name4)
        params2.as = name4;
      this.field[s2] = f = ref(this.add(Field2(params2)));
    }
    return f;
  },
  compareRef(cmp2) {
    let signal = false;
    const check = (_) => isSignal(_) ? (signal = true, this.signalRef(_.signal)) : isExpr$1(_) ? (signal = true, this.exprRef(_.expr)) : _;
    const fields = array(cmp2.field).map(check), orders = array(cmp2.order).map(check);
    return signal ? ref(this.add(Compare2({
      fields,
      orders
    }))) : compareRef(fields, orders);
  },
  keyRef(fields, flat) {
    let signal = false;
    const check = (_) => isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;
    const sig = this.signals;
    fields = array(fields).map(check);
    return signal ? ref(this.add(Key2({
      fields,
      flat
    }))) : keyRef(fields, flat);
  },
  sortRef(sort4) {
    if (!sort4)
      return sort4;
    const a4 = aggrField(sort4.op, sort4.field), o = sort4.order || Ascending;
    return o.signal ? ref(this.add(Compare2({
      fields: a4,
      orders: this.signalRef(o.signal)
    }))) : compareRef(a4, o);
  },
  event(source3, type3) {
    const key2 = source3 + ":" + type3;
    if (!this.events[key2]) {
      const id2 = this.id();
      this.streams.push({
        id: id2,
        source: source3,
        type: type3
      });
      this.events[key2] = id2;
    }
    return this.events[key2];
  },
  hasOwnSignal(name4) {
    return has(this.signals, name4);
  },
  addSignal(name4, value3) {
    if (this.hasOwnSignal(name4)) {
      error("Duplicate signal name: " + $(name4));
    }
    const op = value3 instanceof Entry ? value3 : this.add(operator(value3));
    return this.signals[name4] = op;
  },
  getSignal(name4) {
    if (!this.signals[name4]) {
      error("Unrecognized signal name: " + $(name4));
    }
    return this.signals[name4];
  },
  signalRef(s2) {
    if (this.signals[s2]) {
      return ref(this.signals[s2]);
    } else if (!has(this.lambdas, s2)) {
      this.lambdas[s2] = this.add(operator(null));
    }
    return ref(this.lambdas[s2]);
  },
  parseLambdas() {
    const code = Object.keys(this.lambdas);
    for (let i = 0, n = code.length; i < n; ++i) {
      const s2 = code[i], e3 = parser2(s2, this), op = this.lambdas[s2];
      op.params = e3.$params;
      op.update = e3.$expr;
    }
  },
  property(spec) {
    return spec && spec.signal ? this.signalRef(spec.signal) : spec;
  },
  objectProperty(spec) {
    return !spec || !isObject(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
  },
  exprRef(code, name4) {
    const params2 = {
      expr: parser2(code, this)
    };
    if (name4)
      params2.expr.$name = name4;
    return ref(this.add(Expression2(params2)));
  },
  addBinding(name4, bind3) {
    if (!this.bindings) {
      error("Nested signals do not support binding: " + $(name4));
    }
    this.bindings.push(extend({
      signal: name4
    }, bind3));
  },
  addScaleProj(name4, transform4) {
    if (has(this.scales, name4)) {
      error("Duplicate scale or projection name: " + $(name4));
    }
    this.scales[name4] = this.add(transform4);
  },
  addScale(name4, params2) {
    this.addScaleProj(name4, Scale2(params2));
  },
  addProjection(name4, params2) {
    this.addScaleProj(name4, Projection2(params2));
  },
  getScale(name4) {
    if (!this.scales[name4]) {
      error("Unrecognized scale name: " + $(name4));
    }
    return this.scales[name4];
  },
  scaleRef(name4) {
    return ref(this.getScale(name4));
  },
  scaleType(name4) {
    return this.getScale(name4).params.type;
  },
  projectionRef(name4) {
    return this.scaleRef(name4);
  },
  projectionType(name4) {
    return this.scaleType(name4);
  },
  addData(name4, dataScope) {
    if (has(this.data, name4)) {
      error("Duplicate data set name: " + $(name4));
    }
    return this.data[name4] = dataScope;
  },
  getData(name4) {
    if (!this.data[name4]) {
      error("Undefined data set name: " + $(name4));
    }
    return this.data[name4];
  },
  addDataPipeline(name4, entries3) {
    if (has(this.data, name4)) {
      error("Duplicate data set name: " + $(name4));
    }
    return this.addData(name4, DataScope.fromEntries(this, entries3));
  }
};
function propertyLambda(spec) {
  return (isArray(spec) ? arrayLambda : objectLambda)(spec);
}
function arrayLambda(array6) {
  const n = array6.length;
  let code = "[";
  for (let i = 0; i < n; ++i) {
    const value3 = array6[i];
    code += (i > 0 ? "," : "") + (isObject(value3) ? value3.signal || propertyLambda(value3) : $(value3));
  }
  return code + "]";
}
function objectLambda(obj) {
  let code = "{", i = 0, key2, value3;
  for (key2 in obj) {
    value3 = obj[key2];
    code += (++i > 1 ? "," : "") + $(key2) + ":" + (isObject(value3) ? value3.signal || propertyLambda(value3) : $(value3));
  }
  return code + "}";
}
function defaults() {
  const defaultFont2 = "sans-serif", defaultSymbolSize = 30, defaultStrokeWidth = 2, defaultColor = "#4c78a8", black = "#000", gray2 = "#888", lightGray = "#ddd";
  return {
    description: "Vega visualization",
    padding: 0,
    autosize: "pad",
    background: null,
    events: {
      defaults: {
        allow: ["wheel"]
      }
    },
    group: null,
    mark: null,
    arc: {
      fill: defaultColor
    },
    area: {
      fill: defaultColor
    },
    image: null,
    line: {
      stroke: defaultColor,
      strokeWidth: defaultStrokeWidth
    },
    path: {
      stroke: defaultColor
    },
    rect: {
      fill: defaultColor
    },
    rule: {
      stroke: black
    },
    shape: {
      stroke: defaultColor
    },
    symbol: {
      fill: defaultColor,
      size: 64
    },
    text: {
      fill: black,
      font: defaultFont2,
      fontSize: 11
    },
    trail: {
      fill: defaultColor,
      size: defaultStrokeWidth
    },
    style: {
      "guide-label": {
        fill: black,
        font: defaultFont2,
        fontSize: 10
      },
      "guide-title": {
        fill: black,
        font: defaultFont2,
        fontSize: 11,
        fontWeight: "bold"
      },
      "group-title": {
        fill: black,
        font: defaultFont2,
        fontSize: 13,
        fontWeight: "bold"
      },
      "group-subtitle": {
        fill: black,
        font: defaultFont2,
        fontSize: 12
      },
      point: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: "circle"
      },
      circle: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth
      },
      square: {
        size: defaultSymbolSize,
        strokeWidth: defaultStrokeWidth,
        shape: "square"
      },
      cell: {
        fill: "transparent",
        stroke: lightGray
      }
    },
    title: {
      orient: "top",
      anchor: "middle",
      offset: 4,
      subtitlePadding: 3
    },
    axis: {
      minExtent: 0,
      maxExtent: 200,
      bandPosition: 0.5,
      domain: true,
      domainWidth: 1,
      domainColor: gray2,
      grid: false,
      gridWidth: 1,
      gridColor: lightGray,
      labels: true,
      labelAngle: 0,
      labelLimit: 180,
      labelOffset: 0,
      labelPadding: 2,
      ticks: true,
      tickColor: gray2,
      tickOffset: 0,
      tickRound: true,
      tickSize: 5,
      tickWidth: 1,
      titlePadding: 4
    },
    axisBand: {
      tickOffset: -0.5
    },
    projection: {
      type: "mercator"
    },
    legend: {
      orient: "right",
      padding: 0,
      gridAlign: "each",
      columnPadding: 10,
      rowPadding: 2,
      symbolDirection: "vertical",
      gradientDirection: "vertical",
      gradientLength: 200,
      gradientThickness: 16,
      gradientStrokeColor: lightGray,
      gradientStrokeWidth: 0,
      gradientLabelOffset: 2,
      labelAlign: "left",
      labelBaseline: "middle",
      labelLimit: 160,
      labelOffset: 4,
      labelOverlap: true,
      symbolLimit: 30,
      symbolType: "circle",
      symbolSize: 100,
      symbolOffset: 0,
      symbolStrokeWidth: 1.5,
      symbolBaseFillColor: "transparent",
      symbolBaseStrokeColor: gray2,
      titleLimit: 180,
      titleOrient: "top",
      titlePadding: 5,
      layout: {
        offset: 18,
        direction: "horizontal",
        left: {
          direction: "vertical"
        },
        right: {
          direction: "vertical"
        }
      }
    },
    range: {
      category: {
        scheme: "tableau10"
      },
      ordinal: {
        scheme: "blues"
      },
      heatmap: {
        scheme: "yellowgreenblue"
      },
      ramp: {
        scheme: "blues"
      },
      diverging: {
        scheme: "blueorange",
        extent: [1, 0]
      },
      symbol: ["circle", "square", "triangle-up", "cross", "diamond", "triangle-right", "triangle-down", "triangle-left"]
    }
  };
}
function parse6(spec, config, options) {
  if (!isObject(spec)) {
    error("Input Vega specification must be an object.");
  }
  config = mergeConfig(defaults(), config, spec.config);
  return parseView(spec, new Scope(config, options)).toRuntime();
}

// node_modules/vega/build/vega.module.js
var version = "5.22.1";
extend(transforms, vega_transforms_module_exports, vega_view_transforms_module_exports, vega_encode_module_exports, vega_geo_module_exports, vega_force_module_exports, vega_label_module_exports, vega_hierarchy_module_exports, vega_regression_module_exports, vega_voronoi_module_exports, vega_wordcloud_module_exports, vega_crossfilter_module_exports);

// node_modules/vega-interpreter/build/vega-interpreter.module.js
function adjustSpatial2(item, encode2, swap3) {
  let t4;
  if (encode2.x2) {
    if (encode2.x) {
      if (swap3 && item.x > item.x2) {
        t4 = item.x;
        item.x = item.x2;
        item.x2 = t4;
      }
      item.width = item.x2 - item.x;
    } else {
      item.x = item.x2 - (item.width || 0);
    }
  }
  if (encode2.xc) {
    item.x = item.xc - (item.width || 0) / 2;
  }
  if (encode2.y2) {
    if (encode2.y) {
      if (swap3 && item.y > item.y2) {
        t4 = item.y;
        item.y = item.y2;
        item.y2 = t4;
      }
      item.height = item.y2 - item.y;
    } else {
      item.y = item.y2 - (item.height || 0);
    }
  }
  if (encode2.yc) {
    item.y = item.yc - (item.height || 0) / 2;
  }
}
var Constants2 = {
  NaN: NaN,
  E: Math.E,
  LN2: Math.LN2,
  LN10: Math.LN10,
  LOG2E: Math.LOG2E,
  LOG10E: Math.LOG10E,
  PI: Math.PI,
  SQRT1_2: Math.SQRT1_2,
  SQRT2: Math.SQRT2,
  MIN_VALUE: Number.MIN_VALUE,
  MAX_VALUE: Number.MAX_VALUE
};
var Ops = {
  "*": (a4, b2) => a4 * b2,
  "+": (a4, b2) => a4 + b2,
  "-": (a4, b2) => a4 - b2,
  "/": (a4, b2) => a4 / b2,
  "%": (a4, b2) => a4 % b2,
  ">": (a4, b2) => a4 > b2,
  "<": (a4, b2) => a4 < b2,
  "<=": (a4, b2) => a4 <= b2,
  ">=": (a4, b2) => a4 >= b2,
  "==": (a4, b2) => a4 == b2,
  "!=": (a4, b2) => a4 != b2,
  "===": (a4, b2) => a4 === b2,
  "!==": (a4, b2) => a4 !== b2,
  "&": (a4, b2) => a4 & b2,
  "|": (a4, b2) => a4 | b2,
  "^": (a4, b2) => a4 ^ b2,
  "<<": (a4, b2) => a4 << b2,
  ">>": (a4, b2) => a4 >> b2,
  ">>>": (a4, b2) => a4 >>> b2
};
var Unary = {
  "+": (a4) => +a4,
  "-": (a4) => -a4,
  "~": (a4) => ~a4,
  "!": (a4) => !a4
};
var slice6 = Array.prototype.slice;
var apply2 = (m3, args, cast) => {
  const obj = cast ? cast(args[0]) : args[0];
  return obj[m3].apply(obj, slice6.call(args, 1));
};
var datetime = (y5, m3, d, H, M2, S, ms) => new Date(y5, m3 || 0, d != null ? d : 1, H || 0, M2 || 0, S || 0, ms || 0);
var Functions2 = {
  isNaN: Number.isNaN,
  isFinite: Number.isFinite,
  abs: Math.abs,
  acos: Math.acos,
  asin: Math.asin,
  atan: Math.atan,
  atan2: Math.atan2,
  ceil: Math.ceil,
  cos: Math.cos,
  exp: Math.exp,
  floor: Math.floor,
  log: Math.log,
  max: Math.max,
  min: Math.min,
  pow: Math.pow,
  random: Math.random,
  round: Math.round,
  sin: Math.sin,
  sqrt: Math.sqrt,
  tan: Math.tan,
  clamp: (a4, b2, c3) => Math.max(b2, Math.min(c3, a4)),
  now: Date.now,
  utc: Date.UTC,
  datetime,
  date: (d) => new Date(d).getDate(),
  day: (d) => new Date(d).getDay(),
  year: (d) => new Date(d).getFullYear(),
  month: (d) => new Date(d).getMonth(),
  hours: (d) => new Date(d).getHours(),
  minutes: (d) => new Date(d).getMinutes(),
  seconds: (d) => new Date(d).getSeconds(),
  milliseconds: (d) => new Date(d).getMilliseconds(),
  time: (d) => new Date(d).getTime(),
  timezoneoffset: (d) => new Date(d).getTimezoneOffset(),
  utcdate: (d) => new Date(d).getUTCDate(),
  utcday: (d) => new Date(d).getUTCDay(),
  utcyear: (d) => new Date(d).getUTCFullYear(),
  utcmonth: (d) => new Date(d).getUTCMonth(),
  utchours: (d) => new Date(d).getUTCHours(),
  utcminutes: (d) => new Date(d).getUTCMinutes(),
  utcseconds: (d) => new Date(d).getUTCSeconds(),
  utcmilliseconds: (d) => new Date(d).getUTCMilliseconds(),
  length: (x5) => x5.length,
  join: function() {
    return apply2("join", arguments);
  },
  indexof: function() {
    return apply2("indexOf", arguments);
  },
  lastindexof: function() {
    return apply2("lastIndexOf", arguments);
  },
  slice: function() {
    return apply2("slice", arguments);
  },
  reverse: (x5) => x5.slice().reverse(),
  parseFloat,
  parseInt,
  upper: (x5) => String(x5).toUpperCase(),
  lower: (x5) => String(x5).toLowerCase(),
  substring: function() {
    return apply2("substring", arguments, String);
  },
  split: function() {
    return apply2("split", arguments, String);
  },
  replace: function() {
    return apply2("replace", arguments, String);
  },
  trim: (x5) => String(x5).trim(),
  regexp: RegExp,
  test: (r, t4) => RegExp(r).test(t4)
};
var EventFunctions = ["view", "item", "group", "xy", "x", "y"];
var Visitors = {
  Literal: ($2, n) => n.value,
  Identifier: ($2, n) => {
    const id2 = n.name;
    return $2.memberDepth > 0 ? id2 : id2 === "datum" ? $2.datum : id2 === "event" ? $2.event : id2 === "item" ? $2.item : Constants2[id2] || $2.params["$" + id2];
  },
  MemberExpression: ($2, n) => {
    const d = !n.computed, o = $2(n.object);
    if (d)
      $2.memberDepth += 1;
    const p = $2(n.property);
    if (d)
      $2.memberDepth -= 1;
    return o[p];
  },
  CallExpression: ($2, n) => {
    const args = n.arguments;
    let name4 = n.callee.name;
    if (name4.startsWith("_")) {
      name4 = name4.slice(1);
    }
    return name4 === "if" ? $2(args[0]) ? $2(args[1]) : $2(args[2]) : ($2.fn[name4] || Functions2[name4]).apply($2.fn, args.map($2));
  },
  ArrayExpression: ($2, n) => n.elements.map($2),
  BinaryExpression: ($2, n) => Ops[n.operator]($2(n.left), $2(n.right)),
  UnaryExpression: ($2, n) => Unary[n.operator]($2(n.argument)),
  ConditionalExpression: ($2, n) => $2(n.test) ? $2(n.consequent) : $2(n.alternate),
  LogicalExpression: ($2, n) => n.operator === "&&" ? $2(n.left) && $2(n.right) : $2(n.left) || $2(n.right),
  ObjectExpression: ($2, n) => n.properties.reduce((o, p) => {
    $2.memberDepth += 1;
    const k3 = $2(p.key);
    $2.memberDepth -= 1;
    o[k3] = $2(p.value);
    return o;
  }, {})
};
function interpret(ast, fn, params2, datum2, event2, item) {
  const $2 = (n) => Visitors[n.type]($2, n);
  $2.memberDepth = 0;
  $2.fn = Object.create(fn);
  $2.params = params2;
  $2.datum = datum2;
  $2.event = event2;
  $2.item = item;
  EventFunctions.forEach((f) => $2.fn[f] = (...args) => event2.vega[f](...args));
  return $2(ast);
}
var expression2 = {
  operator(ctx, expr2) {
    const ast = expr2.ast, fn = ctx.functions;
    return (_) => interpret(ast, fn, _);
  },
  parameter(ctx, expr2) {
    const ast = expr2.ast, fn = ctx.functions;
    return (datum2, _) => interpret(ast, fn, _, datum2);
  },
  event(ctx, expr2) {
    const ast = expr2.ast, fn = ctx.functions;
    return (event2) => interpret(ast, fn, void 0, void 0, event2);
  },
  handler(ctx, expr2) {
    const ast = expr2.ast, fn = ctx.functions;
    return (_, event2) => {
      const datum2 = event2.item && event2.item.datum;
      return interpret(ast, fn, _, datum2, event2);
    };
  },
  encode(ctx, encode2) {
    const {
      marktype,
      channels
    } = encode2, fn = ctx.functions, swap3 = marktype === "group" || marktype === "image" || marktype === "rect";
    return (item, _) => {
      const datum2 = item.datum;
      let m3 = 0, v2;
      for (const name4 in channels) {
        v2 = interpret(channels[name4].ast, fn, _, datum2, void 0, item);
        if (item[name4] !== v2) {
          item[name4] = v2;
          m3 = 1;
        }
      }
      if (marktype !== "rule") {
        adjustSpatial2(item, channels, swap3);
      }
      return m3;
    };
  }
};

// node_modules/vega-lite/build/src/index.js
var src_exports3 = {};
__export(src_exports3, {
  accessPathDepth: () => accessPathDepth,
  accessPathWithDatum: () => accessPathWithDatum,
  compile: () => compile,
  contains: () => contains2,
  deepEqual: () => deepEqual,
  deleteNestedProperty: () => deleteNestedProperty,
  duplicate: () => duplicate,
  entries: () => entries,
  every: () => every3,
  fieldIntersection: () => fieldIntersection,
  flatAccessWithDatum: () => flatAccessWithDatum,
  getFirstDefined: () => getFirstDefined,
  hasIntersection: () => hasIntersection,
  hash: () => hash,
  internalField: () => internalField,
  isBoolean: () => isBoolean3,
  isEmpty: () => isEmpty,
  isEqual: () => isEqual,
  isInternalField: () => isInternalField,
  isNullOrFalse: () => isNullOrFalse,
  isNumeric: () => isNumeric,
  keys: () => keys3,
  logicalExpr: () => logicalExpr,
  mergeDeep: () => mergeDeep,
  never: () => never,
  normalize: () => normalize3,
  normalizeAngle: () => normalizeAngle,
  omit: () => omit,
  pick: () => pick2,
  prefixGenerator: () => prefixGenerator,
  removePathFromField: () => removePathFromField,
  replaceAll: () => replaceAll,
  replacePathInField: () => replacePathInField,
  resetIdCounter: () => resetIdCounter,
  setEqual: () => setEqual,
  some: () => some3,
  stringify: () => stringify,
  titleCase: () => titleCase,
  unique: () => unique,
  uniqueId: () => uniqueId,
  vals: () => vals,
  varName: () => varName,
  version: () => version2
});

// node_modules/vega-lite/build/package.json
var package_default = {
  name: "vega-lite",
  author: 'Dominik Moritz, Kanit "Ham" Wongsuphasawat, Arvind Satyanarayan, Jeffrey Heer',
  version: "5.5.0",
  collaborators: [
    "Kanit Wongsuphasawat (http://kanitw.yellowpigz.com)",
    "Dominik Moritz (https://www.domoritz.de)",
    "Arvind Satyanarayan (https://arvindsatya.com)",
    "Jeffrey Heer (https://jheer.org)"
  ],
  homepage: "https://vega.github.io/vega-lite/",
  description: "Vega-Lite is a concise high-level language for interactive visualization.",
  keywords: [
    "vega",
    "chart",
    "visualization"
  ],
  main: "build/vega-lite.js",
  unpkg: "build/vega-lite.min.js",
  jsdelivr: "build/vega-lite.min.js",
  module: "build/src/index",
  types: "build/src/index.d.ts",
  bin: {
    vl2png: "./bin/vl2png",
    vl2svg: "./bin/vl2svg",
    vl2pdf: "./bin/vl2pdf",
    vl2vg: "./bin/vl2vg"
  },
  files: [
    "bin",
    "build",
    "src",
    "vega-lite*",
    "tsconfig.json"
  ],
  scripts: {
    changelog: "conventional-changelog -p angular -r 2",
    prebuild: "yarn clean:build",
    build: "yarn build:only",
    "build:only": "tsc -p tsconfig.build.json && rollup -c",
    "prebuild:examples": "yarn build:only",
    "build:examples": "yarn data && TZ=America/Los_Angeles scripts/build-examples.sh",
    "prebuild:examples-full": "yarn build:only",
    "build:examples-full": "TZ=America/Los_Angeles scripts/build-examples.sh 1",
    "build:example": "TZ=America/Los_Angeles scripts/build-example.sh",
    "build:toc": "yarn build:jekyll && scripts/generate-toc",
    "build:site": "rollup -c site/rollup.config.js",
    "build:jekyll": "pushd site && bundle exec jekyll build -q && popd",
    "build:versions": "scripts/update-version.sh",
    clean: "yarn clean:build && del-cli 'site/data/*' 'examples/compiled/*.png' && find site/examples ! -name 'index.md' ! -name 'data' -type f -delete",
    "clean:build": "del-cli 'build/*' !build/vega-lite-schema.json",
    "predeploy:site": "yarn presite",
    "deploy:site": "gh-pages -d site",
    data: "rsync -r node_modules/vega-datasets/data/* site/data",
    schema: "mkdir -p build && ts-json-schema-generator -f tsconfig.json -p src/index.ts -t TopLevelSpec --no-type-check --no-ref-encode > build/vega-lite-schema.json && yarn renameschema && cp build/vega-lite-schema.json site/_data/",
    renameschema: "scripts/rename-schema.sh",
    presite: "yarn data && yarn schema && yarn build:site && yarn build:versions && scripts/create-example-pages.sh",
    site: "yarn site:only",
    "site:only": "pushd site && bundle exec jekyll serve -I -l && popd",
    prettierbase: "prettier '**/*.{md,css,yml}'",
    eslintbase: "eslint .",
    format: "yarn eslintbase --fix && yarn prettierbase --write",
    lint: "yarn eslintbase && yarn prettierbase --check",
    jest: "NODE_OPTIONS=--experimental-vm-modules npx jest",
    test: "yarn jest test/ && yarn lint && yarn schema && yarn jest examples/ && yarn test:runtime",
    "test:cover": "yarn jest --collectCoverage test/",
    "test:inspect": "node --inspect-brk --experimental-vm-modules ./node_modules/.bin/jest --runInBand test",
    "test:runtime": "NODE_OPTIONS=--experimental-vm-modules TZ=America/Los_Angeles npx jest test-runtime/ --config test-runtime/jest-config.json",
    "test:runtime:generate": "yarn build:only && del-cli test-runtime/resources && VL_GENERATE_TESTS=true yarn test:runtime",
    watch: "tsc -p tsconfig.build.json -w",
    "watch:site": "yarn build:site -w",
    "watch:test": "yarn jest --watch test/",
    "watch:test:runtime": "NODE_OPTIONS=--experimental-vm-modules TZ=America/Los_Angeles npx jest --watch test-runtime/ --config test-runtime/jest-config.json",
    release: "yarn run prebuild && yarn build && yarn shipit",
    shipit: "auto shipit"
  },
  repository: {
    type: "git",
    url: "https://github.com/vega/vega-lite.git"
  },
  license: "BSD-3-Clause",
  bugs: {
    url: "https://github.com/vega/vega-lite/issues"
  },
  devDependencies: {
    "@auto-it/conventional-commits": "^10.37.6",
    "@auto-it/first-time-contributor": "^10.37.6",
    "@babel/core": "^7.19.1",
    "@babel/preset-env": "^7.19.1",
    "@babel/preset-typescript": "^7.18.6",
    "@rollup/plugin-alias": "^4.0.0",
    "@rollup/plugin-babel": "^6.0.0",
    "@rollup/plugin-commonjs": "^23.0.0",
    "@rollup/plugin-json": "^4.1.0",
    "@types/jest": "^27.4.1",
    "@rollup/plugin-node-resolve": "^14.1.0",
    "@types/chai": "^4.3.3",
    "@types/d3": "^7.4.0",
    "@types/mkdirp": "^1.0.2",
    "@types/pako": "^2.0.0",
    "@typescript-eslint/eslint-plugin": "^5.38.0",
    "@typescript-eslint/parser": "^5.38.0",
    ajv: "^8.11.0",
    "ajv-formats": "^2.1.1",
    auto: "^10.37.6",
    chai: "^4.3.6",
    cheerio: "^1.0.0-rc.12",
    "conventional-changelog-cli": "^2.2.2",
    d3: "^7.6.1",
    "del-cli": "^5.0.0",
    eslint: "^8.23.1",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-jest": "^27.0.4",
    "eslint-plugin-prettier": "^4.2.1",
    "gh-pages": "^4.0.0",
    jest: "^27.5.1",
    "highlight.js": "^11.6.0",
    "jest-dev-server": "^6.1.1",
    mkdirp: "^1.0.4",
    pako: "^2.0.4",
    prettier: "^2.7.1",
    puppeteer: "^15.0.0",
    rollup: "^2.79.1",
    "rollup-plugin-bundle-size": "^1.0.3",
    "rollup-plugin-sourcemaps": "^0.6.3",
    "rollup-plugin-terser": "^7.0.2",
    serve: "^14.0.1",
    terser: "^5.15.0",
    "ts-jest": "^29.0.1",
    "ts-json-schema-generator": "^1.1.1",
    "vega-cli": "^5.22.1",
    typescript: "~4.8.3",
    "vega-datasets": "~2.5.1",
    "vega-embed": "^6.21.0",
    "vega-tooltip": "^0.28.0",
    "yaml-front-matter": "^4.1.1"
  },
  dependencies: {
    "@types/clone": "~2.1.1",
    clone: "~2.1.2",
    "fast-deep-equal": "~3.1.3",
    "fast-json-stable-stringify": "~2.1.0",
    "json-stringify-pretty-compact": "~3.0.0",
    tslib: "~2.4.0",
    "vega-event-selector": "~3.0.0",
    "vega-expression": "~5.0.0",
    "vega-util": "~1.17.0",
    yargs: "~17.6.0"
  },
  peerDependencies: {
    vega: "^5.22.0"
  },
  engines: {
    node: ">=12"
  }
};

// node_modules/vega-lite/build/src/util.js
var import_clone = __toESM(require_clone());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_fast_json_stable_stringify = __toESM(require_fast_json_stable_stringify());

// node_modules/vega-lite/build/src/logical.js
function isLogicalOr(op) {
  return !!op.or;
}
function isLogicalAnd(op) {
  return !!op.and;
}
function isLogicalNot(op) {
  return !!op.not;
}
function forEachLeaf(op, fn) {
  if (isLogicalNot(op)) {
    forEachLeaf(op.not, fn);
  } else if (isLogicalAnd(op)) {
    for (const subop of op.and) {
      forEachLeaf(subop, fn);
    }
  } else if (isLogicalOr(op)) {
    for (const subop of op.or) {
      forEachLeaf(subop, fn);
    }
  } else {
    fn(op);
  }
}
function normalizeLogicalComposition(op, normalizer) {
  if (isLogicalNot(op)) {
    return { not: normalizeLogicalComposition(op.not, normalizer) };
  } else if (isLogicalAnd(op)) {
    return { and: op.and.map((o) => normalizeLogicalComposition(o, normalizer)) };
  } else if (isLogicalOr(op)) {
    return { or: op.or.map((o) => normalizeLogicalComposition(o, normalizer)) };
  } else {
    return normalizer(op);
  }
}

// node_modules/vega-lite/build/src/util.js
var deepEqual = import_fast_deep_equal.default;
var duplicate = import_clone.default;
function never(message) {
  throw new Error(message);
}
function pick2(obj, props) {
  const copy4 = {};
  for (const prop of props) {
    if (has(obj, prop)) {
      copy4[prop] = obj[prop];
    }
  }
  return copy4;
}
function omit(obj, props) {
  const copy4 = Object.assign({}, obj);
  for (const prop of props) {
    delete copy4[prop];
  }
  return copy4;
}
Set.prototype["toJSON"] = function() {
  return `Set(${[...this].map((x5) => (0, import_fast_json_stable_stringify.default)(x5)).join(",")})`;
};
var stringify = import_fast_json_stable_stringify.default;
function hash(a4) {
  if (isNumber(a4)) {
    return a4;
  }
  const str = isString(a4) ? a4 : (0, import_fast_json_stable_stringify.default)(a4);
  if (str.length < 250) {
    return str;
  }
  let h2 = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    h2 = (h2 << 5) - h2 + char;
    h2 = h2 & h2;
  }
  return h2;
}
function isNullOrFalse(x5) {
  return x5 === false || x5 === null;
}
function contains2(array6, item) {
  return array6.includes(item);
}
function some3(arr, f) {
  let i = 0;
  for (const [k3, a4] of arr.entries()) {
    if (f(a4, k3, i++)) {
      return true;
    }
  }
  return false;
}
function every3(arr, f) {
  let i = 0;
  for (const [k3, a4] of arr.entries()) {
    if (!f(a4, k3, i++)) {
      return false;
    }
  }
  return true;
}
function mergeDeep(dest, ...src) {
  for (const s2 of src) {
    deepMerge_(dest, s2 !== null && s2 !== void 0 ? s2 : {});
  }
  return dest;
}
function deepMerge_(dest, src) {
  for (const property2 of keys3(src)) {
    writeConfig(dest, property2, src[property2], true);
  }
}
function unique(values5, f) {
  const results = [];
  const u4 = {};
  let v2;
  for (const val of values5) {
    v2 = f(val);
    if (v2 in u4) {
      continue;
    }
    u4[v2] = 1;
    results.push(val);
  }
  return results;
}
function isEqual(dict, other) {
  const dictKeys = keys3(dict);
  const otherKeys = keys3(other);
  if (dictKeys.length !== otherKeys.length) {
    return false;
  }
  for (const key2 of dictKeys) {
    if (dict[key2] !== other[key2]) {
      return false;
    }
  }
  return true;
}
function setEqual(a4, b2) {
  if (a4.size !== b2.size) {
    return false;
  }
  for (const e3 of a4) {
    if (!b2.has(e3)) {
      return false;
    }
  }
  return true;
}
function hasIntersection(a4, b2) {
  for (const key2 of a4) {
    if (b2.has(key2)) {
      return true;
    }
  }
  return false;
}
function prefixGenerator(a4) {
  const prefixes2 = /* @__PURE__ */ new Set();
  for (const x5 of a4) {
    const splitField = splitAccessPath(x5);
    const wrappedWithAccessors = splitField.map((y5, i) => i === 0 ? y5 : `[${y5}]`);
    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(""));
    for (const y5 of computedPrefixes) {
      prefixes2.add(y5);
    }
  }
  return prefixes2;
}
function fieldIntersection(a4, b2) {
  if (a4 === void 0 || b2 === void 0) {
    return true;
  }
  return hasIntersection(prefixGenerator(a4), prefixGenerator(b2));
}
function isEmpty(obj) {
  return keys3(obj).length === 0;
}
var keys3 = Object.keys;
var vals = Object.values;
var entries = Object.entries;
function isBoolean3(b2) {
  return b2 === true || b2 === false;
}
function varName(s2) {
  const alphanumericS = s2.replace(/\W/g, "_");
  return (s2.match(/^\d+/) ? "_" : "") + alphanumericS;
}
function logicalExpr(op, cb) {
  if (isLogicalNot(op)) {
    return `!(${logicalExpr(op.not, cb)})`;
  } else if (isLogicalAnd(op)) {
    return `(${op.and.map((and) => logicalExpr(and, cb)).join(") && (")})`;
  } else if (isLogicalOr(op)) {
    return `(${op.or.map((or2) => logicalExpr(or2, cb)).join(") || (")})`;
  } else {
    return cb(op);
  }
}
function deleteNestedProperty(obj, orderedProps) {
  if (orderedProps.length === 0) {
    return true;
  }
  const prop = orderedProps.shift();
  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {
    delete obj[prop];
  }
  return isEmpty(obj);
}
function titleCase(s2) {
  return s2.charAt(0).toUpperCase() + s2.substr(1);
}
function accessPathWithDatum(path3, datum2 = "datum") {
  const pieces = splitAccessPath(path3);
  const prefixes2 = [];
  for (let i = 1; i <= pieces.length; i++) {
    const prefix = `[${pieces.slice(0, i).map($).join("][")}]`;
    prefixes2.push(`${datum2}${prefix}`);
  }
  return prefixes2.join(" && ");
}
function flatAccessWithDatum(path3, datum2 = "datum") {
  return `${datum2}[${$(splitAccessPath(path3).join("."))}]`;
}
function escapePathAccess(string) {
  return string.replace(/(\[|\]|\.|'|")/g, "\\$1");
}
function replacePathInField(path3) {
  return `${splitAccessPath(path3).map(escapePathAccess).join("\\.")}`;
}
function replaceAll(string, find4, replacement) {
  return string.replace(new RegExp(find4.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), replacement);
}
function removePathFromField(path3) {
  return `${splitAccessPath(path3).join(".")}`;
}
function accessPathDepth(path3) {
  if (!path3) {
    return 0;
  }
  return splitAccessPath(path3).length;
}
function getFirstDefined(...args) {
  for (const arg of args) {
    if (arg !== void 0) {
      return arg;
    }
  }
  return void 0;
}
var idCounter = 42;
function uniqueId(prefix) {
  const id2 = ++idCounter;
  return prefix ? String(prefix) + id2 : id2;
}
function resetIdCounter() {
  idCounter = 42;
}
function internalField(name4) {
  return isInternalField(name4) ? name4 : `__${name4}`;
}
function isInternalField(name4) {
  return name4.startsWith("__");
}
function normalizeAngle(angle2) {
  if (angle2 === void 0) {
    return void 0;
  }
  return (angle2 % 360 + 360) % 360;
}
function isNumeric(value3) {
  if (isNumber(value3)) {
    return true;
  }
  return !isNaN(value3) && !isNaN(parseFloat(value3));
}

// node_modules/vega-lite/build/src/channel.js
var __rest = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var ROW = "row";
var COLUMN = "column";
var FACET = "facet";
var X3 = "x";
var Y3 = "y";
var X23 = "x2";
var Y23 = "y2";
var XOFFSET = "xOffset";
var YOFFSET = "yOffset";
var RADIUS = "radius";
var RADIUS2 = "radius2";
var THETA = "theta";
var THETA2 = "theta2";
var LATITUDE = "latitude";
var LONGITUDE = "longitude";
var LATITUDE2 = "latitude2";
var LONGITUDE2 = "longitude2";
var COLOR = "color";
var FILL = "fill";
var STROKE = "stroke";
var SHAPE = "shape";
var SIZE2 = "size";
var ANGLE = "angle";
var OPACITY = "opacity";
var FILLOPACITY = "fillOpacity";
var STROKEOPACITY = "strokeOpacity";
var STROKEWIDTH = "strokeWidth";
var STROKEDASH = "strokeDash";
var TEXT = "text";
var ORDER = "order";
var DETAIL = "detail";
var KEY = "key";
var TOOLTIP = "tooltip";
var HREF = "href";
var URL2 = "url";
var DESCRIPTION = "description";
var POSITION_CHANNEL_INDEX = {
  x: 1,
  y: 1,
  x2: 1,
  y2: 1
};
var POLAR_POSITION_CHANNEL_INDEX = {
  theta: 1,
  theta2: 1,
  radius: 1,
  radius2: 1
};
function isPolarPositionChannel(c3) {
  return c3 in POLAR_POSITION_CHANNEL_INDEX;
}
var GEO_POSIITON_CHANNEL_INDEX = {
  longitude: 1,
  longitude2: 1,
  latitude: 1,
  latitude2: 1
};
function getPositionChannelFromLatLong(channel) {
  switch (channel) {
    case LATITUDE:
      return "y";
    case LATITUDE2:
      return "y2";
    case LONGITUDE:
      return "x";
    case LONGITUDE2:
      return "x2";
  }
}
function isGeoPositionChannel(c3) {
  return c3 in GEO_POSIITON_CHANNEL_INDEX;
}
var GEOPOSITION_CHANNELS = keys3(GEO_POSIITON_CHANNEL_INDEX);
var UNIT_CHANNEL_INDEX = Object.assign(Object.assign(Object.assign(Object.assign({}, POSITION_CHANNEL_INDEX), POLAR_POSITION_CHANNEL_INDEX), GEO_POSIITON_CHANNEL_INDEX), {
  xOffset: 1,
  yOffset: 1,
  color: 1,
  fill: 1,
  stroke: 1,
  opacity: 1,
  fillOpacity: 1,
  strokeOpacity: 1,
  strokeWidth: 1,
  strokeDash: 1,
  size: 1,
  angle: 1,
  shape: 1,
  order: 1,
  text: 1,
  detail: 1,
  key: 1,
  tooltip: 1,
  href: 1,
  url: 1,
  description: 1
});
function isColorChannel(channel) {
  return channel === COLOR || channel === FILL || channel === STROKE;
}
var FACET_CHANNEL_INDEX = {
  row: 1,
  column: 1,
  facet: 1
};
var FACET_CHANNELS = keys3(FACET_CHANNEL_INDEX);
var CHANNEL_INDEX = Object.assign(Object.assign({}, UNIT_CHANNEL_INDEX), FACET_CHANNEL_INDEX);
var CHANNELS = keys3(CHANNEL_INDEX);
var { order: _o, detail: _d, tooltip: _tt1 } = CHANNEL_INDEX;
var SINGLE_DEF_CHANNEL_INDEX = __rest(CHANNEL_INDEX, ["order", "detail", "tooltip"]);
var { row: _r, column: _c, facet: _f } = SINGLE_DEF_CHANNEL_INDEX;
var SINGLE_DEF_UNIT_CHANNEL_INDEX = __rest(SINGLE_DEF_CHANNEL_INDEX, ["row", "column", "facet"]);
var SINGLE_DEF_CHANNELS = keys3(SINGLE_DEF_CHANNEL_INDEX);
var SINGLE_DEF_UNIT_CHANNELS = keys3(SINGLE_DEF_UNIT_CHANNEL_INDEX);
function isSingleDefUnitChannel(str) {
  return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];
}
function isChannel(str) {
  return !!CHANNEL_INDEX[str];
}
var SECONDARY_RANGE_CHANNEL = [X23, Y23, LATITUDE2, LONGITUDE2, THETA2, RADIUS2];
function isSecondaryRangeChannel(c3) {
  const main5 = getMainRangeChannel(c3);
  return main5 !== c3;
}
function getMainRangeChannel(channel) {
  switch (channel) {
    case X23:
      return X3;
    case Y23:
      return Y3;
    case LATITUDE2:
      return LATITUDE;
    case LONGITUDE2:
      return LONGITUDE;
    case THETA2:
      return THETA;
    case RADIUS2:
      return RADIUS;
  }
  return channel;
}
function getVgPositionChannel(channel) {
  if (isPolarPositionChannel(channel)) {
    switch (channel) {
      case THETA:
        return "startAngle";
      case THETA2:
        return "endAngle";
      case RADIUS:
        return "outerRadius";
      case RADIUS2:
        return "innerRadius";
    }
  }
  return channel;
}
function getSecondaryRangeChannel(channel) {
  switch (channel) {
    case X3:
      return X23;
    case Y3:
      return Y23;
    case LATITUDE:
      return LATITUDE2;
    case LONGITUDE:
      return LONGITUDE2;
    case THETA:
      return THETA2;
    case RADIUS:
      return RADIUS2;
  }
  return void 0;
}
function getSizeChannel(channel) {
  switch (channel) {
    case X3:
    case X23:
      return "width";
    case Y3:
    case Y23:
      return "height";
  }
  return void 0;
}
function getOffsetChannel(channel) {
  switch (channel) {
    case X3:
      return "xOffset";
    case Y3:
      return "yOffset";
    case X23:
      return "x2Offset";
    case Y23:
      return "y2Offset";
    case THETA:
      return "thetaOffset";
    case RADIUS:
      return "radiusOffset";
    case THETA2:
      return "theta2Offset";
    case RADIUS2:
      return "radius2Offset";
  }
  return void 0;
}
function getOffsetScaleChannel(channel) {
  switch (channel) {
    case X3:
      return "xOffset";
    case Y3:
      return "yOffset";
  }
  return void 0;
}
function getMainChannelFromOffsetChannel(channel) {
  switch (channel) {
    case "xOffset":
      return "x";
    case "yOffset":
      return "y";
  }
}
var UNIT_CHANNELS = keys3(UNIT_CHANNEL_INDEX);
var {
  x: _x,
  y: _y,
  x2: _x2,
  y2: _y2,
  xOffset: _xo,
  yOffset: _yo,
  latitude: _latitude,
  longitude: _longitude,
  latitude2: _latitude2,
  longitude2: _longitude2,
  theta: _theta,
  theta2: _theta2,
  radius: _radius,
  radius2: _radius2
} = UNIT_CHANNEL_INDEX;
var NONPOSITION_CHANNEL_INDEX = __rest(UNIT_CHANNEL_INDEX, ["x", "y", "x2", "y2", "xOffset", "yOffset", "latitude", "longitude", "latitude2", "longitude2", "theta", "theta2", "radius", "radius2"]);
var NONPOSITION_CHANNELS = keys3(NONPOSITION_CHANNEL_INDEX);
var POSITION_SCALE_CHANNEL_INDEX = {
  x: 1,
  y: 1
};
var POSITION_SCALE_CHANNELS = keys3(POSITION_SCALE_CHANNEL_INDEX);
function isXorY(channel) {
  return channel in POSITION_SCALE_CHANNEL_INDEX;
}
var POLAR_POSITION_SCALE_CHANNEL_INDEX = {
  theta: 1,
  radius: 1
};
var POLAR_POSITION_SCALE_CHANNELS = keys3(POLAR_POSITION_SCALE_CHANNEL_INDEX);
function getPositionScaleChannel(sizeType) {
  return sizeType === "width" ? X3 : Y3;
}
var OFFSET_SCALE_CHANNEL_INDEX = { xOffset: 1, yOffset: 1 };
var OFFSET_SCALE_CHANNELS = keys3(OFFSET_SCALE_CHANNEL_INDEX);
function isXorYOffset(channel) {
  return channel in OFFSET_SCALE_CHANNEL_INDEX;
}
var {
  text: _t,
  tooltip: _tt,
  href: _hr,
  url: _u,
  description: _al,
  detail: _dd,
  key: _k,
  order: _oo
} = NONPOSITION_CHANNEL_INDEX;
var NONPOSITION_SCALE_CHANNEL_INDEX = __rest(NONPOSITION_CHANNEL_INDEX, ["text", "tooltip", "href", "url", "description", "detail", "key", "order"]);
var NONPOSITION_SCALE_CHANNELS = keys3(NONPOSITION_SCALE_CHANNEL_INDEX);
function isNonPositionScaleChannel(channel) {
  return !!NONPOSITION_CHANNEL_INDEX[channel];
}
function supportLegend(channel) {
  switch (channel) {
    case COLOR:
    case FILL:
    case STROKE:
    case SIZE2:
    case SHAPE:
    case OPACITY:
    case STROKEWIDTH:
    case STROKEDASH:
      return true;
    case FILLOPACITY:
    case STROKEOPACITY:
    case ANGLE:
      return false;
  }
}
var SCALE_CHANNEL_INDEX = Object.assign(Object.assign(Object.assign(Object.assign({}, POSITION_SCALE_CHANNEL_INDEX), POLAR_POSITION_SCALE_CHANNEL_INDEX), OFFSET_SCALE_CHANNEL_INDEX), NONPOSITION_SCALE_CHANNEL_INDEX);
var SCALE_CHANNELS = keys3(SCALE_CHANNEL_INDEX);
function isScaleChannel(channel) {
  return !!SCALE_CHANNEL_INDEX[channel];
}
function supportMark(channel, mark2) {
  return getSupportedMark(channel)[mark2];
}
var ALL_MARKS = {
  arc: "always",
  area: "always",
  bar: "always",
  circle: "always",
  geoshape: "always",
  image: "always",
  line: "always",
  rule: "always",
  point: "always",
  rect: "always",
  square: "always",
  trail: "always",
  text: "always",
  tick: "always"
};
var { geoshape: _g } = ALL_MARKS;
var ALL_MARKS_EXCEPT_GEOSHAPE = __rest(ALL_MARKS, ["geoshape"]);
function getSupportedMark(channel) {
  switch (channel) {
    case COLOR:
    case FILL:
    case STROKE:
    case DESCRIPTION:
    case DETAIL:
    case KEY:
    case TOOLTIP:
    case HREF:
    case ORDER:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case STROKEWIDTH:
    case FACET:
    case ROW:
    case COLUMN:
      return ALL_MARKS;
    case X3:
    case Y3:
    case XOFFSET:
    case YOFFSET:
    case LATITUDE:
    case LONGITUDE:
      return ALL_MARKS_EXCEPT_GEOSHAPE;
    case X23:
    case Y23:
    case LATITUDE2:
    case LONGITUDE2:
      return {
        area: "always",
        bar: "always",
        image: "always",
        rect: "always",
        rule: "always",
        circle: "binned",
        point: "binned",
        square: "binned",
        tick: "binned",
        line: "binned",
        trail: "binned"
      };
    case SIZE2:
      return {
        point: "always",
        tick: "always",
        rule: "always",
        circle: "always",
        square: "always",
        bar: "always",
        text: "always",
        line: "always",
        trail: "always"
      };
    case STROKEDASH:
      return {
        line: "always",
        point: "always",
        tick: "always",
        rule: "always",
        circle: "always",
        square: "always",
        bar: "always",
        geoshape: "always"
      };
    case SHAPE:
      return { point: "always", geoshape: "always" };
    case TEXT:
      return { text: "always" };
    case ANGLE:
      return { point: "always", square: "always", text: "always" };
    case URL2:
      return { image: "always" };
    case THETA:
      return { text: "always", arc: "always" };
    case RADIUS:
      return { text: "always", arc: "always" };
    case THETA2:
    case RADIUS2:
      return { arc: "always" };
  }
}
function rangeType(channel) {
  switch (channel) {
    case X3:
    case Y3:
    case THETA:
    case RADIUS:
    case XOFFSET:
    case YOFFSET:
    case SIZE2:
    case ANGLE:
    case STROKEWIDTH:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case X23:
    case Y23:
    case THETA2:
    case RADIUS2:
      return void 0;
    case FACET:
    case ROW:
    case COLUMN:
    case SHAPE:
    case STROKEDASH:
    case TEXT:
    case TOOLTIP:
    case HREF:
    case URL2:
    case DESCRIPTION:
      return "discrete";
    case COLOR:
    case FILL:
    case STROKE:
      return "flexible";
    case LATITUDE:
    case LONGITUDE:
    case LATITUDE2:
    case LONGITUDE2:
    case DETAIL:
    case KEY:
    case ORDER:
      return void 0;
  }
}

// node_modules/vega-lite/build/src/aggregate.js
var AGGREGATE_OP_INDEX = {
  argmax: 1,
  argmin: 1,
  average: 1,
  count: 1,
  distinct: 1,
  product: 1,
  max: 1,
  mean: 1,
  median: 1,
  min: 1,
  missing: 1,
  q1: 1,
  q3: 1,
  ci0: 1,
  ci1: 1,
  stderr: 1,
  stdev: 1,
  stdevp: 1,
  sum: 1,
  valid: 1,
  values: 1,
  variance: 1,
  variancep: 1
};
var MULTIDOMAIN_SORT_OP_INDEX = {
  count: 1,
  min: 1,
  max: 1
};
function isArgminDef(a4) {
  return !!a4 && !!a4["argmin"];
}
function isArgmaxDef(a4) {
  return !!a4 && !!a4["argmax"];
}
function isAggregateOp(a4) {
  return isString(a4) && !!AGGREGATE_OP_INDEX[a4];
}
var COUNTING_OPS = /* @__PURE__ */ new Set([
  "count",
  "valid",
  "missing",
  "distinct"
]);
function isCountingAggregateOp(aggregate) {
  return isString(aggregate) && COUNTING_OPS.has(aggregate);
}
function isMinMaxOp(aggregate) {
  return isString(aggregate) && contains2(["min", "max"], aggregate);
}
var SUM_OPS = /* @__PURE__ */ new Set([
  "count",
  "sum",
  "distinct",
  "valid",
  "missing"
]);
var SHARED_DOMAIN_OPS = /* @__PURE__ */ new Set([
  "mean",
  "average",
  "median",
  "q1",
  "q3",
  "min",
  "max"
]);

// node_modules/vega-lite/build/src/bin.js
function binToString(bin5) {
  if (isBoolean(bin5)) {
    bin5 = normalizeBin(bin5, void 0);
  }
  return "bin" + keys3(bin5).map((p) => isParameterExtent(bin5[p]) ? varName(`_${p}_${entries(bin5[p])}`) : varName(`_${p}_${bin5[p]}`)).join("");
}
function isBinning(bin5) {
  return bin5 === true || isBinParams(bin5) && !bin5.binned;
}
function isBinned(bin5) {
  return bin5 === "binned" || isBinParams(bin5) && bin5.binned === true;
}
function isBinParams(bin5) {
  return isObject(bin5);
}
function isParameterExtent(extent4) {
  return extent4 === null || extent4 === void 0 ? void 0 : extent4["param"];
}
function autoMaxBins(channel) {
  switch (channel) {
    case ROW:
    case COLUMN:
    case SIZE2:
    case COLOR:
    case FILL:
    case STROKE:
    case STROKEWIDTH:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case SHAPE:
      return 6;
    case STROKEDASH:
      return 4;
    default:
      return 10;
  }
}

// node_modules/vega-lite/build/src/expr.js
function isExprRef(o) {
  return !!(o === null || o === void 0 ? void 0 : o.expr);
}
function replaceExprRef(index5) {
  const props = keys3(index5 || {});
  const newIndex = {};
  for (const prop of props) {
    newIndex[prop] = signalRefOrValue(index5[prop]);
  }
  return newIndex;
}

// node_modules/vega-lite/build/src/title.js
var __rest2 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function extractTitleConfig(titleConfig) {
  const {
    anchor,
    frame: frame2,
    offset: offset4,
    orient: orient2,
    angle: angle2,
    limit,
    color: color5,
    subtitleColor,
    subtitleFont,
    subtitleFontSize,
    subtitleFontStyle,
    subtitleFontWeight,
    subtitleLineHeight,
    subtitlePadding
  } = titleConfig, rest = __rest2(titleConfig, ["anchor", "frame", "offset", "orient", "angle", "limit", "color", "subtitleColor", "subtitleFont", "subtitleFontSize", "subtitleFontStyle", "subtitleFontWeight", "subtitleLineHeight", "subtitlePadding"]);
  const titleMarkConfig = Object.assign(Object.assign({}, rest), color5 ? { fill: color5 } : {});
  const nonMarkTitleProperties = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, anchor ? { anchor } : {}), frame2 ? { frame: frame2 } : {}), offset4 ? { offset: offset4 } : {}), orient2 ? { orient: orient2 } : {}), angle2 !== void 0 ? { angle: angle2 } : {}), limit !== void 0 ? { limit } : {});
  const subtitle = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, subtitleColor ? { subtitleColor } : {}), subtitleFont ? { subtitleFont } : {}), subtitleFontSize ? { subtitleFontSize } : {}), subtitleFontStyle ? { subtitleFontStyle } : {}), subtitleFontWeight ? { subtitleFontWeight } : {}), subtitleLineHeight ? { subtitleLineHeight } : {}), subtitlePadding ? { subtitlePadding } : {});
  const subtitleMarkConfig = pick2(titleConfig, ["align", "baseline", "dx", "dy", "limit"]);
  return { titleMarkConfig, subtitleMarkConfig, nonMarkTitleProperties, subtitle };
}
function isText(v2) {
  return isString(v2) || isArray(v2) && isString(v2[0]);
}

// node_modules/vega-lite/build/src/vega.schema.js
function isSignalRef(o) {
  return !!(o === null || o === void 0 ? void 0 : o.signal);
}
function isVgRangeStep(range8) {
  return !!range8["step"];
}
function isDataRefUnionedDomain(domain4) {
  if (!isArray(domain4)) {
    return "fields" in domain4 && !("data" in domain4);
  }
  return false;
}
function isFieldRefUnionDomain(domain4) {
  if (!isArray(domain4)) {
    return "fields" in domain4 && "data" in domain4;
  }
  return false;
}
function isDataRefDomain(domain4) {
  if (!isArray(domain4)) {
    return "field" in domain4 && "data" in domain4;
  }
  return false;
}
var VG_MARK_CONFIG_INDEX = {
  aria: 1,
  description: 1,
  ariaRole: 1,
  ariaRoleDescription: 1,
  blend: 1,
  opacity: 1,
  fill: 1,
  fillOpacity: 1,
  stroke: 1,
  strokeCap: 1,
  strokeWidth: 1,
  strokeOpacity: 1,
  strokeDash: 1,
  strokeDashOffset: 1,
  strokeJoin: 1,
  strokeOffset: 1,
  strokeMiterLimit: 1,
  startAngle: 1,
  endAngle: 1,
  padAngle: 1,
  innerRadius: 1,
  outerRadius: 1,
  size: 1,
  shape: 1,
  interpolate: 1,
  tension: 1,
  orient: 1,
  align: 1,
  baseline: 1,
  text: 1,
  dir: 1,
  dx: 1,
  dy: 1,
  ellipsis: 1,
  limit: 1,
  radius: 1,
  theta: 1,
  angle: 1,
  font: 1,
  fontSize: 1,
  fontWeight: 1,
  fontStyle: 1,
  lineBreak: 1,
  lineHeight: 1,
  cursor: 1,
  href: 1,
  tooltip: 1,
  cornerRadius: 1,
  cornerRadiusTopLeft: 1,
  cornerRadiusTopRight: 1,
  cornerRadiusBottomLeft: 1,
  cornerRadiusBottomRight: 1,
  aspect: 1,
  width: 1,
  height: 1,
  url: 1,
  smooth: 1
};
var VG_MARK_CONFIGS = keys3(VG_MARK_CONFIG_INDEX);
var VG_MARK_INDEX = {
  arc: 1,
  area: 1,
  group: 1,
  image: 1,
  line: 1,
  path: 1,
  rect: 1,
  rule: 1,
  shape: 1,
  symbol: 1,
  text: 1,
  trail: 1
};
var VG_CORNERRADIUS_CHANNELS = [
  "cornerRadius",
  "cornerRadiusTopLeft",
  "cornerRadiusTopRight",
  "cornerRadiusBottomLeft",
  "cornerRadiusBottomRight"
];

// node_modules/vega-lite/build/src/compile/common.js
var __rest3 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function signalOrValueRefWithCondition(val) {
  const condition = isArray(val.condition) ? val.condition.map(conditionalSignalRefOrValue) : conditionalSignalRefOrValue(val.condition);
  return Object.assign(Object.assign({}, signalRefOrValue(val)), { condition });
}
function signalRefOrValue(value3) {
  if (isExprRef(value3)) {
    const { expr: expr2 } = value3, rest = __rest3(value3, ["expr"]);
    return Object.assign({ signal: expr2 }, rest);
  }
  return value3;
}
function conditionalSignalRefOrValue(value3) {
  if (isExprRef(value3)) {
    const { expr: expr2 } = value3, rest = __rest3(value3, ["expr"]);
    return Object.assign({ signal: expr2 }, rest);
  }
  return value3;
}
function signalOrValueRef(value3) {
  if (isExprRef(value3)) {
    const { expr: expr2 } = value3, rest = __rest3(value3, ["expr"]);
    return Object.assign({ signal: expr2 }, rest);
  }
  if (isSignalRef(value3)) {
    return value3;
  }
  return value3 !== void 0 ? { value: value3 } : void 0;
}
function exprFromSignalRefOrValue(ref2) {
  if (isSignalRef(ref2)) {
    return ref2.signal;
  }
  return $(ref2);
}
function exprFromValueRefOrSignalRef(ref2) {
  if (isSignalRef(ref2)) {
    return ref2.signal;
  }
  return $(ref2.value);
}
function signalOrStringValue(v2) {
  if (isSignalRef(v2)) {
    return v2.signal;
  }
  return v2 == null ? null : $(v2);
}
function applyMarkConfig(e3, model, propsList) {
  for (const property2 of propsList) {
    const value3 = getMarkConfig(property2, model.markDef, model.config);
    if (value3 !== void 0) {
      e3[property2] = signalOrValueRef(value3);
    }
  }
  return e3;
}
function getStyles(mark2) {
  var _a;
  return [].concat(mark2.type, (_a = mark2.style) !== null && _a !== void 0 ? _a : []);
}
function getMarkPropOrConfig(channel, mark2, config, opt = {}) {
  const { vgChannel, ignoreVgConfig } = opt;
  if (vgChannel && mark2[vgChannel] !== void 0) {
    return mark2[vgChannel];
  } else if (mark2[channel] !== void 0) {
    return mark2[channel];
  } else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) {
    return void 0;
  }
  return getMarkConfig(channel, mark2, config, opt);
}
function getMarkConfig(channel, mark2, config, { vgChannel } = {}) {
  return getFirstDefined(
    vgChannel ? getMarkStyleConfig(channel, mark2, config.style) : void 0,
    getMarkStyleConfig(channel, mark2, config.style),
    vgChannel ? config[mark2.type][vgChannel] : void 0,
    config[mark2.type][channel],
    vgChannel ? config.mark[vgChannel] : config.mark[channel]
  );
}
function getMarkStyleConfig(prop, mark2, styleConfigIndex) {
  return getStyleConfig(prop, getStyles(mark2), styleConfigIndex);
}
function getStyleConfig(p, styles, styleConfigIndex) {
  styles = array(styles);
  let value3;
  for (const style2 of styles) {
    const styleConfig = styleConfigIndex[style2];
    if (styleConfig && styleConfig[p] !== void 0) {
      value3 = styleConfig[p];
    }
  }
  return value3;
}
function sortParams(orderDef, fieldRefOption) {
  return array(orderDef).reduce((s2, orderChannelDef) => {
    var _a;
    s2.field.push(vgField(orderChannelDef, fieldRefOption));
    s2.order.push((_a = orderChannelDef.sort) !== null && _a !== void 0 ? _a : "ascending");
    return s2;
  }, { field: [], order: [] });
}
function mergeTitleFieldDefs(f1, f2) {
  const merged = [...f1];
  f2.forEach((fdToMerge) => {
    for (const fieldDef1 of merged) {
      if (deepEqual(fieldDef1, fdToMerge)) {
        return;
      }
    }
    merged.push(fdToMerge);
  });
  return merged;
}
function mergeTitle(title1, title2) {
  if (deepEqual(title1, title2) || !title2) {
    return title1;
  } else if (!title1) {
    return title2;
  } else {
    return [...array(title1), ...array(title2)].join(", ");
  }
}
function mergeTitleComponent(v1, v2) {
  const v1Val = v1.value;
  const v2Val = v2.value;
  if (v1Val == null || v2Val === null) {
    return {
      explicit: v1.explicit,
      value: null
    };
  } else if ((isText(v1Val) || isSignalRef(v1Val)) && (isText(v2Val) || isSignalRef(v2Val))) {
    return {
      explicit: v1.explicit,
      value: mergeTitle(v1Val, v2Val)
    };
  } else if (isText(v1Val) || isSignalRef(v1Val)) {
    return {
      explicit: v1.explicit,
      value: v1Val
    };
  } else if (isText(v2Val) || isSignalRef(v2Val)) {
    return {
      explicit: v1.explicit,
      value: v2Val
    };
  } else if (!isText(v1Val) && !isSignalRef(v1Val) && !isText(v2Val) && !isSignalRef(v2Val)) {
    return {
      explicit: v1.explicit,
      value: mergeTitleFieldDefs(v1Val, v2Val)
    };
  }
  throw new Error("It should never reach here");
}

// node_modules/vega-lite/build/src/log/message.js
var message_exports = {};
__export(message_exports, {
  ADD_SAME_CHILD_TWICE: () => ADD_SAME_CHILD_TWICE,
  CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN: () => CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN,
  CONCAT_CANNOT_SHARE_AXIS: () => CONCAT_CANNOT_SHARE_AXIS,
  FACETED_INDEPENDENT_DIFFERENT_SOURCES: () => FACETED_INDEPENDENT_DIFFERENT_SOURCES,
  FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES: () => FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES,
  FACETED_INDEPENDENT_SAME_SOURCE: () => FACETED_INDEPENDENT_SAME_SOURCE,
  FIT_NON_SINGLE: () => FIT_NON_SINGLE,
  INTERVAL_INITIALIZED_WITH_X_Y: () => INTERVAL_INITIALIZED_WITH_X_Y,
  INVALID_CHANNEL_FOR_AXIS: () => INVALID_CHANNEL_FOR_AXIS,
  LEGEND_BINDINGS_MUST_HAVE_PROJECTION: () => LEGEND_BINDINGS_MUST_HAVE_PROJECTION,
  LINE_WITH_VARYING_SIZE: () => LINE_WITH_VARYING_SIZE,
  MORE_THAN_ONE_SORT: () => MORE_THAN_ONE_SORT,
  NEEDS_SAME_SELECTION: () => NEEDS_SAME_SELECTION,
  NO_FIELDS_NEEDS_AS: () => NO_FIELDS_NEEDS_AS,
  REPLACE_ANGLE_WITH_THETA: () => REPLACE_ANGLE_WITH_THETA,
  SCALE_BINDINGS_CONTINUOUS: () => SCALE_BINDINGS_CONTINUOUS,
  cannotApplySizeToNonOrientedMark: () => cannotApplySizeToNonOrientedMark,
  cannotLookupVariableParameter: () => cannotLookupVariableParameter,
  cannotProjectAggregate: () => cannotProjectAggregate,
  cannotProjectOnChannelWithoutField: () => cannotProjectOnChannelWithoutField,
  cannotStackNonLinearScale: () => cannotStackNonLinearScale,
  cannotStackRangedMark: () => cannotStackRangedMark,
  cannotUseRelativeBandSizeWithNonBandScale: () => cannotUseRelativeBandSizeWithNonBandScale,
  cannotUseScalePropertyWithNonColor: () => cannotUseScalePropertyWithNonColor,
  channelRequiredForBinned: () => channelRequiredForBinned,
  channelShouldBeDiscrete: () => channelShouldBeDiscrete,
  channelShouldBeDiscreteOrDiscretizing: () => channelShouldBeDiscreteOrDiscretizing,
  channelShouldNotBeUsedForBinned: () => channelShouldNotBeUsedForBinned,
  columnsNotSupportByRowCol: () => columnsNotSupportByRowCol,
  containerSizeNonSingle: () => containerSizeNonSingle,
  containerSizeNotCompatibleWithAutosize: () => containerSizeNotCompatibleWithAutosize,
  customFormatTypeNotAllowed: () => customFormatTypeNotAllowed,
  differentParse: () => differentParse,
  discreteChannelCannotEncode: () => discreteChannelCannotEncode,
  domainRequiredForThresholdScale: () => domainRequiredForThresholdScale,
  domainSortDropped: () => domainSortDropped,
  droppedDay: () => droppedDay,
  droppingColor: () => droppingColor,
  droppingFit: () => droppingFit,
  emptyFieldDef: () => emptyFieldDef,
  errorBand1DNotSupport: () => errorBand1DNotSupport,
  errorBarCenterAndExtentAreNotNeeded: () => errorBarCenterAndExtentAreNotNeeded,
  errorBarCenterIsUsedWithWrongExtent: () => errorBarCenterIsUsedWithWrongExtent,
  errorBarContinuousAxisHasCustomizedAggregate: () => errorBarContinuousAxisHasCustomizedAggregate,
  facetChannelDropped: () => facetChannelDropped,
  incompatibleChannel: () => incompatibleChannel,
  independentScaleMeansIndependentGuide: () => independentScaleMeansIndependentGuide,
  invalidAggregate: () => invalidAggregate,
  invalidEncodingChannel: () => invalidEncodingChannel,
  invalidFieldType: () => invalidFieldType,
  invalidFieldTypeForCountAggregate: () => invalidFieldTypeForCountAggregate,
  invalidSpec: () => invalidSpec,
  invalidTimeUnit: () => invalidTimeUnit,
  invalidTransformIgnored: () => invalidTransformIgnored,
  lineWithRange: () => lineWithRange,
  mergeConflictingDomainProperty: () => mergeConflictingDomainProperty,
  mergeConflictingProperty: () => mergeConflictingProperty,
  missingFieldType: () => missingFieldType,
  nearestNotSupportForContinuous: () => nearestNotSupportForContinuous,
  noSameUnitLookup: () => noSameUnitLookup,
  noSuchRepeatedValue: () => noSuchRepeatedValue,
  offsetEncodingScaleIgnored: () => offsetEncodingScaleIgnored,
  offsetNestedInsideContinuousPositionScaleDropped: () => offsetNestedInsideContinuousPositionScaleDropped,
  orientOverridden: () => orientOverridden,
  primitiveChannelDef: () => primitiveChannelDef,
  projectionOverridden: () => projectionOverridden,
  rangeMarkAlignmentCannotBeExpression: () => rangeMarkAlignmentCannotBeExpression,
  relativeBandSizeNotSupported: () => relativeBandSizeNotSupported,
  replaceOffsetWithMainChannel: () => replaceOffsetWithMainChannel,
  scalePropertyNotWorkWithScaleType: () => scalePropertyNotWorkWithScaleType,
  scaleTypeNotWorkWithChannel: () => scaleTypeNotWorkWithChannel,
  scaleTypeNotWorkWithFieldDef: () => scaleTypeNotWorkWithFieldDef,
  scaleTypeNotWorkWithMark: () => scaleTypeNotWorkWithMark,
  selectionNotFound: () => selectionNotFound,
  selectionNotSupported: () => selectionNotSupported,
  stackNonSummativeAggregate: () => stackNonSummativeAggregate,
  stepDropped: () => stepDropped,
  unaggregateDomainHasNoEffectForRawField: () => unaggregateDomainHasNoEffectForRawField,
  unaggregateDomainWithNonSharedDomainOp: () => unaggregateDomainWithNonSharedDomainOp,
  unaggregatedDomainWithLogScale: () => unaggregatedDomainWithLogScale,
  unknownField: () => unknownField,
  unrecognizedParse: () => unrecognizedParse
});
function invalidSpec(spec) {
  return `Invalid specification ${stringify(spec)}. Make sure the specification includes at least one of the following properties: "mark", "layer", "facet", "hconcat", "vconcat", "concat", or "repeat".`;
}
var FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
function containerSizeNonSingle(name4) {
  const uName = name4 == "width" ? "Width" : "Height";
  return `${uName} "container" only works for single views and layered views.`;
}
function containerSizeNotCompatibleWithAutosize(name4) {
  const uName = name4 == "width" ? "Width" : "Height";
  const fitDirection = name4 == "width" ? "x" : "y";
  return `${uName} "container" only works well with autosize "fit" or "fit-${fitDirection}".`;
}
function droppingFit(channel) {
  return channel ? `Dropping "fit-${channel}" because spec has discrete ${getSizeChannel(channel)}.` : `Dropping "fit" because spec has discrete size.`;
}
function unknownField(channel) {
  return `Unknown field for ${channel}. Cannot calculate view size.`;
}
function cannotProjectOnChannelWithoutField(channel) {
  return `Cannot project a selection on encoding channel "${channel}", which has no field.`;
}
function cannotProjectAggregate(channel, aggregate) {
  return `Cannot project a selection on encoding channel "${channel}" as it uses an aggregate function ("${aggregate}").`;
}
function nearestNotSupportForContinuous(mark2) {
  return `The "nearest" transform is not supported for ${mark2} marks.`;
}
function selectionNotSupported(mark2) {
  return `Selection not supported for ${mark2} yet.`;
}
function selectionNotFound(name4) {
  return `Cannot find a selection named "${name4}".`;
}
var SCALE_BINDINGS_CONTINUOUS = "Scale bindings are currently only supported for scales with unbinned, continuous domains.";
var LEGEND_BINDINGS_MUST_HAVE_PROJECTION = "Legend bindings are only supported for selections over an individual field or encoding channel.";
function cannotLookupVariableParameter(name4) {
  return `Lookups can only be performed on selection parameters. "${name4}" is a variable parameter.`;
}
function noSameUnitLookup(name4) {
  return `Cannot define and lookup the "${name4}" selection in the same view. Try moving the lookup into a second, layered view?`;
}
var NEEDS_SAME_SELECTION = "The same selection must be used to override scale domains in a layered view.";
var INTERVAL_INITIALIZED_WITH_X_Y = 'Interval selections should be initialized using "x" and/or "y" keys.';
function noSuchRepeatedValue(field3) {
  return `Unknown repeated value "${field3}".`;
}
function columnsNotSupportByRowCol(type3) {
  return `The "columns" property cannot be used when "${type3}" has nested row/column.`;
}
var CONCAT_CANNOT_SHARE_AXIS = "Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).";
function unrecognizedParse(p) {
  return `Unrecognized parse "${p}".`;
}
function differentParse(field3, local, ancestor) {
  return `An ancestor parsed field "${field3}" as ${ancestor} but a child wants to parse the field as ${local}.`;
}
var ADD_SAME_CHILD_TWICE = "Attempt to add the same child twice.";
function invalidTransformIgnored(transform4) {
  return `Ignoring an invalid transform: ${stringify(transform4)}.`;
}
var NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.';
function customFormatTypeNotAllowed(channel) {
  return `Config.customFormatTypes is not true, thus custom format type and format for channel ${channel} are dropped.`;
}
function projectionOverridden(opt) {
  const { parentProjection, projection: projection3 } = opt;
  return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(projection3)}.`;
}
var REPLACE_ANGLE_WITH_THETA = "Arc marks uses theta channel rather than angle, replacing angle with theta.";
function offsetNestedInsideContinuousPositionScaleDropped(mainChannel) {
  return `${mainChannel}Offset dropped because ${mainChannel} is continuous`;
}
function replaceOffsetWithMainChannel(mainChannel) {
  return `There is no ${mainChannel} encoding. Replacing ${mainChannel}Offset encoding as ${mainChannel}.`;
}
function primitiveChannelDef(channel, type3, value3) {
  return `Channel ${channel} is a ${type3}. Converted to {value: ${stringify(value3)}}.`;
}
function invalidFieldType(type3) {
  return `Invalid field type "${type3}".`;
}
function invalidFieldTypeForCountAggregate(type3, aggregate) {
  return `Invalid field type "${type3}" for aggregate: "${aggregate}", using "quantitative" instead.`;
}
function invalidAggregate(aggregate) {
  return `Invalid aggregation operator "${aggregate}".`;
}
function missingFieldType(channel, newType) {
  return `Missing type for channel "${channel}", using "${newType}" instead.`;
}
function droppingColor(type3, opt) {
  const { fill: fill2, stroke: stroke2 } = opt;
  return `Dropping color ${type3} as the plot also has ${fill2 && stroke2 ? "fill and stroke" : fill2 ? "fill" : "stroke"}.`;
}
function relativeBandSizeNotSupported(sizeChannel) {
  return `Position range does not support relative band size for ${sizeChannel}.`;
}
function emptyFieldDef(fieldDef, channel) {
  return `Dropping ${stringify(fieldDef)} from channel "${channel}" since it does not contain any data field, datum, value, or signal.`;
}
var LINE_WITH_VARYING_SIZE = "Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.";
function incompatibleChannel(channel, markOrFacet, when) {
  return `${channel} dropped as it is incompatible with "${markOrFacet}"${when ? ` when ${when}` : ""}.`;
}
function offsetEncodingScaleIgnored(channel) {
  return `${channel} encoding has no scale, so specified scale is ignored.`;
}
function invalidEncodingChannel(channel) {
  return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;
}
function channelShouldBeDiscrete(channel) {
  return `${channel} encoding should be discrete (ordinal / nominal / binned).`;
}
function channelShouldBeDiscreteOrDiscretizing(channel) {
  return `${channel} encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).`;
}
function facetChannelDropped(channels) {
  return `Facet encoding dropped as ${channels.join(" and ")} ${channels.length > 1 ? "are" : "is"} also specified.`;
}
function discreteChannelCannotEncode(channel, type3) {
  return `Using discrete channel "${channel}" to encode "${type3}" field can be misleading as it does not encode ${type3 === "ordinal" ? "order" : "magnitude"}.`;
}
function rangeMarkAlignmentCannotBeExpression(align2) {
  return `The ${align2} for range marks cannot be an expression`;
}
function lineWithRange(hasX2, hasY2) {
  const channels = hasX2 && hasY2 ? "x2 and y2" : hasX2 ? "x2" : "y2";
  return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;
}
function orientOverridden(original, actual) {
  return `Specified orient "${original}" overridden with "${actual}".`;
}
var CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = "Custom domain scale cannot be unioned with default field-based domain.";
function cannotUseScalePropertyWithNonColor(prop) {
  return `Cannot use the scale property "${prop}" with non-color channel.`;
}
function cannotUseRelativeBandSizeWithNonBandScale(scaleType2) {
  return `Cannot use the relative band size with ${scaleType2} scale.`;
}
function unaggregateDomainHasNoEffectForRawField(fieldDef) {
  return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;
}
function unaggregateDomainWithNonSharedDomainOp(aggregate) {
  return `Unaggregated domain not applicable for "${aggregate}" since it produces values outside the origin domain of the source data.`;
}
function unaggregatedDomainWithLogScale(fieldDef) {
  return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;
}
function cannotApplySizeToNonOrientedMark(mark2) {
  return `Cannot apply size to non-oriented mark "${mark2}".`;
}
function scaleTypeNotWorkWithChannel(channel, scaleType2, defaultScaleType) {
  return `Channel "${channel}" does not work with "${scaleType2}" scale. We are using "${defaultScaleType}" scale instead.`;
}
function scaleTypeNotWorkWithFieldDef(scaleType2, defaultScaleType) {
  return `FieldDef does not work with "${scaleType2}" scale. We are using "${defaultScaleType}" scale instead.`;
}
function scalePropertyNotWorkWithScaleType(scaleType2, propName, channel) {
  return `${channel}-scale's "${propName}" is dropped as it does not work with ${scaleType2} scale.`;
}
function scaleTypeNotWorkWithMark(mark2, scaleType2) {
  return `Scale type "${scaleType2}" does not work with mark "${mark2}".`;
}
function stepDropped(channel) {
  return `The step for "${channel}" is dropped because the ${channel === "width" ? "x" : "y"} is continuous.`;
}
function mergeConflictingProperty(property2, propertyOf, v1, v2) {
  return `Conflicting ${propertyOf.toString()} property "${property2.toString()}" (${stringify(v1)} and ${stringify(v2)}). Using ${stringify(v1)}.`;
}
function mergeConflictingDomainProperty(property2, propertyOf, v1, v2) {
  return `Conflicting ${propertyOf.toString()} property "${property2.toString()}" (${stringify(v1)} and ${stringify(v2)}). Using the union of the two domains.`;
}
function independentScaleMeansIndependentGuide(channel) {
  return `Setting the scale to be independent for "${channel}" means we also have to set the guide (axis or legend) to be independent.`;
}
function domainSortDropped(sort4) {
  return `Dropping sort property ${stringify(sort4)} as unioned domains only support boolean or op "count", "min", and "max".`;
}
var MORE_THAN_ONE_SORT = "Domains that should be unioned has conflicting sort properties. Sort will be set to true.";
var FACETED_INDEPENDENT_DIFFERENT_SOURCES = "Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.";
var FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = "Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.";
var FACETED_INDEPENDENT_SAME_SOURCE = "Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.";
var INVALID_CHANNEL_FOR_AXIS = "Invalid channel for axis.";
function cannotStackRangedMark(channel) {
  return `Cannot stack "${channel}" if there is already "${channel}2".`;
}
function cannotStackNonLinearScale(scaleType2) {
  return `Cannot stack non-linear scale (${scaleType2}).`;
}
function stackNonSummativeAggregate(aggregate) {
  return `Stacking is applied even though the aggregate function is non-summative ("${aggregate}").`;
}
function invalidTimeUnit(unitName2, value3) {
  return `Invalid ${unitName2}: ${stringify(value3)}.`;
}
function droppedDay(d) {
  return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;
}
function errorBarCenterAndExtentAreNotNeeded(center, extent4) {
  return `${extent4 ? "extent " : ""}${extent4 && center ? "and " : ""}${center ? "center " : ""}${extent4 && center ? "are " : "is "}not needed when data are aggregated.`;
}
function errorBarCenterIsUsedWithWrongExtent(center, extent4, mark2) {
  return `${center} is not usually used with ${extent4} for ${mark2}.`;
}
function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {
  return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;
}
function errorBand1DNotSupport(property2) {
  return `1D error band does not support ${property2}.`;
}
function channelRequiredForBinned(channel) {
  return `Channel ${channel} is required for "binned" bin.`;
}
function channelShouldNotBeUsedForBinned(channel) {
  return `Channel ${channel} should not be used with "binned" bin.`;
}
function domainRequiredForThresholdScale(channel) {
  return `Domain for ${channel} is required for threshold scale.`;
}

// node_modules/vega-lite/build/src/log/index.js
var _LocalLogger_level;
var main = logger(Warn);
var current = main;
_LocalLogger_level = /* @__PURE__ */ new WeakMap();
function set6(newLogger) {
  current = newLogger;
  return current;
}
function reset2() {
  current = main;
  return current;
}
function warn2(...args) {
  current.warn(...args);
}
function debug2(...args) {
  current.debug(...args);
}

// node_modules/vega-lite/build/src/datetime.js
function isDateTime(o) {
  if (o && isObject(o)) {
    for (const part of TIMEUNIT_PARTS) {
      if (part in o) {
        return true;
      }
    }
  }
  return false;
}
var MONTHS = [
  "january",
  "february",
  "march",
  "april",
  "may",
  "june",
  "july",
  "august",
  "september",
  "october",
  "november",
  "december"
];
var SHORT_MONTHS = MONTHS.map((m3) => m3.substr(0, 3));
var DAYS = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
var SHORT_DAYS = DAYS.map((d) => d.substr(0, 3));
function normalizeQuarter(q) {
  if (isNumeric(q)) {
    q = +q;
  }
  if (isNumber(q)) {
    if (q > 4) {
      warn2(message_exports.invalidTimeUnit("quarter", q));
    }
    return q - 1;
  } else {
    throw new Error(message_exports.invalidTimeUnit("quarter", q));
  }
}
function normalizeMonth(m3) {
  if (isNumeric(m3)) {
    m3 = +m3;
  }
  if (isNumber(m3)) {
    return m3 - 1;
  } else {
    const lowerM = m3.toLowerCase();
    const monthIndex = MONTHS.indexOf(lowerM);
    if (monthIndex !== -1) {
      return monthIndex;
    }
    const shortM = lowerM.substr(0, 3);
    const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);
    if (shortMonthIndex !== -1) {
      return shortMonthIndex;
    }
    throw new Error(message_exports.invalidTimeUnit("month", m3));
  }
}
function normalizeDay(d) {
  if (isNumeric(d)) {
    d = +d;
  }
  if (isNumber(d)) {
    return d % 7;
  } else {
    const lowerD = d.toLowerCase();
    const dayIndex = DAYS.indexOf(lowerD);
    if (dayIndex !== -1) {
      return dayIndex;
    }
    const shortD = lowerD.substr(0, 3);
    const shortDayIndex = SHORT_DAYS.indexOf(shortD);
    if (shortDayIndex !== -1) {
      return shortDayIndex;
    }
    throw new Error(message_exports.invalidTimeUnit("day", d));
  }
}
function dateTimeParts(d, normalize4) {
  const parts = [];
  if (normalize4 && d.day !== void 0) {
    if (keys3(d).length > 1) {
      warn2(message_exports.droppedDay(d));
      d = duplicate(d);
      delete d.day;
    }
  }
  if (d.year !== void 0) {
    parts.push(d.year);
  } else {
    parts.push(2012);
  }
  if (d.month !== void 0) {
    const month2 = normalize4 ? normalizeMonth(d.month) : d.month;
    parts.push(month2);
  } else if (d.quarter !== void 0) {
    const quarter2 = normalize4 ? normalizeQuarter(d.quarter) : d.quarter;
    parts.push(isNumber(quarter2) ? quarter2 * 3 : `${quarter2}*3`);
  } else {
    parts.push(0);
  }
  if (d.date !== void 0) {
    parts.push(d.date);
  } else if (d.day !== void 0) {
    const day2 = normalize4 ? normalizeDay(d.day) : d.day;
    parts.push(isNumber(day2) ? day2 + 1 : `${day2}+1`);
  } else {
    parts.push(1);
  }
  for (const timeUnit of ["hours", "minutes", "seconds", "milliseconds"]) {
    const unit2 = d[timeUnit];
    parts.push(typeof unit2 === "undefined" ? 0 : unit2);
  }
  return parts;
}
function dateTimeToExpr(d) {
  const parts = dateTimeParts(d, true);
  const string = parts.join(", ");
  if (d.utc) {
    return `utc(${string})`;
  } else {
    return `datetime(${string})`;
  }
}
function dateTimeExprToExpr(d) {
  const parts = dateTimeParts(d, false);
  const string = parts.join(", ");
  if (d.utc) {
    return `utc(${string})`;
  } else {
    return `datetime(${string})`;
  }
}
function dateTimeToTimestamp(d) {
  const parts = dateTimeParts(d, true);
  if (d.utc) {
    return +new Date(Date.UTC(...parts));
  } else {
    return +new Date(...parts);
  }
}

// node_modules/vega-lite/build/src/timeunit.js
var __rest4 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var LOCAL_SINGLE_TIMEUNIT_INDEX = {
  year: 1,
  quarter: 1,
  month: 1,
  week: 1,
  day: 1,
  dayofyear: 1,
  date: 1,
  hours: 1,
  minutes: 1,
  seconds: 1,
  milliseconds: 1
};
var TIMEUNIT_PARTS = keys3(LOCAL_SINGLE_TIMEUNIT_INDEX);
function isLocalSingleTimeUnit(timeUnit) {
  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
}
function isUTCTimeUnit(t4) {
  return t4.startsWith("utc");
}
function getLocalTimeUnit(t4) {
  return t4.substr(3);
}
var VEGALITE_TIMEFORMAT = {
  "year-month": "%b %Y ",
  "year-month-date": "%b %d, %Y "
};
function getTimeUnitParts(timeUnit) {
  return TIMEUNIT_PARTS.filter((part) => containsTimeUnit(timeUnit, part));
}
function containsTimeUnit(fullTimeUnit, timeUnit) {
  const index5 = fullTimeUnit.indexOf(timeUnit);
  if (index5 < 0) {
    return false;
  }
  if (index5 > 0 && timeUnit === "seconds" && fullTimeUnit.charAt(index5 - 1) === "i") {
    return false;
  }
  if (fullTimeUnit.length > index5 + 3 && timeUnit === "day" && fullTimeUnit.charAt(index5 + 3) === "o") {
    return false;
  }
  if (index5 > 0 && timeUnit === "year" && fullTimeUnit.charAt(index5 - 1) === "f") {
    return false;
  }
  return true;
}
function fieldExpr(fullTimeUnit, field3, { end } = { end: false }) {
  const fieldRef2 = accessPathWithDatum(field3);
  const utc = isUTCTimeUnit(fullTimeUnit) ? "utc" : "";
  function func(timeUnit) {
    if (timeUnit === "quarter") {
      return `(${utc}quarter(${fieldRef2})-1)`;
    } else {
      return `${utc}${timeUnit}(${fieldRef2})`;
    }
  }
  let lastTimeUnit;
  const dateExpr = {};
  for (const part of TIMEUNIT_PARTS) {
    if (containsTimeUnit(fullTimeUnit, part)) {
      dateExpr[part] = func(part);
      lastTimeUnit = part;
    }
  }
  if (end) {
    dateExpr[lastTimeUnit] += "+1";
  }
  return dateTimeExprToExpr(dateExpr);
}
function timeUnitSpecifierExpression(timeUnit) {
  if (!timeUnit) {
    return void 0;
  }
  const timeUnitParts = getTimeUnitParts(timeUnit);
  return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;
}
function formatExpression(timeUnit, field3, isUTCScale) {
  if (!timeUnit) {
    return void 0;
  }
  const expr2 = timeUnitSpecifierExpression(timeUnit);
  const utc = isUTCScale || isUTCTimeUnit(timeUnit);
  return `${utc ? "utc" : "time"}Format(${field3}, ${expr2})`;
}
function normalizeTimeUnit(timeUnit) {
  if (!timeUnit) {
    return void 0;
  }
  let params2;
  if (isString(timeUnit)) {
    params2 = {
      unit: timeUnit
    };
  } else if (isObject(timeUnit)) {
    params2 = Object.assign(Object.assign({}, timeUnit), timeUnit.unit ? { unit: timeUnit.unit } : {});
  }
  if (isUTCTimeUnit(params2.unit)) {
    params2.utc = true;
    params2.unit = getLocalTimeUnit(params2.unit);
  }
  return params2;
}
function timeUnitToString(tu) {
  const _a = normalizeTimeUnit(tu), { utc } = _a, rest = __rest4(_a, ["utc"]);
  if (rest.unit) {
    return (utc ? "utc" : "") + keys3(rest).map((p) => varName(`${p === "unit" ? "" : `_${p}_`}${rest[p]}`)).join("");
  } else {
    return (utc ? "utc" : "") + "timeunit" + keys3(rest).map((p) => varName(`_${p}_${rest[p]}`)).join("");
  }
}

// node_modules/vega-lite/build/src/predicate.js
function isSelectionPredicate(predicate) {
  return predicate === null || predicate === void 0 ? void 0 : predicate["param"];
}
function isFieldEqualPredicate(predicate) {
  return !!(predicate === null || predicate === void 0 ? void 0 : predicate.field) && predicate.equal !== void 0;
}
function isFieldLTPredicate(predicate) {
  return !!(predicate === null || predicate === void 0 ? void 0 : predicate.field) && predicate.lt !== void 0;
}
function isFieldLTEPredicate(predicate) {
  return !!(predicate === null || predicate === void 0 ? void 0 : predicate.field) && predicate.lte !== void 0;
}
function isFieldGTPredicate(predicate) {
  return !!(predicate === null || predicate === void 0 ? void 0 : predicate.field) && predicate.gt !== void 0;
}
function isFieldGTEPredicate(predicate) {
  return !!(predicate === null || predicate === void 0 ? void 0 : predicate.field) && predicate.gte !== void 0;
}
function isFieldRangePredicate(predicate) {
  if (predicate === null || predicate === void 0 ? void 0 : predicate.field) {
    if (isArray(predicate.range) && predicate.range.length === 2) {
      return true;
    } else if (isSignalRef(predicate.range)) {
      return true;
    }
  }
  return false;
}
function isFieldOneOfPredicate(predicate) {
  return !!(predicate === null || predicate === void 0 ? void 0 : predicate.field) && (isArray(predicate.oneOf) || isArray(predicate.in));
}
function isFieldValidPredicate(predicate) {
  return !!(predicate === null || predicate === void 0 ? void 0 : predicate.field) && predicate.valid !== void 0;
}
function isFieldPredicate(predicate) {
  return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);
}
function predicateValueExpr(v2, timeUnit) {
  return valueExpr(v2, { timeUnit, wrapTime: true });
}
function predicateValuesExpr(vals2, timeUnit) {
  return vals2.map((v2) => predicateValueExpr(v2, timeUnit));
}
function fieldFilterExpression(predicate, useInRange = true) {
  var _a;
  const { field: field3 } = predicate;
  const timeUnit = (_a = normalizeTimeUnit(predicate.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
  const fieldExpr2 = timeUnit ? `time(${fieldExpr(timeUnit, field3)})` : vgField(predicate, { expr: "datum" });
  if (isFieldEqualPredicate(predicate)) {
    return `${fieldExpr2}===${predicateValueExpr(predicate.equal, timeUnit)}`;
  } else if (isFieldLTPredicate(predicate)) {
    const upper = predicate.lt;
    return `${fieldExpr2}<${predicateValueExpr(upper, timeUnit)}`;
  } else if (isFieldGTPredicate(predicate)) {
    const lower = predicate.gt;
    return `${fieldExpr2}>${predicateValueExpr(lower, timeUnit)}`;
  } else if (isFieldLTEPredicate(predicate)) {
    const upper = predicate.lte;
    return `${fieldExpr2}<=${predicateValueExpr(upper, timeUnit)}`;
  } else if (isFieldGTEPredicate(predicate)) {
    const lower = predicate.gte;
    return `${fieldExpr2}>=${predicateValueExpr(lower, timeUnit)}`;
  } else if (isFieldOneOfPredicate(predicate)) {
    return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(",")}], ${fieldExpr2}) !== -1`;
  } else if (isFieldValidPredicate(predicate)) {
    return fieldValidPredicate(fieldExpr2, predicate.valid);
  } else if (isFieldRangePredicate(predicate)) {
    const { range: range8 } = predicate;
    const lower = isSignalRef(range8) ? { signal: `${range8.signal}[0]` } : range8[0];
    const upper = isSignalRef(range8) ? { signal: `${range8.signal}[1]` } : range8[1];
    if (lower !== null && upper !== null && useInRange) {
      return "inrange(" + fieldExpr2 + ", [" + predicateValueExpr(lower, timeUnit) + ", " + predicateValueExpr(upper, timeUnit) + "])";
    }
    const exprs = [];
    if (lower !== null) {
      exprs.push(`${fieldExpr2} >= ${predicateValueExpr(lower, timeUnit)}`);
    }
    if (upper !== null) {
      exprs.push(`${fieldExpr2} <= ${predicateValueExpr(upper, timeUnit)}`);
    }
    return exprs.length > 0 ? exprs.join(" && ") : "true";
  }
  throw new Error(`Invalid field predicate: ${stringify(predicate)}`);
}
function fieldValidPredicate(fieldExpr2, valid = true) {
  if (valid) {
    return `isValid(${fieldExpr2}) && isFinite(+${fieldExpr2})`;
  } else {
    return `!isValid(${fieldExpr2}) || !isFinite(+${fieldExpr2})`;
  }
}
function normalizePredicate(f) {
  var _a;
  if (isFieldPredicate(f) && f.timeUnit) {
    return Object.assign(Object.assign({}, f), { timeUnit: (_a = normalizeTimeUnit(f.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit });
  }
  return f;
}

// node_modules/vega-lite/build/src/type.js
var Type = {
  quantitative: "quantitative",
  ordinal: "ordinal",
  temporal: "temporal",
  nominal: "nominal",
  geojson: "geojson"
};
function isContinuous2(type3) {
  return type3 === "quantitative" || type3 === "temporal";
}
function isDiscrete2(type3) {
  return type3 === "ordinal" || type3 === "nominal";
}
var QUANTITATIVE = Type.quantitative;
var ORDINAL = Type.ordinal;
var TEMPORAL = Type.temporal;
var NOMINAL = Type.nominal;
var GEOJSON = Type.geojson;
var TYPES = keys3(Type);
function getFullName(type3) {
  if (type3) {
    type3 = type3.toLowerCase();
    switch (type3) {
      case "q":
      case QUANTITATIVE:
        return "quantitative";
      case "t":
      case TEMPORAL:
        return "temporal";
      case "o":
      case ORDINAL:
        return "ordinal";
      case "n":
      case NOMINAL:
        return "nominal";
      case GEOJSON:
        return "geojson";
    }
  }
  return void 0;
}

// node_modules/vega-lite/build/src/scale.js
var __rest5 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var ScaleType = {
  LINEAR: "linear",
  LOG: "log",
  POW: "pow",
  SQRT: "sqrt",
  SYMLOG: "symlog",
  IDENTITY: "identity",
  SEQUENTIAL: "sequential",
  TIME: "time",
  UTC: "utc",
  QUANTILE: "quantile",
  QUANTIZE: "quantize",
  THRESHOLD: "threshold",
  BIN_ORDINAL: "bin-ordinal",
  ORDINAL: "ordinal",
  POINT: "point",
  BAND: "band"
};
var SCALE_CATEGORY_INDEX = {
  linear: "numeric",
  log: "numeric",
  pow: "numeric",
  sqrt: "numeric",
  symlog: "numeric",
  identity: "numeric",
  sequential: "numeric",
  time: "time",
  utc: "time",
  ordinal: "ordinal",
  "bin-ordinal": "bin-ordinal",
  point: "ordinal-position",
  band: "ordinal-position",
  quantile: "discretizing",
  quantize: "discretizing",
  threshold: "discretizing"
};
var SCALE_TYPES = keys3(SCALE_CATEGORY_INDEX);
function scaleCompatible(scaleType1, scaleType2) {
  const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
  const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
  return scaleCategory1 === scaleCategory2 || scaleCategory1 === "ordinal-position" && scaleCategory2 === "time" || scaleCategory2 === "ordinal-position" && scaleCategory1 === "time";
}
var SCALE_PRECEDENCE_INDEX = {
  linear: 0,
  log: 1,
  pow: 1,
  sqrt: 1,
  symlog: 1,
  identity: 1,
  sequential: 1,
  time: 0,
  utc: 0,
  point: 10,
  band: 11,
  ordinal: 0,
  "bin-ordinal": 0,
  quantile: 0,
  quantize: 0,
  threshold: 0
};
function scaleTypePrecedence(scaleType2) {
  return SCALE_PRECEDENCE_INDEX[scaleType2];
}
var QUANTITATIVE_SCALES = /* @__PURE__ */ new Set([
  "linear",
  "log",
  "pow",
  "sqrt",
  "symlog"
]);
var CONTINUOUS_TO_CONTINUOUS_SCALES = /* @__PURE__ */ new Set([
  ...QUANTITATIVE_SCALES,
  "time",
  "utc"
]);
function isQuantitative(type3) {
  return QUANTITATIVE_SCALES.has(type3);
}
var CONTINUOUS_TO_DISCRETE_SCALES = /* @__PURE__ */ new Set([
  "quantile",
  "quantize",
  "threshold"
]);
var CONTINUOUS_DOMAIN_SCALES = /* @__PURE__ */ new Set([
  ...CONTINUOUS_TO_CONTINUOUS_SCALES,
  ...CONTINUOUS_TO_DISCRETE_SCALES,
  "sequential",
  "identity"
]);
var DISCRETE_DOMAIN_SCALES = /* @__PURE__ */ new Set([
  "ordinal",
  "bin-ordinal",
  "point",
  "band"
]);
function hasDiscreteDomain(type3) {
  return DISCRETE_DOMAIN_SCALES.has(type3);
}
function hasContinuousDomain(type3) {
  return CONTINUOUS_DOMAIN_SCALES.has(type3);
}
function isContinuousToContinuous(type3) {
  return CONTINUOUS_TO_CONTINUOUS_SCALES.has(type3);
}
function isContinuousToDiscrete(type3) {
  return CONTINUOUS_TO_DISCRETE_SCALES.has(type3);
}
var defaultScaleConfig = {
  pointPadding: 0.5,
  barBandPaddingInner: 0.1,
  rectBandPaddingInner: 0,
  bandWithNestedOffsetPaddingInner: 0.2,
  bandWithNestedOffsetPaddingOuter: 0.2,
  minBandSize: 2,
  minFontSize: 8,
  maxFontSize: 40,
  minOpacity: 0.3,
  maxOpacity: 0.8,
  minSize: 9,
  minStrokeWidth: 1,
  maxStrokeWidth: 4,
  quantileCount: 4,
  quantizeCount: 4,
  zero: true
};
function isExtendedScheme(scheme3) {
  return !isString(scheme3) && !!scheme3["name"];
}
function isParameterDomain(domain4) {
  return domain4 === null || domain4 === void 0 ? void 0 : domain4["param"];
}
function isDomainUnionWith(domain4) {
  return domain4 === null || domain4 === void 0 ? void 0 : domain4["unionWith"];
}
function isFieldRange(range8) {
  return isObject(range8) && "field" in range8;
}
var SCALE_PROPERTY_INDEX = {
  type: 1,
  domain: 1,
  domainMax: 1,
  domainMin: 1,
  domainMid: 1,
  align: 1,
  range: 1,
  rangeMax: 1,
  rangeMin: 1,
  scheme: 1,
  bins: 1,
  reverse: 1,
  round: 1,
  clamp: 1,
  nice: 1,
  base: 1,
  exponent: 1,
  constant: 1,
  interpolate: 1,
  zero: 1,
  padding: 1,
  paddingInner: 1,
  paddingOuter: 1
};
var SCALE_PROPERTIES = keys3(SCALE_PROPERTY_INDEX);
var { type: type2, domain: domain2, range: range6, rangeMax, rangeMin, scheme: scheme2 } = SCALE_PROPERTY_INDEX;
var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = __rest5(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "rangeMax", "rangeMin", "scheme"]);
var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys3(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
function scaleTypeSupportProperty(scaleType2, propName) {
  switch (propName) {
    case "type":
    case "domain":
    case "reverse":
    case "range":
      return true;
    case "scheme":
    case "interpolate":
      return !["point", "band", "identity"].includes(scaleType2);
    case "bins":
      return !["point", "band", "identity", "ordinal"].includes(scaleType2);
    case "round":
      return isContinuousToContinuous(scaleType2) || scaleType2 === "band" || scaleType2 === "point";
    case "padding":
    case "rangeMin":
    case "rangeMax":
      return isContinuousToContinuous(scaleType2) || ["point", "band"].includes(scaleType2);
    case "paddingOuter":
    case "align":
      return ["point", "band"].includes(scaleType2);
    case "paddingInner":
      return scaleType2 === "band";
    case "domainMax":
    case "domainMid":
    case "domainMin":
    case "clamp":
      return isContinuousToContinuous(scaleType2);
    case "nice":
      return isContinuousToContinuous(scaleType2) || scaleType2 === "quantize" || scaleType2 === "threshold";
    case "exponent":
      return scaleType2 === "pow";
    case "base":
      return scaleType2 === "log";
    case "constant":
      return scaleType2 === "symlog";
    case "zero":
      return hasContinuousDomain(scaleType2) && !contains2([
        "log",
        "time",
        "utc",
        "threshold",
        "quantile"
      ], scaleType2);
  }
}
function channelScalePropertyIncompatability(channel, propName) {
  switch (propName) {
    case "interpolate":
    case "scheme":
    case "domainMid":
      if (!isColorChannel(channel)) {
        return message_exports.cannotUseScalePropertyWithNonColor(propName);
      }
      return void 0;
    case "align":
    case "type":
    case "bins":
    case "domain":
    case "domainMax":
    case "domainMin":
    case "range":
    case "base":
    case "exponent":
    case "constant":
    case "nice":
    case "padding":
    case "paddingInner":
    case "paddingOuter":
    case "rangeMax":
    case "rangeMin":
    case "reverse":
    case "round":
    case "clamp":
    case "zero":
      return void 0;
  }
}
function scaleTypeSupportDataType(specifiedType, fieldDefType) {
  if (contains2([ORDINAL, NOMINAL], fieldDefType)) {
    return specifiedType === void 0 || hasDiscreteDomain(specifiedType);
  } else if (fieldDefType === TEMPORAL) {
    return contains2([ScaleType.TIME, ScaleType.UTC, void 0], specifiedType);
  } else if (fieldDefType === QUANTITATIVE) {
    return isQuantitative(specifiedType) || isContinuousToDiscrete(specifiedType) || specifiedType === void 0;
  }
  return true;
}
function channelSupportScaleType(channel, scaleType2, hasNestedOffsetScale = false) {
  if (!isScaleChannel(channel)) {
    return false;
  }
  switch (channel) {
    case X3:
    case Y3:
    case XOFFSET:
    case YOFFSET:
    case THETA:
    case RADIUS:
      if (isContinuousToContinuous(scaleType2)) {
        return true;
      } else if (scaleType2 === "band") {
        return true;
      } else if (scaleType2 === "point") {
        return !hasNestedOffsetScale;
      }
      return false;
    case SIZE2:
    case STROKEWIDTH:
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case ANGLE:
      return isContinuousToContinuous(scaleType2) || isContinuousToDiscrete(scaleType2) || contains2(["band", "point", "ordinal"], scaleType2);
    case COLOR:
    case FILL:
    case STROKE:
      return scaleType2 !== "band";
    case STROKEDASH:
    case SHAPE:
      return scaleType2 === "ordinal" || isContinuousToDiscrete(scaleType2);
  }
}

// node_modules/vega-lite/build/src/mark.js
var Mark3 = {
  arc: "arc",
  area: "area",
  bar: "bar",
  image: "image",
  line: "line",
  point: "point",
  rect: "rect",
  rule: "rule",
  text: "text",
  tick: "tick",
  trail: "trail",
  circle: "circle",
  square: "square",
  geoshape: "geoshape"
};
var ARC = Mark3.arc;
var AREA = Mark3.area;
var BAR = Mark3.bar;
var IMAGE = Mark3.image;
var LINE = Mark3.line;
var POINT = Mark3.point;
var RECT = Mark3.rect;
var RULE = Mark3.rule;
var TEXT2 = Mark3.text;
var TICK = Mark3.tick;
var TRAIL = Mark3.trail;
var CIRCLE = Mark3.circle;
var SQUARE = Mark3.square;
var GEOSHAPE = Mark3.geoshape;
function isPathMark(m3) {
  return ["line", "area", "trail"].includes(m3);
}
function isRectBasedMark(m3) {
  return ["rect", "bar", "image", "arc"].includes(m3);
}
var PRIMITIVE_MARKS = new Set(keys3(Mark3));
function isMarkDef(mark2) {
  return mark2["type"];
}
var STROKE_CONFIG = [
  "stroke",
  "strokeWidth",
  "strokeDash",
  "strokeDashOffset",
  "strokeOpacity",
  "strokeJoin",
  "strokeMiterLimit"
];
var FILL_CONFIG = ["fill", "fillOpacity"];
var FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];
var VL_ONLY_MARK_CONFIG_INDEX = {
  color: 1,
  filled: 1,
  invalid: 1,
  order: 1,
  radius2: 1,
  theta2: 1,
  timeUnitBandSize: 1,
  timeUnitBandPosition: 1
};
var VL_ONLY_MARK_CONFIG_PROPERTIES = keys3(VL_ONLY_MARK_CONFIG_INDEX);
var VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
  area: ["line", "point"],
  bar: ["binSpacing", "continuousBandSize", "discreteBandSize"],
  rect: ["binSpacing", "continuousBandSize", "discreteBandSize"],
  line: ["point"],
  tick: ["bandSize", "thickness"]
};
var defaultMarkConfig = {
  color: "#4c78a8",
  invalid: "filter",
  timeUnitBandSize: 1
};
var MARK_CONFIG_INDEX = {
  mark: 1,
  arc: 1,
  area: 1,
  bar: 1,
  circle: 1,
  image: 1,
  line: 1,
  point: 1,
  rect: 1,
  rule: 1,
  square: 1,
  text: 1,
  tick: 1,
  trail: 1,
  geoshape: 1
};
var MARK_CONFIGS = keys3(MARK_CONFIG_INDEX);
function isRelativeBandSize(o) {
  return o && o["band"] != void 0;
}
var BAR_CORNER_RADIUS_INDEX = {
  horizontal: ["cornerRadiusTopRight", "cornerRadiusBottomRight"],
  vertical: ["cornerRadiusTopLeft", "cornerRadiusTopRight"]
};
var DEFAULT_RECT_BAND_SIZE = 5;
var defaultBarConfig = {
  binSpacing: 1,
  continuousBandSize: DEFAULT_RECT_BAND_SIZE,
  timeUnitBandPosition: 0.5
};
var defaultRectConfig = {
  binSpacing: 0,
  continuousBandSize: DEFAULT_RECT_BAND_SIZE,
  timeUnitBandPosition: 0.5
};
var defaultTickConfig = {
  thickness: 1
};
function getMarkType(m3) {
  return isMarkDef(m3) ? m3.type : m3;
}

// node_modules/vega-lite/build/src/compile/mark/encode/valueref.js
function midPointRefWithPositionInvalidTest(params2) {
  const { channel, channelDef, markDef, scale: scale7, config } = params2;
  const ref2 = midPoint(params2);
  if (isFieldDef(channelDef) && !isCountingAggregateOp(channelDef.aggregate) && scale7 && isContinuousToContinuous(scale7.get("type"))) {
    return wrapPositionInvalidTest({
      fieldDef: channelDef,
      channel,
      markDef,
      ref: ref2,
      config
    });
  }
  return ref2;
}
function wrapPositionInvalidTest({ fieldDef, channel, markDef, ref: ref2, config }) {
  if (isPathMark(markDef.type)) {
    return ref2;
  }
  const invalid = getMarkPropOrConfig("invalid", markDef, config);
  if (invalid === null) {
    return [fieldInvalidTestValueRef(fieldDef, channel), ref2];
  }
  return ref2;
}
function fieldInvalidTestValueRef(fieldDef, channel) {
  const test2 = fieldInvalidPredicate(fieldDef, true);
  const mainChannel = getMainRangeChannel(channel);
  const zeroValueRef = mainChannel === "y" ? { field: { group: "height" } } : { value: 0 };
  return Object.assign({ test: test2 }, zeroValueRef);
}
function fieldInvalidPredicate(field3, invalid = true) {
  return fieldValidPredicate(isString(field3) ? field3 : vgField(field3, { expr: "datum" }), !invalid);
}
function datumDefToExpr(datumDef) {
  const { datum: datum2 } = datumDef;
  if (isDateTime(datum2)) {
    return dateTimeToExpr(datum2);
  }
  return `${stringify(datum2)}`;
}
function valueRefForFieldOrDatumDef(fieldDef, scaleName, opt, encode2) {
  const ref2 = {};
  if (scaleName) {
    ref2.scale = scaleName;
  }
  if (isDatumDef(fieldDef)) {
    const { datum: datum2 } = fieldDef;
    if (isDateTime(datum2)) {
      ref2.signal = dateTimeToExpr(datum2);
    } else if (isSignalRef(datum2)) {
      ref2.signal = datum2.signal;
    } else if (isExprRef(datum2)) {
      ref2.signal = datum2.expr;
    } else {
      ref2.value = datum2;
    }
  } else {
    ref2.field = vgField(fieldDef, opt);
  }
  if (encode2) {
    const { offset: offset4, band: band3 } = encode2;
    if (offset4) {
      ref2.offset = offset4;
    }
    if (band3) {
      ref2.band = band3;
    }
  }
  return ref2;
}
function interpolatedSignalRef({ scaleName, fieldOrDatumDef, fieldOrDatumDef2, offset: offset4, startSuffix, bandPosition = 0.5 }) {
  const expr2 = 0 < bandPosition && bandPosition < 1 ? "datum" : void 0;
  const start = vgField(fieldOrDatumDef, { expr: expr2, suffix: startSuffix });
  const end = fieldOrDatumDef2 !== void 0 ? vgField(fieldOrDatumDef2, { expr: expr2 }) : vgField(fieldOrDatumDef, { suffix: "end", expr: expr2 });
  const ref2 = {};
  if (bandPosition === 0 || bandPosition === 1) {
    ref2.scale = scaleName;
    const val = bandPosition === 0 ? start : end;
    ref2.field = val;
  } else {
    const datum2 = isSignalRef(bandPosition) ? `${bandPosition.signal} * ${start} + (1-${bandPosition.signal}) * ${end}` : `${bandPosition} * ${start} + ${1 - bandPosition} * ${end}`;
    ref2.signal = `scale("${scaleName}", ${datum2})`;
  }
  if (offset4) {
    ref2.offset = offset4;
  }
  return ref2;
}
function midPoint({ channel, channelDef, channel2Def, markDef, config, scaleName, scale: scale7, stack: stack2, offset: offset4, defaultRef, bandPosition }) {
  var _a;
  if (channelDef) {
    if (isFieldOrDatumDef(channelDef)) {
      const scaleType2 = scale7 === null || scale7 === void 0 ? void 0 : scale7.get("type");
      if (isTypedFieldDef(channelDef)) {
        bandPosition !== null && bandPosition !== void 0 ? bandPosition : bandPosition = getBandPosition({
          fieldDef: channelDef,
          fieldDef2: channel2Def,
          markDef,
          config
        });
        const { bin: bin5, timeUnit, type: type3 } = channelDef;
        if (isBinning(bin5) || bandPosition && timeUnit && type3 === TEMPORAL) {
          if (stack2 === null || stack2 === void 0 ? void 0 : stack2.impute) {
            return valueRefForFieldOrDatumDef(channelDef, scaleName, { binSuffix: "mid" }, { offset: offset4 });
          }
          if (bandPosition && !hasDiscreteDomain(scaleType2)) {
            return interpolatedSignalRef({ scaleName, fieldOrDatumDef: channelDef, bandPosition, offset: offset4 });
          }
          return valueRefForFieldOrDatumDef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: "range" } : {}, {
            offset: offset4
          });
        } else if (isBinned(bin5)) {
          if (isFieldDef(channel2Def)) {
            return interpolatedSignalRef({
              scaleName,
              fieldOrDatumDef: channelDef,
              fieldOrDatumDef2: channel2Def,
              bandPosition,
              offset: offset4
            });
          } else {
            const channel2 = channel === X3 ? X23 : Y23;
            warn2(message_exports.channelRequiredForBinned(channel2));
          }
        }
      }
      return valueRefForFieldOrDatumDef(
        channelDef,
        scaleName,
        hasDiscreteDomain(scaleType2) ? { binSuffix: "range" } : {},
        {
          offset: offset4,
          band: scaleType2 === "band" ? (_a = bandPosition !== null && bandPosition !== void 0 ? bandPosition : channelDef.bandPosition) !== null && _a !== void 0 ? _a : 0.5 : void 0
        }
      );
    } else if (isValueDef(channelDef)) {
      const value3 = channelDef.value;
      const offsetMixins = offset4 ? { offset: offset4 } : {};
      return Object.assign(Object.assign({}, widthHeightValueOrSignalRef(channel, value3)), offsetMixins);
    }
  }
  if (isFunction(defaultRef)) {
    defaultRef = defaultRef();
  }
  if (defaultRef) {
    return Object.assign(Object.assign({}, defaultRef), offset4 ? { offset: offset4 } : {});
  }
  return defaultRef;
}
function widthHeightValueOrSignalRef(channel, value3) {
  if (contains2(["x", "x2"], channel) && value3 === "width") {
    return { field: { group: "width" } };
  } else if (contains2(["y", "y2"], channel) && value3 === "height") {
    return { field: { group: "height" } };
  }
  return signalOrValueRef(value3);
}

// node_modules/vega-lite/build/src/compile/format.js
function isCustomFormatType(formatType) {
  return formatType && formatType !== "number" && formatType !== "time";
}
function customFormatExpr(formatType, field3, format5) {
  return `${formatType}(${field3}${format5 ? `, ${stringify(format5)}` : ""})`;
}
var BIN_RANGE_DELIMITER = " \u2013 ";
function formatSignalRef({ fieldOrDatumDef, format: format5, formatType, expr: expr2, normalizeStack, config }) {
  var _a, _b;
  if (isCustomFormatType(formatType)) {
    return formatCustomType({
      fieldOrDatumDef,
      format: format5,
      formatType,
      expr: expr2,
      config
    });
  }
  const field3 = fieldToFormat(fieldOrDatumDef, expr2, normalizeStack);
  const type3 = channelDefType(fieldOrDatumDef);
  if (format5 === void 0 && formatType === void 0 && config.customFormatTypes) {
    if (type3 === "quantitative") {
      if (normalizeStack && config.normalizedNumberFormatType)
        return formatCustomType({
          fieldOrDatumDef,
          format: config.normalizedNumberFormat,
          formatType: config.normalizedNumberFormatType,
          expr: expr2,
          config
        });
      if (config.numberFormatType) {
        return formatCustomType({
          fieldOrDatumDef,
          format: config.numberFormat,
          formatType: config.numberFormatType,
          expr: expr2,
          config
        });
      }
    }
    if (type3 === "temporal" && config.timeFormatType && isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit === void 0) {
      return formatCustomType({
        fieldOrDatumDef,
        format: config.timeFormat,
        formatType: config.timeFormatType,
        expr: expr2,
        config
      });
    }
  }
  if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
    const signal = timeFormatExpression({
      field: field3,
      timeUnit: isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : void 0,
      format: format5,
      formatType: config.timeFormatType,
      rawTimeFormat: config.timeFormat,
      isUTCScale: isScaleFieldDef(fieldOrDatumDef) && ((_b = fieldOrDatumDef.scale) === null || _b === void 0 ? void 0 : _b.type) === ScaleType.UTC
    });
    return signal ? { signal } : void 0;
  }
  format5 = numberFormat({ type: type3, specifiedFormat: format5, config, normalizeStack });
  if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
    const endField = vgField(fieldOrDatumDef, { expr: expr2, binSuffix: "end" });
    return {
      signal: binFormatExpression(field3, endField, format5, formatType, config)
    };
  } else if (format5 || channelDefType(fieldOrDatumDef) === "quantitative") {
    return {
      signal: `${formatExpr(field3, format5)}`
    };
  } else {
    return { signal: `isValid(${field3}) ? ${field3} : ""+${field3}` };
  }
}
function fieldToFormat(fieldOrDatumDef, expr2, normalizeStack) {
  if (isFieldDef(fieldOrDatumDef)) {
    if (normalizeStack) {
      return `${vgField(fieldOrDatumDef, { expr: expr2, suffix: "end" })}-${vgField(fieldOrDatumDef, {
        expr: expr2,
        suffix: "start"
      })}`;
    } else {
      return vgField(fieldOrDatumDef, { expr: expr2 });
    }
  } else {
    return datumDefToExpr(fieldOrDatumDef);
  }
}
function formatCustomType({ fieldOrDatumDef, format: format5, formatType, expr: expr2, normalizeStack, config, field: field3 }) {
  field3 !== null && field3 !== void 0 ? field3 : field3 = fieldToFormat(fieldOrDatumDef, expr2, normalizeStack);
  if (field3 !== "datum.value" && isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
    const endField = vgField(fieldOrDatumDef, { expr: expr2, binSuffix: "end" });
    return {
      signal: binFormatExpression(field3, endField, format5, formatType, config)
    };
  }
  return { signal: customFormatExpr(formatType, field3, format5) };
}
function guideFormat(fieldOrDatumDef, type3, format5, formatType, config, omitTimeFormatConfig) {
  var _a;
  if (isCustomFormatType(formatType)) {
    return void 0;
  } else if (format5 === void 0 && formatType === void 0 && config.customFormatTypes) {
    if (channelDefType(fieldOrDatumDef) === "quantitative") {
      if (config.normalizedNumberFormatType && isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === "normalize") {
        return void 0;
      }
      if (config.numberFormatType) {
        return void 0;
      }
    }
  }
  if (isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === "normalize" && config.normalizedNumberFormat) {
    return numberFormat({
      type: "quantitative",
      config,
      normalizeStack: true
    });
  }
  if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
    const timeUnit = isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : void 0;
    if (timeUnit === void 0 && config.customFormatTypes && config.timeFormatType) {
      return void 0;
    }
    return timeFormat3({ specifiedFormat: format5, timeUnit, config, omitTimeFormatConfig });
  }
  return numberFormat({ type: type3, specifiedFormat: format5, config });
}
function guideFormatType(formatType, fieldOrDatumDef, scaleType2) {
  var _a;
  if (formatType && (isSignalRef(formatType) || formatType === "number" || formatType === "time")) {
    return formatType;
  }
  if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) && scaleType2 !== "time" && scaleType2 !== "utc") {
    return isFieldDef(fieldOrDatumDef) && ((_a = normalizeTimeUnit(fieldOrDatumDef === null || fieldOrDatumDef === void 0 ? void 0 : fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.utc) ? "utc" : "time";
  }
  return void 0;
}
function numberFormat({ type: type3, specifiedFormat, config, normalizeStack }) {
  if (isString(specifiedFormat)) {
    return specifiedFormat;
  }
  if (type3 === QUANTITATIVE) {
    return normalizeStack ? config.normalizedNumberFormat : config.numberFormat;
  }
  return void 0;
}
function timeFormat3({ specifiedFormat, timeUnit, config, omitTimeFormatConfig }) {
  if (specifiedFormat) {
    return specifiedFormat;
  }
  if (timeUnit) {
    return {
      signal: timeUnitSpecifierExpression(timeUnit)
    };
  }
  return omitTimeFormatConfig ? void 0 : config.timeFormat;
}
function formatExpr(field3, format5) {
  return `format(${field3}, "${format5 || ""}")`;
}
function binNumberFormatExpr(field3, format5, formatType, config) {
  var _a;
  if (isCustomFormatType(formatType)) {
    return customFormatExpr(formatType, field3, format5);
  }
  return formatExpr(field3, (_a = isString(format5) ? format5 : void 0) !== null && _a !== void 0 ? _a : config.numberFormat);
}
function binFormatExpression(startField, endField, format5, formatType, config) {
  if (format5 === void 0 && formatType === void 0 && config.customFormatTypes && config.numberFormatType) {
    return binFormatExpression(startField, endField, config.numberFormat, config.numberFormatType, config);
  }
  const start = binNumberFormatExpr(startField, format5, formatType, config);
  const end = binNumberFormatExpr(endField, format5, formatType, config);
  return `${fieldValidPredicate(startField, false)} ? "null" : ${start} + "${BIN_RANGE_DELIMITER}" + ${end}`;
}
function timeFormatExpression({ field: field3, timeUnit, format: format5, formatType, rawTimeFormat, isUTCScale }) {
  if (!timeUnit || format5) {
    if (!timeUnit && formatType) {
      return `${formatType}(${field3}, '${format5}')`;
    }
    format5 = isString(format5) ? format5 : rawTimeFormat;
    return `${isUTCScale ? "utc" : "time"}Format(${field3}, '${format5}')`;
  } else {
    return formatExpression(timeUnit, field3, isUTCScale);
  }
}

// node_modules/vega-lite/build/src/sort.js
var DEFAULT_SORT_OP = "min";
var SORT_BY_CHANNEL_INDEX = {
  x: 1,
  y: 1,
  color: 1,
  fill: 1,
  stroke: 1,
  strokeWidth: 1,
  size: 1,
  shape: 1,
  fillOpacity: 1,
  strokeOpacity: 1,
  opacity: 1,
  text: 1
};
function isSortByChannel(c3) {
  return c3 in SORT_BY_CHANNEL_INDEX;
}
function isSortByEncoding(sort4) {
  return !!(sort4 === null || sort4 === void 0 ? void 0 : sort4["encoding"]);
}
function isSortField(sort4) {
  return sort4 && (sort4["op"] === "count" || !!sort4["field"]);
}
function isSortArray(sort4) {
  return sort4 && isArray(sort4);
}

// node_modules/vega-lite/build/src/spec/facet.js
function isFacetMapping(f) {
  return "row" in f || "column" in f;
}
function isFacetFieldDef(channelDef) {
  return !!channelDef && "header" in channelDef;
}
function isFacetSpec(spec) {
  return "facet" in spec;
}

// node_modules/vega-lite/build/src/channeldef.js
var __rest6 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function isConditionalParameter(c3) {
  return c3["param"];
}
function isRepeatRef(field3) {
  return field3 && !isString(field3) && "repeat" in field3;
}
function toFieldDefBase(fieldDef) {
  const { field: field3, timeUnit, bin: bin5, aggregate } = fieldDef;
  return Object.assign(Object.assign(Object.assign(Object.assign({}, timeUnit ? { timeUnit } : {}), bin5 ? { bin: bin5 } : {}), aggregate ? { aggregate } : {}), { field: field3 });
}
function isSortableFieldDef(fieldDef) {
  return "sort" in fieldDef;
}
function getBandPosition({ fieldDef, fieldDef2, markDef: mark2, config }) {
  if (isFieldOrDatumDef(fieldDef) && fieldDef.bandPosition !== void 0) {
    return fieldDef.bandPosition;
  }
  if (isFieldDef(fieldDef)) {
    const { timeUnit, bin: bin5 } = fieldDef;
    if (timeUnit && !fieldDef2) {
      return isRectBasedMark(mark2.type) ? 0 : getMarkConfig("timeUnitBandPosition", mark2, config);
    } else if (isBinning(bin5)) {
      return 0.5;
    }
  }
  return void 0;
}
function getBandSize({ channel, fieldDef, fieldDef2, markDef: mark2, config, scaleType: scaleType2, useVlSizeChannel }) {
  var _a, _b, _c2;
  const sizeChannel = getSizeChannel(channel);
  const size = getMarkPropOrConfig(useVlSizeChannel ? "size" : sizeChannel, mark2, config, {
    vgChannel: sizeChannel
  });
  if (size !== void 0) {
    return size;
  }
  if (isFieldDef(fieldDef)) {
    const { timeUnit, bin: bin5 } = fieldDef;
    if (timeUnit && !fieldDef2) {
      return { band: getMarkConfig("timeUnitBandSize", mark2, config) };
    } else if (isBinning(bin5) && !hasDiscreteDomain(scaleType2)) {
      return { band: 1 };
    }
  }
  if (isRectBasedMark(mark2.type)) {
    if (scaleType2) {
      if (hasDiscreteDomain(scaleType2)) {
        return ((_a = config[mark2.type]) === null || _a === void 0 ? void 0 : _a.discreteBandSize) || { band: 1 };
      } else {
        return (_b = config[mark2.type]) === null || _b === void 0 ? void 0 : _b.continuousBandSize;
      }
    }
    return (_c2 = config[mark2.type]) === null || _c2 === void 0 ? void 0 : _c2.discreteBandSize;
  }
  return void 0;
}
function hasBandEnd(fieldDef, fieldDef2, markDef, config) {
  if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === "temporal") {
    return getBandPosition({ fieldDef, fieldDef2, markDef, config }) !== void 0;
  }
  return false;
}
function isConditionalDef(channelDef) {
  return channelDef && "condition" in channelDef;
}
function hasConditionalFieldDef(channelDef) {
  const condition = channelDef === null || channelDef === void 0 ? void 0 : channelDef["condition"];
  return !!condition && !isArray(condition) && isFieldDef(condition);
}
function hasConditionalFieldOrDatumDef(channelDef) {
  const condition = channelDef === null || channelDef === void 0 ? void 0 : channelDef["condition"];
  return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);
}
function hasConditionalValueDef(channelDef) {
  const condition = channelDef === null || channelDef === void 0 ? void 0 : channelDef["condition"];
  return !!condition && (isArray(condition) || isValueDef(condition));
}
function isFieldDef(channelDef) {
  return channelDef && (!!channelDef["field"] || channelDef["aggregate"] === "count");
}
function channelDefType(channelDef) {
  return channelDef === null || channelDef === void 0 ? void 0 : channelDef["type"];
}
function isDatumDef(channelDef) {
  return channelDef && "datum" in channelDef;
}
function isContinuousFieldOrDatumDef(cd2) {
  return isTypedFieldDef(cd2) && !isDiscrete3(cd2) || isNumericDataDef(cd2);
}
function isNumericDataDef(cd2) {
  return isDatumDef(cd2) && isNumber(cd2.datum);
}
function isFieldOrDatumDef(channelDef) {
  return isFieldDef(channelDef) || isDatumDef(channelDef);
}
function isTypedFieldDef(channelDef) {
  return channelDef && ("field" in channelDef || channelDef["aggregate"] === "count") && "type" in channelDef;
}
function isValueDef(channelDef) {
  return channelDef && "value" in channelDef && "value" in channelDef;
}
function isScaleFieldDef(channelDef) {
  return channelDef && ("scale" in channelDef || "sort" in channelDef);
}
function isPositionFieldOrDatumDef(channelDef) {
  return channelDef && ("axis" in channelDef || "stack" in channelDef || "impute" in channelDef);
}
function isMarkPropFieldOrDatumDef(channelDef) {
  return channelDef && "legend" in channelDef;
}
function isStringFieldOrDatumDef(channelDef) {
  return channelDef && ("format" in channelDef || "formatType" in channelDef);
}
function toStringFieldDef(fieldDef) {
  return omit(fieldDef, ["legend", "axis", "header", "scale"]);
}
function isOpFieldDef(fieldDef) {
  return "op" in fieldDef;
}
function vgField(fieldDef, opt = {}) {
  var _a, _b, _c2;
  let field3 = fieldDef.field;
  const prefix = opt.prefix;
  let suffix = opt.suffix;
  let argAccessor = "";
  if (isCount(fieldDef)) {
    field3 = internalField("count");
  } else {
    let fn;
    if (!opt.nofn) {
      if (isOpFieldDef(fieldDef)) {
        fn = fieldDef.op;
      } else {
        const { bin: bin5, aggregate, timeUnit } = fieldDef;
        if (isBinning(bin5)) {
          fn = binToString(bin5);
          suffix = ((_a = opt.binSuffix) !== null && _a !== void 0 ? _a : "") + ((_b = opt.suffix) !== null && _b !== void 0 ? _b : "");
        } else if (aggregate) {
          if (isArgmaxDef(aggregate)) {
            argAccessor = `["${field3}"]`;
            field3 = `argmax_${aggregate.argmax}`;
          } else if (isArgminDef(aggregate)) {
            argAccessor = `["${field3}"]`;
            field3 = `argmin_${aggregate.argmin}`;
          } else {
            fn = String(aggregate);
          }
        } else if (timeUnit) {
          fn = timeUnitToString(timeUnit);
          suffix = (!["range", "mid"].includes(opt.binSuffix) && opt.binSuffix || "") + ((_c2 = opt.suffix) !== null && _c2 !== void 0 ? _c2 : "");
        }
      }
    }
    if (fn) {
      field3 = field3 ? `${fn}_${field3}` : fn;
    }
  }
  if (suffix) {
    field3 = `${field3}_${suffix}`;
  }
  if (prefix) {
    field3 = `${prefix}_${field3}`;
  }
  if (opt.forAs) {
    return removePathFromField(field3);
  } else if (opt.expr) {
    return flatAccessWithDatum(field3, opt.expr) + argAccessor;
  } else {
    return replacePathInField(field3) + argAccessor;
  }
}
function isDiscrete3(def2) {
  switch (def2.type) {
    case "nominal":
    case "ordinal":
    case "geojson":
      return true;
    case "quantitative":
      return isFieldDef(def2) && !!def2.bin;
    case "temporal":
      return false;
  }
  throw new Error(message_exports.invalidFieldType(def2.type));
}
function isDiscretizing2(def2) {
  var _a;
  return isScaleFieldDef(def2) && isContinuousToDiscrete((_a = def2.scale) === null || _a === void 0 ? void 0 : _a.type);
}
function isCount(fieldDef) {
  return fieldDef.aggregate === "count";
}
function verbalTitleFormatter(fieldDef, config) {
  var _a;
  const { field: field3, bin: bin5, timeUnit, aggregate } = fieldDef;
  if (aggregate === "count") {
    return config.countTitle;
  } else if (isBinning(bin5)) {
    return `${field3} (binned)`;
  } else if (timeUnit) {
    const unit2 = (_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
    if (unit2) {
      return `${field3} (${getTimeUnitParts(unit2).join("-")})`;
    }
  } else if (aggregate) {
    if (isArgmaxDef(aggregate)) {
      return `${field3} for max ${aggregate.argmax}`;
    } else if (isArgminDef(aggregate)) {
      return `${field3} for min ${aggregate.argmin}`;
    } else {
      return `${titleCase(aggregate)} of ${field3}`;
    }
  }
  return field3;
}
function functionalTitleFormatter(fieldDef) {
  const { aggregate, bin: bin5, timeUnit, field: field3 } = fieldDef;
  if (isArgmaxDef(aggregate)) {
    return `${field3} for argmax(${aggregate.argmax})`;
  } else if (isArgminDef(aggregate)) {
    return `${field3} for argmin(${aggregate.argmin})`;
  }
  const timeUnitParams = normalizeTimeUnit(timeUnit);
  const fn = aggregate || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.unit) || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.maxbins) && "timeunit" || isBinning(bin5) && "bin";
  if (fn) {
    return `${fn.toUpperCase()}(${field3})`;
  } else {
    return field3;
  }
}
var defaultTitleFormatter = (fieldDef, config) => {
  switch (config.fieldTitle) {
    case "plain":
      return fieldDef.field;
    case "functional":
      return functionalTitleFormatter(fieldDef);
    default:
      return verbalTitleFormatter(fieldDef, config);
  }
};
var titleFormatter = defaultTitleFormatter;
function setTitleFormatter(formatter) {
  titleFormatter = formatter;
}
function resetTitleFormatter() {
  setTitleFormatter(defaultTitleFormatter);
}
function title(fieldOrDatumDef, config, { allowDisabling, includeDefault = true }) {
  var _a, _b;
  const guideTitle = (_a = getGuide(fieldOrDatumDef)) === null || _a === void 0 ? void 0 : _a.title;
  if (!isFieldDef(fieldOrDatumDef)) {
    return guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldOrDatumDef.title;
  }
  const fieldDef = fieldOrDatumDef;
  const def2 = includeDefault ? defaultTitle(fieldDef, config) : void 0;
  if (allowDisabling) {
    return getFirstDefined(guideTitle, fieldDef.title, def2);
  } else {
    return (_b = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title) !== null && _b !== void 0 ? _b : def2;
  }
}
function getGuide(fieldDef) {
  if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {
    return fieldDef.axis;
  } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {
    return fieldDef.legend;
  } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {
    return fieldDef.header;
  }
  return void 0;
}
function defaultTitle(fieldDef, config) {
  return titleFormatter(fieldDef, config);
}
function getFormatMixins(fieldDef) {
  var _a;
  if (isStringFieldOrDatumDef(fieldDef)) {
    const { format: format5, formatType } = fieldDef;
    return { format: format5, formatType };
  } else {
    const guide = (_a = getGuide(fieldDef)) !== null && _a !== void 0 ? _a : {};
    const { format: format5, formatType } = guide;
    return { format: format5, formatType };
  }
}
function defaultType(fieldDef, channel) {
  var _a;
  switch (channel) {
    case "latitude":
    case "longitude":
      return "quantitative";
    case "row":
    case "column":
    case "facet":
    case "shape":
    case "strokeDash":
      return "nominal";
    case "order":
      return "ordinal";
  }
  if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {
    return "ordinal";
  }
  const { aggregate, bin: bin5, timeUnit } = fieldDef;
  if (timeUnit) {
    return "temporal";
  }
  if (bin5 || aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
    return "quantitative";
  }
  if (isScaleFieldDef(fieldDef) && ((_a = fieldDef.scale) === null || _a === void 0 ? void 0 : _a.type)) {
    switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {
      case "numeric":
      case "discretizing":
        return "quantitative";
      case "time":
        return "temporal";
    }
  }
  return "nominal";
}
function getFieldDef(channelDef) {
  if (isFieldDef(channelDef)) {
    return channelDef;
  } else if (hasConditionalFieldDef(channelDef)) {
    return channelDef.condition;
  }
  return void 0;
}
function getFieldOrDatumDef(channelDef) {
  if (isFieldOrDatumDef(channelDef)) {
    return channelDef;
  } else if (hasConditionalFieldOrDatumDef(channelDef)) {
    return channelDef.condition;
  }
  return void 0;
}
function initChannelDef(channelDef, channel, config, opt = {}) {
  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {
    const primitiveType = isString(channelDef) ? "string" : isNumber(channelDef) ? "number" : "boolean";
    warn2(message_exports.primitiveChannelDef(channel, primitiveType, channelDef));
    return { value: channelDef };
  }
  if (isFieldOrDatumDef(channelDef)) {
    return initFieldOrDatumDef(channelDef, channel, config, opt);
  } else if (hasConditionalFieldOrDatumDef(channelDef)) {
    return Object.assign(Object.assign({}, channelDef), {
      condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt)
    });
  }
  return channelDef;
}
function initFieldOrDatumDef(fd, channel, config, opt) {
  if (isStringFieldOrDatumDef(fd)) {
    const { format: format5, formatType } = fd, rest = __rest6(fd, ["format", "formatType"]);
    if (isCustomFormatType(formatType) && !config.customFormatTypes) {
      warn2(message_exports.customFormatTypeNotAllowed(channel));
      return initFieldOrDatumDef(rest, channel, config, opt);
    }
  } else {
    const guideType = isPositionFieldOrDatumDef(fd) ? "axis" : isMarkPropFieldOrDatumDef(fd) ? "legend" : isFacetFieldDef(fd) ? "header" : null;
    if (guideType && fd[guideType]) {
      const _a = fd[guideType], { format: format5, formatType } = _a, newGuide = __rest6(_a, ["format", "formatType"]);
      if (isCustomFormatType(formatType) && !config.customFormatTypes) {
        warn2(message_exports.customFormatTypeNotAllowed(channel));
        return initFieldOrDatumDef(Object.assign(Object.assign({}, fd), { [guideType]: newGuide }), channel, config, opt);
      }
    }
  }
  if (isFieldDef(fd)) {
    return initFieldDef(fd, channel, opt);
  }
  return initDatumDef(fd);
}
function initDatumDef(datumDef) {
  let type3 = datumDef["type"];
  if (type3) {
    return datumDef;
  }
  const { datum: datum2 } = datumDef;
  type3 = isNumber(datum2) ? "quantitative" : isString(datum2) ? "nominal" : isDateTime(datum2) ? "temporal" : void 0;
  return Object.assign(Object.assign({}, datumDef), { type: type3 });
}
function initFieldDef(fd, channel, { compositeMark = false } = {}) {
  const { aggregate, timeUnit, bin: bin5, field: field3 } = fd;
  const fieldDef = Object.assign({}, fd);
  if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
    warn2(message_exports.invalidAggregate(aggregate));
    delete fieldDef.aggregate;
  }
  if (timeUnit) {
    fieldDef.timeUnit = normalizeTimeUnit(timeUnit);
  }
  if (field3) {
    fieldDef.field = `${field3}`;
  }
  if (isBinning(bin5)) {
    fieldDef.bin = normalizeBin(bin5, channel);
  }
  if (isBinned(bin5) && !isXorY(channel)) {
    warn2(message_exports.channelShouldNotBeUsedForBinned(channel));
  }
  if (isTypedFieldDef(fieldDef)) {
    const { type: type3 } = fieldDef;
    const fullType = getFullName(type3);
    if (type3 !== fullType) {
      fieldDef.type = fullType;
    }
    if (type3 !== "quantitative") {
      if (isCountingAggregateOp(aggregate)) {
        warn2(message_exports.invalidFieldTypeForCountAggregate(type3, aggregate));
        fieldDef.type = "quantitative";
      }
    }
  } else if (!isSecondaryRangeChannel(channel)) {
    const newType = defaultType(fieldDef, channel);
    fieldDef["type"] = newType;
  }
  if (isTypedFieldDef(fieldDef)) {
    const { compatible, warning } = channelCompatibility(fieldDef, channel) || {};
    if (compatible === false) {
      warn2(warning);
    }
  }
  if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {
    const { sort: sort4 } = fieldDef;
    if (isSortByChannel(sort4)) {
      return Object.assign(Object.assign({}, fieldDef), { sort: { encoding: sort4 } });
    }
    const sub = sort4.substr(1);
    if (sort4.charAt(0) === "-" && isSortByChannel(sub)) {
      return Object.assign(Object.assign({}, fieldDef), { sort: { encoding: sub, order: "descending" } });
    }
  }
  if (isFacetFieldDef(fieldDef)) {
    const { header } = fieldDef;
    if (header) {
      const { orient: orient2 } = header, rest = __rest6(header, ["orient"]);
      if (orient2) {
        return Object.assign(Object.assign({}, fieldDef), { header: Object.assign(Object.assign({}, rest), { labelOrient: header.labelOrient || orient2, titleOrient: header.titleOrient || orient2 }) });
      }
    }
  }
  return fieldDef;
}
function normalizeBin(bin5, channel) {
  if (isBoolean(bin5)) {
    return { maxbins: autoMaxBins(channel) };
  } else if (bin5 === "binned") {
    return {
      binned: true
    };
  } else if (!bin5.maxbins && !bin5.step) {
    return Object.assign(Object.assign({}, bin5), { maxbins: autoMaxBins(channel) });
  } else {
    return bin5;
  }
}
var COMPATIBLE = { compatible: true };
function channelCompatibility(fieldDef, channel) {
  const type3 = fieldDef.type;
  if (type3 === "geojson" && channel !== "shape") {
    return {
      compatible: false,
      warning: `Channel ${channel} should not be used with a geojson data.`
    };
  }
  switch (channel) {
    case ROW:
    case COLUMN:
    case FACET:
      if (!isDiscrete3(fieldDef)) {
        return {
          compatible: false,
          warning: message_exports.channelShouldBeDiscrete(channel)
        };
      }
      return COMPATIBLE;
    case X3:
    case Y3:
    case XOFFSET:
    case YOFFSET:
    case COLOR:
    case FILL:
    case STROKE:
    case TEXT:
    case DETAIL:
    case KEY:
    case TOOLTIP:
    case HREF:
    case URL2:
    case ANGLE:
    case THETA:
    case RADIUS:
    case DESCRIPTION:
      return COMPATIBLE;
    case LONGITUDE:
    case LONGITUDE2:
    case LATITUDE:
    case LATITUDE2:
      if (type3 !== QUANTITATIVE) {
        return {
          compatible: false,
          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`
        };
      }
      return COMPATIBLE;
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
    case STROKEWIDTH:
    case SIZE2:
    case THETA2:
    case RADIUS2:
    case X23:
    case Y23:
      if (type3 === "nominal" && !fieldDef["sort"]) {
        return {
          compatible: false,
          warning: `Channel ${channel} should not be used with an unsorted discrete field.`
        };
      }
      return COMPATIBLE;
    case SHAPE:
    case STROKEDASH:
      if (!isDiscrete3(fieldDef) && !isDiscretizing2(fieldDef)) {
        return {
          compatible: false,
          warning: message_exports.channelShouldBeDiscreteOrDiscretizing(channel)
        };
      }
      return COMPATIBLE;
    case ORDER:
      if (fieldDef.type === "nominal" && !("sort" in fieldDef)) {
        return {
          compatible: false,
          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`
        };
      }
      return COMPATIBLE;
  }
}
function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {
  const { formatType } = getFormatMixins(fieldOrDatumDef);
  return formatType === "time" || !formatType && isTimeFieldDef(fieldOrDatumDef);
}
function isTimeFieldDef(def2) {
  return def2 && (def2["type"] === "temporal" || isFieldDef(def2) && !!def2.timeUnit);
}
function valueExpr(v2, { timeUnit, type: type3, wrapTime, undefinedIfExprNotRequired }) {
  var _a;
  const unit2 = timeUnit && ((_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit);
  let isTime = unit2 || type3 === "temporal";
  let expr2;
  if (isExprRef(v2)) {
    expr2 = v2.expr;
  } else if (isSignalRef(v2)) {
    expr2 = v2.signal;
  } else if (isDateTime(v2)) {
    isTime = true;
    expr2 = dateTimeToExpr(v2);
  } else if (isString(v2) || isNumber(v2)) {
    if (isTime) {
      expr2 = `datetime(${stringify(v2)})`;
      if (isLocalSingleTimeUnit(unit2)) {
        if (isNumber(v2) && v2 < 1e4 || isString(v2) && isNaN(Date.parse(v2))) {
          expr2 = dateTimeToExpr({ [unit2]: v2 });
        }
      }
    }
  }
  if (expr2) {
    return wrapTime && isTime ? `time(${expr2})` : expr2;
  }
  return undefinedIfExprNotRequired ? void 0 : stringify(v2);
}
function valueArray(fieldOrDatumDef, values5) {
  const { type: type3 } = fieldOrDatumDef;
  return values5.map((v2) => {
    const expr2 = valueExpr(v2, {
      timeUnit: isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.timeUnit : void 0,
      type: type3,
      undefinedIfExprNotRequired: true
    });
    if (expr2 !== void 0) {
      return { signal: expr2 };
    }
    return v2;
  });
}
function binRequiresRange(fieldDef, channel) {
  if (!isBinning(fieldDef.bin)) {
    console.warn("Only call this method for binned field defs.");
    return false;
  }
  return isScaleChannel(channel) && ["ordinal", "nominal"].includes(fieldDef.type);
}

// node_modules/vega-lite/build/src/axis.js
var CONDITIONAL_AXIS_PROP_INDEX = {
  labelAlign: {
    part: "labels",
    vgProp: "align"
  },
  labelBaseline: {
    part: "labels",
    vgProp: "baseline"
  },
  labelColor: {
    part: "labels",
    vgProp: "fill"
  },
  labelFont: {
    part: "labels",
    vgProp: "font"
  },
  labelFontSize: {
    part: "labels",
    vgProp: "fontSize"
  },
  labelFontStyle: {
    part: "labels",
    vgProp: "fontStyle"
  },
  labelFontWeight: {
    part: "labels",
    vgProp: "fontWeight"
  },
  labelOpacity: {
    part: "labels",
    vgProp: "opacity"
  },
  labelOffset: null,
  labelPadding: null,
  gridColor: {
    part: "grid",
    vgProp: "stroke"
  },
  gridDash: {
    part: "grid",
    vgProp: "strokeDash"
  },
  gridDashOffset: {
    part: "grid",
    vgProp: "strokeDashOffset"
  },
  gridOpacity: {
    part: "grid",
    vgProp: "opacity"
  },
  gridWidth: {
    part: "grid",
    vgProp: "strokeWidth"
  },
  tickColor: {
    part: "ticks",
    vgProp: "stroke"
  },
  tickDash: {
    part: "ticks",
    vgProp: "strokeDash"
  },
  tickDashOffset: {
    part: "ticks",
    vgProp: "strokeDashOffset"
  },
  tickOpacity: {
    part: "ticks",
    vgProp: "opacity"
  },
  tickSize: null,
  tickWidth: {
    part: "ticks",
    vgProp: "strokeWidth"
  }
};
function isConditionalAxisValue(v2) {
  return v2 === null || v2 === void 0 ? void 0 : v2.condition;
}
var AXIS_PARTS = ["domain", "grid", "labels", "ticks", "title"];
var AXIS_PROPERTY_TYPE = {
  grid: "grid",
  gridCap: "grid",
  gridColor: "grid",
  gridDash: "grid",
  gridDashOffset: "grid",
  gridOpacity: "grid",
  gridScale: "grid",
  gridWidth: "grid",
  orient: "main",
  bandPosition: "both",
  aria: "main",
  description: "main",
  domain: "main",
  domainCap: "main",
  domainColor: "main",
  domainDash: "main",
  domainDashOffset: "main",
  domainOpacity: "main",
  domainWidth: "main",
  format: "main",
  formatType: "main",
  labelAlign: "main",
  labelAngle: "main",
  labelBaseline: "main",
  labelBound: "main",
  labelColor: "main",
  labelFlush: "main",
  labelFlushOffset: "main",
  labelFont: "main",
  labelFontSize: "main",
  labelFontStyle: "main",
  labelFontWeight: "main",
  labelLimit: "main",
  labelLineHeight: "main",
  labelOffset: "main",
  labelOpacity: "main",
  labelOverlap: "main",
  labelPadding: "main",
  labels: "main",
  labelSeparation: "main",
  maxExtent: "main",
  minExtent: "main",
  offset: "both",
  position: "main",
  tickCap: "main",
  tickColor: "main",
  tickDash: "main",
  tickDashOffset: "main",
  tickMinStep: "both",
  tickOffset: "both",
  tickOpacity: "main",
  tickRound: "both",
  ticks: "main",
  tickSize: "main",
  tickWidth: "both",
  title: "main",
  titleAlign: "main",
  titleAnchor: "main",
  titleAngle: "main",
  titleBaseline: "main",
  titleColor: "main",
  titleFont: "main",
  titleFontSize: "main",
  titleFontStyle: "main",
  titleFontWeight: "main",
  titleLimit: "main",
  titleLineHeight: "main",
  titleOpacity: "main",
  titlePadding: "main",
  titleX: "main",
  titleY: "main",
  encode: "both",
  scale: "both",
  tickBand: "both",
  tickCount: "both",
  tickExtra: "both",
  translate: "both",
  values: "both",
  zindex: "both"
};
var COMMON_AXIS_PROPERTIES_INDEX = {
  orient: 1,
  aria: 1,
  bandPosition: 1,
  description: 1,
  domain: 1,
  domainCap: 1,
  domainColor: 1,
  domainDash: 1,
  domainDashOffset: 1,
  domainOpacity: 1,
  domainWidth: 1,
  format: 1,
  formatType: 1,
  grid: 1,
  gridCap: 1,
  gridColor: 1,
  gridDash: 1,
  gridDashOffset: 1,
  gridOpacity: 1,
  gridWidth: 1,
  labelAlign: 1,
  labelAngle: 1,
  labelBaseline: 1,
  labelBound: 1,
  labelColor: 1,
  labelFlush: 1,
  labelFlushOffset: 1,
  labelFont: 1,
  labelFontSize: 1,
  labelFontStyle: 1,
  labelFontWeight: 1,
  labelLimit: 1,
  labelLineHeight: 1,
  labelOffset: 1,
  labelOpacity: 1,
  labelOverlap: 1,
  labelPadding: 1,
  labels: 1,
  labelSeparation: 1,
  maxExtent: 1,
  minExtent: 1,
  offset: 1,
  position: 1,
  tickBand: 1,
  tickCap: 1,
  tickColor: 1,
  tickCount: 1,
  tickDash: 1,
  tickDashOffset: 1,
  tickExtra: 1,
  tickMinStep: 1,
  tickOffset: 1,
  tickOpacity: 1,
  tickRound: 1,
  ticks: 1,
  tickSize: 1,
  tickWidth: 1,
  title: 1,
  titleAlign: 1,
  titleAnchor: 1,
  titleAngle: 1,
  titleBaseline: 1,
  titleColor: 1,
  titleFont: 1,
  titleFontSize: 1,
  titleFontStyle: 1,
  titleFontWeight: 1,
  titleLimit: 1,
  titleLineHeight: 1,
  titleOpacity: 1,
  titlePadding: 1,
  titleX: 1,
  titleY: 1,
  translate: 1,
  values: 1,
  zindex: 1
};
var AXIS_PROPERTIES_INDEX = Object.assign(Object.assign({}, COMMON_AXIS_PROPERTIES_INDEX), { style: 1, labelExpr: 1, encoding: 1 });
function isAxisProperty(prop) {
  return !!AXIS_PROPERTIES_INDEX[prop];
}
var AXIS_PROPERTIES = keys3(AXIS_PROPERTIES_INDEX);
var AXIS_CONFIGS_INDEX = {
  axis: 1,
  axisBand: 1,
  axisBottom: 1,
  axisDiscrete: 1,
  axisLeft: 1,
  axisPoint: 1,
  axisQuantitative: 1,
  axisRight: 1,
  axisTemporal: 1,
  axisTop: 1,
  axisX: 1,
  axisXBand: 1,
  axisXDiscrete: 1,
  axisXPoint: 1,
  axisXQuantitative: 1,
  axisXTemporal: 1,
  axisY: 1,
  axisYBand: 1,
  axisYDiscrete: 1,
  axisYPoint: 1,
  axisYQuantitative: 1,
  axisYTemporal: 1
};
var AXIS_CONFIGS = keys3(AXIS_CONFIGS_INDEX);

// node_modules/vega-lite/build/src/spec/unit.js
function isUnitSpec(spec) {
  return "mark" in spec;
}

// node_modules/vega-lite/build/src/compositemark/base.js
var CompositeMarkNormalizer = class {
  constructor(name4, run2) {
    this.name = name4;
    this.run = run2;
  }
  hasMatchingType(spec) {
    if (isUnitSpec(spec)) {
      return getMarkType(spec.mark) === this.name;
    }
    return false;
  }
};

// node_modules/vega-lite/build/src/encoding.js
var __rest7 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function channelHasField(encoding, channel) {
  const channelDef = encoding && encoding[channel];
  if (channelDef) {
    if (isArray(channelDef)) {
      return some3(channelDef, (fieldDef) => !!fieldDef.field);
    } else {
      return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);
    }
  }
  return false;
}
function channelHasFieldOrDatum(encoding, channel) {
  const channelDef = encoding && encoding[channel];
  if (channelDef) {
    if (isArray(channelDef)) {
      return some3(channelDef, (fieldDef) => !!fieldDef.field);
    } else {
      return isFieldDef(channelDef) || isDatumDef(channelDef) || hasConditionalFieldOrDatumDef(channelDef);
    }
  }
  return false;
}
function channelHasNestedOffsetScale(encoding, channel) {
  if (isXorY(channel)) {
    const fieldDef = encoding[channel];
    if ((isFieldDef(fieldDef) || isDatumDef(fieldDef)) && isDiscrete2(fieldDef.type)) {
      const offsetChannel = getOffsetScaleChannel(channel);
      return channelHasFieldOrDatum(encoding, offsetChannel);
    }
  }
  return false;
}
function isAggregate(encoding) {
  return some3(CHANNELS, (channel) => {
    if (channelHasField(encoding, channel)) {
      const channelDef = encoding[channel];
      if (isArray(channelDef)) {
        return some3(channelDef, (fieldDef) => !!fieldDef.aggregate);
      } else {
        const fieldDef = getFieldDef(channelDef);
        return fieldDef && !!fieldDef.aggregate;
      }
    }
    return false;
  });
}
function extractTransformsFromEncoding(oldEncoding, config) {
  const groupby = [];
  const bins2 = [];
  const timeUnits2 = [];
  const aggregate = [];
  const encoding = {};
  forEach(oldEncoding, (channelDef, channel) => {
    if (isFieldDef(channelDef)) {
      const { field: field3, aggregate: aggOp, bin: bin5, timeUnit } = channelDef, remaining = __rest7(channelDef, ["field", "aggregate", "bin", "timeUnit"]);
      if (aggOp || timeUnit || bin5) {
        const guide = getGuide(channelDef);
        const isTitleDefined = guide === null || guide === void 0 ? void 0 : guide.title;
        let newField = vgField(channelDef, { forAs: true });
        const newFieldDef = Object.assign(Object.assign(Object.assign({}, isTitleDefined ? [] : { title: title(channelDef, config, { allowDisabling: true }) }), remaining), {
          field: newField
        });
        if (aggOp) {
          let op;
          if (isArgmaxDef(aggOp)) {
            op = "argmax";
            newField = vgField({ op: "argmax", field: aggOp.argmax }, { forAs: true });
            newFieldDef.field = `${newField}.${field3}`;
          } else if (isArgminDef(aggOp)) {
            op = "argmin";
            newField = vgField({ op: "argmin", field: aggOp.argmin }, { forAs: true });
            newFieldDef.field = `${newField}.${field3}`;
          } else if (aggOp !== "boxplot" && aggOp !== "errorbar" && aggOp !== "errorband") {
            op = aggOp;
          }
          if (op) {
            const aggregateEntry = {
              op,
              as: newField
            };
            if (field3) {
              aggregateEntry.field = field3;
            }
            aggregate.push(aggregateEntry);
          }
        } else {
          groupby.push(newField);
          if (isTypedFieldDef(channelDef) && isBinning(bin5)) {
            bins2.push({ bin: bin5, field: field3, as: newField });
            groupby.push(vgField(channelDef, { binSuffix: "end" }));
            if (binRequiresRange(channelDef, channel)) {
              groupby.push(vgField(channelDef, { binSuffix: "range" }));
            }
            if (isXorY(channel)) {
              const secondaryChannel = {
                field: `${newField}_end`
              };
              encoding[`${channel}2`] = secondaryChannel;
            }
            newFieldDef.bin = "binned";
            if (!isSecondaryRangeChannel(channel)) {
              newFieldDef["type"] = QUANTITATIVE;
            }
          } else if (timeUnit) {
            timeUnits2.push({
              timeUnit,
              field: field3,
              as: newField
            });
            const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && "time";
            if (formatType) {
              if (channel === TEXT || channel === TOOLTIP) {
                newFieldDef["formatType"] = formatType;
              } else if (isNonPositionScaleChannel(channel)) {
                newFieldDef["legend"] = Object.assign({ formatType }, newFieldDef["legend"]);
              } else if (isXorY(channel)) {
                newFieldDef["axis"] = Object.assign({ formatType }, newFieldDef["axis"]);
              }
            }
          }
        }
        encoding[channel] = newFieldDef;
      } else {
        groupby.push(field3);
        encoding[channel] = oldEncoding[channel];
      }
    } else {
      encoding[channel] = oldEncoding[channel];
    }
  });
  return {
    bins: bins2,
    timeUnits: timeUnits2,
    aggregate,
    groupby,
    encoding
  };
}
function markChannelCompatible(encoding, channel, mark2) {
  const markSupported = supportMark(channel, mark2);
  if (!markSupported) {
    return false;
  } else if (markSupported === "binned") {
    const primaryFieldDef = encoding[channel === X23 ? X3 : Y3];
    if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {
      return true;
    } else {
      return false;
    }
  }
  return true;
}
function initEncoding(encoding, mark2, filled, config) {
  const normalizedEncoding = {};
  for (const key2 of keys3(encoding)) {
    if (!isChannel(key2)) {
      warn2(message_exports.invalidEncodingChannel(key2));
    }
  }
  for (let channel of UNIT_CHANNELS) {
    if (!encoding[channel]) {
      continue;
    }
    const channelDef = encoding[channel];
    if (isXorYOffset(channel)) {
      const mainChannel = getMainChannelFromOffsetChannel(channel);
      const positionDef = normalizedEncoding[mainChannel];
      if (isFieldDef(positionDef)) {
        if (isContinuous2(positionDef.type)) {
          if (isFieldDef(channelDef)) {
            warn2(message_exports.offsetNestedInsideContinuousPositionScaleDropped(mainChannel));
            continue;
          }
        }
      } else {
        channel = mainChannel;
        warn2(message_exports.replaceOffsetWithMainChannel(mainChannel));
      }
    }
    if (channel === "angle" && mark2 === "arc" && !encoding.theta) {
      warn2(message_exports.REPLACE_ANGLE_WITH_THETA);
      channel = THETA;
    }
    if (!markChannelCompatible(encoding, channel, mark2)) {
      warn2(message_exports.incompatibleChannel(channel, mark2));
      continue;
    }
    if (channel === SIZE2 && mark2 === "line") {
      const fieldDef = getFieldDef(encoding[channel]);
      if (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.aggregate) {
        warn2(message_exports.LINE_WITH_VARYING_SIZE);
        continue;
      }
    }
    if (channel === COLOR && (filled ? "fill" in encoding : "stroke" in encoding)) {
      warn2(message_exports.droppingColor("encoding", { fill: "fill" in encoding, stroke: "stroke" in encoding }));
      continue;
    }
    if (channel === DETAIL || channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef) || channel === TOOLTIP && isArray(channelDef)) {
      if (channelDef) {
        normalizedEncoding[channel] = array(channelDef).reduce((defs, fieldDef) => {
          if (!isFieldDef(fieldDef)) {
            warn2(message_exports.emptyFieldDef(fieldDef, channel));
          } else {
            defs.push(initFieldDef(fieldDef, channel));
          }
          return defs;
        }, []);
      }
    } else {
      if (channel === TOOLTIP && channelDef === null) {
        normalizedEncoding[channel] = null;
      } else if (!isFieldDef(channelDef) && !isDatumDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef) && !isSignalRef(channelDef)) {
        warn2(message_exports.emptyFieldDef(channelDef, channel));
        continue;
      }
      normalizedEncoding[channel] = initChannelDef(channelDef, channel, config);
    }
  }
  return normalizedEncoding;
}
function normalizeEncoding(encoding, config) {
  const normalizedEncoding = {};
  for (const channel of keys3(encoding)) {
    const newChannelDef = initChannelDef(encoding[channel], channel, config, { compositeMark: true });
    normalizedEncoding[channel] = newChannelDef;
  }
  return normalizedEncoding;
}
function fieldDefs(encoding) {
  const arr = [];
  for (const channel of keys3(encoding)) {
    if (channelHasField(encoding, channel)) {
      const channelDef = encoding[channel];
      const channelDefArray = array(channelDef);
      for (const def2 of channelDefArray) {
        if (isFieldDef(def2)) {
          arr.push(def2);
        } else if (hasConditionalFieldDef(def2)) {
          arr.push(def2.condition);
        }
      }
    }
  }
  return arr;
}
function forEach(mapping, f, thisArg) {
  if (!mapping) {
    return;
  }
  for (const channel of keys3(mapping)) {
    const el = mapping[channel];
    if (isArray(el)) {
      for (const channelDef of el) {
        f.call(thisArg, channelDef, channel);
      }
    } else {
      f.call(thisArg, el, channel);
    }
  }
}
function reduce3(mapping, f, init2, thisArg) {
  if (!mapping) {
    return init2;
  }
  return keys3(mapping).reduce((r, channel) => {
    const map7 = mapping[channel];
    if (isArray(map7)) {
      return map7.reduce((r1, channelDef) => {
        return f.call(thisArg, r1, channelDef, channel);
      }, r);
    } else {
      return f.call(thisArg, r, map7, channel);
    }
  }, init2);
}
function pathGroupingFields(mark2, encoding) {
  return keys3(encoding).reduce((details, channel) => {
    switch (channel) {
      case X3:
      case Y3:
      case HREF:
      case DESCRIPTION:
      case URL2:
      case X23:
      case Y23:
      case XOFFSET:
      case YOFFSET:
      case THETA:
      case THETA2:
      case RADIUS:
      case RADIUS2:
      case LATITUDE:
      case LONGITUDE:
      case LATITUDE2:
      case LONGITUDE2:
      case TEXT:
      case SHAPE:
      case ANGLE:
      case TOOLTIP:
        return details;
      case ORDER:
        if (mark2 === "line" || mark2 === "trail") {
          return details;
        }
      case DETAIL:
      case KEY: {
        const channelDef = encoding[channel];
        if (isArray(channelDef) || isFieldDef(channelDef)) {
          for (const fieldDef of array(channelDef)) {
            if (!fieldDef.aggregate) {
              details.push(vgField(fieldDef, {}));
            }
          }
        }
        return details;
      }
      case SIZE2:
        if (mark2 === "trail") {
          return details;
        }
      case COLOR:
      case FILL:
      case STROKE:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case STROKEDASH:
      case STROKEWIDTH: {
        const fieldDef = getFieldDef(encoding[channel]);
        if (fieldDef && !fieldDef.aggregate) {
          details.push(vgField(fieldDef, {}));
        }
        return details;
      }
    }
  }, []);
}

// node_modules/vega-lite/build/src/compositemark/common.js
var __rest8 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function filterTooltipWithAggregatedField(oldEncoding) {
  const { tooltip: tooltip2 } = oldEncoding, filteredEncoding = __rest8(oldEncoding, ["tooltip"]);
  if (!tooltip2) {
    return { filteredEncoding };
  }
  let customTooltipWithAggregatedField;
  let customTooltipWithoutAggregatedField;
  if (isArray(tooltip2)) {
    for (const t4 of tooltip2) {
      if (t4.aggregate) {
        if (!customTooltipWithAggregatedField) {
          customTooltipWithAggregatedField = [];
        }
        customTooltipWithAggregatedField.push(t4);
      } else {
        if (!customTooltipWithoutAggregatedField) {
          customTooltipWithoutAggregatedField = [];
        }
        customTooltipWithoutAggregatedField.push(t4);
      }
    }
    if (customTooltipWithAggregatedField) {
      filteredEncoding.tooltip = customTooltipWithAggregatedField;
    }
  } else {
    if (tooltip2["aggregate"]) {
      filteredEncoding.tooltip = tooltip2;
    } else {
      customTooltipWithoutAggregatedField = tooltip2;
    }
  }
  if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {
    customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];
  }
  return { customTooltipWithoutAggregatedField, filteredEncoding };
}
function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {
  if ("tooltip" in encodingWithoutContinuousAxis) {
    return { tooltip: encodingWithoutContinuousAxis.tooltip };
  }
  const fiveSummaryTooltip = tooltipSummary.map(({ fieldPrefix, titlePrefix }) => {
    const mainTitle = withFieldName ? ` of ${getTitle(continuousAxisChannelDef)}` : "";
    return {
      field: fieldPrefix + continuousAxisChannelDef.field,
      type: continuousAxisChannelDef.type,
      title: isSignalRef(titlePrefix) ? { signal: `${titlePrefix}"${escape(mainTitle)}"` } : titlePrefix + mainTitle
    };
  });
  const tooltipFieldDefs = fieldDefs(encodingWithoutContinuousAxis).map(toStringFieldDef);
  return {
    tooltip: [
      ...fiveSummaryTooltip,
      ...unique(tooltipFieldDefs, hash)
    ]
  };
}
function getTitle(continuousAxisChannelDef) {
  const { title: title2, field: field3 } = continuousAxisChannelDef;
  return getFirstDefined(title2, field3);
}
function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
  const { scale: scale7, axis } = continuousAxisChannelDef;
  return ({ partName, mark: mark2, positionPrefix, endPositionPrefix = void 0, extraEncoding = {} }) => {
    const title2 = getTitle(continuousAxisChannelDef);
    return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {
      mark: mark2,
      encoding: Object.assign(Object.assign(Object.assign({ [continuousAxis]: Object.assign(Object.assign(Object.assign({ field: `${positionPrefix}_${continuousAxisChannelDef.field}`, type: continuousAxisChannelDef.type }, title2 !== void 0 ? { title: title2 } : {}), scale7 !== void 0 ? { scale: scale7 } : {}), axis !== void 0 ? { axis } : {}) }, isString(endPositionPrefix) ? {
        [`${continuousAxis}2`]: {
          field: `${endPositionPrefix}_${continuousAxisChannelDef.field}`
        }
      } : {}), sharedEncoding), extraEncoding)
    });
  };
}
function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {
  const { clip: clip3, color: color5, opacity: opacity2 } = markDef;
  const mark2 = markDef.type;
  if (markDef[part] || markDef[part] === void 0 && compositeMarkConfig[part]) {
    return [
      Object.assign(Object.assign({}, partBaseSpec), { mark: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, compositeMarkConfig[part]), clip3 ? { clip: clip3 } : {}), color5 ? { color: color5 } : {}), opacity2 ? { opacity: opacity2 } : {}), isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : { type: partBaseSpec.mark }), { style: `${mark2}-${String(part)}` }), isBoolean(markDef[part]) ? {} : markDef[part]) })
    ];
  }
  return [];
}
function compositeMarkContinuousAxis(spec, orient2, compositeMark) {
  const { encoding } = spec;
  const continuousAxis = orient2 === "vertical" ? "y" : "x";
  const continuousAxisChannelDef = encoding[continuousAxis];
  const continuousAxisChannelDef2 = encoding[`${continuousAxis}2`];
  const continuousAxisChannelDefError = encoding[`${continuousAxis}Error`];
  const continuousAxisChannelDefError2 = encoding[`${continuousAxis}Error2`];
  return {
    continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
    continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
    continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
    continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
    continuousAxis
  };
}
function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
  if (continuousAxisChannelDef === null || continuousAxisChannelDef === void 0 ? void 0 : continuousAxisChannelDef.aggregate) {
    const { aggregate } = continuousAxisChannelDef, continuousAxisWithoutAggregate = __rest8(continuousAxisChannelDef, ["aggregate"]);
    if (aggregate !== compositeMark) {
      warn2(message_exports.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
    }
    return continuousAxisWithoutAggregate;
  } else {
    return continuousAxisChannelDef;
  }
}
function compositeMarkOrient(spec, compositeMark) {
  const { mark: mark2, encoding } = spec;
  const { x: x5, y: y5 } = encoding;
  if (isMarkDef(mark2) && mark2.orient) {
    return mark2.orient;
  }
  if (isContinuousFieldOrDatumDef(x5)) {
    if (isContinuousFieldOrDatumDef(y5)) {
      const xAggregate = isFieldDef(x5) && x5.aggregate;
      const yAggregate = isFieldDef(y5) && y5.aggregate;
      if (!xAggregate && yAggregate === compositeMark) {
        return "vertical";
      } else if (!yAggregate && xAggregate === compositeMark) {
        return "horizontal";
      } else if (xAggregate === compositeMark && yAggregate === compositeMark) {
        throw new Error("Both x and y cannot have aggregate");
      } else {
        if (isFieldOrDatumDefForTimeFormat(y5) && !isFieldOrDatumDefForTimeFormat(x5)) {
          return "horizontal";
        }
        return "vertical";
      }
    }
    return "horizontal";
  } else if (isContinuousFieldOrDatumDef(y5)) {
    return "vertical";
  } else {
    throw new Error(`Need a valid continuous axis for ${compositeMark}s`);
  }
}

// node_modules/vega-lite/build/src/compositemark/boxplot.js
var __rest9 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var BOXPLOT = "boxplot";
var BOXPLOT_PARTS = ["box", "median", "outliers", "rule", "ticks"];
var boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);
function getBoxPlotType(extent4) {
  if (isNumber(extent4)) {
    return "tukey";
  }
  return extent4;
}
function normalizeBoxPlot(spec, { config }) {
  var _a, _b;
  spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });
  const { mark: mark2, encoding: _encoding, params: params2, projection: _p } = spec, outerSpec = __rest9(spec, ["mark", "encoding", "params", "projection"]);
  const markDef = isMarkDef(mark2) ? mark2 : { type: mark2 };
  if (params2) {
    warn2(message_exports.selectionNotSupported("boxplot"));
  }
  const extent4 = (_a = markDef.extent) !== null && _a !== void 0 ? _a : config.boxplot.extent;
  const sizeValue = getMarkPropOrConfig(
    "size",
    markDef,
    config
  );
  const invalid = markDef.invalid;
  const boxPlotType = getBoxPlotType(extent4);
  const { bins: bins2, timeUnits: timeUnits2, transform: transform4, continuousAxisChannelDef, continuousAxis, groupby, aggregate, encodingWithoutContinuousAxis, ticksOrient, boxOrient, customTooltipWithoutAggregatedField } = boxParams(spec, extent4, config);
  const { color: color5, size } = encodingWithoutContinuousAxis, encodingWithoutSizeColorAndContinuousAxis = __rest9(encodingWithoutContinuousAxis, ["color", "size"]);
  const makeBoxPlotPart = (sharedEncoding) => {
    return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
  };
  const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
  const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
  const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis), size ? { size } : {}));
  const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([
    { fieldPrefix: boxPlotType === "min-max" ? "upper_whisker_" : "max_", titlePrefix: "Max" },
    { fieldPrefix: "upper_box_", titlePrefix: "Q3" },
    { fieldPrefix: "mid_box_", titlePrefix: "Median" },
    { fieldPrefix: "lower_box_", titlePrefix: "Q1" },
    { fieldPrefix: boxPlotType === "min-max" ? "lower_whisker_" : "min_", titlePrefix: "Min" }
  ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
  const endTick = { type: "tick", color: "black", opacity: 1, orient: ticksOrient, invalid, aria: false };
  const whiskerTooltipEncoding = boxPlotType === "min-max" ? fiveSummaryTooltipEncoding : getCompositeMarkTooltip([
    { fieldPrefix: "upper_whisker_", titlePrefix: "Upper Whisker" },
    { fieldPrefix: "lower_whisker_", titlePrefix: "Lower Whisker" }
  ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
  const whiskerLayers = [
    ...makeBoxPlotExtent({
      partName: "rule",
      mark: { type: "rule", invalid, aria: false },
      positionPrefix: "lower_whisker",
      endPositionPrefix: "lower_box",
      extraEncoding: whiskerTooltipEncoding
    }),
    ...makeBoxPlotExtent({
      partName: "rule",
      mark: { type: "rule", invalid, aria: false },
      positionPrefix: "upper_box",
      endPositionPrefix: "upper_whisker",
      extraEncoding: whiskerTooltipEncoding
    }),
    ...makeBoxPlotExtent({
      partName: "ticks",
      mark: endTick,
      positionPrefix: "lower_whisker",
      extraEncoding: whiskerTooltipEncoding
    }),
    ...makeBoxPlotExtent({
      partName: "ticks",
      mark: endTick,
      positionPrefix: "upper_whisker",
      extraEncoding: whiskerTooltipEncoding
    })
  ];
  const boxLayers = [
    ...boxPlotType !== "tukey" ? whiskerLayers : [],
    ...makeBoxPlotBox({
      partName: "box",
      mark: Object.assign(Object.assign({ type: "bar" }, sizeValue ? { size: sizeValue } : {}), { orient: boxOrient, invalid, ariaRoleDescription: "box" }),
      positionPrefix: "lower_box",
      endPositionPrefix: "upper_box",
      extraEncoding: fiveSummaryTooltipEncoding
    }),
    ...makeBoxPlotMidTick({
      partName: "median",
      mark: Object.assign(Object.assign(Object.assign({ type: "tick", invalid }, isObject(config.boxplot.median) && config.boxplot.median.color ? { color: config.boxplot.median.color } : {}), sizeValue ? { size: sizeValue } : {}), { orient: ticksOrient, aria: false }),
      positionPrefix: "mid_box",
      extraEncoding: fiveSummaryTooltipEncoding
    })
  ];
  if (boxPlotType === "min-max") {
    return Object.assign(Object.assign({}, outerSpec), { transform: ((_b = outerSpec.transform) !== null && _b !== void 0 ? _b : []).concat(transform4), layer: boxLayers });
  }
  const lowerBoxExpr = `datum["lower_box_${continuousAxisChannelDef.field}"]`;
  const upperBoxExpr = `datum["upper_box_${continuousAxisChannelDef.field}"]`;
  const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;
  const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent4} * ${iqrExpr}`;
  const upperWhiskerExpr = `${upperBoxExpr} + ${extent4} * ${iqrExpr}`;
  const fieldExpr2 = `datum["${continuousAxisChannelDef.field}"]`;
  const joinaggregateTransform = {
    joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),
    groupby
  };
  const filteredWhiskerSpec = {
    transform: [
      {
        filter: `(${lowerWhiskerExpr} <= ${fieldExpr2}) && (${fieldExpr2} <= ${upperWhiskerExpr})`
      },
      {
        aggregate: [
          {
            op: "min",
            field: continuousAxisChannelDef.field,
            as: `lower_whisker_${continuousAxisChannelDef.field}`
          },
          {
            op: "max",
            field: continuousAxisChannelDef.field,
            as: `upper_whisker_${continuousAxisChannelDef.field}`
          },
          {
            op: "min",
            field: `lower_box_${continuousAxisChannelDef.field}`,
            as: `lower_box_${continuousAxisChannelDef.field}`
          },
          {
            op: "max",
            field: `upper_box_${continuousAxisChannelDef.field}`,
            as: `upper_box_${continuousAxisChannelDef.field}`
          },
          ...aggregate
        ],
        groupby
      }
    ],
    layer: whiskerLayers
  };
  const { tooltip: tooltip2 } = encodingWithoutSizeColorAndContinuousAxis, encodingWithoutSizeColorContinuousAxisAndTooltip = __rest9(encodingWithoutSizeColorAndContinuousAxis, ["tooltip"]);
  const { scale: scale7, axis } = continuousAxisChannelDef;
  const title2 = getTitle(continuousAxisChannelDef);
  const axisWithoutTitle = omit(axis, ["title"]);
  const outlierLayersMixins = partLayerMixins(markDef, "outliers", config.boxplot, {
    transform: [{ filter: `(${fieldExpr2} < ${lowerWhiskerExpr}) || (${fieldExpr2} > ${upperWhiskerExpr})` }],
    mark: "point",
    encoding: Object.assign(Object.assign(Object.assign({ [continuousAxis]: Object.assign(Object.assign(Object.assign({ field: continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, title2 !== void 0 ? { title: title2 } : {}), scale7 !== void 0 ? { scale: scale7 } : {}), isEmpty(axisWithoutTitle) ? {} : { axis: axisWithoutTitle }) }, encodingWithoutSizeColorContinuousAxisAndTooltip), color5 ? { color: color5 } : {}), customTooltipWithoutAggregatedField ? { tooltip: customTooltipWithoutAggregatedField } : {})
  })[0];
  let filteredLayersMixins;
  const filteredLayersMixinsTransforms = [...bins2, ...timeUnits2, joinaggregateTransform];
  if (outlierLayersMixins) {
    filteredLayersMixins = {
      transform: filteredLayersMixinsTransforms,
      layer: [outlierLayersMixins, filteredWhiskerSpec]
    };
  } else {
    filteredLayersMixins = filteredWhiskerSpec;
    filteredLayersMixins.transform.unshift(...filteredLayersMixinsTransforms);
  }
  return Object.assign(Object.assign({}, outerSpec), { layer: [
    filteredLayersMixins,
    {
      transform: transform4,
      layer: boxLayers
    }
  ] });
}
function boxParamsQuartiles(continousAxisField) {
  return [
    {
      op: "q1",
      field: continousAxisField,
      as: `lower_box_${continousAxisField}`
    },
    {
      op: "q3",
      field: continousAxisField,
      as: `upper_box_${continousAxisField}`
    }
  ];
}
function boxParams(spec, extent4, config) {
  const orient2 = compositeMarkOrient(spec, BOXPLOT);
  const { continuousAxisChannelDef, continuousAxis } = compositeMarkContinuousAxis(spec, orient2, BOXPLOT);
  const continuousFieldName = continuousAxisChannelDef.field;
  const boxPlotType = getBoxPlotType(extent4);
  const boxplotSpecificAggregate = [
    ...boxParamsQuartiles(continuousFieldName),
    {
      op: "median",
      field: continuousFieldName,
      as: `mid_box_${continuousFieldName}`
    },
    {
      op: "min",
      field: continuousFieldName,
      as: (boxPlotType === "min-max" ? "lower_whisker_" : "min_") + continuousFieldName
    },
    {
      op: "max",
      field: continuousFieldName,
      as: (boxPlotType === "min-max" ? "upper_whisker_" : "max_") + continuousFieldName
    }
  ];
  const postAggregateCalculates = boxPlotType === "min-max" || boxPlotType === "tukey" ? [] : [
    {
      calculate: `datum["upper_box_${continuousFieldName}"] - datum["lower_box_${continuousFieldName}"]`,
      as: `iqr_${continuousFieldName}`
    },
    {
      calculate: `min(datum["upper_box_${continuousFieldName}"] + datum["iqr_${continuousFieldName}"] * ${extent4}, datum["max_${continuousFieldName}"])`,
      as: `upper_whisker_${continuousFieldName}`
    },
    {
      calculate: `max(datum["lower_box_${continuousFieldName}"] - datum["iqr_${continuousFieldName}"] * ${extent4}, datum["min_${continuousFieldName}"])`,
      as: `lower_whisker_${continuousFieldName}`
    }
  ];
  const _a = spec.encoding, _b = continuousAxis, oldContinuousAxisChannelDef = _a[_b], oldEncodingWithoutContinuousAxis = __rest9(_a, [typeof _b === "symbol" ? _b : _b + ""]);
  const { customTooltipWithoutAggregatedField, filteredEncoding } = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis);
  const { bins: bins2, timeUnits: timeUnits2, aggregate, groupby, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(filteredEncoding, config);
  const ticksOrient = orient2 === "vertical" ? "horizontal" : "vertical";
  const boxOrient = orient2;
  const transform4 = [
    ...bins2,
    ...timeUnits2,
    {
      aggregate: [...aggregate, ...boxplotSpecificAggregate],
      groupby
    },
    ...postAggregateCalculates
  ];
  return {
    bins: bins2,
    timeUnits: timeUnits2,
    transform: transform4,
    groupby,
    aggregate,
    continuousAxisChannelDef,
    continuousAxis,
    encodingWithoutContinuousAxis,
    ticksOrient,
    boxOrient,
    customTooltipWithoutAggregatedField
  };
}

// node_modules/vega-lite/build/src/compositemark/errorbar.js
var __rest10 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var ERRORBAR = "errorbar";
var ERRORBAR_PARTS = ["ticks", "rule"];
var errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);
function normalizeErrorBar(spec, { config }) {
  spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });
  const { transform: transform4, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, ticksOrient, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAR, config);
  delete encodingWithoutContinuousAxis["size"];
  const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
  const thickness = markDef.thickness;
  const size = markDef.size;
  const tick2 = Object.assign(Object.assign({ type: "tick", orient: ticksOrient, aria: false }, thickness !== void 0 ? { thickness } : {}), size !== void 0 ? { size } : {});
  const layer = [
    ...makeErrorBarPart({
      partName: "ticks",
      mark: tick2,
      positionPrefix: "lower",
      extraEncoding: tooltipEncoding
    }),
    ...makeErrorBarPart({
      partName: "ticks",
      mark: tick2,
      positionPrefix: "upper",
      extraEncoding: tooltipEncoding
    }),
    ...makeErrorBarPart({
      partName: "rule",
      mark: Object.assign({ type: "rule", ariaRoleDescription: "errorbar" }, thickness !== void 0 ? { size: thickness } : {}),
      positionPrefix: "lower",
      endPositionPrefix: "upper",
      extraEncoding: tooltipEncoding
    })
  ];
  return Object.assign(Object.assign(Object.assign({}, outerSpec), { transform: transform4 }), layer.length > 1 ? { layer } : Object.assign({}, layer[0]));
}
function errorBarOrientAndInputType(spec, compositeMark) {
  const { encoding } = spec;
  if (errorBarIsInputTypeRaw(encoding)) {
    return {
      orient: compositeMarkOrient(spec, compositeMark),
      inputType: "raw"
    };
  }
  const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);
  const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);
  const x5 = encoding.x;
  const y5 = encoding.y;
  if (isTypeAggregatedUpperLower) {
    if (isTypeAggregatedError) {
      throw new Error(`${compositeMark} cannot be both type aggregated-upper-lower and aggregated-error`);
    }
    const x22 = encoding.x2;
    const y22 = encoding.y2;
    if (isFieldOrDatumDef(x22) && isFieldOrDatumDef(y22)) {
      throw new Error(`${compositeMark} cannot have both x2 and y2`);
    } else if (isFieldOrDatumDef(x22)) {
      if (isContinuousFieldOrDatumDef(x5)) {
        return { orient: "horizontal", inputType: "aggregated-upper-lower" };
      } else {
        throw new Error(`Both x and x2 have to be quantitative in ${compositeMark}`);
      }
    } else if (isFieldOrDatumDef(y22)) {
      if (isContinuousFieldOrDatumDef(y5)) {
        return { orient: "vertical", inputType: "aggregated-upper-lower" };
      } else {
        throw new Error(`Both y and y2 have to be quantitative in ${compositeMark}`);
      }
    }
    throw new Error("No ranged axis");
  } else {
    const xError = encoding.xError;
    const xError2 = encoding.xError2;
    const yError = encoding.yError;
    const yError2 = encoding.yError2;
    if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {
      throw new Error(`${compositeMark} cannot have xError2 without xError`);
    }
    if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {
      throw new Error(`${compositeMark} cannot have yError2 without yError`);
    }
    if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {
      throw new Error(`${compositeMark} cannot have both xError and yError with both are quantiative`);
    } else if (isFieldOrDatumDef(xError)) {
      if (isContinuousFieldOrDatumDef(x5)) {
        return { orient: "horizontal", inputType: "aggregated-error" };
      } else {
        throw new Error("All x, xError, and xError2 (if exist) have to be quantitative");
      }
    } else if (isFieldOrDatumDef(yError)) {
      if (isContinuousFieldOrDatumDef(y5)) {
        return { orient: "vertical", inputType: "aggregated-error" };
      } else {
        throw new Error("All y, yError, and yError2 (if exist) have to be quantitative");
      }
    }
    throw new Error("No ranged axis");
  }
}
function errorBarIsInputTypeRaw(encoding) {
  return (isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) && !isFieldOrDatumDef(encoding.x2) && !isFieldOrDatumDef(encoding.y2) && !isFieldOrDatumDef(encoding.xError) && !isFieldOrDatumDef(encoding.xError2) && !isFieldOrDatumDef(encoding.yError) && !isFieldOrDatumDef(encoding.yError2);
}
function errorBarIsInputTypeAggregatedUpperLower(encoding) {
  return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);
}
function errorBarIsInputTypeAggregatedError(encoding) {
  return isFieldOrDatumDef(encoding.xError) || isFieldOrDatumDef(encoding.xError2) || isFieldOrDatumDef(encoding.yError) || isFieldOrDatumDef(encoding.yError2);
}
function errorBarParams(spec, compositeMark, config) {
  var _a;
  const { mark: mark2, encoding, params: params2, projection: _p } = spec, outerSpec = __rest10(spec, ["mark", "encoding", "params", "projection"]);
  const markDef = isMarkDef(mark2) ? mark2 : { type: mark2 };
  if (params2) {
    warn2(message_exports.selectionNotSupported(compositeMark));
  }
  const { orient: orient2, inputType } = errorBarOrientAndInputType(spec, compositeMark);
  const { continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, continuousAxis } = compositeMarkContinuousAxis(spec, orient2, compositeMark);
  const { errorBarSpecificAggregate, postAggregateCalculates, tooltipSummary, tooltipTitleWithFieldName } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);
  const _b = encoding, _c2 = continuousAxis, oldContinuousAxisChannelDef = _b[_c2], _d2 = continuousAxis === "x" ? "x2" : "y2", oldContinuousAxisChannelDef2 = _b[_d2], _e = continuousAxis === "x" ? "xError" : "yError", oldContinuousAxisChannelDefError = _b[_e], _f2 = continuousAxis === "x" ? "xError2" : "yError2", oldContinuousAxisChannelDefError2 = _b[_f2], oldEncodingWithoutContinuousAxis = __rest10(_b, [typeof _c2 === "symbol" ? _c2 : _c2 + "", typeof _d2 === "symbol" ? _d2 : _d2 + "", typeof _e === "symbol" ? _e : _e + "", typeof _f2 === "symbol" ? _f2 : _f2 + ""]);
  const { bins: bins2, timeUnits: timeUnits2, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);
  const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];
  const groupby = inputType !== "raw" ? [] : oldGroupBy;
  const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
  return {
    transform: [
      ...(_a = outerSpec.transform) !== null && _a !== void 0 ? _a : [],
      ...bins2,
      ...timeUnits2,
      ...aggregate.length === 0 ? [] : [{ aggregate, groupby }],
      ...postAggregateCalculates
    ],
    groupby,
    continuousAxisChannelDef,
    continuousAxis,
    encodingWithoutContinuousAxis,
    ticksOrient: orient2 === "vertical" ? "horizontal" : "vertical",
    markDef,
    outerSpec,
    tooltipEncoding
  };
}
function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
  let errorBarSpecificAggregate = [];
  let postAggregateCalculates = [];
  const continuousFieldName = continuousAxisChannelDef.field;
  let tooltipSummary;
  let tooltipTitleWithFieldName = false;
  if (inputType === "raw") {
    const center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === "iqr" ? "median" : "mean" : config.errorbar.center;
    const extent4 = markDef.extent ? markDef.extent : center === "mean" ? "stderr" : "iqr";
    if (center === "median" !== (extent4 === "iqr")) {
      warn2(message_exports.errorBarCenterIsUsedWithWrongExtent(center, extent4, compositeMark));
    }
    if (extent4 === "stderr" || extent4 === "stdev") {
      errorBarSpecificAggregate = [
        { op: extent4, field: continuousFieldName, as: `extent_${continuousFieldName}` },
        { op: center, field: continuousFieldName, as: `center_${continuousFieldName}` }
      ];
      postAggregateCalculates = [
        {
          calculate: `datum["center_${continuousFieldName}"] + datum["extent_${continuousFieldName}"]`,
          as: `upper_${continuousFieldName}`
        },
        {
          calculate: `datum["center_${continuousFieldName}"] - datum["extent_${continuousFieldName}"]`,
          as: `lower_${continuousFieldName}`
        }
      ];
      tooltipSummary = [
        { fieldPrefix: "center_", titlePrefix: titleCase(center) },
        { fieldPrefix: "upper_", titlePrefix: getTitlePrefix(center, extent4, "+") },
        { fieldPrefix: "lower_", titlePrefix: getTitlePrefix(center, extent4, "-") }
      ];
      tooltipTitleWithFieldName = true;
    } else {
      let centerOp;
      let lowerExtentOp;
      let upperExtentOp;
      if (extent4 === "ci") {
        centerOp = "mean";
        lowerExtentOp = "ci0";
        upperExtentOp = "ci1";
      } else {
        centerOp = "median";
        lowerExtentOp = "q1";
        upperExtentOp = "q3";
      }
      errorBarSpecificAggregate = [
        { op: lowerExtentOp, field: continuousFieldName, as: `lower_${continuousFieldName}` },
        { op: upperExtentOp, field: continuousFieldName, as: `upper_${continuousFieldName}` },
        { op: centerOp, field: continuousFieldName, as: `center_${continuousFieldName}` }
      ];
      tooltipSummary = [
        {
          fieldPrefix: "upper_",
          titlePrefix: title({ field: continuousFieldName, aggregate: upperExtentOp, type: "quantitative" }, config, {
            allowDisabling: false
          })
        },
        {
          fieldPrefix: "lower_",
          titlePrefix: title({ field: continuousFieldName, aggregate: lowerExtentOp, type: "quantitative" }, config, {
            allowDisabling: false
          })
        },
        {
          fieldPrefix: "center_",
          titlePrefix: title({ field: continuousFieldName, aggregate: centerOp, type: "quantitative" }, config, {
            allowDisabling: false
          })
        }
      ];
    }
  } else {
    if (markDef.center || markDef.extent) {
      warn2(message_exports.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
    }
    if (inputType === "aggregated-upper-lower") {
      tooltipSummary = [];
      postAggregateCalculates = [
        { calculate: `datum["${continuousAxisChannelDef2.field}"]`, as: `upper_${continuousFieldName}` },
        { calculate: `datum["${continuousFieldName}"]`, as: `lower_${continuousFieldName}` }
      ];
    } else if (inputType === "aggregated-error") {
      tooltipSummary = [{ fieldPrefix: "", titlePrefix: continuousFieldName }];
      postAggregateCalculates = [
        {
          calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError.field}"]`,
          as: `upper_${continuousFieldName}`
        }
      ];
      if (continuousAxisChannelDefError2) {
        postAggregateCalculates.push({
          calculate: `datum["${continuousFieldName}"] + datum["${continuousAxisChannelDefError2.field}"]`,
          as: `lower_${continuousFieldName}`
        });
      } else {
        postAggregateCalculates.push({
          calculate: `datum["${continuousFieldName}"] - datum["${continuousAxisChannelDefError.field}"]`,
          as: `lower_${continuousFieldName}`
        });
      }
    }
    for (const postAggregateCalculate of postAggregateCalculates) {
      tooltipSummary.push({
        fieldPrefix: postAggregateCalculate.as.substring(0, 6),
        titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum["', ""), '"]', "")
      });
    }
  }
  return { postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName };
}
function getTitlePrefix(center, extent4, operation) {
  return `${titleCase(center)} ${operation} ${extent4}`;
}

// node_modules/vega-lite/build/src/compositemark/errorband.js
var ERRORBAND = "errorband";
var ERRORBAND_PARTS = ["band", "borders"];
var errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);
function normalizeErrorBand(spec, { config }) {
  spec = Object.assign(Object.assign({}, spec), { encoding: normalizeEncoding(spec.encoding, config) });
  const { transform: transform4, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAND, config);
  const errorBandDef = markDef;
  const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
  const is2D = spec.encoding.x !== void 0 && spec.encoding.y !== void 0;
  let bandMark = { type: is2D ? "area" : "rect" };
  let bordersMark = { type: is2D ? "line" : "rule" };
  const interpolate3 = Object.assign(Object.assign({}, errorBandDef.interpolate ? { interpolate: errorBandDef.interpolate } : {}), errorBandDef.tension && errorBandDef.interpolate ? { tension: errorBandDef.tension } : {});
  if (is2D) {
    bandMark = Object.assign(Object.assign(Object.assign({}, bandMark), interpolate3), { ariaRoleDescription: "errorband" });
    bordersMark = Object.assign(Object.assign(Object.assign({}, bordersMark), interpolate3), { aria: false });
  } else if (errorBandDef.interpolate) {
    warn2(message_exports.errorBand1DNotSupport("interpolate"));
  } else if (errorBandDef.tension) {
    warn2(message_exports.errorBand1DNotSupport("tension"));
  }
  return Object.assign(Object.assign({}, outerSpec), { transform: transform4, layer: [
    ...makeErrorBandPart({
      partName: "band",
      mark: bandMark,
      positionPrefix: "lower",
      endPositionPrefix: "upper",
      extraEncoding: tooltipEncoding
    }),
    ...makeErrorBandPart({
      partName: "borders",
      mark: bordersMark,
      positionPrefix: "lower",
      extraEncoding: tooltipEncoding
    }),
    ...makeErrorBandPart({
      partName: "borders",
      mark: bordersMark,
      positionPrefix: "upper",
      extraEncoding: tooltipEncoding
    })
  ] });
}

// node_modules/vega-lite/build/src/compositemark/index.js
var compositeMarkRegistry = {};
function add5(mark2, run2, parts) {
  const normalizer = new CompositeMarkNormalizer(mark2, run2);
  compositeMarkRegistry[mark2] = { normalizer, parts };
}
function getAllCompositeMarks() {
  return keys3(compositeMarkRegistry);
}
add5(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);
add5(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);
add5(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);

// node_modules/vega-lite/build/src/guide.js
var VL_ONLY_LEGEND_CONFIG = [
  "gradientHorizontalMaxLength",
  "gradientHorizontalMinLength",
  "gradientVerticalMaxLength",
  "gradientVerticalMinLength",
  "unselectedOpacity"
];

// node_modules/vega-lite/build/src/header.js
var HEADER_TITLE_PROPERTIES_MAP = {
  titleAlign: "align",
  titleAnchor: "anchor",
  titleAngle: "angle",
  titleBaseline: "baseline",
  titleColor: "color",
  titleFont: "font",
  titleFontSize: "fontSize",
  titleFontStyle: "fontStyle",
  titleFontWeight: "fontWeight",
  titleLimit: "limit",
  titleLineHeight: "lineHeight",
  titleOrient: "orient",
  titlePadding: "offset"
};
var HEADER_LABEL_PROPERTIES_MAP = {
  labelAlign: "align",
  labelAnchor: "anchor",
  labelAngle: "angle",
  labelBaseline: "baseline",
  labelColor: "color",
  labelFont: "font",
  labelFontSize: "fontSize",
  labelFontStyle: "fontStyle",
  labelFontWeight: "fontWeight",
  labelLimit: "limit",
  labelLineHeight: "lineHeight",
  labelOrient: "orient",
  labelPadding: "offset"
};
var HEADER_TITLE_PROPERTIES = keys3(HEADER_TITLE_PROPERTIES_MAP);
var HEADER_LABEL_PROPERTIES = keys3(HEADER_LABEL_PROPERTIES_MAP);
var HEADER_CONFIGS_INDEX = {
  header: 1,
  headerRow: 1,
  headerColumn: 1,
  headerFacet: 1
};
var HEADER_CONFIGS = keys3(HEADER_CONFIGS_INDEX);

// node_modules/vega-lite/build/src/legend.js
var LEGEND_SCALE_CHANNELS = [
  "size",
  "shape",
  "fill",
  "stroke",
  "strokeDash",
  "strokeWidth",
  "opacity"
];
var defaultLegendConfig = {
  gradientHorizontalMaxLength: 200,
  gradientHorizontalMinLength: 100,
  gradientVerticalMaxLength: 200,
  gradientVerticalMinLength: 64,
  unselectedOpacity: 0.35
};
var COMMON_LEGEND_PROPERTY_INDEX = {
  aria: 1,
  clipHeight: 1,
  columnPadding: 1,
  columns: 1,
  cornerRadius: 1,
  description: 1,
  direction: 1,
  fillColor: 1,
  format: 1,
  formatType: 1,
  gradientLength: 1,
  gradientOpacity: 1,
  gradientStrokeColor: 1,
  gradientStrokeWidth: 1,
  gradientThickness: 1,
  gridAlign: 1,
  labelAlign: 1,
  labelBaseline: 1,
  labelColor: 1,
  labelFont: 1,
  labelFontSize: 1,
  labelFontStyle: 1,
  labelFontWeight: 1,
  labelLimit: 1,
  labelOffset: 1,
  labelOpacity: 1,
  labelOverlap: 1,
  labelPadding: 1,
  labelSeparation: 1,
  legendX: 1,
  legendY: 1,
  offset: 1,
  orient: 1,
  padding: 1,
  rowPadding: 1,
  strokeColor: 1,
  symbolDash: 1,
  symbolDashOffset: 1,
  symbolFillColor: 1,
  symbolLimit: 1,
  symbolOffset: 1,
  symbolOpacity: 1,
  symbolSize: 1,
  symbolStrokeColor: 1,
  symbolStrokeWidth: 1,
  symbolType: 1,
  tickCount: 1,
  tickMinStep: 1,
  title: 1,
  titleAlign: 1,
  titleAnchor: 1,
  titleBaseline: 1,
  titleColor: 1,
  titleFont: 1,
  titleFontSize: 1,
  titleFontStyle: 1,
  titleFontWeight: 1,
  titleLimit: 1,
  titleLineHeight: 1,
  titleOpacity: 1,
  titleOrient: 1,
  titlePadding: 1,
  type: 1,
  values: 1,
  zindex: 1
};
var LEGEND_PROPERTIES = keys3(COMMON_LEGEND_PROPERTY_INDEX);

// node_modules/vega-lite/build/src/selection.js
var SELECTION_ID = "_vgsid_";
var defaultConfig = {
  point: {
    on: "click",
    fields: [SELECTION_ID],
    toggle: "event.shiftKey",
    resolve: "global",
    clear: "dblclick"
  },
  interval: {
    on: "[mousedown, window:mouseup] > window:mousemove!",
    encodings: ["x", "y"],
    translate: "[mousedown, window:mouseup] > window:mousemove!",
    zoom: "wheel!",
    mark: { fill: "#333", fillOpacity: 0.125, stroke: "white" },
    resolve: "global",
    clear: "dblclick"
  }
};
function isLegendBinding(bind3) {
  return bind3 === "legend" || !!(bind3 === null || bind3 === void 0 ? void 0 : bind3.legend);
}
function isLegendStreamBinding(bind3) {
  return isLegendBinding(bind3) && isObject(bind3);
}
function isSelectionParameter(param2) {
  return !!(param2 === null || param2 === void 0 ? void 0 : param2["select"]);
}

// node_modules/vega-lite/build/src/parameter.js
var __rest11 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function assembleParameterSignals(params2) {
  const signals = [];
  for (const param2 of params2 || []) {
    if (isSelectionParameter(param2))
      continue;
    const { expr: expr2, bind: bind3 } = param2, rest = __rest11(param2, ["expr", "bind"]);
    if (bind3 && expr2) {
      const signal = Object.assign(Object.assign({}, rest), { bind: bind3, init: expr2 });
      signals.push(signal);
    } else {
      const signal = Object.assign(Object.assign(Object.assign({}, rest), expr2 ? { update: expr2 } : {}), bind3 ? { bind: bind3 } : {});
      signals.push(signal);
    }
  }
  return signals;
}

// node_modules/vega-lite/build/src/spec/concat.js
function isAnyConcatSpec(spec) {
  return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);
}
function isConcatSpec(spec) {
  return "concat" in spec;
}
function isVConcatSpec(spec) {
  return "vconcat" in spec;
}
function isHConcatSpec(spec) {
  return "hconcat" in spec;
}

// node_modules/vega-lite/build/src/spec/base.js
function getStepFor({ step, offsetIsDiscrete }) {
  var _a;
  if (offsetIsDiscrete) {
    return (_a = step.for) !== null && _a !== void 0 ? _a : "offset";
  } else {
    return "position";
  }
}
function isStep(size) {
  return isObject(size) && size["step"] !== void 0;
}
function isFrameMixins(o) {
  return o["view"] || o["width"] || o["height"];
}
var DEFAULT_SPACING = 20;
var COMPOSITION_LAYOUT_INDEX = {
  align: 1,
  bounds: 1,
  center: 1,
  columns: 1,
  spacing: 1
};
var COMPOSITION_LAYOUT_PROPERTIES = keys3(COMPOSITION_LAYOUT_INDEX);
function extractCompositionLayout(spec, specType, config) {
  var _a, _b;
  const compositionConfig = config[specType];
  const layout = {};
  const { spacing: spacingConfig, columns } = compositionConfig;
  if (spacingConfig !== void 0) {
    layout.spacing = spacingConfig;
  }
  if (columns !== void 0) {
    if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isConcatSpec(spec)) {
      layout.columns = columns;
    }
  }
  if (isVConcatSpec(spec)) {
    layout.columns = 1;
  }
  for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {
    if (spec[prop] !== void 0) {
      if (prop === "spacing") {
        const spacing = spec[prop];
        layout[prop] = isNumber(spacing) ? spacing : {
          row: (_a = spacing.row) !== null && _a !== void 0 ? _a : spacingConfig,
          column: (_b = spacing.column) !== null && _b !== void 0 ? _b : spacingConfig
        };
      } else {
        layout[prop] = spec[prop];
      }
    }
  }
  return layout;
}

// node_modules/vega-lite/build/src/config.js
var __rest12 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function getViewConfigContinuousSize(viewConfig, channel) {
  var _a;
  return (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === "width" ? "continuousWidth" : "continuousHeight"];
}
function getViewConfigDiscreteStep(viewConfig, channel) {
  const size = getViewConfigDiscreteSize(viewConfig, channel);
  return isStep(size) ? size.step : DEFAULT_STEP;
}
function getViewConfigDiscreteSize(viewConfig, channel) {
  var _a;
  const size = (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === "width" ? "discreteWidth" : "discreteHeight"];
  return getFirstDefined(size, { step: viewConfig.step });
}
var DEFAULT_STEP = 20;
var defaultViewConfig = {
  continuousWidth: 200,
  continuousHeight: 200,
  step: DEFAULT_STEP
};
var defaultConfig2 = {
  background: "white",
  padding: 5,
  timeFormat: "%b %d, %Y",
  countTitle: "Count of Records",
  view: defaultViewConfig,
  mark: defaultMarkConfig,
  arc: {},
  area: {},
  bar: defaultBarConfig,
  circle: {},
  geoshape: {},
  image: {},
  line: {},
  point: {},
  rect: defaultRectConfig,
  rule: { color: "black" },
  square: {},
  text: { color: "black" },
  tick: defaultTickConfig,
  trail: {},
  boxplot: {
    size: 14,
    extent: 1.5,
    box: {},
    median: { color: "white" },
    outliers: {},
    rule: {},
    ticks: null
  },
  errorbar: {
    center: "mean",
    rule: true,
    ticks: false
  },
  errorband: {
    band: {
      opacity: 0.3
    },
    borders: false
  },
  scale: defaultScaleConfig,
  projection: {},
  legend: defaultLegendConfig,
  header: { titlePadding: 10, labelPadding: 10 },
  headerColumn: {},
  headerRow: {},
  headerFacet: {},
  selection: defaultConfig,
  style: {},
  title: {},
  facet: { spacing: DEFAULT_SPACING },
  concat: { spacing: DEFAULT_SPACING },
  normalizedNumberFormat: ".0%"
};
var tab10 = [
  "#4c78a8",
  "#f58518",
  "#e45756",
  "#72b7b2",
  "#54a24b",
  "#eeca3b",
  "#b279a2",
  "#ff9da6",
  "#9d755d",
  "#bab0ac"
];
var DEFAULT_FONT_SIZE = {
  text: 11,
  guideLabel: 10,
  guideTitle: 11,
  groupTitle: 13,
  groupSubtitle: 12
};
var DEFAULT_COLOR = {
  blue: tab10[0],
  orange: tab10[1],
  red: tab10[2],
  teal: tab10[3],
  green: tab10[4],
  yellow: tab10[5],
  purple: tab10[6],
  pink: tab10[7],
  brown: tab10[8],
  gray0: "#000",
  gray1: "#111",
  gray2: "#222",
  gray3: "#333",
  gray4: "#444",
  gray5: "#555",
  gray6: "#666",
  gray7: "#777",
  gray8: "#888",
  gray9: "#999",
  gray10: "#aaa",
  gray11: "#bbb",
  gray12: "#ccc",
  gray13: "#ddd",
  gray14: "#eee",
  gray15: "#fff"
};
function colorSignalConfig(color5 = {}) {
  return {
    signals: [
      {
        name: "color",
        value: isObject(color5) ? Object.assign(Object.assign({}, DEFAULT_COLOR), color5) : DEFAULT_COLOR
      }
    ],
    mark: { color: { signal: "color.blue" } },
    rule: { color: { signal: "color.gray0" } },
    text: {
      color: { signal: "color.gray0" }
    },
    style: {
      "guide-label": {
        fill: { signal: "color.gray0" }
      },
      "guide-title": {
        fill: { signal: "color.gray0" }
      },
      "group-title": {
        fill: { signal: "color.gray0" }
      },
      "group-subtitle": {
        fill: { signal: "color.gray0" }
      },
      cell: {
        stroke: { signal: "color.gray8" }
      }
    },
    axis: {
      domainColor: { signal: "color.gray13" },
      gridColor: { signal: "color.gray8" },
      tickColor: { signal: "color.gray13" }
    },
    range: {
      category: [
        { signal: "color.blue" },
        { signal: "color.orange" },
        { signal: "color.red" },
        { signal: "color.teal" },
        { signal: "color.green" },
        { signal: "color.yellow" },
        { signal: "color.purple" },
        { signal: "color.pink" },
        { signal: "color.brown" },
        { signal: "color.grey8" }
      ]
    }
  };
}
function fontSizeSignalConfig(fontSize2) {
  return {
    signals: [
      {
        name: "fontSize",
        value: isObject(fontSize2) ? Object.assign(Object.assign({}, DEFAULT_FONT_SIZE), fontSize2) : DEFAULT_FONT_SIZE
      }
    ],
    text: {
      fontSize: { signal: "fontSize.text" }
    },
    style: {
      "guide-label": {
        fontSize: { signal: "fontSize.guideLabel" }
      },
      "guide-title": {
        fontSize: { signal: "fontSize.guideTitle" }
      },
      "group-title": {
        fontSize: { signal: "fontSize.groupTitle" }
      },
      "group-subtitle": {
        fontSize: { signal: "fontSize.groupSubtitle" }
      }
    }
  };
}
function fontConfig(font3) {
  return {
    text: { font: font3 },
    style: {
      "guide-label": { font: font3 },
      "guide-title": { font: font3 },
      "group-title": { font: font3 },
      "group-subtitle": { font: font3 }
    }
  };
}
function getAxisConfigInternal(axisConfig2) {
  const props = keys3(axisConfig2 || {});
  const axisConfigInternal = {};
  for (const prop of props) {
    const val = axisConfig2[prop];
    axisConfigInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);
  }
  return axisConfigInternal;
}
function getStyleConfigInternal(styleConfig) {
  const props = keys3(styleConfig);
  const styleConfigInternal = {};
  for (const prop of props) {
    styleConfigInternal[prop] = getAxisConfigInternal(styleConfig[prop]);
  }
  return styleConfigInternal;
}
var configPropsWithExpr = [
  ...MARK_CONFIGS,
  ...AXIS_CONFIGS,
  ...HEADER_CONFIGS,
  "background",
  "padding",
  "legend",
  "lineBreak",
  "scale",
  "style",
  "title",
  "view"
];
function initConfig(specifiedConfig = {}) {
  const { color: color5, font: font3, fontSize: fontSize2, selection } = specifiedConfig, restConfig = __rest12(specifiedConfig, ["color", "font", "fontSize", "selection"]);
  const mergedConfig = mergeConfig({}, duplicate(defaultConfig2), font3 ? fontConfig(font3) : {}, color5 ? colorSignalConfig(color5) : {}, fontSize2 ? fontSizeSignalConfig(fontSize2) : {}, restConfig || {});
  if (selection) {
    writeConfig(mergedConfig, "selection", selection, true);
  }
  const outputConfig = omit(mergedConfig, configPropsWithExpr);
  for (const prop of ["background", "lineBreak", "padding"]) {
    if (mergedConfig[prop]) {
      outputConfig[prop] = signalRefOrValue(mergedConfig[prop]);
    }
  }
  for (const markConfigType of MARK_CONFIGS) {
    if (mergedConfig[markConfigType]) {
      outputConfig[markConfigType] = replaceExprRef(mergedConfig[markConfigType]);
    }
  }
  for (const axisConfigType of AXIS_CONFIGS) {
    if (mergedConfig[axisConfigType]) {
      outputConfig[axisConfigType] = getAxisConfigInternal(mergedConfig[axisConfigType]);
    }
  }
  for (const headerConfigType of HEADER_CONFIGS) {
    if (mergedConfig[headerConfigType]) {
      outputConfig[headerConfigType] = replaceExprRef(mergedConfig[headerConfigType]);
    }
  }
  if (mergedConfig.legend) {
    outputConfig.legend = replaceExprRef(mergedConfig.legend);
  }
  if (mergedConfig.scale) {
    outputConfig.scale = replaceExprRef(mergedConfig.scale);
  }
  if (mergedConfig.style) {
    outputConfig.style = getStyleConfigInternal(mergedConfig.style);
  }
  if (mergedConfig.title) {
    outputConfig.title = replaceExprRef(mergedConfig.title);
  }
  if (mergedConfig.view) {
    outputConfig.view = replaceExprRef(mergedConfig.view);
  }
  return outputConfig;
}
var MARK_STYLES = /* @__PURE__ */ new Set(["view", ...PRIMITIVE_MARKS]);
var VL_ONLY_CONFIG_PROPERTIES = [
  "color",
  "fontSize",
  "background",
  "padding",
  "facet",
  "concat",
  "numberFormat",
  "numberFormatType",
  "normalizedNumberFormat",
  "normalizedNumberFormatType",
  "timeFormat",
  "countTitle",
  "header",
  "axisQuantitative",
  "axisTemporal",
  "axisDiscrete",
  "axisPoint",
  "axisXBand",
  "axisXPoint",
  "axisXDiscrete",
  "axisXQuantitative",
  "axisXTemporal",
  "axisYBand",
  "axisYPoint",
  "axisYDiscrete",
  "axisYQuantitative",
  "axisYTemporal",
  "scale",
  "selection",
  "overlay"
];
var VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({ view: ["continuousWidth", "continuousHeight", "discreteWidth", "discreteHeight", "step"] }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);
function stripAndRedirectConfig(config) {
  config = duplicate(config);
  for (const prop of VL_ONLY_CONFIG_PROPERTIES) {
    delete config[prop];
  }
  if (config.axis) {
    for (const prop in config.axis) {
      if (isConditionalAxisValue(config.axis[prop])) {
        delete config.axis[prop];
      }
    }
  }
  if (config.legend) {
    for (const prop of VL_ONLY_LEGEND_CONFIG) {
      delete config.legend[prop];
    }
  }
  if (config.mark) {
    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
      delete config.mark[prop];
    }
    if (config.mark.tooltip && isObject(config.mark.tooltip)) {
      delete config.mark.tooltip;
    }
  }
  if (config.params) {
    config.signals = (config.signals || []).concat(assembleParameterSignals(config.params));
    delete config.params;
  }
  for (const markType2 of MARK_STYLES) {
    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
      delete config[markType2][prop];
    }
    const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType2];
    if (vlOnlyMarkSpecificConfigs) {
      for (const prop of vlOnlyMarkSpecificConfigs) {
        delete config[markType2][prop];
      }
    }
    redirectConfigToStyleConfig(config, markType2);
  }
  for (const m3 of getAllCompositeMarks()) {
    delete config[m3];
  }
  redirectTitleConfig(config);
  for (const prop in config) {
    if (isObject(config[prop]) && isEmpty(config[prop])) {
      delete config[prop];
    }
  }
  return isEmpty(config) ? void 0 : config;
}
function redirectTitleConfig(config) {
  const { titleMarkConfig, subtitleMarkConfig, subtitle } = extractTitleConfig(config.title);
  if (!isEmpty(titleMarkConfig)) {
    config.style["group-title"] = Object.assign(
      Object.assign({}, config.style["group-title"]),
      titleMarkConfig
    );
  }
  if (!isEmpty(subtitleMarkConfig)) {
    config.style["group-subtitle"] = Object.assign(Object.assign({}, config.style["group-subtitle"]), subtitleMarkConfig);
  }
  if (!isEmpty(subtitle)) {
    config.title = subtitle;
  } else {
    delete config.title;
  }
}
function redirectConfigToStyleConfig(config, prop, toProp, compositeMarkPart) {
  const propConfig = compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];
  if (prop === "view") {
    toProp = "cell";
  }
  const style2 = Object.assign(Object.assign({}, propConfig), config.style[toProp !== null && toProp !== void 0 ? toProp : prop]);
  if (!isEmpty(style2)) {
    config.style[toProp !== null && toProp !== void 0 ? toProp : prop] = style2;
  }
  if (!compositeMarkPart) {
    delete config[prop];
  }
}

// node_modules/vega-lite/build/src/spec/layer.js
function isLayerSpec(spec) {
  return "layer" in spec;
}

// node_modules/vega-lite/build/src/spec/repeat.js
function isRepeatSpec(spec) {
  return "repeat" in spec;
}
function isLayerRepeatSpec(spec) {
  return !isArray(spec.repeat) && spec.repeat["layer"];
}

// node_modules/vega-lite/build/src/spec/map.js
var __rest13 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var SpecMapper = class {
  map(spec, params2) {
    if (isFacetSpec(spec)) {
      return this.mapFacet(spec, params2);
    } else if (isRepeatSpec(spec)) {
      return this.mapRepeat(spec, params2);
    } else if (isHConcatSpec(spec)) {
      return this.mapHConcat(spec, params2);
    } else if (isVConcatSpec(spec)) {
      return this.mapVConcat(spec, params2);
    } else if (isConcatSpec(spec)) {
      return this.mapConcat(spec, params2);
    } else {
      return this.mapLayerOrUnit(spec, params2);
    }
  }
  mapLayerOrUnit(spec, params2) {
    if (isLayerSpec(spec)) {
      return this.mapLayer(spec, params2);
    } else if (isUnitSpec(spec)) {
      return this.mapUnit(spec, params2);
    }
    throw new Error(message_exports.invalidSpec(spec));
  }
  mapLayer(spec, params2) {
    return Object.assign(Object.assign({}, spec), { layer: spec.layer.map((subspec) => this.mapLayerOrUnit(subspec, params2)) });
  }
  mapHConcat(spec, params2) {
    return Object.assign(Object.assign({}, spec), { hconcat: spec.hconcat.map((subspec) => this.map(subspec, params2)) });
  }
  mapVConcat(spec, params2) {
    return Object.assign(Object.assign({}, spec), { vconcat: spec.vconcat.map((subspec) => this.map(subspec, params2)) });
  }
  mapConcat(spec, params2) {
    const { concat } = spec, rest = __rest13(spec, ["concat"]);
    return Object.assign(Object.assign({}, rest), { concat: concat.map((subspec) => this.map(subspec, params2)) });
  }
  mapFacet(spec, params2) {
    return Object.assign(Object.assign({}, spec), {
      spec: this.map(spec.spec, params2)
    });
  }
  mapRepeat(spec, params2) {
    return Object.assign(Object.assign({}, spec), {
      spec: this.map(spec.spec, params2)
    });
  }
};

// node_modules/vega-lite/build/src/stack.js
var STACK_OFFSET_INDEX = {
  zero: 1,
  center: 1,
  normalize: 1
};
function isStackOffset(s2) {
  return s2 in STACK_OFFSET_INDEX;
}
var STACKABLE_MARKS = /* @__PURE__ */ new Set([ARC, BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT2, TICK]);
var STACK_BY_DEFAULT_MARKS = /* @__PURE__ */ new Set([BAR, AREA, ARC]);
function isUnbinnedQuantitative(channelDef) {
  return isFieldDef(channelDef) && channelDefType(channelDef) === "quantitative" && !channelDef.bin;
}
function potentialStackedChannel(encoding, x5) {
  var _a, _b;
  const y5 = x5 === "x" ? "y" : "radius";
  const xDef = encoding[x5];
  const yDef = encoding[y5];
  if (isFieldDef(xDef) && isFieldDef(yDef)) {
    if (isUnbinnedQuantitative(xDef) && isUnbinnedQuantitative(yDef)) {
      if (xDef.stack) {
        return x5;
      } else if (yDef.stack) {
        return y5;
      }
      const xAggregate = isFieldDef(xDef) && !!xDef.aggregate;
      const yAggregate = isFieldDef(yDef) && !!yDef.aggregate;
      if (xAggregate !== yAggregate) {
        return xAggregate ? x5 : y5;
      } else {
        const xScale = (_a = xDef.scale) === null || _a === void 0 ? void 0 : _a.type;
        const yScale = (_b = yDef.scale) === null || _b === void 0 ? void 0 : _b.type;
        if (xScale && xScale !== "linear") {
          return y5;
        } else if (yScale && yScale !== "linear") {
          return x5;
        }
      }
    } else if (isUnbinnedQuantitative(xDef)) {
      return x5;
    } else if (isUnbinnedQuantitative(yDef)) {
      return y5;
    }
  } else if (isUnbinnedQuantitative(xDef)) {
    return x5;
  } else if (isUnbinnedQuantitative(yDef)) {
    return y5;
  }
  return void 0;
}
function getDimensionChannel(channel) {
  switch (channel) {
    case "x":
      return "y";
    case "y":
      return "x";
    case "theta":
      return "radius";
    case "radius":
      return "theta";
  }
}
function stack(m3, encoding) {
  var _a, _b;
  const mark2 = isMarkDef(m3) ? m3.type : m3;
  if (!STACKABLE_MARKS.has(mark2)) {
    return null;
  }
  const fieldChannel = potentialStackedChannel(encoding, "x") || potentialStackedChannel(encoding, "theta");
  if (!fieldChannel) {
    return null;
  }
  const stackedFieldDef = encoding[fieldChannel];
  const stackedField = isFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : void 0;
  const dimensionChannel = getDimensionChannel(fieldChannel);
  const groupbyChannels = [];
  const groupbyFields = /* @__PURE__ */ new Set();
  if (encoding[dimensionChannel]) {
    const dimensionDef = encoding[dimensionChannel];
    const dimensionField = isFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : void 0;
    if (dimensionField && dimensionField !== stackedField) {
      groupbyChannels.push(dimensionChannel);
      groupbyFields.add(dimensionField);
    }
    const dimensionOffsetChannel = dimensionChannel === "x" ? "xOffset" : "yOffset";
    const dimensionOffsetDef = encoding[dimensionOffsetChannel];
    const dimensionOffsetField = isFieldDef(dimensionOffsetDef) ? vgField(dimensionOffsetDef, {}) : void 0;
    if (dimensionOffsetField && dimensionOffsetField !== stackedField) {
      groupbyChannels.push(dimensionOffsetChannel);
      groupbyFields.add(dimensionOffsetField);
    }
  }
  const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {
    if (channel !== "tooltip" && channelHasField(encoding, channel)) {
      const channelDef = encoding[channel];
      for (const cDef of array(channelDef)) {
        const fieldDef = getFieldDef(cDef);
        if (fieldDef.aggregate) {
          continue;
        }
        const f = vgField(fieldDef, {});
        if (!f || !groupbyFields.has(f)) {
          sc.push({ channel, fieldDef });
        }
      }
    }
    return sc;
  }, []);
  let offset4;
  if (stackedFieldDef.stack !== void 0) {
    if (isBoolean(stackedFieldDef.stack)) {
      offset4 = stackedFieldDef.stack ? "zero" : null;
    } else {
      offset4 = stackedFieldDef.stack;
    }
  } else if (STACK_BY_DEFAULT_MARKS.has(mark2)) {
    offset4 = "zero";
  }
  if (!offset4 || !isStackOffset(offset4)) {
    return null;
  }
  if (isAggregate(encoding) && stackBy.length === 0) {
    return null;
  }
  if (((_a = stackedFieldDef === null || stackedFieldDef === void 0 ? void 0 : stackedFieldDef.scale) === null || _a === void 0 ? void 0 : _a.type) && ((_b = stackedFieldDef === null || stackedFieldDef === void 0 ? void 0 : stackedFieldDef.scale) === null || _b === void 0 ? void 0 : _b.type) !== ScaleType.LINEAR) {
    warn2(message_exports.cannotStackNonLinearScale(stackedFieldDef.scale.type));
    return null;
  }
  if (isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)])) {
    if (stackedFieldDef.stack !== void 0) {
      warn2(message_exports.cannotStackRangedMark(fieldChannel));
    }
    return null;
  }
  if (isFieldDef(stackedFieldDef) && stackedFieldDef.aggregate && !SUM_OPS.has(stackedFieldDef.aggregate)) {
    warn2(message_exports.stackNonSummativeAggregate(stackedFieldDef.aggregate));
  }
  return {
    groupbyChannels,
    groupbyFields,
    fieldChannel,
    impute: stackedFieldDef.impute === null ? false : isPathMark(mark2),
    stackBy,
    offset: offset4
  };
}

// node_modules/vega-lite/build/src/normalize/pathoverlay.js
var __rest14 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function dropLineAndPoint(markDef) {
  const { point: _point, line: _line } = markDef, mark2 = __rest14(markDef, ["point", "line"]);
  return keys3(mark2).length > 1 ? mark2 : mark2.type;
}
function dropLineAndPointFromConfig(config) {
  for (const mark2 of ["line", "area", "rule", "trail"]) {
    if (config[mark2]) {
      config = Object.assign(Object.assign({}, config), {
        [mark2]: omit(config[mark2], ["point", "line"])
      });
    }
  }
  return config;
}
function getPointOverlay(markDef, markConfig = {}, encoding) {
  if (markDef.point === "transparent") {
    return { opacity: 0 };
  } else if (markDef.point) {
    return isObject(markDef.point) ? markDef.point : {};
  } else if (markDef.point !== void 0) {
    return null;
  } else {
    if (markConfig.point || encoding.shape) {
      return isObject(markConfig.point) ? markConfig.point : {};
    }
    return void 0;
  }
}
function getLineOverlay(markDef, markConfig = {}) {
  if (markDef.line) {
    return markDef.line === true ? {} : markDef.line;
  } else if (markDef.line !== void 0) {
    return null;
  } else {
    if (markConfig.line) {
      return markConfig.line === true ? {} : markConfig.line;
    }
    return void 0;
  }
}
var PathOverlayNormalizer = class {
  constructor() {
    this.name = "path-overlay";
  }
  hasMatchingType(spec, config) {
    if (isUnitSpec(spec)) {
      const { mark: mark2, encoding } = spec;
      const markDef = isMarkDef(mark2) ? mark2 : { type: mark2 };
      switch (markDef.type) {
        case "line":
        case "rule":
        case "trail":
          return !!getPointOverlay(markDef, config[markDef.type], encoding);
        case "area":
          return !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type]);
      }
    }
    return false;
  }
  run(spec, normParams, normalize4) {
    const { config } = normParams;
    const { params: params2, projection: projection3, mark: mark2, encoding: e3 } = spec, outerSpec = __rest14(spec, ["params", "projection", "mark", "encoding"]);
    const encoding = normalizeEncoding(e3, config);
    const markDef = isMarkDef(mark2) ? mark2 : { type: mark2 };
    const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);
    const lineOverlay = markDef.type === "area" && getLineOverlay(markDef, config[markDef.type]);
    const layer = [
      Object.assign(Object.assign({}, params2 ? { params: params2 } : {}), {
        mark: dropLineAndPoint(Object.assign(Object.assign({}, markDef.type === "area" && markDef.opacity === void 0 && markDef.fillOpacity === void 0 ? { opacity: 0.7 } : {}), markDef)),
        encoding: omit(encoding, ["shape"])
      })
    ];
    const stackProps = stack(markDef, encoding);
    let overlayEncoding = encoding;
    if (stackProps) {
      const { fieldChannel: stackFieldChannel, offset: offset4 } = stackProps;
      overlayEncoding = Object.assign(Object.assign({}, encoding), { [stackFieldChannel]: Object.assign(Object.assign({}, encoding[stackFieldChannel]), offset4 ? { stack: offset4 } : {}) });
    }
    overlayEncoding = omit(overlayEncoding, ["y2", "x2"]);
    if (lineOverlay) {
      layer.push(Object.assign(Object.assign({}, projection3 ? { projection: projection3 } : {}), { mark: Object.assign(Object.assign({ type: "line" }, pick2(markDef, ["clip", "interpolate", "tension", "tooltip"])), lineOverlay), encoding: overlayEncoding }));
    }
    if (pointOverlay) {
      layer.push(Object.assign(Object.assign({}, projection3 ? { projection: projection3 } : {}), { mark: Object.assign(Object.assign({ type: "point", opacity: 1, filled: true }, pick2(markDef, ["clip", "tooltip"])), pointOverlay), encoding: overlayEncoding }));
    }
    return normalize4(Object.assign(Object.assign({}, outerSpec), { layer }), Object.assign(Object.assign({}, normParams), { config: dropLineAndPointFromConfig(config) }));
  }
};

// node_modules/vega-lite/build/src/normalize/repeater.js
var __rest15 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function replaceRepeaterInFacet(facet, repeater) {
  if (!repeater) {
    return facet;
  }
  if (isFacetMapping(facet)) {
    return replaceRepeaterInMapping(facet, repeater);
  }
  return replaceRepeaterInFieldDef(facet, repeater);
}
function replaceRepeaterInEncoding(encoding, repeater) {
  if (!repeater) {
    return encoding;
  }
  return replaceRepeaterInMapping(encoding, repeater);
}
function replaceRepeatInProp(prop, o, repeater) {
  const val = o[prop];
  if (isRepeatRef(val)) {
    if (val.repeat in repeater) {
      return Object.assign(Object.assign({}, o), { [prop]: repeater[val.repeat] });
    } else {
      warn2(message_exports.noSuchRepeatedValue(val.repeat));
      return void 0;
    }
  }
  return o;
}
function replaceRepeaterInFieldDef(fieldDef, repeater) {
  fieldDef = replaceRepeatInProp("field", fieldDef, repeater);
  if (fieldDef === void 0) {
    return void 0;
  } else if (fieldDef === null) {
    return null;
  }
  if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {
    const sort4 = replaceRepeatInProp("field", fieldDef.sort, repeater);
    fieldDef = Object.assign(Object.assign({}, fieldDef), sort4 ? { sort: sort4 } : {});
  }
  return fieldDef;
}
function replaceRepeaterInFieldOrDatumDef(def2, repeater) {
  if (isFieldDef(def2)) {
    return replaceRepeaterInFieldDef(def2, repeater);
  } else {
    const datumDef = replaceRepeatInProp("datum", def2, repeater);
    if (datumDef !== def2 && !datumDef.type) {
      datumDef.type = "nominal";
    }
    return datumDef;
  }
}
function replaceRepeaterInChannelDef(channelDef, repeater) {
  if (isFieldOrDatumDef(channelDef)) {
    const fd = replaceRepeaterInFieldOrDatumDef(channelDef, repeater);
    if (fd) {
      return fd;
    } else if (isConditionalDef(channelDef)) {
      return { condition: channelDef.condition };
    }
  } else {
    if (hasConditionalFieldOrDatumDef(channelDef)) {
      const fd = replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);
      if (fd) {
        return Object.assign(Object.assign({}, channelDef), { condition: fd });
      } else {
        const { condition } = channelDef, channelDefWithoutCondition = __rest15(channelDef, ["condition"]);
        return channelDefWithoutCondition;
      }
    }
    return channelDef;
  }
  return void 0;
}
function replaceRepeaterInMapping(mapping, repeater) {
  const out = {};
  for (const channel in mapping) {
    if (has(mapping, channel)) {
      const channelDef = mapping[channel];
      if (isArray(channelDef)) {
        out[channel] = channelDef.map((cd2) => replaceRepeaterInChannelDef(cd2, repeater)).filter((cd2) => cd2);
      } else {
        const cd2 = replaceRepeaterInChannelDef(channelDef, repeater);
        if (cd2 !== void 0) {
          out[channel] = cd2;
        }
      }
    }
  }
  return out;
}

// node_modules/vega-lite/build/src/normalize/ruleforrangedline.js
var RuleForRangedLineNormalizer = class {
  constructor() {
    this.name = "RuleForRangedLine";
  }
  hasMatchingType(spec) {
    if (isUnitSpec(spec)) {
      const { encoding, mark: mark2 } = spec;
      if (mark2 === "line" || isMarkDef(mark2) && mark2.type === "line") {
        for (const channel of SECONDARY_RANGE_CHANNEL) {
          const mainChannel = getMainRangeChannel(channel);
          const mainChannelDef = encoding[mainChannel];
          if (encoding[channel]) {
            if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
  run(spec, params2, normalize4) {
    const { encoding, mark: mark2 } = spec;
    warn2(message_exports.lineWithRange(!!encoding.x2, !!encoding.y2));
    return normalize4(Object.assign(Object.assign({}, spec), { mark: isObject(mark2) ? Object.assign(Object.assign({}, mark2), { type: "rule" }) : "rule" }), params2);
  }
};

// node_modules/vega-lite/build/src/normalize/core.js
var __rest16 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var CoreNormalizer = class extends SpecMapper {
  constructor() {
    super(...arguments);
    this.nonFacetUnitNormalizers = [
      boxPlotNormalizer,
      errorBarNormalizer,
      errorBandNormalizer,
      new PathOverlayNormalizer(),
      new RuleForRangedLineNormalizer()
    ];
  }
  map(spec, params2) {
    if (isUnitSpec(spec)) {
      const hasRow = channelHasField(spec.encoding, ROW);
      const hasColumn = channelHasField(spec.encoding, COLUMN);
      const hasFacet = channelHasField(spec.encoding, FACET);
      if (hasRow || hasColumn || hasFacet) {
        return this.mapFacetedUnit(spec, params2);
      }
    }
    return super.map(spec, params2);
  }
  mapUnit(spec, params2) {
    const { parentEncoding, parentProjection } = params2;
    const encoding = replaceRepeaterInEncoding(spec.encoding, params2.repeater);
    const specWithReplacedEncoding = Object.assign(Object.assign({}, spec), encoding ? { encoding } : {});
    if (parentEncoding || parentProjection) {
      return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params2);
    }
    const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);
    for (const unitNormalizer of this.nonFacetUnitNormalizers) {
      if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params2.config)) {
        return unitNormalizer.run(specWithReplacedEncoding, params2, normalizeLayerOrUnit);
      }
    }
    return specWithReplacedEncoding;
  }
  mapRepeat(spec, params2) {
    if (isLayerRepeatSpec(spec)) {
      return this.mapLayerRepeat(spec, params2);
    } else {
      return this.mapNonLayerRepeat(spec, params2);
    }
  }
  mapLayerRepeat(spec, params2) {
    const { repeat: repeat2, spec: childSpec } = spec, rest = __rest16(spec, ["repeat", "spec"]);
    const { row, column, layer } = repeat2;
    const { repeater = {}, repeaterPrefix = "" } = params2;
    if (row || column) {
      return this.mapRepeat(Object.assign(Object.assign({}, spec), { repeat: Object.assign(Object.assign({}, row ? { row } : {}), column ? { column } : {}), spec: {
        repeat: { layer },
        spec: childSpec
      } }), params2);
    } else {
      return Object.assign(Object.assign({}, rest), { layer: layer.map((layerValue) => {
        const childRepeater = Object.assign(Object.assign({}, repeater), { layer: layerValue });
        const childName = `${(childSpec.name || "") + repeaterPrefix}child__layer_${varName(layerValue)}`;
        const child = this.mapLayerOrUnit(childSpec, Object.assign(Object.assign({}, params2), { repeater: childRepeater, repeaterPrefix: childName }));
        child.name = childName;
        return child;
      }) });
    }
  }
  mapNonLayerRepeat(spec, params2) {
    var _a;
    const { repeat: repeat2, spec: childSpec, data: data3 } = spec, remainingProperties = __rest16(spec, ["repeat", "spec", "data"]);
    if (!isArray(repeat2) && spec.columns) {
      spec = omit(spec, ["columns"]);
      warn2(message_exports.columnsNotSupportByRowCol("repeat"));
    }
    const concat = [];
    const { repeater = {}, repeaterPrefix = "" } = params2;
    const row = !isArray(repeat2) && repeat2.row || [repeater ? repeater.row : null];
    const column = !isArray(repeat2) && repeat2.column || [repeater ? repeater.column : null];
    const repeatValues = isArray(repeat2) && repeat2 || [repeater ? repeater.repeat : null];
    for (const repeatValue of repeatValues) {
      for (const rowValue of row) {
        for (const columnValue of column) {
          const childRepeater = {
            repeat: repeatValue,
            row: rowValue,
            column: columnValue,
            layer: repeater.layer
          };
          const childName = (childSpec.name || "") + repeaterPrefix + "child__" + (isArray(repeat2) ? `${varName(repeatValue)}` : (repeat2.row ? `row_${varName(rowValue)}` : "") + (repeat2.column ? `column_${varName(columnValue)}` : ""));
          const child = this.map(childSpec, Object.assign(Object.assign({}, params2), { repeater: childRepeater, repeaterPrefix: childName }));
          child.name = childName;
          concat.push(omit(child, ["data"]));
        }
      }
    }
    const columns = isArray(repeat2) ? spec.columns : repeat2.column ? repeat2.column.length : 1;
    return Object.assign(Object.assign({ data: (_a = childSpec.data) !== null && _a !== void 0 ? _a : data3, align: "all" }, remainingProperties), {
      columns,
      concat
    });
  }
  mapFacet(spec, params2) {
    const { facet } = spec;
    if (isFacetMapping(facet) && spec.columns) {
      spec = omit(spec, ["columns"]);
      warn2(message_exports.columnsNotSupportByRowCol("facet"));
    }
    return super.mapFacet(spec, params2);
  }
  mapUnitWithParentEncodingOrProjection(spec, params2) {
    const { encoding, projection: projection3 } = spec;
    const { parentEncoding, parentProjection, config } = params2;
    const mergedProjection = mergeProjection({ parentProjection, projection: projection3 });
    const mergedEncoding = mergeEncoding({
      parentEncoding,
      encoding: replaceRepeaterInEncoding(encoding, params2.repeater)
    });
    return this.mapUnit(Object.assign(Object.assign(Object.assign({}, spec), mergedProjection ? { projection: mergedProjection } : {}), mergedEncoding ? { encoding: mergedEncoding } : {}), { config });
  }
  mapFacetedUnit(spec, normParams) {
    const _a = spec.encoding, { row, column, facet } = _a, encoding = __rest16(_a, ["row", "column", "facet"]);
    const { mark: mark2, width: width2, projection: projection3, height: height2, view, params: params2, encoding: _ } = spec, outerSpec = __rest16(spec, ["mark", "width", "projection", "height", "view", "params", "encoding"]);
    const { facetMapping, layout } = this.getFacetMappingAndLayout({ row, column, facet }, normParams);
    const newEncoding = replaceRepeaterInEncoding(encoding, normParams.repeater);
    return this.mapFacet(Object.assign(Object.assign(Object.assign({}, outerSpec), layout), {
      facet: facetMapping,
      spec: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, width2 ? { width: width2 } : {}), height2 ? { height: height2 } : {}), view ? { view } : {}), projection3 ? { projection: projection3 } : {}), { mark: mark2, encoding: newEncoding }), params2 ? { params: params2 } : {})
    }), normParams);
  }
  getFacetMappingAndLayout(facets, params2) {
    var _a;
    const { row, column, facet } = facets;
    if (row || column) {
      if (facet) {
        warn2(message_exports.facetChannelDropped([...row ? [ROW] : [], ...column ? [COLUMN] : []]));
      }
      const facetMapping = {};
      const layout = {};
      for (const channel of [ROW, COLUMN]) {
        const def2 = facets[channel];
        if (def2) {
          const { align: align2, center, spacing, columns } = def2, defWithoutLayout = __rest16(def2, ["align", "center", "spacing", "columns"]);
          facetMapping[channel] = defWithoutLayout;
          for (const prop of ["align", "center", "spacing"]) {
            if (def2[prop] !== void 0) {
              (_a = layout[prop]) !== null && _a !== void 0 ? _a : layout[prop] = {};
              layout[prop][channel] = def2[prop];
            }
          }
        }
      }
      return { facetMapping, layout };
    } else {
      const { align: align2, center, spacing, columns } = facet, facetMapping = __rest16(facet, ["align", "center", "spacing", "columns"]);
      return {
        facetMapping: replaceRepeaterInFacet(facetMapping, params2.repeater),
        layout: Object.assign(Object.assign(Object.assign(Object.assign({}, align2 ? { align: align2 } : {}), center ? { center } : {}), spacing ? { spacing } : {}), columns ? { columns } : {})
      };
    }
  }
  mapLayer(spec, _a) {
    var { parentEncoding, parentProjection } = _a, otherParams = __rest16(_a, ["parentEncoding", "parentProjection"]);
    const { encoding, projection: projection3 } = spec, rest = __rest16(spec, ["encoding", "projection"]);
    const params2 = Object.assign(Object.assign({}, otherParams), { parentEncoding: mergeEncoding({ parentEncoding, encoding, layer: true }), parentProjection: mergeProjection({ parentProjection, projection: projection3 }) });
    return super.mapLayer(rest, params2);
  }
};
function mergeEncoding({ parentEncoding, encoding = {}, layer }) {
  let merged = {};
  if (parentEncoding) {
    const channels = /* @__PURE__ */ new Set([...keys3(parentEncoding), ...keys3(encoding)]);
    for (const channel of channels) {
      const channelDef = encoding[channel];
      const parentChannelDef = parentEncoding[channel];
      if (isFieldOrDatumDef(channelDef)) {
        const mergedChannelDef = Object.assign(Object.assign({}, parentChannelDef), channelDef);
        merged[channel] = mergedChannelDef;
      } else if (hasConditionalFieldOrDatumDef(channelDef)) {
        merged[channel] = Object.assign(Object.assign({}, channelDef), { condition: Object.assign(Object.assign({}, parentChannelDef), channelDef.condition) });
      } else if (channelDef || channelDef === null) {
        merged[channel] = channelDef;
      } else if (layer || isValueDef(parentChannelDef) || isSignalRef(parentChannelDef) || isFieldOrDatumDef(parentChannelDef) || isArray(parentChannelDef)) {
        merged[channel] = parentChannelDef;
      }
    }
  } else {
    merged = encoding;
  }
  return !merged || isEmpty(merged) ? void 0 : merged;
}
function mergeProjection(opt) {
  const { parentProjection, projection: projection3 } = opt;
  if (parentProjection && projection3) {
    warn2(message_exports.projectionOverridden({ parentProjection, projection: projection3 }));
  }
  return projection3 !== null && projection3 !== void 0 ? projection3 : parentProjection;
}

// node_modules/vega-lite/build/src/transform.js
function isFilter(t4) {
  return "filter" in t4;
}
function isImputeSequence(t4) {
  return (t4 === null || t4 === void 0 ? void 0 : t4["stop"]) !== void 0;
}
function isLookup(t4) {
  return "lookup" in t4;
}
function isLookupData(from) {
  return "data" in from;
}
function isLookupSelection(from) {
  return "param" in from;
}
function isPivot(t4) {
  return "pivot" in t4;
}
function isDensity(t4) {
  return "density" in t4;
}
function isQuantile2(t4) {
  return "quantile" in t4;
}
function isRegression(t4) {
  return "regression" in t4;
}
function isLoess(t4) {
  return "loess" in t4;
}
function isSample(t4) {
  return "sample" in t4;
}
function isWindow(t4) {
  return "window" in t4;
}
function isJoinAggregate(t4) {
  return "joinaggregate" in t4;
}
function isFlatten(t4) {
  return "flatten" in t4;
}
function isCalculate(t4) {
  return "calculate" in t4;
}
function isBin(t4) {
  return "bin" in t4;
}
function isImpute(t4) {
  return "impute" in t4;
}
function isTimeUnit(t4) {
  return "timeUnit" in t4;
}
function isAggregate2(t4) {
  return "aggregate" in t4;
}
function isStack(t4) {
  return "stack" in t4;
}
function isFold(t4) {
  return "fold" in t4;
}
function normalizeTransform(transform4) {
  return transform4.map((t4) => {
    if (isFilter(t4)) {
      return {
        filter: normalizeLogicalComposition(t4.filter, normalizePredicate)
      };
    }
    return t4;
  });
}

// node_modules/vega-lite/build/src/normalize/selectioncompat.js
var __rest17 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var SelectionCompatibilityNormalizer = class extends SpecMapper {
  map(spec, normParams) {
    var _a, _b;
    (_a = normParams.emptySelections) !== null && _a !== void 0 ? _a : normParams.emptySelections = {};
    (_b = normParams.selectionPredicates) !== null && _b !== void 0 ? _b : normParams.selectionPredicates = {};
    spec = normalizeTransforms(spec, normParams);
    return super.map(spec, normParams);
  }
  mapLayerOrUnit(spec, normParams) {
    spec = normalizeTransforms(spec, normParams);
    if (spec.encoding) {
      const encoding = {};
      for (const [channel, enc] of entries(spec.encoding)) {
        encoding[channel] = normalizeChannelDef(enc, normParams);
      }
      spec = Object.assign(Object.assign({}, spec), { encoding });
    }
    return super.mapLayerOrUnit(spec, normParams);
  }
  mapUnit(spec, normParams) {
    const _a = spec, { selection } = _a, rest = __rest17(_a, ["selection"]);
    if (selection) {
      return Object.assign(Object.assign({}, rest), { params: entries(selection).map(([name4, selDef]) => {
        var _a2;
        const _b = selDef, { init: value3, bind: bind3, empty } = _b, select2 = __rest17(_b, ["init", "bind", "empty"]);
        if (select2.type === "single") {
          select2.type = "point";
          select2.toggle = false;
        } else if (select2.type === "multi") {
          select2.type = "point";
        }
        normParams.emptySelections[name4] = empty !== "none";
        for (const pred of vals((_a2 = normParams.selectionPredicates[name4]) !== null && _a2 !== void 0 ? _a2 : {})) {
          pred.empty = empty !== "none";
        }
        return { name: name4, value: value3, select: select2, bind: bind3 };
      }) });
    }
    return spec;
  }
};
function normalizeTransforms(spec, normParams) {
  const { transform: tx } = spec, rest = __rest17(spec, ["transform"]);
  if (tx) {
    const transform4 = tx.map((t4) => {
      if (isFilter(t4)) {
        return { filter: normalizePredicate2(t4, normParams) };
      } else if (isBin(t4) && isBinParams(t4.bin)) {
        return Object.assign(Object.assign({}, t4), { bin: normalizeBinExtent(t4.bin) });
      } else if (isLookup(t4)) {
        const _a = t4.from, { selection: param2 } = _a, from = __rest17(_a, ["selection"]);
        return param2 ? Object.assign(Object.assign({}, t4), { from: Object.assign({ param: param2 }, from) }) : t4;
      }
      return t4;
    });
    return Object.assign(Object.assign({}, rest), { transform: transform4 });
  }
  return spec;
}
function normalizeChannelDef(obj, normParams) {
  var _a, _b;
  const enc = duplicate(obj);
  if (isFieldDef(enc) && isBinParams(enc.bin)) {
    enc.bin = normalizeBinExtent(enc.bin);
  }
  if (isScaleFieldDef(enc) && ((_b = (_a = enc.scale) === null || _a === void 0 ? void 0 : _a.domain) === null || _b === void 0 ? void 0 : _b.selection)) {
    const _c2 = enc.scale.domain, { selection: param2 } = _c2, domain4 = __rest17(_c2, ["selection"]);
    enc.scale.domain = Object.assign(Object.assign({}, domain4), param2 ? { param: param2 } : {});
  }
  if (isConditionalDef(enc)) {
    if (isArray(enc.condition)) {
      enc.condition = enc.condition.map((c3) => {
        const { selection, param: param2, test: test2 } = c3, cond = __rest17(c3, ["selection", "param", "test"]);
        return param2 ? c3 : Object.assign(Object.assign({}, cond), { test: normalizePredicate2(c3, normParams) });
      });
    } else {
      const _d2 = normalizeChannelDef(enc.condition, normParams), { selection, param: param2, test: test2 } = _d2, cond = __rest17(_d2, ["selection", "param", "test"]);
      enc.condition = param2 ? enc.condition : Object.assign(Object.assign({}, cond), { test: normalizePredicate2(enc.condition, normParams) });
    }
  }
  return enc;
}
function normalizeBinExtent(bin5) {
  const ext = bin5.extent;
  if (ext === null || ext === void 0 ? void 0 : ext.selection) {
    const { selection: param2 } = ext, rest = __rest17(ext, ["selection"]);
    return Object.assign(Object.assign({}, bin5), { extent: Object.assign(Object.assign({}, rest), { param: param2 }) });
  }
  return bin5;
}
function normalizePredicate2(op, normParams) {
  const normalizeSelectionComposition = (o) => {
    return normalizeLogicalComposition(o, (param2) => {
      var _a, _b;
      var _c2;
      const empty = (_a = normParams.emptySelections[param2]) !== null && _a !== void 0 ? _a : true;
      const pred = { param: param2, empty };
      (_b = (_c2 = normParams.selectionPredicates)[param2]) !== null && _b !== void 0 ? _b : _c2[param2] = [];
      normParams.selectionPredicates[param2].push(pred);
      return pred;
    });
  };
  return op.selection ? normalizeSelectionComposition(op.selection) : normalizeLogicalComposition(op.test || op.filter, (o) => o.selection ? normalizeSelectionComposition(o.selection) : o);
}

// node_modules/vega-lite/build/src/normalize/toplevelselection.js
var TopLevelSelectionsNormalizer = class extends SpecMapper {
  map(spec, normParams) {
    var _a;
    const selections = (_a = normParams.selections) !== null && _a !== void 0 ? _a : [];
    if (spec.params && !isUnitSpec(spec)) {
      const params2 = [];
      for (const param2 of spec.params) {
        if (isSelectionParameter(param2)) {
          selections.push(param2);
        } else {
          params2.push(param2);
        }
      }
      spec.params = params2;
    }
    normParams.selections = selections;
    return super.map(spec, addSpecNameToParams(spec, normParams));
  }
  mapUnit(spec, normParams) {
    var _a;
    const selections = normParams.selections;
    if (!selections || !selections.length)
      return spec;
    const path3 = ((_a = normParams.path) !== null && _a !== void 0 ? _a : []).concat(spec.name);
    const params2 = [];
    for (const selection of selections) {
      if (!selection.views || !selection.views.length) {
        params2.push(selection);
      } else {
        for (const view of selection.views) {
          if (isString(view) && (view === spec.name || path3.indexOf(view) >= 0) || isArray(view) && view.map((v2) => path3.indexOf(v2)).every((v2, i, arr) => v2 !== -1 && (i === 0 || v2 > arr[i - 1]))) {
            params2.push(selection);
          }
        }
      }
    }
    if (params2.length)
      spec.params = params2;
    return spec;
  }
};
for (const method2 of ["mapFacet", "mapRepeat", "mapHConcat", "mapVConcat", "mapLayer"]) {
  const proto = TopLevelSelectionsNormalizer.prototype[method2];
  TopLevelSelectionsNormalizer.prototype[method2] = function(spec, params2) {
    return proto.call(this, spec, addSpecNameToParams(spec, params2));
  };
}
function addSpecNameToParams(spec, params2) {
  var _a;
  return spec.name ? Object.assign(Object.assign({}, params2), { path: ((_a = params2.path) !== null && _a !== void 0 ? _a : []).concat(spec.name) }) : params2;
}

// node_modules/vega-lite/build/src/normalize/index.js
function normalize3(spec, config) {
  if (config === void 0) {
    config = initConfig(spec.config);
  }
  const normalizedSpec = normalizeGenericSpec(spec, config);
  const { width: width2, height: height2 } = spec;
  const autosize = normalizeAutoSize(normalizedSpec, { width: width2, height: height2, autosize: spec.autosize }, config);
  return Object.assign(Object.assign({}, normalizedSpec), autosize ? { autosize } : {});
}
var coreNormalizer = new CoreNormalizer();
var selectionCompatNormalizer = new SelectionCompatibilityNormalizer();
var topLevelSelectionNormalizer = new TopLevelSelectionsNormalizer();
function normalizeGenericSpec(spec, config = {}) {
  const normParams = { config };
  return topLevelSelectionNormalizer.map(coreNormalizer.map(selectionCompatNormalizer.map(spec, normParams), normParams), normParams);
}
function _normalizeAutoSize(autosize) {
  return isString(autosize) ? { type: autosize } : autosize !== null && autosize !== void 0 ? autosize : {};
}
function normalizeAutoSize(spec, sizeInfo, config) {
  let { width: width2, height: height2 } = sizeInfo;
  const isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);
  const autosizeDefault = {};
  if (!isFitCompatible) {
    if (width2 == "container") {
      warn2(message_exports.containerSizeNonSingle("width"));
      width2 = void 0;
    }
    if (height2 == "container") {
      warn2(message_exports.containerSizeNonSingle("height"));
      height2 = void 0;
    }
  } else {
    if (width2 == "container" && height2 == "container") {
      autosizeDefault.type = "fit";
      autosizeDefault.contains = "padding";
    } else if (width2 == "container") {
      autosizeDefault.type = "fit-x";
      autosizeDefault.contains = "padding";
    } else if (height2 == "container") {
      autosizeDefault.type = "fit-y";
      autosizeDefault.contains = "padding";
    }
  }
  const autosize = Object.assign(Object.assign(Object.assign({ type: "pad" }, autosizeDefault), config ? _normalizeAutoSize(config.autosize) : {}), _normalizeAutoSize(spec.autosize));
  if (autosize.type === "fit" && !isFitCompatible) {
    warn2(message_exports.FIT_NON_SINGLE);
    autosize.type = "pad";
  }
  if (width2 == "container" && !(autosize.type == "fit" || autosize.type == "fit-x")) {
    warn2(message_exports.containerSizeNotCompatibleWithAutosize("width"));
  }
  if (height2 == "container" && !(autosize.type == "fit" || autosize.type == "fit-y")) {
    warn2(message_exports.containerSizeNotCompatibleWithAutosize("height"));
  }
  if (deepEqual(autosize, { type: "pad" })) {
    return void 0;
  }
  return autosize;
}

// node_modules/vega-lite/build/src/spec/toplevel.js
function isFitType(autoSizeType) {
  return autoSizeType === "fit" || autoSizeType === "fit-x" || autoSizeType === "fit-y";
}
function getFitType(sizeType) {
  return sizeType ? `fit-${getPositionScaleChannel(sizeType)}` : "fit";
}
var TOP_LEVEL_PROPERTIES = [
  "background",
  "padding"
];
function extractTopLevelProperties(t4, includeParams) {
  const o = {};
  for (const p of TOP_LEVEL_PROPERTIES) {
    if (t4 && t4[p] !== void 0) {
      o[p] = signalRefOrValue(t4[p]);
    }
  }
  if (includeParams) {
    o.params = t4.params;
  }
  return o;
}

// node_modules/vega-lite/build/src/compile/split.js
var Split = class {
  constructor(explicit = {}, implicit2 = {}) {
    this.explicit = explicit;
    this.implicit = implicit2;
  }
  clone() {
    return new Split(duplicate(this.explicit), duplicate(this.implicit));
  }
  combine() {
    return Object.assign(Object.assign({}, this.explicit), this.implicit);
  }
  get(key2) {
    return getFirstDefined(this.explicit[key2], this.implicit[key2]);
  }
  getWithExplicit(key2) {
    if (this.explicit[key2] !== void 0) {
      return { explicit: true, value: this.explicit[key2] };
    } else if (this.implicit[key2] !== void 0) {
      return { explicit: false, value: this.implicit[key2] };
    }
    return { explicit: false, value: void 0 };
  }
  setWithExplicit(key2, { value: value3, explicit }) {
    if (value3 !== void 0) {
      this.set(key2, value3, explicit);
    }
  }
  set(key2, value3, explicit) {
    delete this[explicit ? "implicit" : "explicit"][key2];
    this[explicit ? "explicit" : "implicit"][key2] = value3;
    return this;
  }
  copyKeyFromSplit(key2, { explicit, implicit: implicit2 }) {
    if (explicit[key2] !== void 0) {
      this.set(key2, explicit[key2], true);
    } else if (implicit2[key2] !== void 0) {
      this.set(key2, implicit2[key2], false);
    }
  }
  copyKeyFromObject(key2, s2) {
    if (s2[key2] !== void 0) {
      this.set(key2, s2[key2], true);
    }
  }
  copyAll(other) {
    for (const key2 of keys3(other.combine())) {
      const val = other.getWithExplicit(key2);
      this.setWithExplicit(key2, val);
    }
  }
};
function makeExplicit(value3) {
  return {
    explicit: true,
    value: value3
  };
}
function makeImplicit(value3) {
  return {
    explicit: false,
    value: value3
  };
}
function tieBreakByComparing(compare5) {
  return (v1, v2, property2, propertyOf) => {
    const diff = compare5(v1.value, v2.value);
    if (diff > 0) {
      return v1;
    } else if (diff < 0) {
      return v2;
    }
    return defaultTieBreaker(v1, v2, property2, propertyOf);
  };
}
function defaultTieBreaker(v1, v2, property2, propertyOf) {
  if (v1.explicit && v2.explicit) {
    warn2(message_exports.mergeConflictingProperty(property2, propertyOf, v1.value, v2.value));
  }
  return v1;
}
function mergeValuesWithExplicit(v1, v2, property2, propertyOf, tieBreaker = defaultTieBreaker) {
  if (v1 === void 0 || v1.value === void 0) {
    return v2;
  }
  if (v1.explicit && !v2.explicit) {
    return v1;
  } else if (v2.explicit && !v1.explicit) {
    return v2;
  } else if (deepEqual(v1.value, v2.value)) {
    return v1;
  } else {
    return tieBreaker(v1, v2, property2, propertyOf);
  }
}

// node_modules/vega-lite/build/src/compile/data/index.js
var AncestorParse = class extends Split {
  constructor(explicit = {}, implicit2 = {}, parseNothing = false) {
    super(explicit, implicit2);
    this.explicit = explicit;
    this.implicit = implicit2;
    this.parseNothing = parseNothing;
  }
  clone() {
    const clone = super.clone();
    clone.parseNothing = this.parseNothing;
    return clone;
  }
};

// node_modules/vega-lite/build/src/data.js
function isUrlData(data3) {
  return "url" in data3;
}
function isInlineData(data3) {
  return "values" in data3;
}
function isNamedData(data3) {
  return "name" in data3 && !isUrlData(data3) && !isInlineData(data3) && !isGenerator(data3);
}
function isGenerator(data3) {
  return data3 && (isSequenceGenerator(data3) || isSphereGenerator(data3) || isGraticuleGenerator(data3));
}
function isSequenceGenerator(data3) {
  return "sequence" in data3;
}
function isSphereGenerator(data3) {
  return "sphere" in data3;
}
function isGraticuleGenerator(data3) {
  return "graticule" in data3;
}
var DataSourceType;
(function(DataSourceType2) {
  DataSourceType2[DataSourceType2["Raw"] = 0] = "Raw";
  DataSourceType2[DataSourceType2["Main"] = 1] = "Main";
  DataSourceType2[DataSourceType2["Row"] = 2] = "Row";
  DataSourceType2[DataSourceType2["Column"] = 3] = "Column";
  DataSourceType2[DataSourceType2["Lookup"] = 4] = "Lookup";
})(DataSourceType || (DataSourceType = {}));

// node_modules/vega-lite/build/src/compile/selection/assemble.js
var __rest18 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function assembleInit(init2, isExpr2 = true, wrap3 = identity) {
  if (isArray(init2)) {
    const assembled = init2.map((v2) => assembleInit(v2, isExpr2, wrap3));
    return isExpr2 ? `[${assembled.join(", ")}]` : assembled;
  } else if (isDateTime(init2)) {
    if (isExpr2) {
      return wrap3(dateTimeToExpr(init2));
    } else {
      return wrap3(dateTimeToTimestamp(init2));
    }
  }
  return isExpr2 ? wrap3(stringify(init2)) : init2;
}
function assembleUnitSelectionSignals(model, signals) {
  var _a;
  for (const selCmpt of vals((_a = model.component.selection) !== null && _a !== void 0 ? _a : {})) {
    const name4 = selCmpt.name;
    let modifyExpr = `${name4}${TUPLE}, ${selCmpt.resolve === "global" ? "true" : `{unit: ${unitName(model)}}`}`;
    for (const c3 of selectionCompilers) {
      if (!c3.defined(selCmpt))
        continue;
      if (c3.signals)
        signals = c3.signals(model, selCmpt, signals);
      if (c3.modifyExpr)
        modifyExpr = c3.modifyExpr(model, selCmpt, modifyExpr);
    }
    signals.push({
      name: name4 + MODIFY,
      on: [
        {
          events: { signal: selCmpt.name + TUPLE },
          update: `modify(${$(selCmpt.name + STORE)}, ${modifyExpr})`
        }
      ]
    });
  }
  return cleanupEmptyOnArray(signals);
}
function assembleFacetSignals(model, signals) {
  if (model.component.selection && keys3(model.component.selection).length) {
    const name4 = $(model.getName("cell"));
    signals.unshift({
      name: "facet",
      value: {},
      on: [
        {
          events: eventSelector("mousemove", "scope"),
          update: `isTuple(facet) ? facet : group(${name4}).datum`
        }
      ]
    });
  }
  return cleanupEmptyOnArray(signals);
}
function assembleTopLevelSignals(model, signals) {
  var _a;
  let hasSelections = false;
  for (const selCmpt of vals((_a = model.component.selection) !== null && _a !== void 0 ? _a : {})) {
    const name4 = selCmpt.name;
    const store = $(name4 + STORE);
    const hasSg = signals.filter((s2) => s2.name === name4);
    if (hasSg.length === 0) {
      const resolve2 = selCmpt.resolve === "global" ? "union" : selCmpt.resolve;
      const isPoint = selCmpt.type === "point" ? ", true, true)" : ")";
      signals.push({
        name: selCmpt.name,
        update: `${VL_SELECTION_RESOLVE}(${store}, ${$(resolve2)}${isPoint}`
      });
    }
    hasSelections = true;
    for (const c3 of selectionCompilers) {
      if (c3.defined(selCmpt) && c3.topLevelSignals) {
        signals = c3.topLevelSignals(model, selCmpt, signals);
      }
    }
  }
  if (hasSelections) {
    const hasUnit = signals.filter((s2) => s2.name === "unit");
    if (hasUnit.length === 0) {
      signals.unshift({
        name: "unit",
        value: {},
        on: [{ events: "mousemove", update: "isTuple(group()) ? group() : unit" }]
      });
    }
  }
  return cleanupEmptyOnArray(signals);
}
function assembleUnitSelectionData(model, data3) {
  var _a;
  const dataCopy = [...data3];
  const unit2 = unitName(model, { escape: false });
  for (const selCmpt of vals((_a = model.component.selection) !== null && _a !== void 0 ? _a : {})) {
    const store = { name: selCmpt.name + STORE };
    if (selCmpt.project.hasSelectionId) {
      store.transform = [{ type: "collect", sort: { field: SELECTION_ID } }];
    }
    if (selCmpt.init) {
      const fields = selCmpt.project.items.map((proj) => {
        const { signals } = proj, rest = __rest18(proj, ["signals"]);
        return rest;
      });
      store.values = selCmpt.project.hasSelectionId ? selCmpt.init.map((i) => ({ unit: unit2, [SELECTION_ID]: assembleInit(i, false)[0] })) : selCmpt.init.map((i) => ({ unit: unit2, fields, values: assembleInit(i, false) }));
    }
    const contains3 = dataCopy.filter((d) => d.name === selCmpt.name + STORE);
    if (!contains3.length) {
      dataCopy.push(store);
    }
  }
  return dataCopy;
}
function assembleUnitSelectionMarks(model, marks) {
  var _a;
  for (const selCmpt of vals((_a = model.component.selection) !== null && _a !== void 0 ? _a : {})) {
    for (const c3 of selectionCompilers) {
      if (c3.defined(selCmpt) && c3.marks) {
        marks = c3.marks(model, selCmpt, marks);
      }
    }
  }
  return marks;
}
function assembleLayerSelectionMarks(model, marks) {
  for (const child of model.children) {
    if (isUnitModel(child)) {
      marks = assembleUnitSelectionMarks(child, marks);
    }
  }
  return marks;
}
function assembleSelectionScaleDomain(model, extent4, scaleCmpt, domain4) {
  const parsedExtent = parseSelectionExtent(model, extent4.param, extent4);
  return {
    signal: hasContinuousDomain(scaleCmpt.get("type")) && isArray(domain4) && domain4[0] > domain4[1] ? `isValid(${parsedExtent}) && reverse(${parsedExtent})` : parsedExtent
  };
}
function cleanupEmptyOnArray(signals) {
  return signals.map((s2) => {
    if (s2.on && !s2.on.length)
      delete s2.on;
    return s2;
  });
}

// node_modules/vega-lite/build/src/compile/data/dataflow.js
var DataFlowNode = class {
  constructor(parent, debugName) {
    this.debugName = debugName;
    this._children = [];
    this._parent = null;
    if (parent) {
      this.parent = parent;
    }
  }
  clone() {
    throw new Error("Cannot clone node");
  }
  get parent() {
    return this._parent;
  }
  set parent(parent) {
    this._parent = parent;
    if (parent) {
      parent.addChild(this);
    }
  }
  get children() {
    return this._children;
  }
  numChildren() {
    return this._children.length;
  }
  addChild(child, loc) {
    if (this._children.includes(child)) {
      warn2(message_exports.ADD_SAME_CHILD_TWICE);
      return;
    }
    if (loc !== void 0) {
      this._children.splice(loc, 0, child);
    } else {
      this._children.push(child);
    }
  }
  removeChild(oldChild) {
    const loc = this._children.indexOf(oldChild);
    this._children.splice(loc, 1);
    return loc;
  }
  remove() {
    let loc = this._parent.removeChild(this);
    for (const child of this._children) {
      child._parent = this._parent;
      this._parent.addChild(child, loc++);
    }
  }
  insertAsParentOf(other) {
    const parent = other.parent;
    parent.removeChild(this);
    this.parent = parent;
    other.parent = this;
  }
  swapWithParent() {
    const parent = this._parent;
    const newParent = parent.parent;
    for (const child of this._children) {
      child.parent = parent;
    }
    this._children = [];
    parent.removeChild(this);
    const loc = parent.parent.removeChild(parent);
    this._parent = newParent;
    newParent.addChild(this, loc);
    parent.parent = this;
  }
};
var OutputNode = class extends DataFlowNode {
  constructor(parent, source3, type3, refCounts) {
    super(parent, source3);
    this.type = type3;
    this.refCounts = refCounts;
    this._source = this._name = source3;
    if (this.refCounts && !(this._name in this.refCounts)) {
      this.refCounts[this._name] = 0;
    }
  }
  clone() {
    const cloneObj = new this.constructor();
    cloneObj.debugName = `clone_${this.debugName}`;
    cloneObj._source = this._source;
    cloneObj._name = `clone_${this._name}`;
    cloneObj.type = this.type;
    cloneObj.refCounts = this.refCounts;
    cloneObj.refCounts[cloneObj._name] = 0;
    return cloneObj;
  }
  dependentFields() {
    return /* @__PURE__ */ new Set();
  }
  producedFields() {
    return /* @__PURE__ */ new Set();
  }
  hash() {
    if (this._hash === void 0) {
      this._hash = `Output ${uniqueId()}`;
    }
    return this._hash;
  }
  getSource() {
    this.refCounts[this._name]++;
    return this._source;
  }
  isRequired() {
    return !!this.refCounts[this._name];
  }
  setSource(source3) {
    this._source = source3;
  }
};

// node_modules/vega-lite/build/src/compile/data/timeunit.js
var __rest19 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var TimeUnitNode = class extends DataFlowNode {
  constructor(parent, formula) {
    super(parent);
    this.formula = formula;
  }
  clone() {
    return new TimeUnitNode(null, duplicate(this.formula));
  }
  static makeFromEncoding(parent, model) {
    const formula = model.reduceFieldDef((timeUnitComponent, fieldDef) => {
      const { field: field3, timeUnit } = fieldDef;
      if (timeUnit) {
        const as = vgField(fieldDef, { forAs: true });
        timeUnitComponent[hash({
          as,
          field: field3,
          timeUnit
        })] = {
          as,
          field: field3,
          timeUnit
        };
      }
      return timeUnitComponent;
    }, {});
    if (isEmpty(formula)) {
      return null;
    }
    return new TimeUnitNode(parent, formula);
  }
  static makeFromTransform(parent, t4) {
    const _a = Object.assign({}, t4), { timeUnit } = _a, other = __rest19(_a, ["timeUnit"]);
    const normalizedTimeUnit = normalizeTimeUnit(timeUnit);
    const component = Object.assign(Object.assign({}, other), { timeUnit: normalizedTimeUnit });
    return new TimeUnitNode(parent, {
      [hash(component)]: component
    });
  }
  merge(other) {
    this.formula = Object.assign({}, this.formula);
    for (const key2 in other.formula) {
      if (!this.formula[key2]) {
        this.formula[key2] = other.formula[key2];
      }
    }
    for (const child of other.children) {
      other.removeChild(child);
      child.parent = this;
    }
    other.remove();
  }
  removeFormulas(fields) {
    const newFormula = {};
    for (const [key2, timeUnit] of entries(this.formula)) {
      if (!fields.has(timeUnit.as)) {
        newFormula[key2] = timeUnit;
      }
    }
    this.formula = newFormula;
  }
  producedFields() {
    return new Set(vals(this.formula).map((f) => f.as));
  }
  dependentFields() {
    return new Set(vals(this.formula).map((f) => f.field));
  }
  hash() {
    return `TimeUnit ${hash(this.formula)}`;
  }
  assemble() {
    const transforms2 = [];
    for (const f of vals(this.formula)) {
      const { field: field3, as, timeUnit } = f;
      const _a = normalizeTimeUnit(timeUnit), { unit: unit2, utc } = _a, params2 = __rest19(_a, ["unit", "utc"]);
      transforms2.push(Object.assign(Object.assign(Object.assign(Object.assign({ field: replacePathInField(field3), type: "timeunit" }, unit2 ? { units: getTimeUnitParts(unit2) } : {}), utc ? { timezone: "utc" } : {}), params2), { as: [as, `${as}_end`] }));
    }
    return transforms2;
  }
};

// node_modules/vega-lite/build/src/compile/selection/project.js
var __rest20 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var TUPLE_FIELDS = "_tuple_fields";
var SelectionProjectionComponent = class {
  constructor(...items) {
    this.items = items;
    this.hasChannel = {};
    this.hasField = {};
    this.hasSelectionId = false;
  }
};
var project2 = {
  defined: () => {
    return true;
  },
  parse: (model, selCmpt, selDef) => {
    var _a;
    const name4 = selCmpt.name;
    const proj = (_a = selCmpt.project) !== null && _a !== void 0 ? _a : selCmpt.project = new SelectionProjectionComponent();
    const parsed = {};
    const timeUnits2 = {};
    const signals = /* @__PURE__ */ new Set();
    const signalName = (p, range8) => {
      const suffix = range8 === "visual" ? p.channel : p.field;
      let sg = varName(`${name4}_${suffix}`);
      for (let counter = 1; signals.has(sg); counter++) {
        sg = varName(`${name4}_${suffix}_${counter}`);
      }
      signals.add(sg);
      return { [range8]: sg };
    };
    const type3 = selCmpt.type;
    const cfg = model.config.selection[type3];
    const init2 = selDef.value !== void 0 ? array(selDef.value) : null;
    let { fields, encodings } = isObject(selDef.select) ? selDef.select : {};
    if (!fields && !encodings && init2) {
      for (const initVal of init2) {
        if (!isObject(initVal)) {
          continue;
        }
        for (const key2 of keys3(initVal)) {
          if (isSingleDefUnitChannel(key2)) {
            (encodings || (encodings = [])).push(key2);
          } else {
            if (type3 === "interval") {
              warn2(message_exports.INTERVAL_INITIALIZED_WITH_X_Y);
              encodings = cfg.encodings;
            } else {
              (fields || (fields = [])).push(key2);
            }
          }
        }
      }
    }
    if (!fields && !encodings) {
      encodings = cfg.encodings;
      if ("fields" in cfg) {
        fields = cfg.fields;
      }
    }
    for (const channel of encodings !== null && encodings !== void 0 ? encodings : []) {
      const fieldDef = model.fieldDef(channel);
      if (fieldDef) {
        let field3 = fieldDef.field;
        if (fieldDef.aggregate) {
          warn2(message_exports.cannotProjectAggregate(channel, fieldDef.aggregate));
          continue;
        } else if (!field3) {
          warn2(message_exports.cannotProjectOnChannelWithoutField(channel));
          continue;
        }
        if (fieldDef.timeUnit) {
          field3 = model.vgField(channel);
          const component = {
            timeUnit: fieldDef.timeUnit,
            as: field3,
            field: fieldDef.field
          };
          timeUnits2[hash(component)] = component;
        }
        if (!parsed[field3]) {
          let tplType = "E";
          if (type3 === "interval") {
            const scaleType2 = model.getScaleComponent(channel).get("type");
            if (hasContinuousDomain(scaleType2)) {
              tplType = "R";
            }
          } else if (fieldDef.bin) {
            tplType = "R-RE";
          }
          const p = { field: field3, channel, type: tplType };
          p.signals = Object.assign(Object.assign({}, signalName(p, "data")), signalName(p, "visual"));
          proj.items.push(parsed[field3] = p);
          proj.hasField[field3] = proj.hasChannel[channel] = parsed[field3];
          proj.hasSelectionId = proj.hasSelectionId || field3 === SELECTION_ID;
        }
      } else {
        warn2(message_exports.cannotProjectOnChannelWithoutField(channel));
      }
    }
    for (const field3 of fields !== null && fields !== void 0 ? fields : []) {
      if (proj.hasField[field3])
        continue;
      const p = { type: "E", field: field3 };
      p.signals = Object.assign({}, signalName(p, "data"));
      proj.items.push(p);
      proj.hasField[field3] = p;
      proj.hasSelectionId = proj.hasSelectionId || field3 === SELECTION_ID;
    }
    if (init2) {
      selCmpt.init = init2.map((v2) => {
        return proj.items.map((p) => isObject(v2) ? v2[p.channel] !== void 0 ? v2[p.channel] : v2[p.field] : v2);
      });
    }
    if (!isEmpty(timeUnits2)) {
      proj.timeUnit = new TimeUnitNode(null, timeUnits2);
    }
  },
  signals: (model, selCmpt, allSignals) => {
    const name4 = selCmpt.name + TUPLE_FIELDS;
    const hasSignal2 = allSignals.filter((s2) => s2.name === name4);
    return hasSignal2.length > 0 || selCmpt.project.hasSelectionId ? allSignals : allSignals.concat({
      name: name4,
      value: selCmpt.project.items.map((proj) => {
        const { signals, hasLegend } = proj, rest = __rest20(proj, ["signals", "hasLegend"]);
        rest.field = replacePathInField(rest.field);
        return rest;
      })
    });
  }
};
var project_default2 = project2;

// node_modules/vega-lite/build/src/compile/selection/scales.js
var scaleBindings = {
  defined: (selCmpt) => {
    return selCmpt.type === "interval" && selCmpt.resolve === "global" && selCmpt.bind && selCmpt.bind === "scales";
  },
  parse: (model, selCmpt) => {
    const bound2 = selCmpt.scales = [];
    for (const proj of selCmpt.project.items) {
      const channel = proj.channel;
      if (!isScaleChannel(channel)) {
        continue;
      }
      const scale7 = model.getScaleComponent(channel);
      const scaleType2 = scale7 ? scale7.get("type") : void 0;
      if (!scale7 || !hasContinuousDomain(scaleType2)) {
        warn2(message_exports.SCALE_BINDINGS_CONTINUOUS);
        continue;
      }
      scale7.set("selectionExtent", { param: selCmpt.name, field: proj.field }, true);
      bound2.push(proj);
    }
  },
  topLevelSignals: (model, selCmpt, signals) => {
    const bound2 = selCmpt.scales.filter((proj) => signals.filter((s2) => s2.name === proj.signals.data).length === 0);
    if (!model.parent || isTopLevelLayer(model) || bound2.length === 0) {
      return signals;
    }
    const namedSg = signals.filter((s2) => s2.name === selCmpt.name)[0];
    let update3 = namedSg.update;
    if (update3.indexOf(VL_SELECTION_RESOLVE) >= 0) {
      namedSg.update = `{${bound2.map((proj) => `${$(replacePathInField(proj.field))}: ${proj.signals.data}`).join(", ")}}`;
    } else {
      for (const proj of bound2) {
        const mapping = `${$(replacePathInField(proj.field))}: ${proj.signals.data}`;
        if (!update3.includes(mapping)) {
          update3 = `${update3.substring(0, update3.length - 1)}, ${mapping}}`;
        }
      }
      namedSg.update = update3;
    }
    return signals.concat(bound2.map((proj) => ({ name: proj.signals.data })));
  },
  signals: (model, selCmpt, signals) => {
    if (model.parent && !isTopLevelLayer(model)) {
      for (const proj of selCmpt.scales) {
        const signal = signals.filter((s2) => s2.name === proj.signals.data)[0];
        signal.push = "outer";
        delete signal.value;
        delete signal.update;
      }
    }
    return signals;
  }
};
var scales_default = scaleBindings;
function domain3(model, channel) {
  const scale7 = $(model.scaleName(channel));
  return `domain(${scale7})`;
}
function isTopLevelLayer(model) {
  var _a;
  return model.parent && isLayerModel(model.parent) && ((_a = !model.parent.parent) !== null && _a !== void 0 ? _a : isTopLevelLayer(model.parent.parent));
}

// node_modules/vega-lite/build/src/compile/selection/interval.js
var __rest21 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var BRUSH = "_brush";
var SCALE_TRIGGER = "_scale_trigger";
var interval2 = {
  defined: (selCmpt) => selCmpt.type === "interval",
  signals: (model, selCmpt, signals) => {
    const name4 = selCmpt.name;
    const fieldsSg = name4 + TUPLE_FIELDS;
    const hasScales = scales_default.defined(selCmpt);
    const init2 = selCmpt.init ? selCmpt.init[0] : null;
    const dataSignals = [];
    const scaleTriggers = [];
    if (selCmpt.translate && !hasScales) {
      const filterExpr = `!event.item || event.item.mark.name !== ${$(name4 + BRUSH)}`;
      events3(selCmpt, (on2, evt) => {
        var _a;
        var _b;
        const filters2 = array((_a = (_b = evt.between[0]).filter) !== null && _a !== void 0 ? _a : _b.filter = []);
        if (!filters2.includes(filterExpr)) {
          filters2.push(filterExpr);
        }
        return on2;
      });
    }
    selCmpt.project.items.forEach((proj, i) => {
      const channel = proj.channel;
      if (channel !== X3 && channel !== Y3) {
        warn2("Interval selections only support x and y encoding channels.");
        return;
      }
      const val = init2 ? init2[i] : null;
      const cs = channelSignals(model, selCmpt, proj, val);
      const dname = proj.signals.data;
      const vname = proj.signals.visual;
      const scaleName = $(model.scaleName(channel));
      const scaleType2 = model.getScaleComponent(channel).get("type");
      const toNum = hasContinuousDomain(scaleType2) ? "+" : "";
      signals.push(...cs);
      dataSignals.push(dname);
      scaleTriggers.push({
        scaleName: model.scaleName(channel),
        expr: `(!isArray(${dname}) || (${toNum}invert(${scaleName}, ${vname})[0] === ${toNum}${dname}[0] && ${toNum}invert(${scaleName}, ${vname})[1] === ${toNum}${dname}[1]))`
      });
    });
    if (!hasScales && scaleTriggers.length) {
      signals.push({
        name: name4 + SCALE_TRIGGER,
        value: {},
        on: [
          {
            events: scaleTriggers.map((t4) => ({ scale: t4.scaleName })),
            update: `${scaleTriggers.map((t4) => t4.expr).join(" && ")} ? ${name4 + SCALE_TRIGGER} : {}`
          }
        ]
      });
    }
    const update3 = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;
    return signals.concat(Object.assign(Object.assign({ name: name4 + TUPLE }, init2 ? { init: `{${update3}: ${assembleInit(init2)}}` } : {}), dataSignals.length ? {
      on: [
        {
          events: [{ signal: dataSignals.join(" || ") }],
          update: `${dataSignals.join(" && ")} ? {${update3}: [${dataSignals}]} : null`
        }
      ]
    } : {}));
  },
  marks: (model, selCmpt, marks) => {
    const name4 = selCmpt.name;
    const { x: x5, y: y5 } = selCmpt.project.hasChannel;
    const xvname = x5 === null || x5 === void 0 ? void 0 : x5.signals.visual;
    const yvname = y5 === null || y5 === void 0 ? void 0 : y5.signals.visual;
    const store = `data(${$(selCmpt.name + STORE)})`;
    if (scales_default.defined(selCmpt) || !x5 && !y5) {
      return marks;
    }
    const update3 = {
      x: x5 !== void 0 ? { signal: `${xvname}[0]` } : { value: 0 },
      y: y5 !== void 0 ? { signal: `${yvname}[0]` } : { value: 0 },
      x2: x5 !== void 0 ? { signal: `${xvname}[1]` } : { field: { group: "width" } },
      y2: y5 !== void 0 ? { signal: `${yvname}[1]` } : { field: { group: "height" } }
    };
    if (selCmpt.resolve === "global") {
      for (const key2 of keys3(update3)) {
        update3[key2] = [
          Object.assign({ test: `${store}.length && ${store}[0].unit === ${unitName(model)}` }, update3[key2]),
          { value: 0 }
        ];
      }
    }
    const _a = selCmpt.mark, { fill: fill2, fillOpacity, cursor: cursor3 } = _a, stroke2 = __rest21(_a, ["fill", "fillOpacity", "cursor"]);
    const vgStroke = keys3(stroke2).reduce((def2, k3) => {
      def2[k3] = [
        {
          test: [x5 !== void 0 && `${xvname}[0] !== ${xvname}[1]`, y5 !== void 0 && `${yvname}[0] !== ${yvname}[1]`].filter((t4) => t4).join(" && "),
          value: stroke2[k3]
        },
        { value: null }
      ];
      return def2;
    }, {});
    return [
      {
        name: `${name4 + BRUSH}_bg`,
        type: "rect",
        clip: true,
        encode: {
          enter: {
            fill: { value: fill2 },
            fillOpacity: { value: fillOpacity }
          },
          update: update3
        }
      },
      ...marks,
      {
        name: name4 + BRUSH,
        type: "rect",
        clip: true,
        encode: {
          enter: Object.assign(Object.assign({}, cursor3 ? { cursor: { value: cursor3 } } : {}), { fill: { value: "transparent" } }),
          update: Object.assign(Object.assign({}, update3), vgStroke)
        }
      }
    ];
  }
};
var interval_default2 = interval2;
function channelSignals(model, selCmpt, proj, init2) {
  const channel = proj.channel;
  const vname = proj.signals.visual;
  const dname = proj.signals.data;
  const hasScales = scales_default.defined(selCmpt);
  const scaleName = $(model.scaleName(channel));
  const scale7 = model.getScaleComponent(channel);
  const scaleType2 = scale7 ? scale7.get("type") : void 0;
  const scaled = (str) => `scale(${scaleName}, ${str})`;
  const size = model.getSizeSignalRef(channel === X3 ? "width" : "height").signal;
  const coord = `${channel}(unit)`;
  const on2 = events3(selCmpt, (def2, evt) => {
    return [
      ...def2,
      { events: evt.between[0], update: `[${coord}, ${coord}]` },
      { events: evt, update: `[${vname}[0], clamp(${coord}, 0, ${size})]` }
    ];
  });
  on2.push({
    events: { signal: selCmpt.name + SCALE_TRIGGER },
    update: hasContinuousDomain(scaleType2) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`
  });
  return hasScales ? [{ name: dname, on: [] }] : [
    Object.assign(Object.assign({ name: vname }, init2 ? { init: assembleInit(init2, true, scaled) } : { value: [] }), { on: on2 }),
    Object.assign(Object.assign({ name: dname }, init2 ? { init: assembleInit(init2) } : {}), { on: [
      {
        events: { signal: vname },
        update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`
      }
    ] })
  ];
}
function events3(selCmpt, cb) {
  return selCmpt.events.reduce((on2, evt) => {
    if (!evt.between) {
      warn2(`${evt} is not an ordered event stream for interval selections.`);
      return on2;
    }
    return cb(on2, evt);
  }, []);
}

// node_modules/vega-lite/build/src/compile/selection/point.js
var point8 = {
  defined: (selCmpt) => selCmpt.type === "point",
  signals: (model, selCmpt, signals) => {
    var _a;
    const name4 = selCmpt.name;
    const fieldsSg = name4 + TUPLE_FIELDS;
    const project3 = selCmpt.project;
    const datum2 = "(item().isVoronoi ? datum.datum : datum)";
    const brushes = vals((_a = model.component.selection) !== null && _a !== void 0 ? _a : {}).reduce((acc, cmpt) => {
      return cmpt.type === "interval" ? acc.concat(cmpt.name + BRUSH) : acc;
    }, []).map((b2) => `indexof(item().mark.name, '${b2}') < 0`).join(" && ");
    const test2 = `datum && item().mark.marktype !== 'group' && indexof(item().mark.role, 'legend') < 0${brushes ? ` && ${brushes}` : ""}`;
    let update3 = `unit: ${unitName(model)}, `;
    if (selCmpt.project.hasSelectionId) {
      update3 += `${SELECTION_ID}: ${datum2}[${$(SELECTION_ID)}]`;
    } else {
      const values5 = project3.items.map((p) => {
        const fieldDef = model.fieldDef(p.channel);
        return (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin) ? `[${datum2}[${$(model.vgField(p.channel, {}))}], ${datum2}[${$(model.vgField(p.channel, { binSuffix: "end" }))}]]` : `${datum2}[${$(p.field)}]`;
      }).join(", ");
      update3 += `fields: ${fieldsSg}, values: [${values5}]`;
    }
    const events4 = selCmpt.events;
    return signals.concat([
      {
        name: name4 + TUPLE,
        on: events4 ? [
          {
            events: events4,
            update: `${test2} ? {${update3}} : null`,
            force: true
          }
        ] : []
      }
    ]);
  }
};
var point_default = point8;

// node_modules/vega-lite/build/src/compile/mark/encode/conditional.js
function wrapCondition(model, channelDef, vgChannel, refFn) {
  const condition = isConditionalDef(channelDef) && channelDef.condition;
  const valueRef = refFn(channelDef);
  if (condition) {
    const conditions = array(condition);
    const vgConditions = conditions.map((c3) => {
      const conditionValueRef = refFn(c3);
      if (isConditionalParameter(c3)) {
        const { param: param2, empty } = c3;
        const test2 = parseSelectionPredicate(model, { param: param2, empty });
        return Object.assign({ test: test2 }, conditionValueRef);
      } else {
        const test2 = expression3(model, c3.test);
        return Object.assign({ test: test2 }, conditionValueRef);
      }
    });
    return {
      [vgChannel]: [...vgConditions, ...valueRef !== void 0 ? [valueRef] : []]
    };
  } else {
    return valueRef !== void 0 ? { [vgChannel]: valueRef } : {};
  }
}

// node_modules/vega-lite/build/src/compile/mark/encode/text.js
function text2(model, channel = "text") {
  const channelDef = model.encoding[channel];
  return wrapCondition(model, channelDef, channel, (cDef) => textRef(cDef, model.config));
}
function textRef(channelDef, config, expr2 = "datum") {
  if (channelDef) {
    if (isValueDef(channelDef)) {
      return signalOrValueRef(channelDef.value);
    }
    if (isFieldOrDatumDef(channelDef)) {
      const { format: format5, formatType } = getFormatMixins(channelDef);
      return formatSignalRef({ fieldOrDatumDef: channelDef, format: format5, formatType, expr: expr2, config });
    }
  }
  return void 0;
}

// node_modules/vega-lite/build/src/compile/mark/encode/tooltip.js
function tooltip(model, opt = {}) {
  const { encoding, markDef, config, stack: stack2 } = model;
  const channelDef = encoding.tooltip;
  if (isArray(channelDef)) {
    return { tooltip: tooltipRefForEncoding({ tooltip: channelDef }, stack2, config, opt) };
  } else {
    const datum2 = opt.reactiveGeom ? "datum.datum" : "datum";
    return wrapCondition(model, channelDef, "tooltip", (cDef) => {
      const tooltipRefFromChannelDef = textRef(cDef, config, datum2);
      if (tooltipRefFromChannelDef) {
        return tooltipRefFromChannelDef;
      }
      if (cDef === null) {
        return void 0;
      }
      let markTooltip = getMarkPropOrConfig("tooltip", markDef, config);
      if (markTooltip === true) {
        markTooltip = { content: "encoding" };
      }
      if (isString(markTooltip)) {
        return { value: markTooltip };
      } else if (isObject(markTooltip)) {
        if (isSignalRef(markTooltip)) {
          return markTooltip;
        } else if (markTooltip.content === "encoding") {
          return tooltipRefForEncoding(encoding, stack2, config, opt);
        } else {
          return { signal: datum2 };
        }
      }
      return void 0;
    });
  }
}
function tooltipData(encoding, stack2, config, { reactiveGeom } = {}) {
  const toSkip = {};
  const expr2 = reactiveGeom ? "datum.datum" : "datum";
  const tuples = [];
  function add6(fDef, channel) {
    const mainChannel = getMainRangeChannel(channel);
    const fieldDef = isTypedFieldDef(fDef) ? fDef : Object.assign(Object.assign({}, fDef), {
      type: encoding[mainChannel].type
    });
    const title2 = fieldDef.title || defaultTitle(fieldDef, config);
    const key2 = array(title2).join(", ");
    let value3;
    if (isXorY(channel)) {
      const channel2 = channel === "x" ? "x2" : "y2";
      const fieldDef2 = getFieldDef(encoding[channel2]);
      if (isBinned(fieldDef.bin) && fieldDef2) {
        const startField = vgField(fieldDef, { expr: expr2 });
        const endField = vgField(fieldDef2, { expr: expr2 });
        const { format: format5, formatType } = getFormatMixins(fieldDef);
        value3 = binFormatExpression(startField, endField, format5, formatType, config);
        toSkip[channel2] = true;
      }
    }
    if ((isXorY(channel) || channel === THETA || channel === RADIUS) && stack2 && stack2.fieldChannel === channel && stack2.offset === "normalize") {
      const { format: format5, formatType } = getFormatMixins(fieldDef);
      value3 = formatSignalRef({
        fieldOrDatumDef: fieldDef,
        format: format5,
        formatType,
        expr: expr2,
        config,
        normalizeStack: true
      }).signal;
    }
    value3 !== null && value3 !== void 0 ? value3 : value3 = textRef(fieldDef, config, expr2).signal;
    tuples.push({ channel, key: key2, value: value3 });
  }
  forEach(encoding, (channelDef, channel) => {
    if (isFieldDef(channelDef)) {
      add6(channelDef, channel);
    } else if (hasConditionalFieldDef(channelDef)) {
      add6(channelDef.condition, channel);
    }
  });
  const out = {};
  for (const { channel, key: key2, value: value3 } of tuples) {
    if (!toSkip[channel] && !out[key2]) {
      out[key2] = value3;
    }
  }
  return out;
}
function tooltipRefForEncoding(encoding, stack2, config, { reactiveGeom } = {}) {
  const data3 = tooltipData(encoding, stack2, config, { reactiveGeom });
  const keyValues = entries(data3).map(([key2, value3]) => `"${key2}": ${value3}`);
  return keyValues.length > 0 ? { signal: `{${keyValues.join(", ")}}` } : void 0;
}

// node_modules/vega-lite/build/src/compile/mark/encode/aria.js
function aria(model) {
  const { markDef, config } = model;
  const enableAria = getMarkPropOrConfig("aria", markDef, config);
  if (enableAria === false) {
    return {};
  }
  return Object.assign(Object.assign(Object.assign({}, enableAria ? { aria: enableAria } : {}), ariaRoleDescription(model)), description(model));
}
function ariaRoleDescription(model) {
  const { mark: mark2, markDef, config } = model;
  if (config.aria === false) {
    return {};
  }
  const ariaRoleDesc = getMarkPropOrConfig("ariaRoleDescription", markDef, config);
  if (ariaRoleDesc != null) {
    return { ariaRoleDescription: { value: ariaRoleDesc } };
  }
  return mark2 in VG_MARK_INDEX ? {} : { ariaRoleDescription: { value: mark2 } };
}
function description(model) {
  const { encoding, markDef, config, stack: stack2 } = model;
  const channelDef = encoding.description;
  if (channelDef) {
    return wrapCondition(model, channelDef, "description", (cDef) => textRef(cDef, model.config));
  }
  const descriptionValue = getMarkPropOrConfig("description", markDef, config);
  if (descriptionValue != null) {
    return {
      description: signalOrValueRef(descriptionValue)
    };
  }
  if (config.aria === false) {
    return {};
  }
  const data3 = tooltipData(encoding, stack2, config);
  if (isEmpty(data3)) {
    return void 0;
  }
  return {
    description: {
      signal: entries(data3).map(([key2, value3], index5) => `"${index5 > 0 ? "; " : ""}${key2}: " + (${value3})`).join(" + ")
    }
  };
}

// node_modules/vega-lite/build/src/compile/mark/encode/nonposition.js
function nonPosition(channel, model, opt = {}) {
  const { markDef, encoding, config } = model;
  const { vgChannel } = opt;
  let { defaultRef, defaultValue } = opt;
  if (defaultRef === void 0) {
    defaultValue !== null && defaultValue !== void 0 ? defaultValue : defaultValue = getMarkPropOrConfig(channel, markDef, config, { vgChannel, ignoreVgConfig: true });
    if (defaultValue !== void 0) {
      defaultRef = signalOrValueRef(defaultValue);
    }
  }
  const channelDef = encoding[channel];
  return wrapCondition(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, (cDef) => {
    return midPoint({
      channel,
      channelDef: cDef,
      markDef,
      config,
      scaleName: model.scaleName(channel),
      scale: model.getScaleComponent(channel),
      stack: null,
      defaultRef
    });
  });
}

// node_modules/vega-lite/build/src/compile/mark/encode/color.js
function color4(model, opt = { filled: void 0 }) {
  var _a, _b, _c2, _d2;
  const { markDef, encoding, config } = model;
  const { type: markType2 } = markDef;
  const filled = (_a = opt.filled) !== null && _a !== void 0 ? _a : getMarkPropOrConfig("filled", markDef, config);
  const transparentIfNeeded = contains2(["bar", "point", "circle", "square", "geoshape"], markType2) ? "transparent" : void 0;
  const defaultFill = (_c2 = (_b = getMarkPropOrConfig(filled === true ? "color" : void 0, markDef, config, { vgChannel: "fill" })) !== null && _b !== void 0 ? _b : config.mark[filled === true && "color"]) !== null && _c2 !== void 0 ? _c2 : transparentIfNeeded;
  const defaultStroke = (_d2 = getMarkPropOrConfig(filled === false ? "color" : void 0, markDef, config, { vgChannel: "stroke" })) !== null && _d2 !== void 0 ? _d2 : config.mark[filled === false && "color"];
  const colorVgChannel = filled ? "fill" : "stroke";
  const fillStrokeMarkDefAndConfig = Object.assign(Object.assign({}, defaultFill ? { fill: signalOrValueRef(defaultFill) } : {}), defaultStroke ? { stroke: signalOrValueRef(defaultStroke) } : {});
  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {
    warn2(message_exports.droppingColor("property", { fill: "fill" in markDef, stroke: "stroke" in markDef }));
  }
  return Object.assign(Object.assign(Object.assign(Object.assign({}, fillStrokeMarkDefAndConfig), nonPosition("color", model, {
    vgChannel: colorVgChannel,
    defaultValue: filled ? defaultFill : defaultStroke
  })), nonPosition("fill", model, {
    defaultValue: encoding.fill ? defaultFill : void 0
  })), nonPosition("stroke", model, {
    defaultValue: encoding.stroke ? defaultStroke : void 0
  }));
}

// node_modules/vega-lite/build/src/compile/mark/encode/zindex.js
function zindex(model) {
  const { encoding, mark: mark2 } = model;
  const order = encoding.order;
  if (!isPathMark(mark2) && isValueDef(order)) {
    return wrapCondition(model, order, "zindex", (cd2) => signalOrValueRef(cd2.value));
  }
  return {};
}

// node_modules/vega-lite/build/src/compile/mark/encode/offset.js
function positionOffset({ channel: baseChannel, markDef, encoding = {}, model, bandPosition }) {
  const channel = `${baseChannel}Offset`;
  const defaultValue = markDef[channel];
  const channelDef = encoding[channel];
  if ((channel === "xOffset" || channel === "yOffset") && channelDef) {
    const ref2 = midPoint({
      channel,
      channelDef,
      markDef,
      config: model === null || model === void 0 ? void 0 : model.config,
      scaleName: model.scaleName(channel),
      scale: model.getScaleComponent(channel),
      stack: null,
      defaultRef: signalOrValueRef(defaultValue),
      bandPosition
    });
    return { offsetType: "encoding", offset: ref2 };
  }
  const markDefOffsetValue = markDef[channel];
  if (markDefOffsetValue) {
    return { offsetType: "visual", offset: markDefOffsetValue };
  }
  return {};
}

// node_modules/vega-lite/build/src/compile/mark/encode/position-point.js
function pointPosition(channel, model, { defaultPos, vgChannel }) {
  const { encoding, markDef, config, stack: stack2 } = model;
  const channelDef = encoding[channel];
  const channel2Def = encoding[getSecondaryRangeChannel(channel)];
  const scaleName = model.scaleName(channel);
  const scale7 = model.getScaleComponent(channel);
  const { offset: offset4, offsetType } = positionOffset({
    channel,
    markDef,
    encoding,
    model,
    bandPosition: 0.5
  });
  const defaultRef = pointPositionDefaultRef({
    model,
    defaultPos,
    channel,
    scaleName,
    scale: scale7
  });
  const valueRef = !channelDef && isXorY(channel) && (encoding.latitude || encoding.longitude) ? { field: model.getName(channel) } : positionRef({
    channel,
    channelDef,
    channel2Def,
    markDef,
    config,
    scaleName,
    scale: scale7,
    stack: stack2,
    offset: offset4,
    defaultRef,
    bandPosition: offsetType === "encoding" ? 0 : void 0
  });
  return valueRef ? { [vgChannel || channel]: valueRef } : void 0;
}
function positionRef(params2) {
  const { channel, channelDef, scaleName, stack: stack2, offset: offset4, markDef } = params2;
  if (isFieldOrDatumDef(channelDef) && stack2 && channel === stack2.fieldChannel) {
    if (isFieldDef(channelDef)) {
      let bandPosition = channelDef.bandPosition;
      if (bandPosition === void 0 && markDef.type === "text" && (channel === "radius" || channel === "theta")) {
        bandPosition = 0.5;
      }
      if (bandPosition !== void 0) {
        return interpolatedSignalRef({
          scaleName,
          fieldOrDatumDef: channelDef,
          startSuffix: "start",
          bandPosition,
          offset: offset4
        });
      }
    }
    return valueRefForFieldOrDatumDef(channelDef, scaleName, { suffix: "end" }, { offset: offset4 });
  }
  return midPointRefWithPositionInvalidTest(params2);
}
function pointPositionDefaultRef({ model, defaultPos, channel, scaleName, scale: scale7 }) {
  const { markDef, config } = model;
  return () => {
    const mainChannel = getMainRangeChannel(channel);
    const vgChannel = getVgPositionChannel(channel);
    const definedValueOrConfig = getMarkPropOrConfig(channel, markDef, config, { vgChannel });
    if (definedValueOrConfig !== void 0) {
      return widthHeightValueOrSignalRef(channel, definedValueOrConfig);
    }
    switch (defaultPos) {
      case "zeroOrMin":
      case "zeroOrMax":
        if (scaleName) {
          const scaleType2 = scale7.get("type");
          if (contains2([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType2)) {
          } else {
            if (scale7.domainDefinitelyIncludesZero()) {
              return {
                scale: scaleName,
                value: 0
              };
            }
          }
        }
        if (defaultPos === "zeroOrMin") {
          return mainChannel === "y" ? { field: { group: "height" } } : { value: 0 };
        } else {
          switch (mainChannel) {
            case "radius":
              return {
                signal: `min(${model.width.signal},${model.height.signal})/2`
              };
            case "theta":
              return { signal: "2*PI" };
            case "x":
              return { field: { group: "width" } };
            case "y":
              return { value: 0 };
          }
        }
        break;
      case "mid": {
        const sizeRef = model[getSizeChannel(channel)];
        return Object.assign(Object.assign({}, sizeRef), { mult: 0.5 });
      }
    }
    return void 0;
  };
}

// node_modules/vega-lite/build/src/compile/mark/encode/position-align.js
var ALIGNED_X_CHANNEL = {
  left: "x",
  center: "xc",
  right: "x2"
};
var BASELINED_Y_CHANNEL = {
  top: "y",
  middle: "yc",
  bottom: "y2"
};
function vgAlignedPositionChannel(channel, markDef, config, defaultAlign = "middle") {
  if (channel === "radius" || channel === "theta") {
    return getVgPositionChannel(channel);
  }
  const alignChannel = channel === "x" ? "align" : "baseline";
  const align2 = getMarkPropOrConfig(alignChannel, markDef, config);
  let alignExcludingSignal;
  if (isSignalRef(align2)) {
    warn2(message_exports.rangeMarkAlignmentCannotBeExpression(alignChannel));
    alignExcludingSignal = void 0;
  } else {
    alignExcludingSignal = align2;
  }
  if (channel === "x") {
    return ALIGNED_X_CHANNEL[alignExcludingSignal || (defaultAlign === "top" ? "left" : "center")];
  } else {
    return BASELINED_Y_CHANNEL[alignExcludingSignal || defaultAlign];
  }
}

// node_modules/vega-lite/build/src/compile/mark/encode/position-range.js
function pointOrRangePosition(channel, model, { defaultPos, defaultPos2, range: range8 }) {
  if (range8) {
    return rangePosition(channel, model, { defaultPos, defaultPos2 });
  }
  return pointPosition(channel, model, { defaultPos });
}
function rangePosition(channel, model, { defaultPos, defaultPos2 }) {
  const { markDef, config } = model;
  const channel2 = getSecondaryRangeChannel(channel);
  const sizeChannel = getSizeChannel(channel);
  const pos2Mixins = pointPosition2OrSize(model, defaultPos2, channel2);
  const vgChannel = pos2Mixins[sizeChannel] ? vgAlignedPositionChannel(channel, markDef, config) : getVgPositionChannel(channel);
  return Object.assign(Object.assign({}, pointPosition(channel, model, { defaultPos, vgChannel })), pos2Mixins);
}
function pointPosition2OrSize(model, defaultPos, channel) {
  const { encoding, mark: mark2, markDef, stack: stack2, config } = model;
  const baseChannel = getMainRangeChannel(channel);
  const sizeChannel = getSizeChannel(channel);
  const vgChannel = getVgPositionChannel(channel);
  const channelDef = encoding[baseChannel];
  const scaleName = model.scaleName(baseChannel);
  const scale7 = model.getScaleComponent(baseChannel);
  const { offset: offset4 } = channel in encoding || channel in markDef ? positionOffset({ channel, markDef, encoding, model }) : positionOffset({ channel: baseChannel, markDef, encoding, model });
  if (!channelDef && (channel === "x2" || channel === "y2") && (encoding.latitude || encoding.longitude)) {
    const vgSizeChannel = getSizeChannel(channel);
    const size = model.markDef[vgSizeChannel];
    if (size != null) {
      return {
        [vgSizeChannel]: { value: size }
      };
    } else {
      return {
        [vgChannel]: { field: model.getName(channel) }
      };
    }
  }
  const valueRef = position2Ref({
    channel,
    channelDef,
    channel2Def: encoding[channel],
    markDef,
    config,
    scaleName,
    scale: scale7,
    stack: stack2,
    offset: offset4,
    defaultRef: void 0
  });
  if (valueRef !== void 0) {
    return { [vgChannel]: valueRef };
  }
  return position2orSize(channel, markDef) || position2orSize(channel, {
    [channel]: getMarkStyleConfig(channel, markDef, config.style),
    [sizeChannel]: getMarkStyleConfig(sizeChannel, markDef, config.style)
  }) || position2orSize(channel, config[mark2]) || position2orSize(channel, config.mark) || {
    [vgChannel]: pointPositionDefaultRef({
      model,
      defaultPos,
      channel,
      scaleName,
      scale: scale7
    })()
  };
}
function position2Ref({ channel, channelDef, channel2Def, markDef, config, scaleName, scale: scale7, stack: stack2, offset: offset4, defaultRef }) {
  if (isFieldOrDatumDef(channelDef) && stack2 && channel.charAt(0) === stack2.fieldChannel.charAt(0)) {
    return valueRefForFieldOrDatumDef(channelDef, scaleName, { suffix: "start" }, { offset: offset4 });
  }
  return midPointRefWithPositionInvalidTest({
    channel,
    channelDef: channel2Def,
    scaleName,
    scale: scale7,
    stack: stack2,
    markDef,
    config,
    offset: offset4,
    defaultRef
  });
}
function position2orSize(channel, markDef) {
  const sizeChannel = getSizeChannel(channel);
  const vgChannel = getVgPositionChannel(channel);
  if (markDef[vgChannel] !== void 0) {
    return { [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[vgChannel]) };
  } else if (markDef[channel] !== void 0) {
    return { [vgChannel]: widthHeightValueOrSignalRef(channel, markDef[channel]) };
  } else if (markDef[sizeChannel]) {
    const dimensionSize = markDef[sizeChannel];
    if (isRelativeBandSize(dimensionSize)) {
      warn2(message_exports.relativeBandSizeNotSupported(sizeChannel));
    } else {
      return { [sizeChannel]: widthHeightValueOrSignalRef(channel, dimensionSize) };
    }
  }
  return void 0;
}

// node_modules/vega-lite/build/src/compile/mark/encode/position-rect.js
function rectPosition(model, channel) {
  var _a, _b;
  const { config, encoding, markDef } = model;
  const mark2 = markDef.type;
  const channel2 = getSecondaryRangeChannel(channel);
  const sizeChannel = getSizeChannel(channel);
  const channelDef = encoding[channel];
  const channelDef2 = encoding[channel2];
  const scale7 = model.getScaleComponent(channel);
  const scaleType2 = scale7 ? scale7.get("type") : void 0;
  const orient2 = markDef.orient;
  const hasSizeDef = (_b = (_a = encoding[sizeChannel]) !== null && _a !== void 0 ? _a : encoding.size) !== null && _b !== void 0 ? _b : getMarkPropOrConfig("size", markDef, config, { vgChannel: sizeChannel });
  const isBarBand = mark2 === "bar" && (channel === "x" ? orient2 === "vertical" : orient2 === "horizontal");
  if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !(hasSizeDef && !isRelativeBandSize(hasSizeDef)) && !hasDiscreteDomain(scaleType2)) {
    return rectBinPosition({
      fieldDef: channelDef,
      fieldDef2: channelDef2,
      channel,
      model
    });
  } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType2) || isBarBand) && !channelDef2) {
    return positionAndSize(channelDef, channel, model);
  } else {
    return rangePosition(channel, model, { defaultPos: "zeroOrMax", defaultPos2: "zeroOrMin" });
  }
}
function defaultSizeRef(sizeChannel, scaleName, scale7, config, bandSize) {
  if (isRelativeBandSize(bandSize)) {
    if (scale7) {
      const scaleType2 = scale7.get("type");
      if (scaleType2 === "band") {
        let bandWidth = `bandwidth('${scaleName}')`;
        if (bandSize.band !== 1) {
          bandWidth = `${bandSize.band} * ${bandWidth}`;
        }
        return { signal: `max(0.25, ${bandWidth})` };
      } else if (bandSize.band !== 1) {
        warn2(message_exports.cannotUseRelativeBandSizeWithNonBandScale(scaleType2));
        bandSize = void 0;
      }
    } else {
      return {
        mult: bandSize.band,
        field: { group: sizeChannel }
      };
    }
  } else if (isSignalRef(bandSize)) {
    return bandSize;
  } else if (bandSize) {
    return { value: bandSize };
  }
  if (scale7) {
    const scaleRange = scale7.get("range");
    if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {
      return { value: scaleRange.step - 2 };
    }
  }
  const defaultStep = getViewConfigDiscreteStep(config.view, sizeChannel);
  return { value: defaultStep - 2 };
}
function positionAndSize(fieldDef, channel, model) {
  const { markDef, encoding, config, stack: stack2 } = model;
  const orient2 = markDef.orient;
  const scaleName = model.scaleName(channel);
  const scale7 = model.getScaleComponent(channel);
  const vgSizeChannel = getSizeChannel(channel);
  const channel2 = getSecondaryRangeChannel(channel);
  const offsetScaleChannel = getOffsetChannel(channel);
  const offsetScaleName = model.scaleName(offsetScaleChannel);
  const useVlSizeChannel = orient2 === "horizontal" && channel === "y" || orient2 === "vertical" && channel === "x";
  let sizeMixins;
  if (encoding.size || markDef.size) {
    if (useVlSizeChannel) {
      sizeMixins = nonPosition("size", model, {
        vgChannel: vgSizeChannel,
        defaultRef: signalOrValueRef(markDef.size)
      });
    } else {
      warn2(message_exports.cannotApplySizeToNonOrientedMark(markDef.type));
    }
  }
  const hasSizeFromMarkOrEncoding = !!sizeMixins;
  const bandSize = getBandSize({ channel, fieldDef, markDef, config, scaleType: scale7 === null || scale7 === void 0 ? void 0 : scale7.get("type"), useVlSizeChannel });
  sizeMixins = sizeMixins || {
    [vgSizeChannel]: defaultSizeRef(vgSizeChannel, offsetScaleName || scaleName, scale7, config, bandSize)
  };
  const defaultBandAlign = (scale7 === null || scale7 === void 0 ? void 0 : scale7.get("type")) === "band" && isRelativeBandSize(bandSize) && !hasSizeFromMarkOrEncoding ? "top" : "middle";
  const vgChannel = vgAlignedPositionChannel(channel, markDef, config, defaultBandAlign);
  const center = vgChannel === "xc" || vgChannel === "yc";
  const { offset: offset4, offsetType } = positionOffset({ channel, markDef, encoding, model, bandPosition: center ? 0.5 : 0 });
  const posRef = midPointRefWithPositionInvalidTest({
    channel,
    channelDef: fieldDef,
    markDef,
    config,
    scaleName,
    scale: scale7,
    stack: stack2,
    offset: offset4,
    defaultRef: pointPositionDefaultRef({ model, defaultPos: "mid", channel, scaleName, scale: scale7 }),
    bandPosition: center ? offsetType === "encoding" ? 0 : 0.5 : isSignalRef(bandSize) ? { signal: `(1-${bandSize})/2` } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0
  });
  if (vgSizeChannel) {
    return Object.assign({ [vgChannel]: posRef }, sizeMixins);
  } else {
    const vgChannel2 = getVgPositionChannel(channel2);
    const sizeRef = sizeMixins[vgSizeChannel];
    const sizeOffset = offset4 ? Object.assign(Object.assign({}, sizeRef), { offset: offset4 }) : sizeRef;
    return {
      [vgChannel]: posRef,
      [vgChannel2]: isArray(posRef) ? [posRef[0], Object.assign(Object.assign({}, posRef[1]), { offset: sizeOffset })] : Object.assign(Object.assign({}, posRef), { offset: sizeOffset })
    };
  }
}
function getBinSpacing(channel, spacing, reverse5, translate4, offset4) {
  if (isPolarPositionChannel(channel)) {
    return 0;
  }
  const spacingOffset = channel === "x" || channel === "y2" ? -spacing / 2 : spacing / 2;
  if (isSignalRef(reverse5) || isSignalRef(offset4) || isSignalRef(translate4)) {
    const reverseExpr = signalOrStringValue(reverse5);
    const offsetExpr = signalOrStringValue(offset4);
    const translateExpr = signalOrStringValue(translate4);
    const t4 = translateExpr ? `${translateExpr} + ` : "";
    const r = reverseExpr ? `(${reverseExpr} ? -1 : 1) * ` : "";
    const o = offsetExpr ? `(${offsetExpr} + ${spacingOffset})` : spacingOffset;
    return {
      signal: t4 + r + o
    };
  } else {
    offset4 = offset4 || 0;
    return translate4 + (reverse5 ? -offset4 - spacingOffset : +offset4 + spacingOffset);
  }
}
function rectBinPosition({ fieldDef, fieldDef2, channel, model }) {
  var _a, _b, _c2;
  const { config, markDef, encoding } = model;
  const scale7 = model.getScaleComponent(channel);
  const scaleName = model.scaleName(channel);
  const scaleType2 = scale7 ? scale7.get("type") : void 0;
  const reverse5 = scale7.get("reverse");
  const bandSize = getBandSize({ channel, fieldDef, markDef, config, scaleType: scaleType2 });
  const axis = (_a = model.component.axes[channel]) === null || _a === void 0 ? void 0 : _a[0];
  const axisTranslate = (_b = axis === null || axis === void 0 ? void 0 : axis.get("translate")) !== null && _b !== void 0 ? _b : 0.5;
  const spacing = isXorY(channel) ? (_c2 = getMarkPropOrConfig("binSpacing", markDef, config)) !== null && _c2 !== void 0 ? _c2 : 0 : 0;
  const channel2 = getSecondaryRangeChannel(channel);
  const vgChannel = getVgPositionChannel(channel);
  const vgChannel2 = getVgPositionChannel(channel2);
  const { offset: offset4 } = positionOffset({ channel, markDef, encoding, model, bandPosition: 0 });
  const bandPosition = isSignalRef(bandSize) ? { signal: `(1-${bandSize.signal})/2` } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0.5;
  if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {
    return {
      [vgChannel2]: rectBinRef({
        fieldDef,
        scaleName,
        bandPosition,
        offset: getBinSpacing(channel2, spacing, reverse5, axisTranslate, offset4)
      }),
      [vgChannel]: rectBinRef({
        fieldDef,
        scaleName,
        bandPosition: isSignalRef(bandPosition) ? { signal: `1-${bandPosition.signal}` } : 1 - bandPosition,
        offset: getBinSpacing(channel, spacing, reverse5, axisTranslate, offset4)
      })
    };
  } else if (isBinned(fieldDef.bin)) {
    const startRef = valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, { offset: getBinSpacing(channel2, spacing, reverse5, axisTranslate, offset4) });
    if (isFieldDef(fieldDef2)) {
      return {
        [vgChannel2]: startRef,
        [vgChannel]: valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, { offset: getBinSpacing(channel, spacing, reverse5, axisTranslate, offset4) })
      };
    } else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {
      return {
        [vgChannel2]: startRef,
        [vgChannel]: {
          signal: `scale("${scaleName}", ${vgField(fieldDef, { expr: "datum" })} + ${fieldDef.bin.step})`,
          offset: getBinSpacing(channel, spacing, reverse5, axisTranslate, offset4)
        }
      };
    }
  }
  warn2(message_exports.channelRequiredForBinned(channel2));
  return void 0;
}
function rectBinRef({ fieldDef, scaleName, bandPosition, offset: offset4 }) {
  return interpolatedSignalRef({
    scaleName,
    fieldOrDatumDef: fieldDef,
    bandPosition,
    offset: offset4
  });
}

// node_modules/vega-lite/build/src/compile/mark/encode/base.js
var ALWAYS_IGNORE = /* @__PURE__ */ new Set(["aria", "width", "height"]);
function baseEncodeEntry(model, ignore) {
  const { fill: fill2 = void 0, stroke: stroke2 = void 0 } = ignore.color === "include" ? color4(model) : {};
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, markDefProperties(model.markDef, ignore)), wrapAllFieldsInvalid(model, "fill", fill2)), wrapAllFieldsInvalid(model, "stroke", stroke2)), nonPosition("opacity", model)), nonPosition("fillOpacity", model)), nonPosition("strokeOpacity", model)), nonPosition("strokeWidth", model)), nonPosition("strokeDash", model)), zindex(model)), tooltip(model)), text2(model, "href")), aria(model));
}
function wrapAllFieldsInvalid(model, channel, valueRef) {
  const { config, mark: mark2, markDef } = model;
  const invalid = getMarkPropOrConfig("invalid", markDef, config);
  if (invalid === "hide" && valueRef && !isPathMark(mark2)) {
    const test2 = allFieldsInvalidPredicate(model, { invalid: true, channels: SCALE_CHANNELS });
    if (test2) {
      return {
        [channel]: [
          { test: test2, value: null },
          ...array(valueRef)
        ]
      };
    }
  }
  return valueRef ? { [channel]: valueRef } : {};
}
function markDefProperties(mark2, ignore) {
  return VG_MARK_CONFIGS.reduce((m3, prop) => {
    if (!ALWAYS_IGNORE.has(prop) && mark2[prop] !== void 0 && ignore[prop] !== "ignore") {
      m3[prop] = signalOrValueRef(mark2[prop]);
    }
    return m3;
  }, {});
}
function allFieldsInvalidPredicate(model, { invalid = false, channels }) {
  const filterIndex = channels.reduce((aggregator, channel) => {
    const scaleComponent = model.getScaleComponent(channel);
    if (scaleComponent) {
      const scaleType2 = scaleComponent.get("type");
      const field3 = model.vgField(channel, { expr: "datum" });
      if (field3 && hasContinuousDomain(scaleType2)) {
        aggregator[field3] = true;
      }
    }
    return aggregator;
  }, {});
  const fields = keys3(filterIndex);
  if (fields.length > 0) {
    const op = invalid ? "||" : "&&";
    return fields.map((field3) => fieldInvalidPredicate(field3, invalid)).join(` ${op} `);
  }
  return void 0;
}

// node_modules/vega-lite/build/src/compile/mark/encode/defined.js
function defined(model) {
  const { config, markDef } = model;
  const invalid = getMarkPropOrConfig("invalid", markDef, config);
  if (invalid) {
    const signal = allFieldsInvalidPredicate2(model, { channels: POSITION_SCALE_CHANNELS });
    if (signal) {
      return { defined: { signal } };
    }
  }
  return {};
}
function allFieldsInvalidPredicate2(model, { invalid = false, channels }) {
  const filterIndex = channels.reduce((aggregator, channel) => {
    var _a;
    const scaleComponent = model.getScaleComponent(channel);
    if (scaleComponent) {
      const scaleType2 = scaleComponent.get("type");
      const field3 = model.vgField(channel, { expr: "datum", binSuffix: ((_a = model.stack) === null || _a === void 0 ? void 0 : _a.impute) ? "mid" : void 0 });
      if (field3 && hasContinuousDomain(scaleType2)) {
        aggregator[field3] = true;
      }
    }
    return aggregator;
  }, {});
  const fields = keys3(filterIndex);
  if (fields.length > 0) {
    const op = invalid ? "||" : "&&";
    return fields.map((field3) => fieldInvalidPredicate(field3, invalid)).join(` ${op} `);
  }
  return void 0;
}
function valueIfDefined(prop, value3) {
  if (value3 !== void 0) {
    return { [prop]: signalOrValueRef(value3) };
  }
  return void 0;
}

// node_modules/vega-lite/build/src/compile/selection/nearest.js
var VORONOI = "voronoi";
var nearest = {
  defined: (selCmpt) => {
    return selCmpt.type === "point" && selCmpt.nearest;
  },
  parse: (model, selCmpt) => {
    if (selCmpt.events) {
      for (const s2 of selCmpt.events) {
        s2.markname = model.getName(VORONOI);
      }
    }
  },
  marks: (model, selCmpt, marks) => {
    const { x: x5, y: y5 } = selCmpt.project.hasChannel;
    const markType2 = model.mark;
    if (isPathMark(markType2)) {
      warn2(message_exports.nearestNotSupportForContinuous(markType2));
      return marks;
    }
    const cellDef = {
      name: model.getName(VORONOI),
      type: "path",
      interactive: true,
      from: { data: model.getName("marks") },
      encode: {
        update: Object.assign({ fill: { value: "transparent" }, strokeWidth: { value: 0.35 }, stroke: { value: "transparent" }, isVoronoi: { value: true } }, tooltip(model, { reactiveGeom: true }))
      },
      transform: [
        {
          type: "voronoi",
          x: { expr: x5 || !y5 ? "datum.datum.x || 0" : "0" },
          y: { expr: y5 || !x5 ? "datum.datum.y || 0" : "0" },
          size: [model.getSizeSignalRef("width"), model.getSizeSignalRef("height")]
        }
      ]
    };
    let index5 = 0;
    let exists = false;
    marks.forEach((mark2, i) => {
      var _a;
      const name4 = (_a = mark2.name) !== null && _a !== void 0 ? _a : "";
      if (name4 === model.component.mark[0].name) {
        index5 = i;
      } else if (name4.indexOf(VORONOI) >= 0) {
        exists = true;
      }
    });
    if (!exists) {
      marks.splice(index5 + 1, 0, cellDef);
    }
    return marks;
  }
};
var nearest_default = nearest;

// node_modules/vega-lite/build/src/compile/selection/inputs.js
var inputBindings = {
  defined: (selCmpt) => {
    return selCmpt.type === "point" && selCmpt.resolve === "global" && selCmpt.bind && selCmpt.bind !== "scales" && !isLegendBinding(selCmpt.bind);
  },
  parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),
  topLevelSignals: (model, selCmpt, signals) => {
    const name4 = selCmpt.name;
    const proj = selCmpt.project;
    const bind3 = selCmpt.bind;
    const init2 = selCmpt.init && selCmpt.init[0];
    const datum2 = nearest_default.defined(selCmpt) ? "(item().isVoronoi ? datum.datum : datum)" : "datum";
    proj.items.forEach((p, i) => {
      var _a, _b;
      const sgname = varName(`${name4}_${p.field}`);
      const hasSignal2 = signals.filter((s2) => s2.name === sgname);
      if (!hasSignal2.length) {
        signals.unshift(Object.assign(Object.assign({ name: sgname }, init2 ? { init: assembleInit(init2[i]) } : { value: null }), { on: selCmpt.events ? [
          {
            events: selCmpt.events,
            update: `datum && item().mark.marktype !== 'group' ? ${datum2}[${$(p.field)}] : null`
          }
        ] : [], bind: (_b = (_a = bind3[p.field]) !== null && _a !== void 0 ? _a : bind3[p.channel]) !== null && _b !== void 0 ? _b : bind3 }));
      }
    });
    return signals;
  },
  signals: (model, selCmpt, signals) => {
    const name4 = selCmpt.name;
    const proj = selCmpt.project;
    const signal = signals.filter((s2) => s2.name === name4 + TUPLE)[0];
    const fields = name4 + TUPLE_FIELDS;
    const values5 = proj.items.map((p) => varName(`${name4}_${p.field}`));
    const valid = values5.map((v2) => `${v2} !== null`).join(" && ");
    if (values5.length) {
      signal.update = `${valid} ? {fields: ${fields}, values: [${values5.join(", ")}]} : null`;
    }
    delete signal.value;
    delete signal.on;
    return signals;
  }
};
var inputs_default = inputBindings;

// node_modules/vega-lite/build/src/compile/selection/toggle.js
var TOGGLE = "_toggle";
var toggle = {
  defined: (selCmpt) => {
    return selCmpt.type === "point" && !!selCmpt.toggle;
  },
  signals: (model, selCmpt, signals) => {
    return signals.concat({
      name: selCmpt.name + TOGGLE,
      value: false,
      on: [{ events: selCmpt.events, update: selCmpt.toggle }]
    });
  },
  modifyExpr: (model, selCmpt) => {
    const tpl = selCmpt.name + TUPLE;
    const signal = selCmpt.name + TOGGLE;
    return `${signal} ? null : ${tpl}, ` + (selCmpt.resolve === "global" ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) + `${signal} ? ${tpl} : null`;
  }
};
var toggle_default = toggle;

// node_modules/vega-lite/build/src/compile/selection/clear.js
var clear = {
  defined: (selCmpt) => {
    return selCmpt.clear !== void 0 && selCmpt.clear !== false;
  },
  parse: (model, selCmpt) => {
    if (selCmpt.clear) {
      selCmpt.clear = isString(selCmpt.clear) ? eventSelector(selCmpt.clear, "view") : selCmpt.clear;
    }
  },
  topLevelSignals: (model, selCmpt, signals) => {
    if (inputs_default.defined(selCmpt)) {
      for (const proj of selCmpt.project.items) {
        const idx = signals.findIndex((n) => n.name === varName(`${selCmpt.name}_${proj.field}`));
        if (idx !== -1) {
          signals[idx].on.push({ events: selCmpt.clear, update: "null" });
        }
      }
    }
    return signals;
  },
  signals: (model, selCmpt, signals) => {
    function addClear(idx, update3) {
      if (idx !== -1 && signals[idx].on) {
        signals[idx].on.push({ events: selCmpt.clear, update: update3 });
      }
    }
    if (selCmpt.type === "interval") {
      for (const proj of selCmpt.project.items) {
        const vIdx = signals.findIndex((n) => n.name === proj.signals.visual);
        addClear(vIdx, "[0, 0]");
        if (vIdx === -1) {
          const dIdx = signals.findIndex((n) => n.name === proj.signals.data);
          addClear(dIdx, "null");
        }
      }
    } else {
      let tIdx = signals.findIndex((n) => n.name === selCmpt.name + TUPLE);
      addClear(tIdx, "null");
      if (toggle_default.defined(selCmpt)) {
        tIdx = signals.findIndex((n) => n.name === selCmpt.name + TOGGLE);
        addClear(tIdx, "false");
      }
    }
    return signals;
  }
};
var clear_default = clear;

// node_modules/vega-lite/build/src/compile/selection/legends.js
var legendBindings = {
  defined: (selCmpt) => {
    const spec = selCmpt.resolve === "global" && selCmpt.bind && isLegendBinding(selCmpt.bind);
    const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;
    if (spec && !projLen) {
      warn2(message_exports.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);
    }
    return spec && projLen;
  },
  parse: (model, selCmpt, selDef) => {
    var _a;
    const selDef_ = duplicate(selDef);
    selDef_.select = isString(selDef_.select) ? { type: selDef_.select, toggle: selCmpt.toggle } : Object.assign(Object.assign({}, selDef_.select), { toggle: selCmpt.toggle });
    disableDirectManipulation(selCmpt, selDef_);
    if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {
      const legendFilter = 'event.item && indexof(event.item.mark.role, "legend") < 0';
      for (const evt2 of selCmpt.events) {
        evt2.filter = array((_a = evt2.filter) !== null && _a !== void 0 ? _a : []);
        if (!evt2.filter.includes(legendFilter)) {
          evt2.filter.push(legendFilter);
        }
      }
    }
    const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : "click";
    const stream2 = isString(evt) ? eventSelector(evt, "view") : array(evt);
    selCmpt.bind = { legend: { merge: stream2 } };
  },
  topLevelSignals: (model, selCmpt, signals) => {
    const selName = selCmpt.name;
    const stream2 = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;
    const markName = (name4) => (s2) => {
      const ds = duplicate(s2);
      ds.markname = name4;
      return ds;
    };
    for (const proj of selCmpt.project.items) {
      if (!proj.hasLegend)
        continue;
      const prefix = `${varName(proj.field)}_legend`;
      const sgName = `${selName}_${prefix}`;
      const hasSignal2 = signals.filter((s2) => s2.name === sgName);
      if (hasSignal2.length === 0) {
        const events4 = stream2.merge.map(markName(`${prefix}_symbols`)).concat(stream2.merge.map(markName(`${prefix}_labels`))).concat(stream2.merge.map(markName(`${prefix}_entries`)));
        signals.unshift(Object.assign(Object.assign({ name: sgName }, !selCmpt.init ? { value: null } : {}), { on: [
          { events: events4, update: "datum.value || item().items[0].items[0].datum.value", force: true },
          { events: stream2.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true }
        ] }));
      }
    }
    return signals;
  },
  signals: (model, selCmpt, signals) => {
    const name4 = selCmpt.name;
    const proj = selCmpt.project;
    const tuple = signals.find((s2) => s2.name === name4 + TUPLE);
    const fields = name4 + TUPLE_FIELDS;
    const values5 = proj.items.filter((p) => p.hasLegend).map((p) => varName(`${name4}_${varName(p.field)}_legend`));
    const valid = values5.map((v2) => `${v2} !== null`).join(" && ");
    const update3 = `${valid} ? {fields: ${fields}, values: [${values5.join(", ")}]} : null`;
    if (selCmpt.events && values5.length > 0) {
      tuple.on.push({
        events: values5.map((signal) => ({ signal })),
        update: update3
      });
    } else if (values5.length > 0) {
      tuple.update = update3;
      delete tuple.value;
      delete tuple.on;
    }
    const toggle2 = signals.find((s2) => s2.name === name4 + TOGGLE);
    const events4 = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;
    if (toggle2) {
      if (!selCmpt.events)
        toggle2.on[0].events = events4;
      else
        toggle2.on.push(Object.assign(Object.assign({}, toggle2.on[0]), { events: events4 }));
    }
    return signals;
  }
};
var legends_default = legendBindings;
function parseInteractiveLegend(model, channel, legendCmpt) {
  var _a, _b, _c2, _d2;
  const field3 = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;
  for (const selCmpt of vals((_b = model.component.selection) !== null && _b !== void 0 ? _b : {})) {
    const proj = (_c2 = selCmpt.project.hasField[field3]) !== null && _c2 !== void 0 ? _c2 : selCmpt.project.hasChannel[channel];
    if (proj && legendBindings.defined(selCmpt)) {
      const legendSelections = (_d2 = legendCmpt.get("selections")) !== null && _d2 !== void 0 ? _d2 : [];
      legendSelections.push(selCmpt.name);
      legendCmpt.set("selections", legendSelections, false);
      proj.hasLegend = true;
    }
  }
}

// node_modules/vega-lite/build/src/compile/selection/translate.js
var ANCHOR = "_translate_anchor";
var DELTA = "_translate_delta";
var translate3 = {
  defined: (selCmpt) => {
    return selCmpt.type === "interval" && selCmpt.translate;
  },
  signals: (model, selCmpt, signals) => {
    const name4 = selCmpt.name;
    const hasScales = scales_default.defined(selCmpt);
    const anchor = name4 + ANCHOR;
    const { x: x5, y: y5 } = selCmpt.project.hasChannel;
    let events4 = eventSelector(selCmpt.translate, "scope");
    if (!hasScales) {
      events4 = events4.map((e3) => (e3.between[0].markname = name4 + BRUSH, e3));
    }
    signals.push({
      name: anchor,
      value: {},
      on: [
        {
          events: events4.map((e3) => e3.between[0]),
          update: "{x: x(unit), y: y(unit)" + (x5 !== void 0 ? `, extent_x: ${hasScales ? domain3(model, X3) : `slice(${x5.signals.visual})`}` : "") + (y5 !== void 0 ? `, extent_y: ${hasScales ? domain3(model, Y3) : `slice(${y5.signals.visual})`}` : "") + "}"
        }
      ]
    }, {
      name: name4 + DELTA,
      value: {},
      on: [
        {
          events: events4,
          update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`
        }
      ]
    });
    if (x5 !== void 0) {
      onDelta(model, selCmpt, x5, "width", signals);
    }
    if (y5 !== void 0) {
      onDelta(model, selCmpt, y5, "height", signals);
    }
    return signals;
  }
};
var translate_default = translate3;
function onDelta(model, selCmpt, proj, size, signals) {
  var _a, _b;
  const name4 = selCmpt.name;
  const anchor = name4 + ANCHOR;
  const delta = name4 + DELTA;
  const channel = proj.channel;
  const hasScales = scales_default.defined(selCmpt);
  const signal = signals.filter((s2) => s2.name === proj.signals[hasScales ? "data" : "visual"])[0];
  const sizeSg = model.getSizeSignalRef(size).signal;
  const scaleCmpt = model.getScaleComponent(channel);
  const scaleType2 = scaleCmpt.get("type");
  const reversed = scaleCmpt.get("reverse");
  const sign4 = !hasScales ? "" : channel === X3 ? reversed ? "" : "-" : reversed ? "-" : "";
  const extent4 = `${anchor}.extent_${channel}`;
  const offset4 = `${sign4}${delta}.${channel} / ${hasScales ? `${sizeSg}` : `span(${extent4})`}`;
  const panFn = !hasScales ? "panLinear" : scaleType2 === "log" ? "panLog" : scaleType2 === "symlog" ? "panSymlog" : scaleType2 === "pow" ? "panPow" : "panLinear";
  const arg = !hasScales ? "" : scaleType2 === "pow" ? `, ${(_a = scaleCmpt.get("exponent")) !== null && _a !== void 0 ? _a : 1}` : scaleType2 === "symlog" ? `, ${(_b = scaleCmpt.get("constant")) !== null && _b !== void 0 ? _b : 1}` : "";
  const update3 = `${panFn}(${extent4}, ${offset4}${arg})`;
  signal.on.push({
    events: { signal: delta },
    update: hasScales ? update3 : `clampRange(${update3}, 0, ${sizeSg})`
  });
}

// node_modules/vega-lite/build/src/compile/selection/zoom.js
var ANCHOR2 = "_zoom_anchor";
var DELTA2 = "_zoom_delta";
var zoom2 = {
  defined: (selCmpt) => {
    return selCmpt.type === "interval" && selCmpt.zoom;
  },
  signals: (model, selCmpt, signals) => {
    const name4 = selCmpt.name;
    const hasScales = scales_default.defined(selCmpt);
    const delta = name4 + DELTA2;
    const { x: x5, y: y5 } = selCmpt.project.hasChannel;
    const sx = $(model.scaleName(X3));
    const sy = $(model.scaleName(Y3));
    let events4 = eventSelector(selCmpt.zoom, "scope");
    if (!hasScales) {
      events4 = events4.map((e3) => (e3.markname = name4 + BRUSH, e3));
    }
    signals.push({
      name: name4 + ANCHOR2,
      on: [
        {
          events: events4,
          update: !hasScales ? `{x: x(unit), y: y(unit)}` : "{" + [sx ? `x: invert(${sx}, x(unit))` : "", sy ? `y: invert(${sy}, y(unit))` : ""].filter((expr2) => !!expr2).join(", ") + "}"
        }
      ]
    }, {
      name: delta,
      on: [
        {
          events: events4,
          force: true,
          update: "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
        }
      ]
    });
    if (x5 !== void 0) {
      onDelta2(model, selCmpt, x5, "width", signals);
    }
    if (y5 !== void 0) {
      onDelta2(model, selCmpt, y5, "height", signals);
    }
    return signals;
  }
};
var zoom_default2 = zoom2;
function onDelta2(model, selCmpt, proj, size, signals) {
  var _a, _b;
  const name4 = selCmpt.name;
  const channel = proj.channel;
  const hasScales = scales_default.defined(selCmpt);
  const signal = signals.filter((s2) => s2.name === proj.signals[hasScales ? "data" : "visual"])[0];
  const sizeSg = model.getSizeSignalRef(size).signal;
  const scaleCmpt = model.getScaleComponent(channel);
  const scaleType2 = scaleCmpt.get("type");
  const base2 = hasScales ? domain3(model, channel) : signal.name;
  const delta = name4 + DELTA2;
  const anchor = `${name4}${ANCHOR2}.${channel}`;
  const zoomFn = !hasScales ? "zoomLinear" : scaleType2 === "log" ? "zoomLog" : scaleType2 === "symlog" ? "zoomSymlog" : scaleType2 === "pow" ? "zoomPow" : "zoomLinear";
  const arg = !hasScales ? "" : scaleType2 === "pow" ? `, ${(_a = scaleCmpt.get("exponent")) !== null && _a !== void 0 ? _a : 1}` : scaleType2 === "symlog" ? `, ${(_b = scaleCmpt.get("constant")) !== null && _b !== void 0 ? _b : 1}` : "";
  const update3 = `${zoomFn}(${base2}, ${anchor}, ${delta}${arg})`;
  signal.on.push({
    events: { signal: delta },
    update: hasScales ? update3 : `clampRange(${update3}, 0, ${sizeSg})`
  });
}

// node_modules/vega-lite/build/src/compile/selection/index.js
var STORE = "_store";
var TUPLE = "_tuple";
var MODIFY = "_modify";
var VL_SELECTION_RESOLVE = "vlSelectionResolve";
var selectionCompilers = [
  point_default,
  interval_default2,
  project_default2,
  toggle_default,
  inputs_default,
  scales_default,
  legends_default,
  clear_default,
  translate_default,
  zoom_default2,
  nearest_default
];
function getFacetModel(model) {
  let parent = model.parent;
  while (parent) {
    if (isFacetModel(parent))
      break;
    parent = parent.parent;
  }
  return parent;
}
function unitName(model, { escape: escape2 } = { escape: true }) {
  let name4 = escape2 ? $(model.name) : model.name;
  const facetModel = getFacetModel(model);
  if (facetModel) {
    const { facet } = facetModel;
    for (const channel of FACET_CHANNELS) {
      if (facet[channel]) {
        name4 += ` + '__facet_${channel}_' + (facet[${$(facetModel.vgField(channel))}])`;
      }
    }
  }
  return name4;
}
function requiresSelectionId(model) {
  var _a;
  return vals((_a = model.component.selection) !== null && _a !== void 0 ? _a : {}).reduce((identifier, selCmpt) => {
    return identifier || selCmpt.project.hasSelectionId;
  }, false);
}
function disableDirectManipulation(selCmpt, selDef) {
  if (isString(selDef.select) || !selDef.select.on)
    delete selCmpt.events;
  if (isString(selDef.select) || !selDef.select.clear)
    delete selCmpt.clear;
  if (isString(selDef.select) || !selDef.select.toggle)
    delete selCmpt.toggle;
}

// node_modules/vega-lite/build/src/compile/data/expressions.js
function getName(node) {
  const name4 = [];
  if (node.type === "Identifier") {
    return [node.name];
  }
  if (node.type === "Literal") {
    return [node.value];
  }
  if (node.type === "MemberExpression") {
    name4.push(...getName(node.object));
    name4.push(...getName(node.property));
  }
  return name4;
}
function startsWithDatum(node) {
  if (node.object.type === "MemberExpression") {
    return startsWithDatum(node.object);
  }
  return node.object.name === "datum";
}
function getDependentFields(expression4) {
  const ast = parser(expression4);
  const dependents = /* @__PURE__ */ new Set();
  ast.visit((node) => {
    if (node.type === "MemberExpression" && startsWithDatum(node)) {
      dependents.add(getName(node).slice(1).join("."));
    }
  });
  return dependents;
}

// node_modules/vega-lite/build/src/compile/data/filter.js
var FilterNode = class extends DataFlowNode {
  constructor(parent, model, filter5) {
    super(parent);
    this.model = model;
    this.filter = filter5;
    this.expr = expression3(this.model, this.filter, this);
    this._dependentFields = getDependentFields(this.expr);
  }
  clone() {
    return new FilterNode(null, this.model, duplicate(this.filter));
  }
  dependentFields() {
    return this._dependentFields;
  }
  producedFields() {
    return /* @__PURE__ */ new Set();
  }
  assemble() {
    return {
      type: "filter",
      expr: this.expr
    };
  }
  hash() {
    return `Filter ${this.expr}`;
  }
};

// node_modules/vega-lite/build/src/compile/selection/parse.js
function parseUnitSelection(model, selDefs) {
  var _a;
  const selCmpts = {};
  const selectionConfig = model.config.selection;
  if (!selDefs || !selDefs.length)
    return selCmpts;
  for (const def2 of selDefs) {
    const name4 = varName(def2.name);
    const selDef = def2.select;
    const type3 = isString(selDef) ? selDef : selDef.type;
    const defaults2 = isObject(selDef) ? duplicate(selDef) : { type: type3 };
    const cfg = selectionConfig[type3];
    for (const key2 in cfg) {
      if (key2 === "fields" || key2 === "encodings") {
        continue;
      }
      if (key2 === "mark") {
        defaults2[key2] = Object.assign(Object.assign({}, cfg[key2]), defaults2[key2]);
      }
      if (defaults2[key2] === void 0 || defaults2[key2] === true) {
        defaults2[key2] = (_a = cfg[key2]) !== null && _a !== void 0 ? _a : defaults2[key2];
      }
    }
    const selCmpt = selCmpts[name4] = Object.assign(Object.assign({}, defaults2), {
      name: name4,
      type: type3,
      init: def2.value,
      bind: def2.bind,
      events: isString(defaults2.on) ? eventSelector(defaults2.on, "scope") : array(duplicate(defaults2.on))
    });
    for (const c3 of selectionCompilers) {
      if (c3.defined(selCmpt) && c3.parse) {
        c3.parse(model, selCmpt, def2);
      }
    }
  }
  return selCmpts;
}
function parseSelectionPredicate(model, pred, dfnode, datum2 = "datum") {
  const name4 = isString(pred) ? pred : pred.param;
  const vname = varName(name4);
  const store = $(vname + STORE);
  let selCmpt;
  try {
    selCmpt = model.getSelectionComponent(vname, name4);
  } catch (e3) {
    return `!!${vname}`;
  }
  if (selCmpt.project.timeUnit) {
    const child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;
    const tunode = selCmpt.project.timeUnit.clone();
    if (child.parent) {
      tunode.insertAsParentOf(child);
    } else {
      child.parent = tunode;
    }
  }
  const fn = selCmpt.project.hasSelectionId ? "vlSelectionIdTest(" : "vlSelectionTest(";
  const resolve2 = selCmpt.resolve === "global" ? ")" : `, ${$(selCmpt.resolve)})`;
  const test2 = `${fn}${store}, ${datum2}${resolve2}`;
  const length2 = `length(data(${store}))`;
  return pred.empty === false ? `${length2} && ${test2}` : `!${length2} || ${test2}`;
}
function parseSelectionExtent(model, name4, extent4) {
  const vname = varName(name4);
  const encoding = extent4["encoding"];
  let field3 = extent4["field"];
  let selCmpt;
  try {
    selCmpt = model.getSelectionComponent(vname, name4);
  } catch (e3) {
    return vname;
  }
  if (!encoding && !field3) {
    field3 = selCmpt.project.items[0].field;
    if (selCmpt.project.items.length > 1) {
      warn2(`A "field" or "encoding" must be specified when using a selection as a scale domain. Using "field": ${$(field3)}.`);
    }
  } else if (encoding && !field3) {
    const encodings = selCmpt.project.items.filter((p) => p.channel === encoding);
    if (!encodings.length || encodings.length > 1) {
      field3 = selCmpt.project.items[0].field;
      warn2((!encodings.length ? "No " : "Multiple ") + `matching ${$(encoding)} encoding found for selection ${$(extent4.param)}. Using "field": ${$(field3)}.`);
    } else {
      field3 = encodings[0].field;
    }
  }
  return `${selCmpt.name}[${$(replacePathInField(field3))}]`;
}
function materializeSelections(model, main5) {
  var _a;
  for (const [selection, selCmpt] of entries((_a = model.component.selection) !== null && _a !== void 0 ? _a : {})) {
    const lookupName = model.getName(`lookup_${selection}`);
    model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main5, model, { param: selection }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
  }
}

// node_modules/vega-lite/build/src/compile/predicate.js
function expression3(model, filterOp, node) {
  return logicalExpr(filterOp, (predicate) => {
    if (isString(predicate)) {
      return predicate;
    } else if (isSelectionPredicate(predicate)) {
      return parseSelectionPredicate(model, predicate, node);
    } else {
      return fieldFilterExpression(predicate);
    }
  });
}

// node_modules/vega-lite/build/src/compile/axis/assemble.js
var __rest22 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function assembleTitle(title2, config) {
  if (!title2) {
    return void 0;
  }
  if (isArray(title2) && !isText(title2)) {
    return title2.map((fieldDef) => defaultTitle(fieldDef, config)).join(", ");
  }
  return title2;
}
function setAxisEncode(axis, part, vgProp, vgRef) {
  var _a, _b, _c2;
  var _d2, _e;
  (_a = axis.encode) !== null && _a !== void 0 ? _a : axis.encode = {};
  (_b = (_d2 = axis.encode)[part]) !== null && _b !== void 0 ? _b : _d2[part] = {};
  (_c2 = (_e = axis.encode[part]).update) !== null && _c2 !== void 0 ? _c2 : _e.update = {};
  axis.encode[part].update[vgProp] = vgRef;
}
function assembleAxis(axisCmpt, kind, config, opt = { header: false }) {
  var _a, _b;
  const _c2 = axisCmpt.combine(), { disable, orient: orient2, scale: scale7, labelExpr, title: title2, zindex: zindex2 } = _c2, axis = __rest22(_c2, ["disable", "orient", "scale", "labelExpr", "title", "zindex"]);
  if (disable) {
    return void 0;
  }
  for (const prop in axis) {
    const propType = AXIS_PROPERTY_TYPE[prop];
    const propValue = axis[prop];
    if (propType && propType !== kind && propType !== "both") {
      delete axis[prop];
    } else if (isConditionalAxisValue(propValue)) {
      const { condition } = propValue, valueOrSignalRef = __rest22(propValue, ["condition"]);
      const conditions = array(condition);
      const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];
      if (propIndex) {
        const { vgProp, part } = propIndex;
        const vgRef = [
          ...conditions.map((c3) => {
            const { test: test2 } = c3, valueOrSignalCRef = __rest22(c3, ["test"]);
            return Object.assign({ test: expression3(null, test2) }, valueOrSignalCRef);
          }),
          valueOrSignalRef
        ];
        setAxisEncode(axis, part, vgProp, vgRef);
        delete axis[prop];
      } else if (propIndex === null) {
        const signalRef = {
          signal: conditions.map((c3) => {
            const { test: test2 } = c3, valueOrSignalCRef = __rest22(c3, ["test"]);
            return `${expression3(null, test2)} ? ${exprFromValueRefOrSignalRef(valueOrSignalCRef)} : `;
          }).join("") + exprFromValueRefOrSignalRef(valueOrSignalRef)
        };
        axis[prop] = signalRef;
      }
    } else if (isSignalRef(propValue)) {
      const propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];
      if (propIndex) {
        const { vgProp, part } = propIndex;
        setAxisEncode(axis, part, vgProp, propValue);
        delete axis[prop];
      }
    }
    if (contains2(["labelAlign", "labelBaseline"], prop) && axis[prop] === null) {
      delete axis[prop];
    }
  }
  if (kind === "grid") {
    if (!axis.grid) {
      return void 0;
    }
    if (axis.encode) {
      const { grid } = axis.encode;
      axis.encode = Object.assign({}, grid ? { grid } : {});
      if (isEmpty(axis.encode)) {
        delete axis.encode;
      }
    }
    return Object.assign(Object.assign({
      scale: scale7,
      orient: orient2
    }, axis), {
      domain: false,
      labels: false,
      aria: false,
      maxExtent: 0,
      minExtent: 0,
      ticks: false,
      zindex: getFirstDefined(zindex2, 0)
    });
  } else {
    if (!opt.header && axisCmpt.mainExtracted) {
      return void 0;
    }
    if (labelExpr !== void 0) {
      let expr2 = labelExpr;
      if (((_b = (_a = axis.encode) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b.update) && isSignalRef(axis.encode.labels.update.text)) {
        expr2 = replaceAll(labelExpr, "datum.label", axis.encode.labels.update.text.signal);
      }
      setAxisEncode(axis, "labels", "text", { signal: expr2 });
    }
    if (axis.labelAlign === null) {
      delete axis.labelAlign;
    }
    if (axis.encode) {
      for (const part of AXIS_PARTS) {
        if (!axisCmpt.hasAxisPart(part)) {
          delete axis.encode[part];
        }
      }
      if (isEmpty(axis.encode)) {
        delete axis.encode;
      }
    }
    const titleString = assembleTitle(title2, config);
    return Object.assign(Object.assign(Object.assign(Object.assign({
      scale: scale7,
      orient: orient2,
      grid: false
    }, titleString ? { title: titleString } : {}), axis), config.aria === false ? { aria: false } : {}), {
      zindex: getFirstDefined(zindex2, 0)
    });
  }
}
function assembleAxisSignals(model) {
  const { axes } = model.component;
  const signals = [];
  for (const channel of POSITION_SCALE_CHANNELS) {
    if (axes[channel]) {
      for (const axis of axes[channel]) {
        if (!axis.get("disable") && !axis.get("gridScale")) {
          const sizeType = channel === "x" ? "height" : "width";
          const update3 = model.getSizeSignalRef(sizeType).signal;
          if (sizeType !== update3) {
            signals.push({
              name: sizeType,
              update: update3
            });
          }
        }
      }
    }
  }
  return signals;
}
function assembleAxes(axisComponents, config) {
  const { x: x5 = [], y: y5 = [] } = axisComponents;
  return [
    ...x5.map((a4) => assembleAxis(a4, "grid", config)),
    ...y5.map((a4) => assembleAxis(a4, "grid", config)),
    ...x5.map((a4) => assembleAxis(a4, "main", config)),
    ...y5.map((a4) => assembleAxis(a4, "main", config))
  ].filter((a4) => a4);
}

// node_modules/vega-lite/build/src/compile/axis/config.js
function getAxisConfigFromConfigTypes(configTypes, config, channel, orient2) {
  return Object.assign.apply(null, [
    {},
    ...configTypes.map((configType) => {
      if (configType === "axisOrient") {
        const orient1 = channel === "x" ? "bottom" : "left";
        const orientConfig1 = config[channel === "x" ? "axisBottom" : "axisLeft"] || {};
        const orientConfig2 = config[channel === "x" ? "axisTop" : "axisRight"] || {};
        const props = /* @__PURE__ */ new Set([...keys3(orientConfig1), ...keys3(orientConfig2)]);
        const conditionalOrientAxisConfig = {};
        for (const prop of props.values()) {
          conditionalOrientAxisConfig[prop] = {
            signal: `${orient2["signal"]} === "${orient1}" ? ${signalOrStringValue(orientConfig1[prop])} : ${signalOrStringValue(orientConfig2[prop])}`
          };
        }
        return conditionalOrientAxisConfig;
      }
      return config[configType];
    })
  ]);
}
function getAxisConfigs(channel, scaleType2, orient2, config) {
  const typeBasedConfigTypes = scaleType2 === "band" ? ["axisDiscrete", "axisBand"] : scaleType2 === "point" ? ["axisDiscrete", "axisPoint"] : isQuantitative(scaleType2) ? ["axisQuantitative"] : scaleType2 === "time" || scaleType2 === "utc" ? ["axisTemporal"] : [];
  const axisChannel = channel === "x" ? "axisX" : "axisY";
  const axisOrient = isSignalRef(orient2) ? "axisOrient" : `axis${titleCase(orient2)}`;
  const vlOnlyConfigTypes = [
    ...typeBasedConfigTypes,
    ...typeBasedConfigTypes.map((c3) => axisChannel + c3.substr(4))
  ];
  const vgConfigTypes = ["axis", axisOrient, axisChannel];
  return {
    vlOnlyAxisConfig: getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config, channel, orient2),
    vgAxisConfig: getAxisConfigFromConfigTypes(vgConfigTypes, config, channel, orient2),
    axisConfigStyle: getAxisConfigStyle([...vgConfigTypes, ...vlOnlyConfigTypes], config)
  };
}
function getAxisConfigStyle(axisConfigTypes, config) {
  var _a;
  const toMerge = [{}];
  for (const configType of axisConfigTypes) {
    let style2 = (_a = config[configType]) === null || _a === void 0 ? void 0 : _a.style;
    if (style2) {
      style2 = array(style2);
      for (const s2 of style2) {
        toMerge.push(config.style[s2]);
      }
    }
  }
  return Object.assign.apply(null, toMerge);
}
function getAxisConfig(property2, styleConfigIndex, style2, axisConfigs = {}) {
  var _a;
  const styleConfig = getStyleConfig(property2, style2, styleConfigIndex);
  if (styleConfig !== void 0) {
    return {
      configFrom: "style",
      configValue: styleConfig
    };
  }
  for (const configFrom of ["vlOnlyAxisConfig", "vgAxisConfig", "axisConfigStyle"]) {
    if (((_a = axisConfigs[configFrom]) === null || _a === void 0 ? void 0 : _a[property2]) !== void 0) {
      return { configFrom, configValue: axisConfigs[configFrom][property2] };
    }
  }
  return {};
}

// node_modules/vega-lite/build/src/compile/axis/properties.js
var axisRules = {
  scale: ({ model, channel }) => model.scaleName(channel),
  format: ({ fieldOrDatumDef, config, axis }) => {
    const { format: format5, formatType } = axis;
    return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format5, formatType, config, true);
  },
  formatType: ({ axis, fieldOrDatumDef, scaleType: scaleType2 }) => {
    const { formatType } = axis;
    return guideFormatType(formatType, fieldOrDatumDef, scaleType2);
  },
  grid: ({ fieldOrDatumDef, axis, scaleType: scaleType2 }) => {
    var _a;
    return (_a = axis.grid) !== null && _a !== void 0 ? _a : defaultGrid(scaleType2, fieldOrDatumDef);
  },
  gridScale: ({ model, channel }) => gridScale(model, channel),
  labelAlign: ({ axis, labelAngle, orient: orient2, channel }) => axis.labelAlign || defaultLabelAlign(labelAngle, orient2, channel),
  labelAngle: ({ labelAngle }) => labelAngle,
  labelBaseline: ({ axis, labelAngle, orient: orient2, channel }) => axis.labelBaseline || defaultLabelBaseline(labelAngle, orient2, channel),
  labelFlush: ({ axis, fieldOrDatumDef, channel }) => {
    var _a;
    return (_a = axis.labelFlush) !== null && _a !== void 0 ? _a : defaultLabelFlush(fieldOrDatumDef.type, channel);
  },
  labelOverlap: ({ axis, fieldOrDatumDef, scaleType: scaleType2 }) => {
    var _a;
    return (_a = axis.labelOverlap) !== null && _a !== void 0 ? _a : defaultLabelOverlap(fieldOrDatumDef.type, scaleType2, isFieldDef(fieldOrDatumDef) && !!fieldOrDatumDef.timeUnit, isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : void 0);
  },
  orient: ({ orient: orient2 }) => orient2,
  tickCount: ({ channel, model, axis, fieldOrDatumDef, scaleType: scaleType2 }) => {
    var _a;
    const sizeType = channel === "x" ? "width" : channel === "y" ? "height" : void 0;
    const size = sizeType ? model.getSizeSignalRef(sizeType) : void 0;
    return (_a = axis.tickCount) !== null && _a !== void 0 ? _a : defaultTickCount({ fieldOrDatumDef, scaleType: scaleType2, size, values: axis.values });
  },
  title: ({ axis, model, channel }) => {
    if (axis.title !== void 0) {
      return axis.title;
    }
    const fieldDefTitle = getFieldDefTitle(model, channel);
    if (fieldDefTitle !== void 0) {
      return fieldDefTitle;
    }
    const fieldDef = model.typedFieldDef(channel);
    const channel2 = channel === "x" ? "x2" : "y2";
    const fieldDef2 = model.fieldDef(channel2);
    return mergeTitleFieldDefs(fieldDef ? [toFieldDefBase(fieldDef)] : [], isFieldDef(fieldDef2) ? [toFieldDefBase(fieldDef2)] : []);
  },
  values: ({ axis, fieldOrDatumDef }) => values2(axis, fieldOrDatumDef),
  zindex: ({ axis, fieldOrDatumDef, mark: mark2 }) => {
    var _a;
    return (_a = axis.zindex) !== null && _a !== void 0 ? _a : defaultZindex(mark2, fieldOrDatumDef);
  }
};
function defaultGrid(scaleType2, fieldDef) {
  return !hasDiscreteDomain(scaleType2) && isFieldDef(fieldDef) && !isBinning(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin) && !isBinned(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin);
}
function gridScale(model, channel) {
  const gridChannel = channel === "x" ? "y" : "x";
  if (model.getScaleComponent(gridChannel)) {
    return model.scaleName(gridChannel);
  }
  return void 0;
}
function getLabelAngle(fieldOrDatumDef, axis, channel, styleConfig, axisConfigs) {
  const labelAngle = axis === null || axis === void 0 ? void 0 : axis.labelAngle;
  if (labelAngle !== void 0) {
    return isSignalRef(labelAngle) ? labelAngle : normalizeAngle(labelAngle);
  } else {
    const { configValue: angle2 } = getAxisConfig("labelAngle", styleConfig, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs);
    if (angle2 !== void 0) {
      return normalizeAngle(angle2);
    } else {
      if (channel === X3 && contains2([NOMINAL, ORDINAL], fieldOrDatumDef.type) && !(isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit)) {
        return 270;
      }
      return void 0;
    }
  }
}
function normalizeAngleExpr(angle2) {
  return `(((${angle2.signal} % 360) + 360) % 360)`;
}
function defaultLabelBaseline(angle2, orient2, channel, alwaysIncludeMiddle) {
  if (angle2 !== void 0) {
    if (channel === "x") {
      if (isSignalRef(angle2)) {
        const a4 = normalizeAngleExpr(angle2);
        const orientIsTop = isSignalRef(orient2) ? `(${orient2.signal} === "top")` : orient2 === "top";
        return {
          signal: `(45 < ${a4} && ${a4} < 135) || (225 < ${a4} && ${a4} < 315) ? "middle" :(${a4} <= 45 || 315 <= ${a4}) === ${orientIsTop} ? "bottom" : "top"`
        };
      }
      if (45 < angle2 && angle2 < 135 || 225 < angle2 && angle2 < 315) {
        return "middle";
      }
      if (isSignalRef(orient2)) {
        const op = angle2 <= 45 || 315 <= angle2 ? "===" : "!==";
        return { signal: `${orient2.signal} ${op} "top" ? "bottom" : "top"` };
      }
      return (angle2 <= 45 || 315 <= angle2) === (orient2 === "top") ? "bottom" : "top";
    } else {
      if (isSignalRef(angle2)) {
        const a4 = normalizeAngleExpr(angle2);
        const orientIsLeft = isSignalRef(orient2) ? `(${orient2.signal} === "left")` : orient2 === "left";
        const middle = alwaysIncludeMiddle ? '"middle"' : "null";
        return {
          signal: `${a4} <= 45 || 315 <= ${a4} || (135 <= ${a4} && ${a4} <= 225) ? ${middle} : (45 <= ${a4} && ${a4} <= 135) === ${orientIsLeft} ? "top" : "bottom"`
        };
      }
      if (angle2 <= 45 || 315 <= angle2 || 135 <= angle2 && angle2 <= 225) {
        return alwaysIncludeMiddle ? "middle" : null;
      }
      if (isSignalRef(orient2)) {
        const op = 45 <= angle2 && angle2 <= 135 ? "===" : "!==";
        return { signal: `${orient2.signal} ${op} "left" ? "top" : "bottom"` };
      }
      return (45 <= angle2 && angle2 <= 135) === (orient2 === "left") ? "top" : "bottom";
    }
  }
  return void 0;
}
function defaultLabelAlign(angle2, orient2, channel) {
  if (angle2 === void 0) {
    return void 0;
  }
  const isX2 = channel === "x";
  const startAngle = isX2 ? 0 : 90;
  const mainOrient = isX2 ? "bottom" : "left";
  if (isSignalRef(angle2)) {
    const a4 = normalizeAngleExpr(angle2);
    const orientIsMain = isSignalRef(orient2) ? `(${orient2.signal} === "${mainOrient}")` : orient2 === mainOrient;
    return {
      signal: `(${startAngle ? `(${a4} + 90)` : a4} % 180 === 0) ? ${isX2 ? null : '"center"'} :(${startAngle} < ${a4} && ${a4} < ${180 + startAngle}) === ${orientIsMain} ? "left" : "right"`
    };
  }
  if ((angle2 + startAngle) % 180 === 0) {
    return isX2 ? null : "center";
  }
  if (isSignalRef(orient2)) {
    const op = startAngle < angle2 && angle2 < 180 + startAngle ? "===" : "!==";
    const orientIsMain = `${orient2.signal} ${op} "${mainOrient}"`;
    return {
      signal: `${orientIsMain} ? "left" : "right"`
    };
  }
  if ((startAngle < angle2 && angle2 < 180 + startAngle) === (orient2 === mainOrient)) {
    return "left";
  }
  return "right";
}
function defaultLabelFlush(type3, channel) {
  if (channel === "x" && contains2(["quantitative", "temporal"], type3)) {
    return true;
  }
  return void 0;
}
function defaultLabelOverlap(type3, scaleType2, hasTimeUnit, sort4) {
  if (hasTimeUnit && !isObject(sort4) || type3 !== "nominal" && type3 !== "ordinal") {
    if (scaleType2 === "log" || scaleType2 === "symlog") {
      return "greedy";
    }
    return true;
  }
  return void 0;
}
function defaultOrient(channel) {
  return channel === "x" ? "bottom" : "left";
}
function defaultTickCount({ fieldOrDatumDef, scaleType: scaleType2, size, values: vals2 }) {
  var _a;
  if (!vals2 && !hasDiscreteDomain(scaleType2) && scaleType2 !== "log") {
    if (isFieldDef(fieldOrDatumDef)) {
      if (isBinning(fieldOrDatumDef.bin)) {
        return { signal: `ceil(${size.signal}/10)` };
      }
      if (fieldOrDatumDef.timeUnit && contains2(["month", "hours", "day", "quarter"], (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit)) {
        return void 0;
      }
    }
    return { signal: `ceil(${size.signal}/40)` };
  }
  return void 0;
}
function getFieldDefTitle(model, channel) {
  const channel2 = channel === "x" ? "x2" : "y2";
  const fieldDef = model.fieldDef(channel);
  const fieldDef2 = model.fieldDef(channel2);
  const title1 = fieldDef ? fieldDef.title : void 0;
  const title2 = fieldDef2 ? fieldDef2.title : void 0;
  if (title1 && title2) {
    return mergeTitle(title1, title2);
  } else if (title1) {
    return title1;
  } else if (title2) {
    return title2;
  } else if (title1 !== void 0) {
    return title1;
  } else if (title2 !== void 0) {
    return title2;
  }
  return void 0;
}
function values2(axis, fieldOrDatumDef) {
  const vals2 = axis.values;
  if (isArray(vals2)) {
    return valueArray(fieldOrDatumDef, vals2);
  } else if (isSignalRef(vals2)) {
    return vals2;
  }
  return void 0;
}
function defaultZindex(mark2, fieldDef) {
  if (mark2 === "rect" && isDiscrete3(fieldDef)) {
    return 1;
  }
  return 0;
}

// node_modules/vega-lite/build/src/compile/data/calculate.js
var CalculateNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    super(parent);
    this.transform = transform4;
    this._dependentFields = getDependentFields(this.transform.calculate);
  }
  clone() {
    return new CalculateNode(null, duplicate(this.transform));
  }
  static parseAllForSortIndex(parent, model) {
    model.forEachFieldDef((fieldDef, channel) => {
      if (!isScaleFieldDef(fieldDef)) {
        return;
      }
      if (isSortArray(fieldDef.sort)) {
        const { field: field3, timeUnit } = fieldDef;
        const sort4 = fieldDef.sort;
        const calculate = sort4.map((sortValue, i) => {
          return `${fieldFilterExpression({ field: field3, timeUnit, equal: sortValue })} ? ${i} : `;
        }).join("") + sort4.length;
        parent = new CalculateNode(parent, {
          calculate,
          as: sortArrayIndexField(fieldDef, channel, { forAs: true })
        });
      }
    });
    return parent;
  }
  producedFields() {
    return /* @__PURE__ */ new Set([this.transform.as]);
  }
  dependentFields() {
    return this._dependentFields;
  }
  assemble() {
    return {
      type: "formula",
      expr: this.transform.calculate,
      as: this.transform.as
    };
  }
  hash() {
    return `Calculate ${hash(this.transform)}`;
  }
};
function sortArrayIndexField(fieldDef, channel, opt) {
  return vgField(fieldDef, Object.assign({ prefix: channel, suffix: "sort_index" }, opt !== null && opt !== void 0 ? opt : {}));
}

// node_modules/vega-lite/build/src/compile/header/common.js
function getHeaderChannel(channel, orient2) {
  if (contains2(["top", "bottom"], orient2)) {
    return "column";
  } else if (contains2(["left", "right"], orient2)) {
    return "row";
  }
  return channel === "row" ? "row" : "column";
}
function getHeaderProperty(prop, header, config, channel) {
  const headerSpecificConfig = channel === "row" ? config.headerRow : channel === "column" ? config.headerColumn : config.headerFacet;
  return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);
}
function getHeaderProperties(properties, header, config, channel) {
  const props = {};
  for (const prop of properties) {
    const value3 = getHeaderProperty(prop, header || {}, config, channel);
    if (value3 !== void 0) {
      props[prop] = value3;
    }
  }
  return props;
}

// node_modules/vega-lite/build/src/compile/header/component.js
var HEADER_CHANNELS = ["row", "column"];
var HEADER_TYPES = ["header", "footer"];

// node_modules/vega-lite/build/src/compile/header/assemble.js
function assembleTitleGroup(model, channel) {
  const title2 = model.component.layoutHeaders[channel].title;
  const config = model.config ? model.config : void 0;
  const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : void 0;
  const { titleAnchor, titleAngle: ta, titleOrient } = getHeaderProperties(["titleAnchor", "titleAngle", "titleOrient"], facetFieldDef.header, config, channel);
  const headerChannel = getHeaderChannel(channel, titleOrient);
  const titleAngle = normalizeAngle(ta);
  return {
    name: `${channel}-title`,
    type: "group",
    role: `${headerChannel}-title`,
    title: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ text: title2 }, channel === "row" ? { orient: "left" } : {}), { style: "guide-title" }), defaultHeaderGuideBaseline(titleAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))
  };
}
function defaultHeaderGuideAlign(headerChannel, angle2, anchor = "middle") {
  switch (anchor) {
    case "start":
      return { align: "left" };
    case "end":
      return { align: "right" };
  }
  const align2 = defaultLabelAlign(angle2, headerChannel === "row" ? "left" : "top", headerChannel === "row" ? "y" : "x");
  return align2 ? { align: align2 } : {};
}
function defaultHeaderGuideBaseline(angle2, channel) {
  const baseline3 = defaultLabelBaseline(angle2, channel === "row" ? "left" : "top", channel === "row" ? "y" : "x", true);
  return baseline3 ? { baseline: baseline3 } : {};
}
function assembleHeaderGroups(model, channel) {
  const layoutHeader = model.component.layoutHeaders[channel];
  const groups3 = [];
  for (const headerType of HEADER_TYPES) {
    if (layoutHeader[headerType]) {
      for (const headerComponent of layoutHeader[headerType]) {
        const group4 = assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent);
        if (group4 != null) {
          groups3.push(group4);
        }
      }
    }
  }
  return groups3;
}
function getSort(facetFieldDef, channel) {
  var _a;
  const { sort: sort4 } = facetFieldDef;
  if (isSortField(sort4)) {
    return {
      field: vgField(sort4, { expr: "datum" }),
      order: (_a = sort4.order) !== null && _a !== void 0 ? _a : "ascending"
    };
  } else if (isArray(sort4)) {
    return {
      field: sortArrayIndexField(facetFieldDef, channel, { expr: "datum" }),
      order: "ascending"
    };
  } else {
    return {
      field: vgField(facetFieldDef, { expr: "datum" }),
      order: sort4 !== null && sort4 !== void 0 ? sort4 : "ascending"
    };
  }
}
function assembleLabelTitle(facetFieldDef, channel, config) {
  const { format: format5, formatType, labelAngle, labelAnchor, labelOrient, labelExpr } = getHeaderProperties(["format", "formatType", "labelAngle", "labelAnchor", "labelOrient", "labelExpr"], facetFieldDef.header, config, channel);
  const titleTextExpr = formatSignalRef({
    fieldOrDatumDef: facetFieldDef,
    format: format5,
    formatType,
    expr: "parent",
    config
  }).signal;
  const headerChannel = getHeaderChannel(channel, labelOrient);
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ text: {
    signal: labelExpr ? replaceAll(replaceAll(labelExpr, "datum.label", titleTextExpr), "datum.value", vgField(facetFieldDef, { expr: "parent" })) : titleTextExpr
  } }, channel === "row" ? { orient: "left" } : {}), { style: "guide-label", frame: "group" }), defaultHeaderGuideBaseline(labelAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP));
}
function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent) {
  if (headerComponent) {
    let title2 = null;
    const { facetFieldDef } = layoutHeader;
    const config = model.config ? model.config : void 0;
    if (facetFieldDef && headerComponent.labels) {
      const { labelOrient } = getHeaderProperties(["labelOrient"], facetFieldDef.header, config, channel);
      if (channel === "row" && !contains2(["top", "bottom"], labelOrient) || channel === "column" && !contains2(["left", "right"], labelOrient)) {
        title2 = assembleLabelTitle(facetFieldDef, channel, config);
      }
    }
    const isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);
    const axes = headerComponent.axes;
    const hasAxes = (axes === null || axes === void 0 ? void 0 : axes.length) > 0;
    if (title2 || hasAxes) {
      const sizeChannel = channel === "row" ? "height" : "width";
      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: model.getName(`${channel}_${headerType}`), type: "group", role: `${channel}-${headerType}` }, layoutHeader.facetFieldDef ? {
        from: { data: model.getName(`${channel}_domain`) },
        sort: getSort(facetFieldDef, channel)
      } : {}), hasAxes && isFacetWithoutRowCol ? {
        from: { data: model.getName(`facet_domain_${channel}`) }
      } : {}), title2 ? { title: title2 } : {}), headerComponent.sizeSignal ? {
        encode: {
          update: {
            [sizeChannel]: headerComponent.sizeSignal
          }
        }
      } : {}), hasAxes ? { axes } : {});
    }
  }
  return null;
}
var LAYOUT_TITLE_BAND = {
  column: {
    start: 0,
    end: 1
  },
  row: {
    start: 1,
    end: 0
  }
};
function getLayoutTitleBand(titleAnchor, headerChannel) {
  return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];
}
function assembleLayoutTitleBand(headerComponentIndex, config) {
  const titleBand = {};
  for (const channel of FACET_CHANNELS) {
    const headerComponent = headerComponentIndex[channel];
    if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent.facetFieldDef) {
      const { titleAnchor, titleOrient } = getHeaderProperties(["titleAnchor", "titleOrient"], headerComponent.facetFieldDef.header, config, channel);
      const headerChannel = getHeaderChannel(channel, titleOrient);
      const band3 = getLayoutTitleBand(titleAnchor, headerChannel);
      if (band3 !== void 0) {
        titleBand[headerChannel] = band3;
      }
    }
  }
  return isEmpty(titleBand) ? void 0 : titleBand;
}
function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {
  const props = {};
  for (const prop of properties) {
    if (!propertiesMap[prop]) {
      continue;
    }
    const value3 = getHeaderProperty(prop, facetFieldDef === null || facetFieldDef === void 0 ? void 0 : facetFieldDef.header, config, channel);
    if (value3 !== void 0) {
      props[propertiesMap[prop]] = value3;
    }
  }
  return props;
}

// node_modules/vega-lite/build/src/compile/layoutsize/assemble.js
function assembleLayoutSignals(model) {
  return [
    ...sizeSignals(model, "width"),
    ...sizeSignals(model, "height"),
    ...sizeSignals(model, "childWidth"),
    ...sizeSignals(model, "childHeight")
  ];
}
function sizeSignals(model, sizeType) {
  const channel = sizeType === "width" ? "x" : "y";
  const size = model.component.layoutSize.get(sizeType);
  if (!size || size === "merged") {
    return [];
  }
  const name4 = model.getSizeSignalRef(sizeType).signal;
  if (size === "step") {
    const scaleComponent = model.getScaleComponent(channel);
    if (scaleComponent) {
      const type3 = scaleComponent.get("type");
      const range8 = scaleComponent.get("range");
      if (hasDiscreteDomain(type3) && isVgRangeStep(range8)) {
        const scaleName = model.scaleName(channel);
        if (isFacetModel(model.parent)) {
          const parentResolve = model.parent.component.resolve;
          if (parentResolve.scale[channel] === "independent") {
            return [stepSignal(scaleName, range8)];
          }
        }
        return [
          stepSignal(scaleName, range8),
          {
            name: name4,
            update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)
          }
        ];
      }
    }
    throw new Error("layout size is step although width/height is not step.");
  } else if (size == "container") {
    const isWidth = name4.endsWith("width");
    const expr2 = isWidth ? "containerSize()[0]" : "containerSize()[1]";
    const defaultValue = getViewConfigContinuousSize(model.config.view, isWidth ? "width" : "height");
    const safeExpr = `isFinite(${expr2}) ? ${expr2} : ${defaultValue}`;
    return [{ name: name4, init: safeExpr, on: [{ update: safeExpr, events: "window:resize" }] }];
  } else {
    return [
      {
        name: name4,
        value: size
      }
    ];
  }
}
function stepSignal(scaleName, range8) {
  const name4 = `${scaleName}_step`;
  if (isSignalRef(range8.step)) {
    return { name: name4, update: range8.step.signal };
  } else {
    return { name: name4, value: range8.step };
  }
}
function sizeExpr(scaleName, scaleComponent, cardinality) {
  const type3 = scaleComponent.get("type");
  const padding3 = scaleComponent.get("padding");
  const paddingOuter2 = getFirstDefined(scaleComponent.get("paddingOuter"), padding3);
  let paddingInner2 = scaleComponent.get("paddingInner");
  paddingInner2 = type3 === "band" ? paddingInner2 !== void 0 ? paddingInner2 : padding3 : 1;
  return `bandspace(${cardinality}, ${signalOrStringValue(paddingInner2)}, ${signalOrStringValue(paddingOuter2)}) * ${scaleName}_step`;
}

// node_modules/vega-lite/build/src/compile/layoutsize/component.js
function getSizeTypeFromLayoutSizeType(layoutSizeType) {
  return layoutSizeType === "childWidth" ? "width" : layoutSizeType === "childHeight" ? "height" : layoutSizeType;
}

// node_modules/vega-lite/build/src/compile/guide.js
function guideEncodeEntry(encoding, model) {
  return keys3(encoding).reduce((encode2, channel) => {
    const valueDef = encoding[channel];
    return Object.assign(Object.assign({}, encode2), wrapCondition(model, valueDef, channel, (def2) => signalOrValueRef(def2.value)));
  }, {});
}

// node_modules/vega-lite/build/src/compile/resolve.js
function defaultScaleResolve(channel, model) {
  if (isFacetModel(model)) {
    return channel === "theta" ? "independent" : "shared";
  } else if (isLayerModel(model)) {
    return "shared";
  } else if (isConcatModel(model)) {
    return isXorY(channel) || channel === "theta" || channel === "radius" ? "independent" : "shared";
  }
  throw new Error("invalid model type for resolve");
}
function parseGuideResolve(resolve2, channel) {
  const channelScaleResolve = resolve2.scale[channel];
  const guide = isXorY(channel) ? "axis" : "legend";
  if (channelScaleResolve === "independent") {
    if (resolve2[guide][channel] === "shared") {
      warn2(message_exports.independentScaleMeansIndependentGuide(channel));
    }
    return "independent";
  }
  return resolve2[guide][channel] || "shared";
}

// node_modules/vega-lite/build/src/compile/legend/component.js
var LEGEND_COMPONENT_PROPERTY_INDEX = Object.assign(Object.assign({}, COMMON_LEGEND_PROPERTY_INDEX), {
  disable: 1,
  labelExpr: 1,
  selections: 1,
  opacity: 1,
  shape: 1,
  stroke: 1,
  fill: 1,
  size: 1,
  strokeWidth: 1,
  strokeDash: 1,
  encode: 1
});
var LEGEND_COMPONENT_PROPERTIES = keys3(LEGEND_COMPONENT_PROPERTY_INDEX);
var LegendComponent = class extends Split {
};

// node_modules/vega-lite/build/src/compile/legend/encode.js
var legendEncodeRules = {
  symbols: symbols3,
  gradient: gradient3,
  labels,
  entries: entries2
};
function symbols3(symbolsSpec, { fieldOrDatumDef, model, channel, legendCmpt, legendType: legendType2 }) {
  var _a, _b, _c2, _d2, _e, _f2, _g2, _h;
  if (legendType2 !== "symbol") {
    return void 0;
  }
  const { markDef, encoding, config, mark: mark2 } = model;
  const filled = markDef.filled && mark2 !== "trail";
  let out = Object.assign(Object.assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG)), color4(model, { filled }));
  const symbolOpacity = (_a = legendCmpt.get("symbolOpacity")) !== null && _a !== void 0 ? _a : config.legend.symbolOpacity;
  const symbolFillColor = (_b = legendCmpt.get("symbolFillColor")) !== null && _b !== void 0 ? _b : config.legend.symbolFillColor;
  const symbolStrokeColor = (_c2 = legendCmpt.get("symbolStrokeColor")) !== null && _c2 !== void 0 ? _c2 : config.legend.symbolStrokeColor;
  const opacity2 = symbolOpacity === void 0 ? (_d2 = getMaxValue(encoding.opacity)) !== null && _d2 !== void 0 ? _d2 : markDef.opacity : void 0;
  if (out.fill) {
    if (channel === "fill" || filled && channel === COLOR) {
      delete out.fill;
    } else {
      if (out.fill["field"]) {
        if (symbolFillColor) {
          delete out.fill;
        } else {
          out.fill = signalOrValueRef((_e = config.legend.symbolBaseFillColor) !== null && _e !== void 0 ? _e : "black");
          out.fillOpacity = signalOrValueRef(opacity2 !== null && opacity2 !== void 0 ? opacity2 : 1);
        }
      } else if (isArray(out.fill)) {
        const fill2 = (_h = (_g2 = getFirstConditionValue((_f2 = encoding.fill) !== null && _f2 !== void 0 ? _f2 : encoding.color)) !== null && _g2 !== void 0 ? _g2 : markDef.fill) !== null && _h !== void 0 ? _h : filled && markDef.color;
        if (fill2) {
          out.fill = signalOrValueRef(fill2);
        }
      }
    }
  }
  if (out.stroke) {
    if (channel === "stroke" || !filled && channel === COLOR) {
      delete out.stroke;
    } else {
      if (out.stroke["field"] || symbolStrokeColor) {
        delete out.stroke;
      } else if (isArray(out.stroke)) {
        const stroke2 = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : void 0);
        if (stroke2) {
          out.stroke = { value: stroke2 };
        }
      }
    }
  }
  if (channel !== OPACITY) {
    const condition = isFieldDef(fieldOrDatumDef) && selectedCondition(model, legendCmpt, fieldOrDatumDef);
    if (condition) {
      out.opacity = [
        Object.assign({ test: condition }, signalOrValueRef(opacity2 !== null && opacity2 !== void 0 ? opacity2 : 1)),
        signalOrValueRef(config.legend.unselectedOpacity)
      ];
    } else if (opacity2) {
      out.opacity = signalOrValueRef(opacity2);
    }
  }
  out = Object.assign(Object.assign({}, out), symbolsSpec);
  return isEmpty(out) ? void 0 : out;
}
function gradient3(gradientSpec, { model, legendType: legendType2, legendCmpt }) {
  var _a;
  if (legendType2 !== "gradient") {
    return void 0;
  }
  const { config, markDef, encoding } = model;
  let out = {};
  const gradientOpacity = (_a = legendCmpt.get("gradientOpacity")) !== null && _a !== void 0 ? _a : config.legend.gradientOpacity;
  const opacity2 = gradientOpacity === void 0 ? getMaxValue(encoding.opacity) || markDef.opacity : void 0;
  if (opacity2) {
    out.opacity = signalOrValueRef(opacity2);
  }
  out = Object.assign(Object.assign({}, out), gradientSpec);
  return isEmpty(out) ? void 0 : out;
}
function labels(specifiedlabelsSpec, { fieldOrDatumDef, model, channel, legendCmpt }) {
  const legend = model.legend(channel) || {};
  const config = model.config;
  const condition = isFieldDef(fieldOrDatumDef) ? selectedCondition(model, legendCmpt, fieldOrDatumDef) : void 0;
  const opacity2 = condition ? [{ test: condition, value: 1 }, { value: config.legend.unselectedOpacity }] : void 0;
  const { format: format5, formatType } = legend;
  let text4 = void 0;
  if (isCustomFormatType(formatType)) {
    text4 = formatCustomType({
      fieldOrDatumDef,
      field: "datum.value",
      format: format5,
      formatType,
      config
    });
  } else if (format5 === void 0 && formatType === void 0 && config.customFormatTypes) {
    if (fieldOrDatumDef.type === "quantitative" && config.numberFormatType) {
      text4 = formatCustomType({
        fieldOrDatumDef,
        field: "datum.value",
        format: config.numberFormat,
        formatType: config.numberFormatType,
        config
      });
    } else if (fieldOrDatumDef.type === "temporal" && config.timeFormatType && isFieldDef(fieldOrDatumDef) && fieldOrDatumDef.timeUnit === void 0) {
      text4 = formatCustomType({
        fieldOrDatumDef,
        field: "datum.value",
        format: config.timeFormat,
        formatType: config.timeFormatType,
        config
      });
    }
  }
  const labelsSpec = Object.assign(Object.assign(Object.assign({}, opacity2 ? { opacity: opacity2 } : {}), text4 ? { text: text4 } : {}), specifiedlabelsSpec);
  return isEmpty(labelsSpec) ? void 0 : labelsSpec;
}
function entries2(entriesSpec, { legendCmpt }) {
  const selections = legendCmpt.get("selections");
  return (selections === null || selections === void 0 ? void 0 : selections.length) ? Object.assign(Object.assign({}, entriesSpec), { fill: { value: "transparent" } }) : entriesSpec;
}
function getMaxValue(channelDef) {
  return getConditionValue(channelDef, (v2, conditionalDef) => Math.max(v2, conditionalDef.value));
}
function getFirstConditionValue(channelDef) {
  return getConditionValue(channelDef, (v2, conditionalDef) => {
    return getFirstDefined(v2, conditionalDef.value);
  });
}
function getConditionValue(channelDef, reducer) {
  if (hasConditionalValueDef(channelDef)) {
    return array(channelDef.condition).reduce(reducer, channelDef.value);
  } else if (isValueDef(channelDef)) {
    return channelDef.value;
  }
  return void 0;
}
function selectedCondition(model, legendCmpt, fieldDef) {
  const selections = legendCmpt.get("selections");
  if (!(selections === null || selections === void 0 ? void 0 : selections.length))
    return void 0;
  const field3 = $(fieldDef.field);
  return selections.map((name4) => {
    const store = $(varName(name4) + STORE);
    return `(!length(data(${store})) || (${name4}[${field3}] && indexof(${name4}[${field3}], datum.value) >= 0))`;
  }).join(" || ");
}

// node_modules/vega-lite/build/src/compile/legend/properties.js
var legendRules = {
  direction: ({ direction }) => direction,
  format: ({ fieldOrDatumDef, legend, config }) => {
    const { format: format5, formatType } = legend;
    return guideFormat(fieldOrDatumDef, fieldOrDatumDef.type, format5, formatType, config, false);
  },
  formatType: ({ legend, fieldOrDatumDef, scaleType: scaleType2 }) => {
    const { formatType } = legend;
    return guideFormatType(formatType, fieldOrDatumDef, scaleType2);
  },
  gradientLength: (params2) => {
    var _a, _b;
    const { legend, legendConfig } = params2;
    return (_b = (_a = legend.gradientLength) !== null && _a !== void 0 ? _a : legendConfig.gradientLength) !== null && _b !== void 0 ? _b : defaultGradientLength(params2);
  },
  labelOverlap: ({ legend, legendConfig, scaleType: scaleType2 }) => {
    var _a, _b;
    return (_b = (_a = legend.labelOverlap) !== null && _a !== void 0 ? _a : legendConfig.labelOverlap) !== null && _b !== void 0 ? _b : defaultLabelOverlap2(scaleType2);
  },
  symbolType: ({ legend, markDef, channel, encoding }) => {
    var _a;
    return (_a = legend.symbolType) !== null && _a !== void 0 ? _a : defaultSymbolType(markDef.type, channel, encoding.shape, markDef.shape);
  },
  title: ({ fieldOrDatumDef, config }) => title(fieldOrDatumDef, config, { allowDisabling: true }),
  type: ({ legendType: legendType2, scaleType: scaleType2, channel }) => {
    if (isColorChannel(channel) && isContinuousToContinuous(scaleType2)) {
      if (legendType2 === "gradient") {
        return void 0;
      }
    } else if (legendType2 === "symbol") {
      return void 0;
    }
    return legendType2;
  },
  values: ({ fieldOrDatumDef, legend }) => values3(legend, fieldOrDatumDef)
};
function values3(legend, fieldOrDatumDef) {
  const vals2 = legend.values;
  if (isArray(vals2)) {
    return valueArray(fieldOrDatumDef, vals2);
  } else if (isSignalRef(vals2)) {
    return vals2;
  }
  return void 0;
}
function defaultSymbolType(mark2, channel, shapeChannelDef, markShape) {
  var _a;
  if (channel !== "shape") {
    const shape2 = (_a = getFirstConditionValue(shapeChannelDef)) !== null && _a !== void 0 ? _a : markShape;
    if (shape2) {
      return shape2;
    }
  }
  switch (mark2) {
    case "bar":
    case "rect":
    case "image":
    case "square":
      return "square";
    case "line":
    case "trail":
    case "rule":
      return "stroke";
    case "arc":
    case "point":
    case "circle":
    case "tick":
    case "geoshape":
    case "area":
    case "text":
      return "circle";
  }
}
function getLegendType(params2) {
  const { legend } = params2;
  return getFirstDefined(legend.type, defaultType2(params2));
}
function defaultType2({ channel, timeUnit, scaleType: scaleType2 }) {
  if (isColorChannel(channel)) {
    if (contains2(["quarter", "month", "day"], timeUnit)) {
      return "symbol";
    }
    if (isContinuousToContinuous(scaleType2)) {
      return "gradient";
    }
  }
  return "symbol";
}
function getDirection({ legendConfig, legendType: legendType2, orient: orient2, legend }) {
  var _a, _b;
  return (_b = (_a = legend.direction) !== null && _a !== void 0 ? _a : legendConfig[legendType2 ? "gradientDirection" : "symbolDirection"]) !== null && _b !== void 0 ? _b : defaultDirection(orient2, legendType2);
}
function defaultDirection(orient2, legendType2) {
  switch (orient2) {
    case "top":
    case "bottom":
      return "horizontal";
    case "left":
    case "right":
    case "none":
    case void 0:
      return void 0;
    default:
      return legendType2 === "gradient" ? "horizontal" : void 0;
  }
}
function defaultGradientLength({ legendConfig, model, direction, orient: orient2, scaleType: scaleType2 }) {
  const { gradientHorizontalMaxLength, gradientHorizontalMinLength, gradientVerticalMaxLength, gradientVerticalMinLength } = legendConfig;
  if (isContinuousToContinuous(scaleType2)) {
    if (direction === "horizontal") {
      if (orient2 === "top" || orient2 === "bottom") {
        return gradientLengthSignal(model, "width", gradientHorizontalMinLength, gradientHorizontalMaxLength);
      } else {
        return gradientHorizontalMinLength;
      }
    } else {
      return gradientLengthSignal(model, "height", gradientVerticalMinLength, gradientVerticalMaxLength);
    }
  }
  return void 0;
}
function gradientLengthSignal(model, sizeType, min6, max6) {
  const sizeSignal = model.getSizeSignalRef(sizeType).signal;
  return { signal: `clamp(${sizeSignal}, ${min6}, ${max6})` };
}
function defaultLabelOverlap2(scaleType2) {
  if (contains2(["quantile", "threshold", "log", "symlog"], scaleType2)) {
    return "greedy";
  }
  return void 0;
}

// node_modules/vega-lite/build/src/compile/legend/parse.js
function parseLegend2(model) {
  const legendComponent = isUnitModel(model) ? parseUnitLegend(model) : parseNonUnitLegend(model);
  model.component.legends = legendComponent;
  return legendComponent;
}
function parseUnitLegend(model) {
  const { encoding } = model;
  const legendComponent = {};
  for (const channel of [COLOR, ...LEGEND_SCALE_CHANNELS]) {
    const def2 = getFieldOrDatumDef(encoding[channel]);
    if (!def2 || !model.getScaleComponent(channel)) {
      continue;
    }
    if (channel === SHAPE && isFieldDef(def2) && def2.type === GEOJSON) {
      continue;
    }
    legendComponent[channel] = parseLegendForChannel(model, channel);
  }
  return legendComponent;
}
function getLegendDefWithScale(model, channel) {
  const scale7 = model.scaleName(channel);
  if (model.mark === "trail") {
    if (channel === "color") {
      return { stroke: scale7 };
    } else if (channel === "size") {
      return { strokeWidth: scale7 };
    }
  }
  if (channel === "color") {
    return model.markDef.filled ? { fill: scale7 } : { stroke: scale7 };
  }
  return { [channel]: scale7 };
}
function isExplicit(value3, property2, legend, fieldDef) {
  switch (property2) {
    case "disable":
      return legend !== void 0;
    case "values":
      return !!(legend === null || legend === void 0 ? void 0 : legend.values);
    case "title":
      if (property2 === "title" && value3 === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) {
        return true;
      }
  }
  return value3 === (legend || {})[property2];
}
function parseLegendForChannel(model, channel) {
  var _a, _b, _c2;
  let legend = model.legend(channel);
  const { markDef, encoding, config } = model;
  const legendConfig = config.legend;
  const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));
  parseInteractiveLegend(model, channel, legendCmpt);
  const disable = legend !== void 0 ? !legend : legendConfig.disable;
  legendCmpt.set("disable", disable, legend !== void 0);
  if (disable) {
    return legendCmpt;
  }
  legend = legend || {};
  const scaleType2 = model.getScaleComponent(channel).get("type");
  const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
  const timeUnit = isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : void 0;
  const orient2 = legend.orient || config.legend.orient || "right";
  const legendType2 = getLegendType({ legend, channel, timeUnit, scaleType: scaleType2 });
  const direction = getDirection({ legend, legendType: legendType2, orient: orient2, legendConfig });
  const ruleParams = {
    legend,
    channel,
    model,
    markDef,
    encoding,
    fieldOrDatumDef,
    legendConfig,
    config,
    scaleType: scaleType2,
    orient: orient2,
    legendType: legendType2,
    direction
  };
  for (const property2 of LEGEND_COMPONENT_PROPERTIES) {
    if (legendType2 === "gradient" && property2.startsWith("symbol") || legendType2 === "symbol" && property2.startsWith("gradient")) {
      continue;
    }
    const value3 = property2 in legendRules ? legendRules[property2](ruleParams) : legend[property2];
    if (value3 !== void 0) {
      const explicit = isExplicit(value3, property2, legend, model.fieldDef(channel));
      if (explicit || config.legend[property2] === void 0) {
        legendCmpt.set(property2, value3, explicit);
      }
    }
  }
  const legendEncoding = (_b = legend === null || legend === void 0 ? void 0 : legend.encoding) !== null && _b !== void 0 ? _b : {};
  const selections = legendCmpt.get("selections");
  const legendEncode = {};
  const legendEncodeParams = { fieldOrDatumDef, model, channel, legendCmpt, legendType: legendType2 };
  for (const part of ["labels", "legend", "title", "symbols", "gradient", "entries"]) {
    const legendEncodingPart = guideEncodeEntry((_c2 = legendEncoding[part]) !== null && _c2 !== void 0 ? _c2 : {}, model);
    const value3 = part in legendEncodeRules ? legendEncodeRules[part](legendEncodingPart, legendEncodeParams) : legendEncodingPart;
    if (value3 !== void 0 && !isEmpty(value3)) {
      legendEncode[part] = Object.assign(Object.assign(Object.assign({}, (selections === null || selections === void 0 ? void 0 : selections.length) && isFieldDef(fieldOrDatumDef) ? { name: `${varName(fieldOrDatumDef.field)}_legend_${part}` } : {}), (selections === null || selections === void 0 ? void 0 : selections.length) ? { interactive: !!selections } : {}), { update: value3 });
    }
  }
  if (!isEmpty(legendEncode)) {
    legendCmpt.set("encode", legendEncode, !!(legend === null || legend === void 0 ? void 0 : legend.encoding));
  }
  return legendCmpt;
}
function parseNonUnitLegend(model) {
  const { legends, resolve: resolve2 } = model.component;
  for (const child of model.children) {
    parseLegend2(child);
    for (const channel of keys3(child.component.legends)) {
      resolve2.legend[channel] = parseGuideResolve(model.component.resolve, channel);
      if (resolve2.legend[channel] === "shared") {
        legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);
        if (!legends[channel]) {
          resolve2.legend[channel] = "independent";
          delete legends[channel];
        }
      }
    }
  }
  for (const channel of keys3(legends)) {
    for (const child of model.children) {
      if (!child.component.legends[channel]) {
        continue;
      }
      if (resolve2.legend[channel] === "shared") {
        delete child.component.legends[channel];
      }
    }
  }
  return legends;
}
function mergeLegendComponent(mergedLegend, childLegend) {
  var _a, _b, _c2, _d2;
  if (!mergedLegend) {
    return childLegend.clone();
  }
  const mergedOrient = mergedLegend.getWithExplicit("orient");
  const childOrient = childLegend.getWithExplicit("orient");
  if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
    return void 0;
  }
  let typeMerged = false;
  for (const prop of LEGEND_COMPONENT_PROPERTIES) {
    const mergedValueWithExplicit = mergeValuesWithExplicit(
      mergedLegend.getWithExplicit(prop),
      childLegend.getWithExplicit(prop),
      prop,
      "legend",
      (v1, v2) => {
        switch (prop) {
          case "symbolType":
            return mergeSymbolType(v1, v2);
          case "title":
            return mergeTitleComponent(v1, v2);
          case "type":
            typeMerged = true;
            return makeImplicit("symbol");
        }
        return defaultTieBreaker(v1, v2, prop, "legend");
      }
    );
    mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
  }
  if (typeMerged) {
    if ((_b = (_a = mergedLegend.implicit) === null || _a === void 0 ? void 0 : _a.encode) === null || _b === void 0 ? void 0 : _b.gradient) {
      deleteNestedProperty(mergedLegend.implicit, ["encode", "gradient"]);
    }
    if ((_d2 = (_c2 = mergedLegend.explicit) === null || _c2 === void 0 ? void 0 : _c2.encode) === null || _d2 === void 0 ? void 0 : _d2.gradient) {
      deleteNestedProperty(mergedLegend.explicit, ["encode", "gradient"]);
    }
  }
  return mergedLegend;
}
function mergeSymbolType(st1, st2) {
  if (st2.value === "circle") {
    return st2;
  }
  return st1;
}

// node_modules/vega-lite/build/src/compile/legend/assemble.js
var __rest23 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function setLegendEncode(legend, part, vgProp, vgRef) {
  var _a, _b, _c2;
  var _d2, _e;
  (_a = legend.encode) !== null && _a !== void 0 ? _a : legend.encode = {};
  (_b = (_d2 = legend.encode)[part]) !== null && _b !== void 0 ? _b : _d2[part] = {};
  (_c2 = (_e = legend.encode[part]).update) !== null && _c2 !== void 0 ? _c2 : _e.update = {};
  legend.encode[part].update[vgProp] = vgRef;
}
function assembleLegends(model) {
  const legendComponentIndex = model.component.legends;
  const legendByDomain = {};
  for (const channel of keys3(legendComponentIndex)) {
    const scaleComponent = model.getScaleComponent(channel);
    const domainHash = stringify(scaleComponent.get("domains"));
    if (legendByDomain[domainHash]) {
      for (const mergedLegendComponent of legendByDomain[domainHash]) {
        const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);
        if (!merged) {
          legendByDomain[domainHash].push(legendComponentIndex[channel]);
        }
      }
    } else {
      legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
    }
  }
  const legends = vals(legendByDomain).flat().map((l) => assembleLegend(l, model.config)).filter((l) => l !== void 0);
  return legends;
}
function assembleLegend(legendCmpt, config) {
  var _a, _b, _c2;
  const _d2 = legendCmpt.combine(), { disable, labelExpr, selections } = _d2, legend = __rest23(_d2, ["disable", "labelExpr", "selections"]);
  if (disable) {
    return void 0;
  }
  if (config.aria === false && legend.aria == void 0) {
    legend.aria = false;
  }
  if ((_a = legend.encode) === null || _a === void 0 ? void 0 : _a.symbols) {
    const out = legend.encode.symbols.update;
    if (out.fill && out.fill["value"] !== "transparent" && !out.stroke && !legend.stroke) {
      out.stroke = { value: "transparent" };
    }
    for (const property2 of LEGEND_SCALE_CHANNELS) {
      if (legend[property2]) {
        delete out[property2];
      }
    }
  }
  if (!legend.title) {
    delete legend.title;
  }
  if (labelExpr !== void 0) {
    let expr2 = labelExpr;
    if (((_c2 = (_b = legend.encode) === null || _b === void 0 ? void 0 : _b.labels) === null || _c2 === void 0 ? void 0 : _c2.update) && isSignalRef(legend.encode.labels.update.text)) {
      expr2 = replaceAll(labelExpr, "datum.label", legend.encode.labels.update.text.signal);
    }
    setLegendEncode(legend, "labels", "text", { signal: expr2 });
  }
  return legend;
}

// node_modules/vega-lite/build/src/compile/projection/assemble.js
function assembleProjections(model) {
  if (isLayerModel(model) || isConcatModel(model)) {
    return assembleProjectionsForModelAndChildren(model);
  } else {
    return assembleProjectionForModel(model);
  }
}
function assembleProjectionsForModelAndChildren(model) {
  return model.children.reduce((projections2, child) => {
    return projections2.concat(child.assembleProjections());
  }, assembleProjectionForModel(model));
}
function assembleProjectionForModel(model) {
  const component = model.component.projection;
  if (!component || component.merged) {
    return [];
  }
  const projection3 = component.combine();
  const { name: name4 } = projection3;
  if (!component.data) {
    return [
      Object.assign(Object.assign({ name: name4 }, { translate: { signal: "[width / 2, height / 2]" } }), projection3)
    ];
  } else {
    const size = {
      signal: `[${component.size.map((ref2) => ref2.signal).join(", ")}]`
    };
    const fits = component.data.reduce((sources, data3) => {
      const source3 = isSignalRef(data3) ? data3.signal : `data('${model.lookupDataSource(data3)}')`;
      if (!contains2(sources, source3)) {
        sources.push(source3);
      }
      return sources;
    }, []);
    if (fits.length <= 0) {
      throw new Error("Projection's fit didn't find any data sources");
    }
    return [
      Object.assign({
        name: name4,
        size,
        fit: {
          signal: fits.length > 1 ? `[${fits.join(", ")}]` : fits[0]
        }
      }, projection3)
    ];
  }
}

// node_modules/vega-lite/build/src/projection.js
var PROJECTION_PROPERTIES = [
  "type",
  "clipAngle",
  "clipExtent",
  "center",
  "rotate",
  "precision",
  "reflectX",
  "reflectY",
  "coefficient",
  "distance",
  "fraction",
  "lobes",
  "parallel",
  "radius",
  "ratio",
  "spacing",
  "tilt"
];

// node_modules/vega-lite/build/src/compile/projection/component.js
var ProjectionComponent = class extends Split {
  constructor(name4, specifiedProjection, size, data3) {
    super(
      Object.assign({}, specifiedProjection),
      { name: name4 }
    );
    this.specifiedProjection = specifiedProjection;
    this.size = size;
    this.data = data3;
    this.merged = false;
  }
  get isFit() {
    return !!this.data;
  }
};

// node_modules/vega-lite/build/src/compile/projection/parse.js
function parseProjection2(model) {
  model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);
}
function parseUnitProjection(model) {
  var _a;
  if (model.hasProjection) {
    const proj = replaceExprRef(model.specifiedProjection);
    const fit3 = !(proj && (proj.scale != null || proj.translate != null));
    const size = fit3 ? [model.getSizeSignalRef("width"), model.getSizeSignalRef("height")] : void 0;
    const data3 = fit3 ? gatherFitData(model) : void 0;
    const projComp = new ProjectionComponent(model.projectionName(true), Object.assign(Object.assign({}, (_a = replaceExprRef(model.config.projection)) !== null && _a !== void 0 ? _a : {}), proj !== null && proj !== void 0 ? proj : {}), size, data3);
    if (!projComp.get("type")) {
      projComp.set("type", "equalEarth", false);
    }
    return projComp;
  }
  return void 0;
}
function gatherFitData(model) {
  const data3 = [];
  const { encoding } = model;
  for (const posssiblePair of [
    [LONGITUDE, LATITUDE],
    [LONGITUDE2, LATITUDE2]
  ]) {
    if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {
      data3.push({
        signal: model.getName(`geojson_${data3.length}`)
      });
    }
  }
  if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {
    data3.push({
      signal: model.getName(`geojson_${data3.length}`)
    });
  }
  if (data3.length === 0) {
    data3.push(model.requestDataName(DataSourceType.Main));
  }
  return data3;
}
function mergeIfNoConflict(first, second2) {
  const allPropertiesShared = every3(PROJECTION_PROPERTIES, (prop) => {
    if (!has(first.explicit, prop) && !has(second2.explicit, prop)) {
      return true;
    }
    if (has(first.explicit, prop) && has(second2.explicit, prop) && deepEqual(first.get(prop), second2.get(prop))) {
      return true;
    }
    return false;
  });
  const size = deepEqual(first.size, second2.size);
  if (size) {
    if (allPropertiesShared) {
      return first;
    } else if (deepEqual(first.explicit, {})) {
      return second2;
    } else if (deepEqual(second2.explicit, {})) {
      return first;
    }
  }
  return null;
}
function parseNonUnitProjections(model) {
  if (model.children.length === 0) {
    return void 0;
  }
  let nonUnitProjection;
  for (const child of model.children) {
    parseProjection2(child);
  }
  const mergable = every3(model.children, (child) => {
    const projection3 = child.component.projection;
    if (!projection3) {
      return true;
    } else if (!nonUnitProjection) {
      nonUnitProjection = projection3;
      return true;
    } else {
      const merge6 = mergeIfNoConflict(nonUnitProjection, projection3);
      if (merge6) {
        nonUnitProjection = merge6;
      }
      return !!merge6;
    }
  });
  if (nonUnitProjection && mergable) {
    const name4 = model.projectionName(true);
    const modelProjection = new ProjectionComponent(name4, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));
    for (const child of model.children) {
      const projection3 = child.component.projection;
      if (projection3) {
        if (projection3.isFit) {
          modelProjection.data.push(...child.component.projection.data);
        }
        child.renameProjection(projection3.get("name"), name4);
        projection3.merged = true;
      }
    }
    return modelProjection;
  }
  return void 0;
}

// node_modules/vega-lite/build/src/compile/data/bin.js
var __rest24 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function rangeFormula(model, fieldDef, channel, config) {
  var _a, _b;
  if (binRequiresRange(fieldDef, channel)) {
    const guide = isUnitModel(model) ? (_b = (_a = model.axis(channel)) !== null && _a !== void 0 ? _a : model.legend(channel)) !== null && _b !== void 0 ? _b : {} : {};
    const startField = vgField(fieldDef, { expr: "datum" });
    const endField = vgField(fieldDef, { expr: "datum", binSuffix: "end" });
    return {
      formulaAs: vgField(fieldDef, { binSuffix: "range", forAs: true }),
      formula: binFormatExpression(startField, endField, guide.format, guide.formatType, config)
    };
  }
  return {};
}
function binKey(bin5, field3) {
  return `${binToString(bin5)}_${field3}`;
}
function getSignalsFromModel(model, key2) {
  return {
    signal: model.getName(`${key2}_bins`),
    extentSignal: model.getName(`${key2}_extent`)
  };
}
function getBinSignalName(model, field3, bin5) {
  var _a;
  const normalizedBin = (_a = normalizeBin(bin5, void 0)) !== null && _a !== void 0 ? _a : {};
  const key2 = binKey(normalizedBin, field3);
  return model.getName(`${key2}_bins`);
}
function isBinTransform(t4) {
  return "as" in t4;
}
function createBinComponent(t4, bin5, model) {
  let as;
  let span2;
  if (isBinTransform(t4)) {
    as = isString(t4.as) ? [t4.as, `${t4.as}_end`] : [t4.as[0], t4.as[1]];
  } else {
    as = [vgField(t4, { forAs: true }), vgField(t4, { binSuffix: "end", forAs: true })];
  }
  const normalizedBin = Object.assign({}, normalizeBin(bin5, void 0));
  const key2 = binKey(normalizedBin, t4.field);
  const { signal, extentSignal } = getSignalsFromModel(model, key2);
  if (isParameterExtent(normalizedBin.extent)) {
    const ext = normalizedBin.extent;
    span2 = parseSelectionExtent(model, ext.param, ext);
    delete normalizedBin.extent;
  }
  const binComponent = Object.assign(Object.assign(Object.assign({ bin: normalizedBin, field: t4.field, as: [as] }, signal ? { signal } : {}), extentSignal ? { extentSignal } : {}), span2 ? { span: span2 } : {});
  return { key: key2, binComponent };
}
var BinNode = class extends DataFlowNode {
  constructor(parent, bins2) {
    super(parent);
    this.bins = bins2;
  }
  clone() {
    return new BinNode(null, duplicate(this.bins));
  }
  static makeFromEncoding(parent, model) {
    const bins2 = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {
      if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
        const { key: key2, binComponent } = createBinComponent(fieldDef, fieldDef.bin, model);
        binComponentIndex[key2] = Object.assign(Object.assign(Object.assign({}, binComponent), binComponentIndex[key2]), rangeFormula(model, fieldDef, channel, model.config));
      }
      return binComponentIndex;
    }, {});
    if (isEmpty(bins2)) {
      return null;
    }
    return new BinNode(parent, bins2);
  }
  static makeFromTransform(parent, t4, model) {
    const { key: key2, binComponent } = createBinComponent(t4, t4.bin, model);
    return new BinNode(parent, {
      [key2]: binComponent
    });
  }
  merge(other, renameSignal) {
    for (const key2 of keys3(other.bins)) {
      if (key2 in this.bins) {
        renameSignal(other.bins[key2].signal, this.bins[key2].signal);
        this.bins[key2].as = unique([...this.bins[key2].as, ...other.bins[key2].as], hash);
      } else {
        this.bins[key2] = other.bins[key2];
      }
    }
    for (const child of other.children) {
      other.removeChild(child);
      child.parent = this;
    }
    other.remove();
  }
  producedFields() {
    return new Set(vals(this.bins).map((c3) => c3.as).flat(2));
  }
  dependentFields() {
    return new Set(vals(this.bins).map((c3) => c3.field));
  }
  hash() {
    return `Bin ${hash(this.bins)}`;
  }
  assemble() {
    return vals(this.bins).flatMap((bin5) => {
      const transform4 = [];
      const [binAs, ...remainingAs] = bin5.as;
      const _a = bin5.bin, { extent: extent4 } = _a, params2 = __rest24(_a, ["extent"]);
      const binTrans = Object.assign(Object.assign(Object.assign({ type: "bin", field: replacePathInField(bin5.field), as: binAs, signal: bin5.signal }, !isParameterExtent(extent4) ? { extent: extent4 } : { extent: null }), bin5.span ? { span: { signal: `span(${bin5.span})` } } : {}), params2);
      if (!extent4 && bin5.extentSignal) {
        transform4.push({
          type: "extent",
          field: replacePathInField(bin5.field),
          signal: bin5.extentSignal
        });
        binTrans.extent = { signal: bin5.extentSignal };
      }
      transform4.push(binTrans);
      for (const as of remainingAs) {
        for (let i = 0; i < 2; i++) {
          transform4.push({
            type: "formula",
            expr: vgField({ field: binAs[i] }, { expr: "datum" }),
            as: as[i]
          });
        }
      }
      if (bin5.formula) {
        transform4.push({
          type: "formula",
          expr: bin5.formula,
          as: bin5.formulaAs
        });
      }
      return transform4;
    });
  }
};

// node_modules/vega-lite/build/src/compile/data/aggregate.js
function addDimension(dims, channel, fieldDef, model) {
  var _a;
  const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : void 0;
  if (isTypedFieldDef(fieldDef) && isUnitModel(model) && hasBandEnd(fieldDef, channelDef2, model.markDef, model.config)) {
    dims.add(vgField(fieldDef, {}));
    dims.add(vgField(fieldDef, { suffix: "end" }));
    if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {
      dims.add(vgField(fieldDef, { binSuffix: "range" }));
    }
  } else if (isGeoPositionChannel(channel)) {
    const posChannel = getPositionChannelFromLatLong(channel);
    dims.add(model.getName(posChannel));
  } else {
    dims.add(vgField(fieldDef));
  }
  if (isScaleFieldDef(fieldDef) && isFieldRange((_a = fieldDef.scale) === null || _a === void 0 ? void 0 : _a.range)) {
    dims.add(fieldDef.scale.range.field);
  }
  return dims;
}
function mergeMeasures(parentMeasures, childMeasures) {
  var _a;
  for (const field3 of keys3(childMeasures)) {
    const ops2 = childMeasures[field3];
    for (const op of keys3(ops2)) {
      if (field3 in parentMeasures) {
        parentMeasures[field3][op] = /* @__PURE__ */ new Set([...(_a = parentMeasures[field3][op]) !== null && _a !== void 0 ? _a : [], ...ops2[op]]);
      } else {
        parentMeasures[field3] = { [op]: ops2[op] };
      }
    }
  }
}
var AggregateNode = class extends DataFlowNode {
  constructor(parent, dimensions, measures) {
    super(parent);
    this.dimensions = dimensions;
    this.measures = measures;
  }
  clone() {
    return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));
  }
  get groupBy() {
    return this.dimensions;
  }
  static makeFromEncoding(parent, model) {
    let isAggregate3 = false;
    model.forEachFieldDef((fd) => {
      if (fd.aggregate) {
        isAggregate3 = true;
      }
    });
    const meas = {};
    const dims = /* @__PURE__ */ new Set();
    if (!isAggregate3) {
      return null;
    }
    model.forEachFieldDef((fieldDef, channel) => {
      var _a, _b, _c2, _d2;
      const { aggregate, field: field3 } = fieldDef;
      if (aggregate) {
        if (aggregate === "count") {
          (_a = meas["*"]) !== null && _a !== void 0 ? _a : meas["*"] = {};
          meas["*"]["count"] = /* @__PURE__ */ new Set([vgField(fieldDef, { forAs: true })]);
        } else {
          if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
            const op = isArgminDef(aggregate) ? "argmin" : "argmax";
            const argField = aggregate[op];
            (_b = meas[argField]) !== null && _b !== void 0 ? _b : meas[argField] = {};
            meas[argField][op] = /* @__PURE__ */ new Set([vgField({ op, field: argField }, { forAs: true })]);
          } else {
            (_c2 = meas[field3]) !== null && _c2 !== void 0 ? _c2 : meas[field3] = {};
            meas[field3][aggregate] = /* @__PURE__ */ new Set([vgField(fieldDef, { forAs: true })]);
          }
          if (isScaleChannel(channel) && model.scaleDomain(channel) === "unaggregated") {
            (_d2 = meas[field3]) !== null && _d2 !== void 0 ? _d2 : meas[field3] = {};
            meas[field3]["min"] = /* @__PURE__ */ new Set([vgField({ field: field3, aggregate: "min" }, { forAs: true })]);
            meas[field3]["max"] = /* @__PURE__ */ new Set([vgField({ field: field3, aggregate: "max" }, { forAs: true })]);
          }
        }
      } else {
        addDimension(dims, channel, fieldDef, model);
      }
    });
    if (dims.size + keys3(meas).length === 0) {
      return null;
    }
    return new AggregateNode(parent, dims, meas);
  }
  static makeFromTransform(parent, t4) {
    var _a, _b, _c2;
    const dims = /* @__PURE__ */ new Set();
    const meas = {};
    for (const s2 of t4.aggregate) {
      const { op, field: field3, as } = s2;
      if (op) {
        if (op === "count") {
          (_a = meas["*"]) !== null && _a !== void 0 ? _a : meas["*"] = {};
          meas["*"]["count"] = /* @__PURE__ */ new Set([as ? as : vgField(s2, { forAs: true })]);
        } else {
          (_b = meas[field3]) !== null && _b !== void 0 ? _b : meas[field3] = {};
          meas[field3][op] = /* @__PURE__ */ new Set([as ? as : vgField(s2, { forAs: true })]);
        }
      }
    }
    for (const s2 of (_c2 = t4.groupby) !== null && _c2 !== void 0 ? _c2 : []) {
      dims.add(s2);
    }
    if (dims.size + keys3(meas).length === 0) {
      return null;
    }
    return new AggregateNode(parent, dims, meas);
  }
  merge(other) {
    if (setEqual(this.dimensions, other.dimensions)) {
      mergeMeasures(this.measures, other.measures);
      return true;
    }
    debug2("different dimensions, cannot merge");
    return false;
  }
  addDimensions(fields) {
    fields.forEach(this.dimensions.add, this.dimensions);
  }
  dependentFields() {
    return /* @__PURE__ */ new Set([...this.dimensions, ...keys3(this.measures)]);
  }
  producedFields() {
    const out = /* @__PURE__ */ new Set();
    for (const field3 of keys3(this.measures)) {
      for (const op of keys3(this.measures[field3])) {
        const m3 = this.measures[field3][op];
        if (m3.size === 0) {
          out.add(`${op}_${field3}`);
        } else {
          m3.forEach(out.add, out);
        }
      }
    }
    return out;
  }
  hash() {
    return `Aggregate ${hash({ dimensions: this.dimensions, measures: this.measures })}`;
  }
  assemble() {
    const ops2 = [];
    const fields = [];
    const as = [];
    for (const field3 of keys3(this.measures)) {
      for (const op of keys3(this.measures[field3])) {
        for (const alias of this.measures[field3][op]) {
          as.push(alias);
          ops2.push(op);
          fields.push(field3 === "*" ? null : replacePathInField(field3));
        }
      }
    }
    const result = {
      type: "aggregate",
      groupby: [...this.dimensions].map(replacePathInField),
      ops: ops2,
      fields,
      as
    };
    return result;
  }
};

// node_modules/vega-lite/build/src/compile/data/facet.js
var FacetNode = class extends DataFlowNode {
  constructor(parent, model, name4, data3) {
    super(parent);
    this.model = model;
    this.name = name4;
    this.data = data3;
    for (const channel of FACET_CHANNELS) {
      const fieldDef = model.facet[channel];
      if (fieldDef) {
        const { bin: bin5, sort: sort4 } = fieldDef;
        this[channel] = Object.assign({ name: model.getName(`${channel}_domain`), fields: [vgField(fieldDef), ...isBinning(bin5) ? [vgField(fieldDef, { binSuffix: "end" })] : []] }, isSortField(sort4) ? { sortField: sort4 } : isArray(sort4) ? { sortIndexField: sortArrayIndexField(fieldDef, channel) } : {});
      }
    }
    this.childModel = model.child;
  }
  hash() {
    let out = `Facet`;
    for (const channel of FACET_CHANNELS) {
      if (this[channel]) {
        out += ` ${channel.charAt(0)}:${hash(this[channel])}`;
      }
    }
    return out;
  }
  get fields() {
    var _a;
    const f = [];
    for (const channel of FACET_CHANNELS) {
      if ((_a = this[channel]) === null || _a === void 0 ? void 0 : _a.fields) {
        f.push(...this[channel].fields);
      }
    }
    return f;
  }
  dependentFields() {
    const depFields = new Set(this.fields);
    for (const channel of FACET_CHANNELS) {
      if (this[channel]) {
        if (this[channel].sortField) {
          depFields.add(this[channel].sortField.field);
        }
        if (this[channel].sortIndexField) {
          depFields.add(this[channel].sortIndexField);
        }
      }
    }
    return depFields;
  }
  producedFields() {
    return /* @__PURE__ */ new Set();
  }
  getSource() {
    return this.name;
  }
  getChildIndependentFieldsWithStep() {
    const childIndependentFieldsWithStep = {};
    for (const channel of POSITION_SCALE_CHANNELS) {
      const childScaleComponent = this.childModel.component.scales[channel];
      if (childScaleComponent && !childScaleComponent.merged) {
        const type3 = childScaleComponent.get("type");
        const range8 = childScaleComponent.get("range");
        if (hasDiscreteDomain(type3) && isVgRangeStep(range8)) {
          const domain4 = assembleDomain(this.childModel, channel);
          const field3 = getFieldFromDomain(domain4);
          if (field3) {
            childIndependentFieldsWithStep[channel] = field3;
          } else {
            warn2(message_exports.unknownField(channel));
          }
        }
      }
    }
    return childIndependentFieldsWithStep;
  }
  assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
    const childChannel = { row: "y", column: "x", facet: void 0 }[channel];
    const fields = [];
    const ops2 = [];
    const as = [];
    if (childChannel && childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
      if (crossedDataName) {
        fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
        ops2.push("max");
      } else {
        fields.push(childIndependentFieldsWithStep[childChannel]);
        ops2.push("distinct");
      }
      as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
    }
    const { sortField, sortIndexField } = this[channel];
    if (sortField) {
      const { op = DEFAULT_SORT_OP, field: field3 } = sortField;
      fields.push(field3);
      ops2.push(op);
      as.push(vgField(sortField, { forAs: true }));
    } else if (sortIndexField) {
      fields.push(sortIndexField);
      ops2.push("max");
      as.push(sortIndexField);
    }
    return {
      name: this[channel].name,
      source: crossedDataName !== null && crossedDataName !== void 0 ? crossedDataName : this.data,
      transform: [
        Object.assign({ type: "aggregate", groupby: this[channel].fields }, fields.length ? {
          fields,
          ops: ops2,
          as
        } : {})
      ]
    };
  }
  assembleFacetHeaderData(childIndependentFieldsWithStep) {
    var _a, _b;
    const { columns } = this.model.layout;
    const { layoutHeaders: layoutHeaders2 } = this.model.component;
    const data3 = [];
    const hasSharedAxis = {};
    for (const headerChannel of HEADER_CHANNELS) {
      for (const headerType of HEADER_TYPES) {
        const headers = (_a = layoutHeaders2[headerChannel] && layoutHeaders2[headerChannel][headerType]) !== null && _a !== void 0 ? _a : [];
        for (const header of headers) {
          if (((_b = header.axes) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            hasSharedAxis[headerChannel] = true;
            break;
          }
        }
      }
      if (hasSharedAxis[headerChannel]) {
        const cardinality = `length(data("${this.facet.name}"))`;
        const stop3 = headerChannel === "row" ? columns ? { signal: `ceil(${cardinality} / ${columns})` } : 1 : columns ? { signal: `min(${cardinality}, ${columns})` } : { signal: cardinality };
        data3.push({
          name: `${this.facet.name}_${headerChannel}`,
          transform: [
            {
              type: "sequence",
              start: 0,
              stop: stop3
            }
          ]
        });
      }
    }
    const { row, column } = hasSharedAxis;
    if (row || column) {
      data3.unshift(this.assembleRowColumnHeaderData("facet", null, childIndependentFieldsWithStep));
    }
    return data3;
  }
  assemble() {
    var _a, _b;
    const data3 = [];
    let crossedDataName = null;
    const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
    const { column, row, facet } = this;
    if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
      crossedDataName = `cross_${this.column.name}_${this.row.name}`;
      const fields = [].concat((_a = childIndependentFieldsWithStep.x) !== null && _a !== void 0 ? _a : [], (_b = childIndependentFieldsWithStep.y) !== null && _b !== void 0 ? _b : []);
      const ops2 = fields.map(() => "distinct");
      data3.push({
        name: crossedDataName,
        source: this.data,
        transform: [
          {
            type: "aggregate",
            groupby: this.fields,
            fields,
            ops: ops2
          }
        ]
      });
    }
    for (const channel of [COLUMN, ROW]) {
      if (this[channel]) {
        data3.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
      }
    }
    if (facet) {
      const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);
      if (facetData) {
        data3.push(...facetData);
      }
    }
    return data3;
  }
};

// node_modules/vega-lite/build/src/compile/data/formatparse.js
function unquote(pattern) {
  if (pattern.startsWith("'") && pattern.endsWith("'") || pattern.startsWith('"') && pattern.endsWith('"')) {
    return pattern.slice(1, -1);
  }
  return pattern;
}
function parseExpression2(field3, parse7) {
  const f = accessPathWithDatum(field3);
  if (parse7 === "number") {
    return `toNumber(${f})`;
  } else if (parse7 === "boolean") {
    return `toBoolean(${f})`;
  } else if (parse7 === "string") {
    return `toString(${f})`;
  } else if (parse7 === "date") {
    return `toDate(${f})`;
  } else if (parse7 === "flatten") {
    return f;
  } else if (parse7.startsWith("date:")) {
    const specifier = unquote(parse7.slice(5, parse7.length));
    return `timeParse(${f},'${specifier}')`;
  } else if (parse7.startsWith("utc:")) {
    const specifier = unquote(parse7.slice(4, parse7.length));
    return `utcParse(${f},'${specifier}')`;
  } else {
    warn2(message_exports.unrecognizedParse(parse7));
    return null;
  }
}
function getImplicitFromFilterTransform(transform4) {
  const implicit2 = {};
  forEachLeaf(transform4.filter, (filter5) => {
    var _a;
    if (isFieldPredicate(filter5)) {
      let val = null;
      if (isFieldEqualPredicate(filter5)) {
        val = signalRefOrValue(filter5.equal);
      } else if (isFieldLTEPredicate(filter5)) {
        val = signalRefOrValue(filter5.lte);
      } else if (isFieldLTPredicate(filter5)) {
        val = signalRefOrValue(filter5.lt);
      } else if (isFieldGTPredicate(filter5)) {
        val = signalRefOrValue(filter5.gt);
      } else if (isFieldGTEPredicate(filter5)) {
        val = signalRefOrValue(filter5.gte);
      } else if (isFieldRangePredicate(filter5)) {
        val = filter5.range[0];
      } else if (isFieldOneOfPredicate(filter5)) {
        val = ((_a = filter5.oneOf) !== null && _a !== void 0 ? _a : filter5["in"])[0];
      }
      if (val) {
        if (isDateTime(val)) {
          implicit2[filter5.field] = "date";
        } else if (isNumber(val)) {
          implicit2[filter5.field] = "number";
        } else if (isString(val)) {
          implicit2[filter5.field] = "string";
        }
      }
      if (filter5.timeUnit) {
        implicit2[filter5.field] = "date";
      }
    }
  });
  return implicit2;
}
function getImplicitFromEncoding(model) {
  const implicit2 = {};
  function add6(fieldDef) {
    if (isFieldOrDatumDefForTimeFormat(fieldDef)) {
      implicit2[fieldDef.field] = "date";
    } else if (fieldDef.type === "quantitative" && isMinMaxOp(fieldDef.aggregate)) {
      implicit2[fieldDef.field] = "number";
    } else if (accessPathDepth(fieldDef.field) > 1) {
      if (!(fieldDef.field in implicit2)) {
        implicit2[fieldDef.field] = "flatten";
      }
    } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {
      if (!(fieldDef.sort.field in implicit2)) {
        implicit2[fieldDef.sort.field] = "flatten";
      }
    }
  }
  if (isUnitModel(model) || isFacetModel(model)) {
    model.forEachFieldDef((fieldDef, channel) => {
      if (isTypedFieldDef(fieldDef)) {
        add6(fieldDef);
      } else {
        const mainChannel = getMainRangeChannel(channel);
        const mainFieldDef = model.fieldDef(mainChannel);
        add6(Object.assign(Object.assign({}, fieldDef), { type: mainFieldDef.type }));
      }
    });
  }
  if (isUnitModel(model)) {
    const { mark: mark2, markDef, encoding } = model;
    if (isPathMark(mark2) && !model.encoding.order) {
      const dimensionChannel = markDef.orient === "horizontal" ? "y" : "x";
      const dimensionChannelDef = encoding[dimensionChannel];
      if (isFieldDef(dimensionChannelDef) && dimensionChannelDef.type === "quantitative" && !(dimensionChannelDef.field in implicit2)) {
        implicit2[dimensionChannelDef.field] = "number";
      }
    }
  }
  return implicit2;
}
function getImplicitFromSelection(model) {
  const implicit2 = {};
  if (isUnitModel(model) && model.component.selection) {
    for (const name4 of keys3(model.component.selection)) {
      const selCmpt = model.component.selection[name4];
      for (const proj of selCmpt.project.items) {
        if (!proj.channel && accessPathDepth(proj.field) > 1) {
          implicit2[proj.field] = "flatten";
        }
      }
    }
  }
  return implicit2;
}
var ParseNode = class extends DataFlowNode {
  constructor(parent, parse7) {
    super(parent);
    this._parse = parse7;
  }
  clone() {
    return new ParseNode(null, duplicate(this._parse));
  }
  hash() {
    return `Parse ${hash(this._parse)}`;
  }
  static makeExplicit(parent, model, ancestorParse) {
    var _a;
    let explicit = {};
    const data3 = model.data;
    if (!isGenerator(data3) && ((_a = data3 === null || data3 === void 0 ? void 0 : data3.format) === null || _a === void 0 ? void 0 : _a.parse)) {
      explicit = data3.format.parse;
    }
    return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
  }
  static makeWithAncestors(parent, explicit, implicit2, ancestorParse) {
    for (const field3 of keys3(implicit2)) {
      const parsedAs = ancestorParse.getWithExplicit(field3);
      if (parsedAs.value !== void 0) {
        if (parsedAs.explicit || parsedAs.value === implicit2[field3] || parsedAs.value === "derived" || implicit2[field3] === "flatten") {
          delete implicit2[field3];
        } else {
          warn2(message_exports.differentParse(field3, implicit2[field3], parsedAs.value));
        }
      }
    }
    for (const field3 of keys3(explicit)) {
      const parsedAs = ancestorParse.get(field3);
      if (parsedAs !== void 0) {
        if (parsedAs === explicit[field3]) {
          delete explicit[field3];
        } else {
          warn2(message_exports.differentParse(field3, explicit[field3], parsedAs));
        }
      }
    }
    const parse7 = new Split(explicit, implicit2);
    ancestorParse.copyAll(parse7);
    const p = {};
    for (const key2 of keys3(parse7.combine())) {
      const val = parse7.get(key2);
      if (val !== null) {
        p[key2] = val;
      }
    }
    if (keys3(p).length === 0 || ancestorParse.parseNothing) {
      return null;
    }
    return new ParseNode(parent, p);
  }
  get parse() {
    return this._parse;
  }
  merge(other) {
    this._parse = Object.assign(Object.assign({}, this._parse), other.parse);
    other.remove();
  }
  assembleFormatParse() {
    const formatParse = {};
    for (const field3 of keys3(this._parse)) {
      const p = this._parse[field3];
      if (accessPathDepth(field3) === 1) {
        formatParse[field3] = p;
      }
    }
    return formatParse;
  }
  producedFields() {
    return new Set(keys3(this._parse));
  }
  dependentFields() {
    return new Set(keys3(this._parse));
  }
  assembleTransforms(onlyNested = false) {
    return keys3(this._parse).filter((field3) => onlyNested ? accessPathDepth(field3) > 1 : true).map((field3) => {
      const expr2 = parseExpression2(field3, this._parse[field3]);
      if (!expr2) {
        return null;
      }
      const formula = {
        type: "formula",
        expr: expr2,
        as: removePathFromField(field3)
      };
      return formula;
    }).filter((t4) => t4 !== null);
  }
};

// node_modules/vega-lite/build/src/compile/data/identifier.js
var IdentifierNode = class extends DataFlowNode {
  clone() {
    return new IdentifierNode(null);
  }
  constructor(parent) {
    super(parent);
  }
  dependentFields() {
    return /* @__PURE__ */ new Set();
  }
  producedFields() {
    return /* @__PURE__ */ new Set([SELECTION_ID]);
  }
  hash() {
    return "Identifier";
  }
  assemble() {
    return { type: "identifier", as: SELECTION_ID };
  }
};

// node_modules/vega-lite/build/src/compile/data/graticule.js
var GraticuleNode = class extends DataFlowNode {
  constructor(parent, params2) {
    super(parent);
    this.params = params2;
  }
  clone() {
    return new GraticuleNode(null, this.params);
  }
  dependentFields() {
    return /* @__PURE__ */ new Set();
  }
  producedFields() {
    return void 0;
  }
  hash() {
    return `Graticule ${hash(this.params)}`;
  }
  assemble() {
    return Object.assign({ type: "graticule" }, this.params === true ? {} : this.params);
  }
};

// node_modules/vega-lite/build/src/compile/data/sequence.js
var SequenceNode = class extends DataFlowNode {
  constructor(parent, params2) {
    super(parent);
    this.params = params2;
  }
  clone() {
    return new SequenceNode(null, this.params);
  }
  dependentFields() {
    return /* @__PURE__ */ new Set();
  }
  producedFields() {
    var _a;
    return /* @__PURE__ */ new Set([(_a = this.params.as) !== null && _a !== void 0 ? _a : "data"]);
  }
  hash() {
    return `Hash ${hash(this.params)}`;
  }
  assemble() {
    return Object.assign({ type: "sequence" }, this.params);
  }
};

// node_modules/vega-lite/build/src/compile/data/source.js
var SourceNode = class extends DataFlowNode {
  constructor(data3) {
    super(null);
    data3 !== null && data3 !== void 0 ? data3 : data3 = { name: "source" };
    let format5;
    if (!isGenerator(data3)) {
      format5 = data3.format ? Object.assign({}, omit(data3.format, ["parse"])) : {};
    }
    if (isInlineData(data3)) {
      this._data = { values: data3.values };
    } else if (isUrlData(data3)) {
      this._data = { url: data3.url };
      if (!format5.type) {
        let defaultExtension = /(?:\.([^.]+))?$/.exec(data3.url)[1];
        if (!contains2(["json", "csv", "tsv", "dsv", "topojson"], defaultExtension)) {
          defaultExtension = "json";
        }
        format5.type = defaultExtension;
      }
    } else if (isSphereGenerator(data3)) {
      this._data = { values: [{ type: "Sphere" }] };
    } else if (isNamedData(data3) || isGenerator(data3)) {
      this._data = {};
    }
    this._generator = isGenerator(data3);
    if (data3.name) {
      this._name = data3.name;
    }
    if (format5 && !isEmpty(format5)) {
      this._data.format = format5;
    }
  }
  dependentFields() {
    return /* @__PURE__ */ new Set();
  }
  producedFields() {
    return void 0;
  }
  get data() {
    return this._data;
  }
  hasName() {
    return !!this._name;
  }
  get isGenerator() {
    return this._generator;
  }
  get dataName() {
    return this._name;
  }
  set dataName(name4) {
    this._name = name4;
  }
  set parent(parent) {
    throw new Error("Source nodes have to be roots.");
  }
  remove() {
    throw new Error("Source nodes are roots and cannot be removed.");
  }
  hash() {
    throw new Error("Cannot hash sources");
  }
  assemble() {
    return Object.assign(Object.assign({ name: this._name }, this._data), { transform: [] });
  }
};

// node_modules/vega-lite/build/src/compile/data/optimizer.js
var __classPrivateFieldSet = function(receiver, state, value3, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value3) : f ? f.value = value3 : state.set(receiver, value3), value3;
};
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Optimizer_modified;
function isDataSourceNode(node) {
  return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;
}
var Optimizer = class {
  constructor() {
    _Optimizer_modified.set(this, void 0);
    __classPrivateFieldSet(this, _Optimizer_modified, false, "f");
  }
  setModified() {
    __classPrivateFieldSet(this, _Optimizer_modified, true, "f");
  }
  get modifiedFlag() {
    return __classPrivateFieldGet(this, _Optimizer_modified, "f");
  }
};
_Optimizer_modified = /* @__PURE__ */ new WeakMap();
var BottomUpOptimizer = class extends Optimizer {
  getNodeDepths(node, depth, depths) {
    depths.set(node, depth);
    for (const child of node.children) {
      this.getNodeDepths(child, depth + 1, depths);
    }
    return depths;
  }
  optimize(node) {
    const depths = this.getNodeDepths(node, 0, /* @__PURE__ */ new Map());
    const topologicalSort = [...depths.entries()].sort((a4, b2) => b2[1] - a4[1]);
    for (const tuple of topologicalSort) {
      this.run(tuple[0]);
    }
    return this.modifiedFlag;
  }
};
var TopDownOptimizer = class extends Optimizer {
  optimize(node) {
    this.run(node);
    for (const child of node.children) {
      this.optimize(child);
    }
    return this.modifiedFlag;
  }
};

// node_modules/vega-lite/build/src/compile/data/optimizers.js
var MergeIdenticalNodes = class extends TopDownOptimizer {
  mergeNodes(parent, nodes) {
    const mergedNode = nodes.shift();
    for (const node of nodes) {
      parent.removeChild(node);
      node.parent = mergedNode;
      node.remove();
    }
  }
  run(node) {
    const hashes = node.children.map((x5) => x5.hash());
    const buckets = {};
    for (let i = 0; i < hashes.length; i++) {
      if (buckets[hashes[i]] === void 0) {
        buckets[hashes[i]] = [node.children[i]];
      } else {
        buckets[hashes[i]].push(node.children[i]);
      }
    }
    for (const k3 of keys3(buckets)) {
      if (buckets[k3].length > 1) {
        this.setModified();
        this.mergeNodes(node, buckets[k3]);
      }
    }
  }
};
var RemoveUnnecessaryIdentifierNodes = class extends TopDownOptimizer {
  constructor(model) {
    super();
    this.requiresSelectionId = model && requiresSelectionId(model);
  }
  run(node) {
    if (node instanceof IdentifierNode) {
      if (!(this.requiresSelectionId && (isDataSourceNode(node.parent) || node.parent instanceof AggregateNode || node.parent instanceof ParseNode))) {
        this.setModified();
        node.remove();
      }
    }
  }
};
var RemoveDuplicateTimeUnits = class extends Optimizer {
  optimize(node) {
    this.run(node, /* @__PURE__ */ new Set());
    return this.modifiedFlag;
  }
  run(node, timeUnitFields) {
    let producedFields = /* @__PURE__ */ new Set();
    if (node instanceof TimeUnitNode) {
      producedFields = node.producedFields();
      if (hasIntersection(producedFields, timeUnitFields)) {
        this.setModified();
        node.removeFormulas(timeUnitFields);
        if (node.producedFields.length === 0) {
          node.remove();
        }
      }
    }
    for (const child of node.children) {
      this.run(child, /* @__PURE__ */ new Set([...timeUnitFields, ...producedFields]));
    }
  }
};
var RemoveUnnecessaryOutputNodes = class extends TopDownOptimizer {
  constructor() {
    super();
  }
  run(node) {
    if (node instanceof OutputNode && !node.isRequired()) {
      this.setModified();
      node.remove();
    }
  }
};
var MoveParseUp = class extends BottomUpOptimizer {
  run(node) {
    if (isDataSourceNode(node)) {
      return;
    }
    if (node.numChildren() > 1) {
      return;
    }
    for (const child of node.children) {
      if (child instanceof ParseNode) {
        if (node instanceof ParseNode) {
          this.setModified();
          node.merge(child);
        } else {
          if (fieldIntersection(node.producedFields(), child.dependentFields())) {
            continue;
          }
          this.setModified();
          child.swapWithParent();
        }
      }
    }
    return;
  }
};
var MergeParse = class extends BottomUpOptimizer {
  run(node) {
    const originalChildren = [...node.children];
    const parseChildren = node.children.filter((child) => child instanceof ParseNode);
    if (node.numChildren() > 1 && parseChildren.length >= 1) {
      const commonParse = {};
      const conflictingParse = /* @__PURE__ */ new Set();
      for (const parseNode of parseChildren) {
        const parse7 = parseNode.parse;
        for (const k3 of keys3(parse7)) {
          if (!(k3 in commonParse)) {
            commonParse[k3] = parse7[k3];
          } else if (commonParse[k3] !== parse7[k3]) {
            conflictingParse.add(k3);
          }
        }
      }
      for (const field3 of conflictingParse) {
        delete commonParse[field3];
      }
      if (!isEmpty(commonParse)) {
        this.setModified();
        const mergedParseNode = new ParseNode(node, commonParse);
        for (const childNode of originalChildren) {
          if (childNode instanceof ParseNode) {
            for (const key2 of keys3(commonParse)) {
              delete childNode.parse[key2];
            }
          }
          node.removeChild(childNode);
          childNode.parent = mergedParseNode;
          if (childNode instanceof ParseNode && keys3(childNode.parse).length === 0) {
            childNode.remove();
          }
        }
      }
    }
  }
};
var RemoveUnusedSubtrees = class extends BottomUpOptimizer {
  run(node) {
    if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {
    } else if (node instanceof SourceNode) {
    } else {
      this.setModified();
      node.remove();
    }
  }
};
var MergeTimeUnits = class extends BottomUpOptimizer {
  run(node) {
    const timeUnitChildren = node.children.filter((x5) => x5 instanceof TimeUnitNode);
    const combination = timeUnitChildren.pop();
    for (const timeUnit of timeUnitChildren) {
      this.setModified();
      combination.merge(timeUnit);
    }
  }
};
var MergeAggregates = class extends BottomUpOptimizer {
  run(node) {
    const aggChildren = node.children.filter((child) => child instanceof AggregateNode);
    const groupedAggregates = {};
    for (const agg of aggChildren) {
      const groupBys = hash(agg.groupBy);
      if (!(groupBys in groupedAggregates)) {
        groupedAggregates[groupBys] = [];
      }
      groupedAggregates[groupBys].push(agg);
    }
    for (const group4 of keys3(groupedAggregates)) {
      const mergeableAggs = groupedAggregates[group4];
      if (mergeableAggs.length > 1) {
        const mergedAggs = mergeableAggs.pop();
        for (const agg of mergeableAggs) {
          if (mergedAggs.merge(agg)) {
            node.removeChild(agg);
            agg.parent = mergedAggs;
            agg.remove();
            this.setModified();
          }
        }
      }
    }
  }
};
var MergeBins = class extends BottomUpOptimizer {
  constructor(model) {
    super();
    this.model = model;
  }
  run(node) {
    const moveBinsUp = !(isDataSourceNode(node) || node instanceof FilterNode || node instanceof ParseNode || node instanceof IdentifierNode);
    const promotableBins = [];
    const remainingBins = [];
    for (const child of node.children) {
      if (child instanceof BinNode) {
        if (moveBinsUp && !fieldIntersection(node.producedFields(), child.dependentFields())) {
          promotableBins.push(child);
        } else {
          remainingBins.push(child);
        }
      }
    }
    if (promotableBins.length > 0) {
      const promotedBin = promotableBins.pop();
      for (const bin5 of promotableBins) {
        promotedBin.merge(bin5, this.model.renameSignal.bind(this.model));
      }
      this.setModified();
      if (node instanceof BinNode) {
        node.merge(promotedBin, this.model.renameSignal.bind(this.model));
      } else {
        promotedBin.swapWithParent();
      }
    }
    if (remainingBins.length > 1) {
      const remainingBin = remainingBins.pop();
      for (const bin5 of remainingBins) {
        remainingBin.merge(bin5, this.model.renameSignal.bind(this.model));
      }
      this.setModified();
    }
  }
};
var MergeOutputs = class extends BottomUpOptimizer {
  run(node) {
    const children3 = [...node.children];
    const hasOutputChild = some3(children3, (child) => child instanceof OutputNode);
    if (!hasOutputChild || node.numChildren() <= 1) {
      return;
    }
    const otherChildren = [];
    let mainOutput;
    for (const child of children3) {
      if (child instanceof OutputNode) {
        let lastOutput = child;
        while (lastOutput.numChildren() === 1) {
          const [theChild] = lastOutput.children;
          if (theChild instanceof OutputNode) {
            lastOutput = theChild;
          } else {
            break;
          }
        }
        otherChildren.push(...lastOutput.children);
        if (mainOutput) {
          node.removeChild(child);
          child.parent = mainOutput.parent;
          mainOutput.parent.removeChild(mainOutput);
          mainOutput.parent = lastOutput;
          this.setModified();
        } else {
          mainOutput = lastOutput;
        }
      } else {
        otherChildren.push(child);
      }
    }
    if (otherChildren.length) {
      this.setModified();
      for (const child of otherChildren) {
        child.parent.removeChild(child);
        child.parent = mainOutput;
      }
    }
  }
};

// node_modules/vega-lite/build/src/compile/data/joinaggregate.js
var JoinAggregateTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    super(parent);
    this.transform = transform4;
  }
  clone() {
    return new JoinAggregateTransformNode(null, duplicate(this.transform));
  }
  addDimensions(fields) {
    this.transform.groupby = unique(this.transform.groupby.concat(fields), (d) => d);
  }
  dependentFields() {
    const out = /* @__PURE__ */ new Set();
    if (this.transform.groupby) {
      this.transform.groupby.forEach(out.add, out);
    }
    this.transform.joinaggregate.map((w4) => w4.field).filter((f) => f !== void 0).forEach(out.add, out);
    return out;
  }
  producedFields() {
    return new Set(this.transform.joinaggregate.map(this.getDefaultName));
  }
  getDefaultName(joinAggregateFieldDef) {
    var _a;
    return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);
  }
  hash() {
    return `JoinAggregateTransform ${hash(this.transform)}`;
  }
  assemble() {
    const fields = [];
    const ops2 = [];
    const as = [];
    for (const joinaggregate of this.transform.joinaggregate) {
      ops2.push(joinaggregate.op);
      as.push(this.getDefaultName(joinaggregate));
      fields.push(joinaggregate.field === void 0 ? null : joinaggregate.field);
    }
    const groupby = this.transform.groupby;
    return Object.assign({
      type: "joinaggregate",
      as,
      ops: ops2,
      fields
    }, groupby !== void 0 ? { groupby } : {});
  }
};

// node_modules/vega-lite/build/src/compile/data/stack.js
function getStackByFields(model) {
  return model.stack.stackBy.reduce((fields, by) => {
    const fieldDef = by.fieldDef;
    const _field = vgField(fieldDef);
    if (_field) {
      fields.push(_field);
    }
    return fields;
  }, []);
}
function isValidAsArray(as) {
  return isArray(as) && as.every((s2) => isString(s2)) && as.length > 1;
}
var StackNode = class extends DataFlowNode {
  constructor(parent, stack2) {
    super(parent);
    this._stack = stack2;
  }
  clone() {
    return new StackNode(null, duplicate(this._stack));
  }
  static makeFromTransform(parent, stackTransform) {
    const { stack: stack2, groupby, as, offset: offset4 = "zero" } = stackTransform;
    const sortFields = [];
    const sortOrder = [];
    if (stackTransform.sort !== void 0) {
      for (const sortField of stackTransform.sort) {
        sortFields.push(sortField.field);
        sortOrder.push(getFirstDefined(sortField.order, "ascending"));
      }
    }
    const sort4 = {
      field: sortFields,
      order: sortOrder
    };
    let normalizedAs;
    if (isValidAsArray(as)) {
      normalizedAs = as;
    } else if (isString(as)) {
      normalizedAs = [as, `${as}_end`];
    } else {
      normalizedAs = [`${stackTransform.stack}_start`, `${stackTransform.stack}_end`];
    }
    return new StackNode(parent, {
      dimensionFieldDefs: [],
      stackField: stack2,
      groupby,
      offset: offset4,
      sort: sort4,
      facetby: [],
      as: normalizedAs
    });
  }
  static makeFromEncoding(parent, model) {
    const stackProperties = model.stack;
    const { encoding } = model;
    if (!stackProperties) {
      return null;
    }
    const { groupbyChannels, fieldChannel, offset: offset4, impute } = stackProperties;
    const dimensionFieldDefs = groupbyChannels.map((groupbyChannel) => {
      const cDef = encoding[groupbyChannel];
      return getFieldDef(cDef);
    }).filter((def2) => !!def2);
    const stackby = getStackByFields(model);
    const orderDef = model.encoding.order;
    let sort4;
    if (isArray(orderDef) || isFieldDef(orderDef)) {
      sort4 = sortParams(orderDef);
    } else {
      sort4 = stackby.reduce((s2, field3) => {
        s2.field.push(field3);
        s2.order.push(fieldChannel === "y" ? "descending" : "ascending");
        return s2;
      }, { field: [], order: [] });
    }
    return new StackNode(parent, {
      dimensionFieldDefs,
      stackField: model.vgField(fieldChannel),
      facetby: [],
      stackby,
      sort: sort4,
      offset: offset4,
      impute,
      as: [
        model.vgField(fieldChannel, { suffix: "start", forAs: true }),
        model.vgField(fieldChannel, { suffix: "end", forAs: true })
      ]
    });
  }
  get stack() {
    return this._stack;
  }
  addDimensions(fields) {
    this._stack.facetby.push(...fields);
  }
  dependentFields() {
    const out = /* @__PURE__ */ new Set();
    out.add(this._stack.stackField);
    this.getGroupbyFields().forEach(out.add, out);
    this._stack.facetby.forEach(out.add, out);
    this._stack.sort.field.forEach(out.add, out);
    return out;
  }
  producedFields() {
    return new Set(this._stack.as);
  }
  hash() {
    return `Stack ${hash(this._stack)}`;
  }
  getGroupbyFields() {
    const { dimensionFieldDefs, impute, groupby } = this._stack;
    if (dimensionFieldDefs.length > 0) {
      return dimensionFieldDefs.map((dimensionFieldDef) => {
        if (dimensionFieldDef.bin) {
          if (impute) {
            return [vgField(dimensionFieldDef, { binSuffix: "mid" })];
          }
          return [
            vgField(dimensionFieldDef, {}),
            vgField(dimensionFieldDef, { binSuffix: "end" })
          ];
        }
        return [vgField(dimensionFieldDef)];
      }).flat();
    }
    return groupby !== null && groupby !== void 0 ? groupby : [];
  }
  assemble() {
    const transform4 = [];
    const { facetby, dimensionFieldDefs, stackField: field3, stackby, sort: sort4, offset: offset4, impute, as } = this._stack;
    if (impute) {
      for (const dimensionFieldDef of dimensionFieldDefs) {
        const { bandPosition = 0.5, bin: bin5 } = dimensionFieldDef;
        if (bin5) {
          const binStart = vgField(dimensionFieldDef, { expr: "datum" });
          const binEnd = vgField(dimensionFieldDef, { expr: "datum", binSuffix: "end" });
          transform4.push({
            type: "formula",
            expr: `${bandPosition}*${binStart}+${1 - bandPosition}*${binEnd}`,
            as: vgField(dimensionFieldDef, { binSuffix: "mid", forAs: true })
          });
        }
        transform4.push({
          type: "impute",
          field: field3,
          groupby: [...stackby, ...facetby],
          key: vgField(dimensionFieldDef, { binSuffix: "mid" }),
          method: "value",
          value: 0
        });
      }
    }
    transform4.push({
      type: "stack",
      groupby: [...this.getGroupbyFields(), ...facetby],
      field: field3,
      sort: sort4,
      as,
      offset: offset4
    });
    return transform4;
  }
};

// node_modules/vega-lite/build/src/compile/data/window.js
var WindowTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    super(parent);
    this.transform = transform4;
  }
  clone() {
    return new WindowTransformNode(null, duplicate(this.transform));
  }
  addDimensions(fields) {
    this.transform.groupby = unique(this.transform.groupby.concat(fields), (d) => d);
  }
  dependentFields() {
    var _a, _b;
    const out = /* @__PURE__ */ new Set();
    ((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).forEach(out.add, out);
    ((_b = this.transform.sort) !== null && _b !== void 0 ? _b : []).forEach((m3) => out.add(m3.field));
    this.transform.window.map((w4) => w4.field).filter((f) => f !== void 0).forEach(out.add, out);
    return out;
  }
  producedFields() {
    return new Set(this.transform.window.map(this.getDefaultName));
  }
  getDefaultName(windowFieldDef) {
    var _a;
    return (_a = windowFieldDef.as) !== null && _a !== void 0 ? _a : vgField(windowFieldDef);
  }
  hash() {
    return `WindowTransform ${hash(this.transform)}`;
  }
  assemble() {
    var _a;
    const fields = [];
    const ops2 = [];
    const as = [];
    const params2 = [];
    for (const window2 of this.transform.window) {
      ops2.push(window2.op);
      as.push(this.getDefaultName(window2));
      params2.push(window2.param === void 0 ? null : window2.param);
      fields.push(window2.field === void 0 ? null : window2.field);
    }
    const frame2 = this.transform.frame;
    const groupby = this.transform.groupby;
    if (frame2 && frame2[0] === null && frame2[1] === null && ops2.every((o) => isAggregateOp(o))) {
      return Object.assign({ type: "joinaggregate", as, ops: ops2, fields }, groupby !== void 0 ? { groupby } : {});
    }
    const sortFields = [];
    const sortOrder = [];
    if (this.transform.sort !== void 0) {
      for (const sortField of this.transform.sort) {
        sortFields.push(sortField.field);
        sortOrder.push((_a = sortField.order) !== null && _a !== void 0 ? _a : "ascending");
      }
    }
    const sort4 = {
      field: sortFields,
      order: sortOrder
    };
    const ignorePeers = this.transform.ignorePeers;
    return Object.assign(Object.assign(Object.assign({
      type: "window",
      params: params2,
      as,
      ops: ops2,
      fields,
      sort: sort4
    }, ignorePeers !== void 0 ? { ignorePeers } : {}), groupby !== void 0 ? { groupby } : {}), frame2 !== void 0 ? { frame: frame2 } : {});
  }
};

// node_modules/vega-lite/build/src/compile/data/subtree.js
function cloneSubtree(facet) {
  function clone(node) {
    if (!(node instanceof FacetNode)) {
      const copy4 = node.clone();
      if (copy4 instanceof OutputNode) {
        const newName = FACET_SCALE_PREFIX + copy4.getSource();
        copy4.setSource(newName);
        facet.model.component.data.outputNodes[newName] = copy4;
      } else if (copy4 instanceof AggregateNode || copy4 instanceof StackNode || copy4 instanceof WindowTransformNode || copy4 instanceof JoinAggregateTransformNode) {
        copy4.addDimensions(facet.fields);
      }
      for (const n of node.children.flatMap(clone)) {
        n.parent = copy4;
      }
      return [copy4];
    }
    return node.children.flatMap(clone);
  }
  return clone;
}
function moveFacetDown(node) {
  if (node instanceof FacetNode) {
    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {
      const child = node.children[0];
      if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {
        child.addDimensions(node.fields);
      }
      child.swapWithParent();
      moveFacetDown(node);
    } else {
      const facetMain = node.model.component.data.main;
      moveMainDownToFacet(facetMain);
      const cloner = cloneSubtree(node);
      const copy4 = node.children.map(cloner).flat();
      for (const c3 of copy4) {
        c3.parent = facetMain;
      }
    }
  } else {
    node.children.map(moveFacetDown);
  }
}
function moveMainDownToFacet(node) {
  if (node instanceof OutputNode && node.type === DataSourceType.Main) {
    if (node.numChildren() === 1) {
      const child = node.children[0];
      if (!(child instanceof FacetNode)) {
        child.swapWithParent();
        moveMainDownToFacet(node);
      }
    }
  }
}

// node_modules/vega-lite/build/src/compile/data/optimize.js
var FACET_SCALE_PREFIX = "scale_";
var MAX_OPTIMIZATION_RUNS = 5;
function checkLinks(nodes) {
  for (const node of nodes) {
    for (const child of node.children) {
      if (child.parent !== node) {
        return false;
      }
    }
    if (!checkLinks(node.children)) {
      return false;
    }
  }
  return true;
}
function runOptimizer(optimizer, nodes) {
  let modified2 = false;
  for (const node of nodes) {
    modified2 = optimizer.optimize(node) || modified2;
  }
  return modified2;
}
function optimizationDataflowHelper(dataComponent, model, firstPass) {
  let roots = dataComponent.sources;
  let modified2 = false;
  modified2 = runOptimizer(new RemoveUnnecessaryOutputNodes(), roots) || modified2;
  modified2 = runOptimizer(new RemoveUnnecessaryIdentifierNodes(model), roots) || modified2;
  roots = roots.filter((r) => r.numChildren() > 0);
  modified2 = runOptimizer(new RemoveUnusedSubtrees(), roots) || modified2;
  roots = roots.filter((r) => r.numChildren() > 0);
  if (!firstPass) {
    modified2 = runOptimizer(new MoveParseUp(), roots) || modified2;
    modified2 = runOptimizer(new MergeBins(model), roots) || modified2;
    modified2 = runOptimizer(new RemoveDuplicateTimeUnits(), roots) || modified2;
    modified2 = runOptimizer(new MergeParse(), roots) || modified2;
    modified2 = runOptimizer(new MergeAggregates(), roots) || modified2;
    modified2 = runOptimizer(new MergeTimeUnits(), roots) || modified2;
    modified2 = runOptimizer(new MergeIdenticalNodes(), roots) || modified2;
    modified2 = runOptimizer(new MergeOutputs(), roots) || modified2;
  }
  dataComponent.sources = roots;
  return modified2;
}
function optimizeDataflow(data3, model) {
  checkLinks(data3.sources);
  let firstPassCounter = 0;
  let secondPassCounter = 0;
  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
    if (!optimizationDataflowHelper(data3, model, true)) {
      break;
    }
    firstPassCounter++;
  }
  data3.sources.map(moveFacetDown);
  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
    if (!optimizationDataflowHelper(data3, model, false)) {
      break;
    }
    secondPassCounter++;
  }
  checkLinks(data3.sources);
  if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {
    warn2(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);
  }
}

// node_modules/vega-lite/build/src/compile/signal.js
var SignalRefWrapper = class {
  constructor(exprGenerator) {
    Object.defineProperty(this, "signal", {
      enumerable: true,
      get: exprGenerator
    });
  }
  static fromName(rename, signalName) {
    return new SignalRefWrapper(() => rename(signalName));
  }
};

// node_modules/vega-lite/build/src/compile/scale/domain.js
var __rest25 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function parseScaleDomain2(model) {
  if (isUnitModel(model)) {
    parseUnitScaleDomain(model);
  } else {
    parseNonUnitScaleDomain(model);
  }
}
function parseUnitScaleDomain(model) {
  const localScaleComponents = model.component.scales;
  for (const channel of keys3(localScaleComponents)) {
    const domains = parseDomainForChannel(model, channel);
    const localScaleCmpt = localScaleComponents[channel];
    localScaleCmpt.setWithExplicit("domains", domains);
    parseSelectionDomain(model, channel);
    if (model.component.data.isFaceted) {
      let facetParent = model;
      while (!isFacetModel(facetParent) && facetParent.parent) {
        facetParent = facetParent.parent;
      }
      const resolve2 = facetParent.component.resolve.scale[channel];
      if (resolve2 === "shared") {
        for (const domain4 of domains.value) {
          if (isDataRefDomain(domain4)) {
            domain4.data = FACET_SCALE_PREFIX + domain4.data.replace(FACET_SCALE_PREFIX, "");
          }
        }
      }
    }
  }
}
function parseNonUnitScaleDomain(model) {
  for (const child of model.children) {
    parseScaleDomain2(child);
  }
  const localScaleComponents = model.component.scales;
  for (const channel of keys3(localScaleComponents)) {
    let domains;
    let selectionExtent = null;
    for (const child of model.children) {
      const childComponent = child.component.scales[channel];
      if (childComponent) {
        if (domains === void 0) {
          domains = childComponent.getWithExplicit("domains");
        } else {
          domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit("domains"), "domains", "scale", domainsTieBreaker);
        }
        const se = childComponent.get("selectionExtent");
        if (selectionExtent && se && selectionExtent.param !== se.param) {
          warn2(message_exports.NEEDS_SAME_SELECTION);
        }
        selectionExtent = se;
      }
    }
    localScaleComponents[channel].setWithExplicit("domains", domains);
    if (selectionExtent) {
      localScaleComponents[channel].set("selectionExtent", selectionExtent, true);
    }
  }
}
function normalizeUnaggregatedDomain(domain4, fieldDef, scaleType2, scaleConfig) {
  if (domain4 === "unaggregated") {
    const { valid, reason } = canUseUnaggregatedDomain(fieldDef, scaleType2);
    if (!valid) {
      warn2(reason);
      return void 0;
    }
  } else if (domain4 === void 0 && scaleConfig.useUnaggregatedDomain) {
    const { valid } = canUseUnaggregatedDomain(fieldDef, scaleType2);
    if (valid) {
      return "unaggregated";
    }
  }
  return domain4;
}
function parseDomainForChannel(model, channel) {
  const scaleType2 = model.getScaleComponent(channel).get("type");
  const { encoding } = model;
  const domain4 = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType2, model.config.scale);
  if (domain4 !== model.scaleDomain(channel)) {
    model.specifiedScales[channel] = Object.assign(Object.assign({}, model.specifiedScales[channel]), { domain: domain4 });
  }
  if (channel === "x" && getFieldOrDatumDef(encoding.x2)) {
    if (getFieldOrDatumDef(encoding.x)) {
      return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType2, domain4, model, "x"), parseSingleChannelDomain(scaleType2, domain4, model, "x2"), "domain", "scale", domainsTieBreaker);
    } else {
      return parseSingleChannelDomain(scaleType2, domain4, model, "x2");
    }
  } else if (channel === "y" && getFieldOrDatumDef(encoding.y2)) {
    if (getFieldOrDatumDef(encoding.y)) {
      return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType2, domain4, model, "y"), parseSingleChannelDomain(scaleType2, domain4, model, "y2"), "domain", "scale", domainsTieBreaker);
    } else {
      return parseSingleChannelDomain(scaleType2, domain4, model, "y2");
    }
  }
  return parseSingleChannelDomain(scaleType2, domain4, model, channel);
}
function mapDomainToDataSignal(domain4, type3, timeUnit) {
  return domain4.map((v2) => {
    const data3 = valueExpr(v2, { timeUnit, type: type3 });
    return { signal: `{data: ${data3}}` };
  });
}
function convertDomainIfItIsDateTime(domain4, type3, timeUnit) {
  var _a;
  const normalizedTimeUnit = (_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
  if (type3 === "temporal" || normalizedTimeUnit) {
    return mapDomainToDataSignal(domain4, type3, normalizedTimeUnit);
  }
  return [domain4];
}
function parseSingleChannelDomain(scaleType2, domain4, model, channel) {
  const { encoding } = model;
  const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
  const { type: type3 } = fieldOrDatumDef;
  const timeUnit = fieldOrDatumDef["timeUnit"];
  if (isDomainUnionWith(domain4)) {
    const defaultDomain = parseSingleChannelDomain(scaleType2, void 0, model, channel);
    const unionWith = convertDomainIfItIsDateTime(domain4.unionWith, type3, timeUnit);
    return makeExplicit([...unionWith, ...defaultDomain.value]);
  } else if (isSignalRef(domain4)) {
    return makeExplicit([domain4]);
  } else if (domain4 && domain4 !== "unaggregated" && !isParameterDomain(domain4)) {
    return makeExplicit(convertDomainIfItIsDateTime(domain4, type3, timeUnit));
  }
  const stack2 = model.stack;
  if (stack2 && channel === stack2.fieldChannel) {
    if (stack2.offset === "normalize") {
      return makeImplicit([[0, 1]]);
    }
    const data3 = model.requestDataName(DataSourceType.Main);
    return makeImplicit([
      {
        data: data3,
        field: model.vgField(channel, { suffix: "start" })
      },
      {
        data: data3,
        field: model.vgField(channel, { suffix: "end" })
      }
    ]);
  }
  const sort4 = isScaleChannel(channel) && isFieldDef(fieldOrDatumDef) ? domainSort(model, channel, scaleType2) : void 0;
  if (isDatumDef(fieldOrDatumDef)) {
    const d = convertDomainIfItIsDateTime([fieldOrDatumDef.datum], type3, timeUnit);
    return makeImplicit(d);
  }
  const fieldDef = fieldOrDatumDef;
  if (domain4 === "unaggregated") {
    const data3 = model.requestDataName(DataSourceType.Main);
    const { field: field3 } = fieldOrDatumDef;
    return makeImplicit([
      {
        data: data3,
        field: vgField({ field: field3, aggregate: "min" })
      },
      {
        data: data3,
        field: vgField({ field: field3, aggregate: "max" })
      }
    ]);
  } else if (isBinning(fieldDef.bin)) {
    if (hasDiscreteDomain(scaleType2)) {
      if (scaleType2 === "bin-ordinal") {
        return makeImplicit([]);
      }
      return makeImplicit([
        {
          data: isBoolean3(sort4) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),
          field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: "range" } : {}),
          sort: sort4 === true || !isObject(sort4) ? {
            field: model.vgField(channel, {}),
            op: "min"
          } : sort4
        }
      ]);
    } else {
      const { bin: bin5 } = fieldDef;
      if (isBinning(bin5)) {
        const binSignal = getBinSignalName(model, fieldDef.field, bin5);
        return makeImplicit([
          new SignalRefWrapper(() => {
            const signal = model.getSignalName(binSignal);
            return `[${signal}.start, ${signal}.stop]`;
          })
        ]);
      } else {
        return makeImplicit([
          {
            data: model.requestDataName(DataSourceType.Main),
            field: model.vgField(channel, {})
          }
        ]);
      }
    }
  } else if (fieldDef.timeUnit && contains2(["time", "utc"], scaleType2) && hasBandEnd(fieldDef, isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : void 0, model.markDef, model.config)) {
    const data3 = model.requestDataName(DataSourceType.Main);
    return makeImplicit([
      {
        data: data3,
        field: model.vgField(channel)
      },
      {
        data: data3,
        field: model.vgField(channel, { suffix: "end" })
      }
    ]);
  } else if (sort4) {
    return makeImplicit([
      {
        data: isBoolean3(sort4) ? model.requestDataName(DataSourceType.Main) : model.requestDataName(DataSourceType.Raw),
        field: model.vgField(channel),
        sort: sort4
      }
    ]);
  } else {
    return makeImplicit([
      {
        data: model.requestDataName(DataSourceType.Main),
        field: model.vgField(channel)
      }
    ]);
  }
}
function normalizeSortField(sort4, isStackedMeasure) {
  const { op, field: field3, order } = sort4;
  return Object.assign(Object.assign({
    op: op !== null && op !== void 0 ? op : isStackedMeasure ? "sum" : DEFAULT_SORT_OP
  }, field3 ? { field: replacePathInField(field3) } : {}), order ? { order } : {});
}
function parseSelectionDomain(model, channel) {
  var _a;
  const scale7 = model.component.scales[channel];
  const spec = model.specifiedScales[channel].domain;
  const bin5 = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.bin;
  const domain4 = isParameterDomain(spec) && spec;
  const extent4 = isBinParams(bin5) && isParameterExtent(bin5.extent) && bin5.extent;
  if (domain4 || extent4) {
    scale7.set("selectionExtent", domain4 !== null && domain4 !== void 0 ? domain4 : extent4, true);
  }
}
function domainSort(model, channel, scaleType2) {
  if (!hasDiscreteDomain(scaleType2)) {
    return void 0;
  }
  const fieldDef = model.fieldDef(channel);
  const sort4 = fieldDef.sort;
  if (isSortArray(sort4)) {
    return {
      op: "min",
      field: sortArrayIndexField(fieldDef, channel),
      order: "ascending"
    };
  }
  const { stack: stack2 } = model;
  const stackDimensions = stack2 ? /* @__PURE__ */ new Set([...stack2.groupbyFields, ...stack2.stackBy.map((s2) => s2.fieldDef.field)]) : void 0;
  if (isSortField(sort4)) {
    const isStackedMeasure = stack2 && !stackDimensions.has(sort4.field);
    return normalizeSortField(sort4, isStackedMeasure);
  } else if (isSortByEncoding(sort4)) {
    const { encoding, order } = sort4;
    const fieldDefToSortBy = model.fieldDef(encoding);
    const { aggregate, field: field3 } = fieldDefToSortBy;
    const isStackedMeasure = stack2 && !stackDimensions.has(field3);
    if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
      return normalizeSortField({
        field: vgField(fieldDefToSortBy),
        order
      }, isStackedMeasure);
    } else if (isAggregateOp(aggregate) || !aggregate) {
      return normalizeSortField({
        op: aggregate,
        field: field3,
        order
      }, isStackedMeasure);
    }
  } else if (sort4 === "descending") {
    return {
      op: "min",
      field: model.vgField(channel),
      order: "descending"
    };
  } else if (contains2(["ascending", void 0], sort4)) {
    return true;
  }
  return void 0;
}
function canUseUnaggregatedDomain(fieldDef, scaleType2) {
  const { aggregate, type: type3 } = fieldDef;
  if (!aggregate) {
    return {
      valid: false,
      reason: message_exports.unaggregateDomainHasNoEffectForRawField(fieldDef)
    };
  }
  if (isString(aggregate) && !SHARED_DOMAIN_OPS.has(aggregate)) {
    return {
      valid: false,
      reason: message_exports.unaggregateDomainWithNonSharedDomainOp(aggregate)
    };
  }
  if (type3 === "quantitative") {
    if (scaleType2 === "log") {
      return {
        valid: false,
        reason: message_exports.unaggregatedDomainWithLogScale(fieldDef)
      };
    }
  }
  return { valid: true };
}
function domainsTieBreaker(v1, v2, property2, propertyOf) {
  if (v1.explicit && v2.explicit) {
    warn2(message_exports.mergeConflictingDomainProperty(property2, propertyOf, v1.value, v2.value));
  }
  return { explicit: v1.explicit, value: [...v1.value, ...v2.value] };
}
function mergeDomains(domains) {
  const uniqueDomains = unique(domains.map((domain4) => {
    if (isDataRefDomain(domain4)) {
      const { sort: _s } = domain4, domainWithoutSort = __rest25(domain4, ["sort"]);
      return domainWithoutSort;
    }
    return domain4;
  }), hash);
  const sorts = unique(domains.map((d) => {
    if (isDataRefDomain(d)) {
      const s2 = d.sort;
      if (s2 !== void 0 && !isBoolean3(s2)) {
        if ("op" in s2 && s2.op === "count") {
          delete s2.field;
        }
        if (s2.order === "ascending") {
          delete s2.order;
        }
      }
      return s2;
    }
    return void 0;
  }).filter((s2) => s2 !== void 0), hash);
  if (uniqueDomains.length === 0) {
    return void 0;
  } else if (uniqueDomains.length === 1) {
    const domain4 = domains[0];
    if (isDataRefDomain(domain4) && sorts.length > 0) {
      let sort5 = sorts[0];
      if (sorts.length > 1) {
        warn2(message_exports.MORE_THAN_ONE_SORT);
        sort5 = true;
      } else {
        if (isObject(sort5) && "field" in sort5) {
          const sortField = sort5.field;
          if (domain4.field === sortField) {
            sort5 = sort5.order ? { order: sort5.order } : true;
          }
        }
      }
      return Object.assign(Object.assign({}, domain4), { sort: sort5 });
    }
    return domain4;
  }
  const unionDomainSorts = unique(sorts.map((s2) => {
    if (isBoolean3(s2) || !("op" in s2) || isString(s2.op) && s2.op in MULTIDOMAIN_SORT_OP_INDEX) {
      return s2;
    }
    warn2(message_exports.domainSortDropped(s2));
    return true;
  }), hash);
  let sort4;
  if (unionDomainSorts.length === 1) {
    sort4 = unionDomainSorts[0];
  } else if (unionDomainSorts.length > 1) {
    warn2(message_exports.MORE_THAN_ONE_SORT);
    sort4 = true;
  }
  const allData = unique(domains.map((d) => {
    if (isDataRefDomain(d)) {
      return d.data;
    }
    return null;
  }), (x5) => x5);
  if (allData.length === 1 && allData[0] !== null) {
    const domain4 = Object.assign({ data: allData[0], fields: uniqueDomains.map((d) => d.field) }, sort4 ? { sort: sort4 } : {});
    return domain4;
  }
  return Object.assign({ fields: uniqueDomains }, sort4 ? { sort: sort4 } : {});
}
function getFieldFromDomain(domain4) {
  if (isDataRefDomain(domain4) && isString(domain4.field)) {
    return domain4.field;
  } else if (isDataRefUnionedDomain(domain4)) {
    let field3;
    for (const nonUnionDomain of domain4.fields) {
      if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {
        if (!field3) {
          field3 = nonUnionDomain.field;
        } else if (field3 !== nonUnionDomain.field) {
          warn2(message_exports.FACETED_INDEPENDENT_DIFFERENT_SOURCES);
          return field3;
        }
      }
    }
    warn2(message_exports.FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES);
    return field3;
  } else if (isFieldRefUnionDomain(domain4)) {
    warn2(message_exports.FACETED_INDEPENDENT_SAME_SOURCE);
    const field3 = domain4.fields[0];
    return isString(field3) ? field3 : void 0;
  }
  return void 0;
}
function assembleDomain(model, channel) {
  const scaleComponent = model.component.scales[channel];
  const domains = scaleComponent.get("domains").map((domain4) => {
    if (isDataRefDomain(domain4)) {
      domain4.data = model.lookupDataSource(domain4.data);
    }
    return domain4;
  });
  return mergeDomains(domains);
}

// node_modules/vega-lite/build/src/compile/scale/assemble.js
var __rest26 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function assembleScales(model) {
  if (isLayerModel(model) || isConcatModel(model)) {
    return model.children.reduce((scales2, child) => {
      return scales2.concat(assembleScales(child));
    }, assembleScalesForModel(model));
  } else {
    return assembleScalesForModel(model);
  }
}
function assembleScalesForModel(model) {
  return keys3(model.component.scales).reduce((scales2, channel) => {
    const scaleComponent = model.component.scales[channel];
    if (scaleComponent.merged) {
      return scales2;
    }
    const scale7 = scaleComponent.combine();
    const { name: name4, type: type3, selectionExtent, domains: _d2, range: _r2, reverse: reverse5 } = scale7, otherScaleProps = __rest26(scale7, ["name", "type", "selectionExtent", "domains", "range", "reverse"]);
    const range8 = assembleScaleRange(scale7.range, name4, channel, model);
    const domain4 = assembleDomain(model, channel);
    const domainRaw = selectionExtent ? assembleSelectionScaleDomain(model, selectionExtent, scaleComponent, domain4) : null;
    scales2.push(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
      name: name4,
      type: type3
    }, domain4 ? { domain: domain4 } : {}), domainRaw ? { domainRaw } : {}), { range: range8 }), reverse5 !== void 0 ? { reverse: reverse5 } : {}), otherScaleProps));
    return scales2;
  }, []);
}
function assembleScaleRange(scaleRange, scaleName, channel, model) {
  if (isXorY(channel)) {
    if (isVgRangeStep(scaleRange)) {
      return {
        step: { signal: `${scaleName}_step` }
      };
    }
  } else if (isObject(scaleRange) && isDataRefDomain(scaleRange)) {
    return Object.assign(Object.assign({}, scaleRange), { data: model.lookupDataSource(scaleRange.data) });
  }
  return scaleRange;
}

// node_modules/vega-lite/build/src/compile/scale/component.js
var ScaleComponent = class extends Split {
  constructor(name4, typeWithExplicit) {
    super(
      {},
      { name: name4 }
    );
    this.merged = false;
    this.setWithExplicit("type", typeWithExplicit);
  }
  domainDefinitelyIncludesZero() {
    if (this.get("zero") !== false) {
      return true;
    }
    return some3(this.get("domains"), (d) => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);
  }
};

// node_modules/vega-lite/build/src/compile/scale/range.js
var RANGE_PROPERTIES = ["range", "scheme"];
function parseUnitScaleRange(model) {
  const localScaleComponents = model.component.scales;
  for (const channel of SCALE_CHANNELS) {
    const localScaleCmpt = localScaleComponents[channel];
    if (!localScaleCmpt) {
      continue;
    }
    const rangeWithExplicit = parseRangeForChannel(channel, model);
    localScaleCmpt.setWithExplicit("range", rangeWithExplicit);
  }
}
function getBinStepSignal(model, channel) {
  const fieldDef = model.fieldDef(channel);
  if (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin) {
    const { bin: bin5, field: field3 } = fieldDef;
    const sizeType = getSizeChannel(channel);
    const sizeSignal = model.getName(sizeType);
    if (isObject(bin5) && bin5.binned && bin5.step !== void 0) {
      return new SignalRefWrapper(() => {
        const scaleName = model.scaleName(channel);
        const binCount = `(domain("${scaleName}")[1] - domain("${scaleName}")[0]) / ${bin5.step}`;
        return `${model.getSignalName(sizeSignal)} / (${binCount})`;
      });
    } else if (isBinning(bin5)) {
      const binSignal = getBinSignalName(model, field3, bin5);
      return new SignalRefWrapper(() => {
        const updatedName = model.getSignalName(binSignal);
        const binCount = `(${updatedName}.stop - ${updatedName}.start) / ${updatedName}.step`;
        return `${model.getSignalName(sizeSignal)} / (${binCount})`;
      });
    }
  }
  return void 0;
}
function parseRangeForChannel(channel, model) {
  const specifiedScale = model.specifiedScales[channel];
  const { size } = model;
  const mergedScaleCmpt = model.getScaleComponent(channel);
  const scaleType2 = mergedScaleCmpt.get("type");
  for (const property2 of RANGE_PROPERTIES) {
    if (specifiedScale[property2] !== void 0) {
      const supportedByScaleType = scaleTypeSupportProperty(scaleType2, property2);
      const channelIncompatability = channelScalePropertyIncompatability(channel, property2);
      if (!supportedByScaleType) {
        warn2(message_exports.scalePropertyNotWorkWithScaleType(scaleType2, property2, channel));
      } else if (channelIncompatability) {
        warn2(channelIncompatability);
      } else {
        switch (property2) {
          case "range": {
            const range8 = specifiedScale.range;
            if (isArray(range8)) {
              if (isXorY(channel)) {
                return makeExplicit(range8.map((v2) => {
                  if (v2 === "width" || v2 === "height") {
                    const sizeSignal = model.getName(v2);
                    const getSignalName = model.getSignalName.bind(model);
                    return SignalRefWrapper.fromName(getSignalName, sizeSignal);
                  }
                  return v2;
                }));
              }
            } else if (isObject(range8)) {
              return makeExplicit({
                data: model.requestDataName(DataSourceType.Main),
                field: range8.field,
                sort: { op: "min", field: model.vgField(channel) }
              });
            }
            return makeExplicit(range8);
          }
          case "scheme":
            return makeExplicit(parseScheme(specifiedScale[property2]));
        }
      }
    }
  }
  const sizeChannel = channel === X3 || channel === "xOffset" ? "width" : "height";
  const sizeValue = size[sizeChannel];
  if (isStep(sizeValue)) {
    if (isXorY(channel)) {
      if (hasDiscreteDomain(scaleType2)) {
        const step = getPositionStep(sizeValue, model, channel);
        if (step) {
          return makeExplicit({ step });
        }
      } else {
        warn2(message_exports.stepDropped(sizeChannel));
      }
    } else if (isXorYOffset(channel)) {
      const positionChannel = channel === XOFFSET ? "x" : "y";
      const positionScaleCmpt = model.getScaleComponent(positionChannel);
      const positionScaleType = positionScaleCmpt.get("type");
      if (positionScaleType === "band") {
        const step = getOffsetStep(sizeValue, scaleType2);
        if (step) {
          return makeExplicit(step);
        }
      }
    }
  }
  const { rangeMin: rangeMin2, rangeMax: rangeMax2 } = specifiedScale;
  const d = defaultRange(channel, model);
  if ((rangeMin2 !== void 0 || rangeMax2 !== void 0) && scaleTypeSupportProperty(scaleType2, "rangeMin") && isArray(d) && d.length === 2) {
    return makeExplicit([rangeMin2 !== null && rangeMin2 !== void 0 ? rangeMin2 : d[0], rangeMax2 !== null && rangeMax2 !== void 0 ? rangeMax2 : d[1]]);
  }
  return makeImplicit(d);
}
function parseScheme(scheme3) {
  if (isExtendedScheme(scheme3)) {
    return Object.assign({ scheme: scheme3.name }, omit(scheme3, ["name"]));
  }
  return { scheme: scheme3 };
}
function defaultRange(channel, model) {
  const { size, config, mark: mark2, encoding } = model;
  const getSignalName = model.getSignalName.bind(model);
  const { type: type3 } = getFieldOrDatumDef(encoding[channel]);
  const mergedScaleCmpt = model.getScaleComponent(channel);
  const scaleType2 = mergedScaleCmpt.get("type");
  const { domain: domain4, domainMid } = model.specifiedScales[channel];
  switch (channel) {
    case X3:
    case Y3: {
      if (contains2(["point", "band"], scaleType2)) {
        const positionSize = getDiscretePositionSize(channel, size, config.view);
        if (isStep(positionSize)) {
          const step = getPositionStep(positionSize, model, channel);
          return { step };
        }
      }
      const sizeType = getSizeChannel(channel);
      const sizeSignal = model.getName(sizeType);
      if (channel === Y3 && hasContinuousDomain(scaleType2)) {
        return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];
      } else {
        return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];
      }
    }
    case XOFFSET:
    case YOFFSET:
      return getOffsetRange(channel, model, scaleType2);
    case SIZE2: {
      const zero6 = model.component.scales[channel].get("zero");
      const rangeMin2 = sizeRangeMin(mark2, zero6, config);
      const rangeMax2 = sizeRangeMax(mark2, size, model, config);
      if (isContinuousToDiscrete(scaleType2)) {
        return interpolateRange2(rangeMin2, rangeMax2, defaultContinuousToDiscreteCount(scaleType2, config, domain4, channel));
      } else {
        return [rangeMin2, rangeMax2];
      }
    }
    case THETA:
      return [0, Math.PI * 2];
    case ANGLE:
      return [0, 360];
    case RADIUS: {
      return [
        0,
        new SignalRefWrapper(() => {
          const w4 = model.getSignalName("width");
          const h2 = model.getSignalName("height");
          return `min(${w4},${h2})/2`;
        })
      ];
    }
    case STROKEWIDTH:
      return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];
    case STROKEDASH:
      return [
        [1, 0],
        [4, 2],
        [2, 1],
        [1, 1],
        [1, 2, 4, 2]
      ];
    case SHAPE:
      return "symbol";
    case COLOR:
    case FILL:
    case STROKE:
      if (scaleType2 === "ordinal") {
        return type3 === "nominal" ? "category" : "ordinal";
      } else {
        if (domainMid !== void 0) {
          return "diverging";
        } else {
          return mark2 === "rect" || mark2 === "geoshape" ? "heatmap" : "ramp";
        }
      }
    case OPACITY:
    case FILLOPACITY:
    case STROKEOPACITY:
      return [config.scale.minOpacity, config.scale.maxOpacity];
  }
}
function getPositionStep(step, model, channel) {
  var _a, _b, _c2, _d2, _e;
  const { encoding } = model;
  const mergedScaleCmpt = model.getScaleComponent(channel);
  const offsetChannel = getOffsetScaleChannel(channel);
  const offsetDef = encoding[offsetChannel];
  const stepFor = getStepFor({ step, offsetIsDiscrete: isFieldOrDatumDef(offsetDef) && isDiscrete2(offsetDef.type) });
  if (stepFor === "offset" && channelHasFieldOrDatum(encoding, offsetChannel)) {
    const offsetScaleCmpt = model.getScaleComponent(offsetChannel);
    const offsetScaleName = model.scaleName(offsetChannel);
    let stepCount = `domain('${offsetScaleName}').length`;
    if (offsetScaleCmpt.get("type") === "band") {
      const offsetPaddingInner = (_b = (_a = offsetScaleCmpt.get("paddingInner")) !== null && _a !== void 0 ? _a : offsetScaleCmpt.get("padding")) !== null && _b !== void 0 ? _b : 0;
      const offsetPaddingOuter = (_d2 = (_c2 = offsetScaleCmpt.get("paddingOuter")) !== null && _c2 !== void 0 ? _c2 : offsetScaleCmpt.get("padding")) !== null && _d2 !== void 0 ? _d2 : 0;
      stepCount = `bandspace(${stepCount}, ${offsetPaddingInner}, ${offsetPaddingOuter})`;
    }
    const paddingInner2 = (_e = mergedScaleCmpt.get("paddingInner")) !== null && _e !== void 0 ? _e : mergedScaleCmpt.get("padding");
    return {
      signal: `${step.step} * ${stepCount} / (1-${exprFromSignalRefOrValue(paddingInner2)})`
    };
  } else {
    return step.step;
  }
}
function getOffsetStep(step, offsetScaleType) {
  const stepFor = getStepFor({ step, offsetIsDiscrete: hasDiscreteDomain(offsetScaleType) });
  if (stepFor === "offset") {
    return { step: step.step };
  }
  return void 0;
}
function getOffsetRange(channel, model, offsetScaleType) {
  const positionChannel = channel === XOFFSET ? "x" : "y";
  const positionScaleCmpt = model.getScaleComponent(positionChannel);
  const positionScaleType = positionScaleCmpt.get("type");
  const positionScaleName = model.scaleName(positionChannel);
  if (positionScaleType === "band") {
    const size = getDiscretePositionSize(positionChannel, model.size, model.config.view);
    if (isStep(size)) {
      const step = getOffsetStep(size, offsetScaleType);
      if (step) {
        return step;
      }
    }
    return [0, { signal: `bandwidth('${positionScaleName}')` }];
  } else {
    return never(`Cannot use ${channel} scale if ${positionChannel} scale is not discrete.`);
  }
}
function getDiscretePositionSize(channel, size, viewConfig) {
  const sizeChannel = channel === X3 ? "width" : "height";
  const sizeValue = size[sizeChannel];
  if (sizeValue) {
    return sizeValue;
  }
  return getViewConfigDiscreteSize(viewConfig, sizeChannel);
}
function defaultContinuousToDiscreteCount(scaleType2, config, domain4, channel) {
  switch (scaleType2) {
    case "quantile":
      return config.scale.quantileCount;
    case "quantize":
      return config.scale.quantizeCount;
    case "threshold":
      if (domain4 !== void 0 && isArray(domain4)) {
        return domain4.length + 1;
      } else {
        warn2(message_exports.domainRequiredForThresholdScale(channel));
        return 3;
      }
  }
}
function interpolateRange2(rangeMin2, rangeMax2, cardinality) {
  const f = () => {
    const rMax = signalOrStringValue(rangeMax2);
    const rMin = signalOrStringValue(rangeMin2);
    const step = `(${rMax} - ${rMin}) / (${cardinality} - 1)`;
    return `sequence(${rMin}, ${rMax} + ${step}, ${step})`;
  };
  if (isSignalRef(rangeMax2)) {
    return new SignalRefWrapper(f);
  } else {
    return { signal: f() };
  }
}
function sizeRangeMin(mark2, zero6, config) {
  if (zero6) {
    if (isSignalRef(zero6)) {
      return { signal: `${zero6.signal} ? 0 : ${sizeRangeMin(mark2, false, config)}` };
    } else {
      return 0;
    }
  }
  switch (mark2) {
    case "bar":
    case "tick":
      return config.scale.minBandSize;
    case "line":
    case "trail":
    case "rule":
      return config.scale.minStrokeWidth;
    case "text":
      return config.scale.minFontSize;
    case "point":
    case "square":
    case "circle":
      return config.scale.minSize;
  }
  throw new Error(message_exports.incompatibleChannel("size", mark2));
}
var MAX_SIZE_RANGE_STEP_RATIO = 0.95;
function sizeRangeMax(mark2, size, model, config) {
  const xyStepSignals = {
    x: getBinStepSignal(model, "x"),
    y: getBinStepSignal(model, "y")
  };
  switch (mark2) {
    case "bar":
    case "tick": {
      if (config.scale.maxBandSize !== void 0) {
        return config.scale.maxBandSize;
      }
      const min6 = minXYStep(size, xyStepSignals, config.view);
      if (isNumber(min6)) {
        return min6 - 1;
      } else {
        return new SignalRefWrapper(() => `${min6.signal} - 1`);
      }
    }
    case "line":
    case "trail":
    case "rule":
      return config.scale.maxStrokeWidth;
    case "text":
      return config.scale.maxFontSize;
    case "point":
    case "square":
    case "circle": {
      if (config.scale.maxSize) {
        return config.scale.maxSize;
      }
      const pointStep = minXYStep(size, xyStepSignals, config.view);
      if (isNumber(pointStep)) {
        return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);
      } else {
        return new SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);
      }
    }
  }
  throw new Error(message_exports.incompatibleChannel("size", mark2));
}
function minXYStep(size, xyStepSignals, viewConfig) {
  const widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, "width");
  const heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, "height");
  if (xyStepSignals.x || xyStepSignals.y) {
    return new SignalRefWrapper(() => {
      const exprs = [
        xyStepSignals.x ? xyStepSignals.x.signal : widthStep,
        xyStepSignals.y ? xyStepSignals.y.signal : heightStep
      ];
      return `min(${exprs.join(", ")})`;
    });
  }
  return Math.min(widthStep, heightStep);
}

// node_modules/vega-lite/build/src/compile/scale/properties.js
function parseScaleProperty(model, property2) {
  if (isUnitModel(model)) {
    parseUnitScaleProperty(model, property2);
  } else {
    parseNonUnitScaleProperty(model, property2);
  }
}
function parseUnitScaleProperty(model, property2) {
  const localScaleComponents = model.component.scales;
  const { config, encoding, markDef, specifiedScales } = model;
  for (const channel of keys3(localScaleComponents)) {
    const specifiedScale = specifiedScales[channel];
    const localScaleCmpt = localScaleComponents[channel];
    const mergedScaleCmpt = model.getScaleComponent(channel);
    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
    const specifiedValue = specifiedScale[property2];
    const scaleType2 = mergedScaleCmpt.get("type");
    const scalePadding = mergedScaleCmpt.get("padding");
    const scalePaddingInner = mergedScaleCmpt.get("paddingInner");
    const supportedByScaleType = scaleTypeSupportProperty(scaleType2, property2);
    const channelIncompatability = channelScalePropertyIncompatability(channel, property2);
    if (specifiedValue !== void 0) {
      if (!supportedByScaleType) {
        warn2(message_exports.scalePropertyNotWorkWithScaleType(scaleType2, property2, channel));
      } else if (channelIncompatability) {
        warn2(channelIncompatability);
      }
    }
    if (supportedByScaleType && channelIncompatability === void 0) {
      if (specifiedValue !== void 0) {
        const timeUnit = fieldOrDatumDef["timeUnit"];
        const type3 = fieldOrDatumDef.type;
        switch (property2) {
          case "domainMax":
          case "domainMin":
            if (isDateTime(specifiedScale[property2]) || type3 === "temporal" || timeUnit) {
              localScaleCmpt.set(property2, { signal: valueExpr(specifiedScale[property2], { type: type3, timeUnit }) }, true);
            } else {
              localScaleCmpt.set(property2, specifiedScale[property2], true);
            }
            break;
          default:
            localScaleCmpt.copyKeyFromObject(property2, specifiedScale);
        }
      } else {
        const value3 = property2 in scaleRules ? scaleRules[property2]({
          model,
          channel,
          fieldOrDatumDef,
          scaleType: scaleType2,
          scalePadding,
          scalePaddingInner,
          domain: specifiedScale.domain,
          domainMin: specifiedScale.domainMin,
          domainMax: specifiedScale.domainMax,
          markDef,
          config,
          hasNestedOffsetScale: channelHasNestedOffsetScale(encoding, channel),
          hasSecondaryRangeChannel: !!encoding[getSecondaryRangeChannel(channel)]
        }) : config.scale[property2];
        if (value3 !== void 0) {
          localScaleCmpt.set(property2, value3, false);
        }
      }
    }
  }
}
var scaleRules = {
  bins: ({ model, fieldOrDatumDef }) => isFieldDef(fieldOrDatumDef) ? bins(model, fieldOrDatumDef) : void 0,
  interpolate: ({ channel, fieldOrDatumDef }) => interpolate2(channel, fieldOrDatumDef.type),
  nice: ({ scaleType: scaleType2, channel, domain: domain4, domainMin, domainMax, fieldOrDatumDef }) => nice4(scaleType2, channel, domain4, domainMin, domainMax, fieldOrDatumDef),
  padding: ({ channel, scaleType: scaleType2, fieldOrDatumDef, markDef, config }) => padding2(channel, scaleType2, config.scale, fieldOrDatumDef, markDef, config.bar),
  paddingInner: ({ scalePadding, channel, markDef, scaleType: scaleType2, config, hasNestedOffsetScale }) => paddingInner(scalePadding, channel, markDef.type, scaleType2, config.scale, hasNestedOffsetScale),
  paddingOuter: ({ scalePadding, channel, scaleType: scaleType2, scalePaddingInner, config, hasNestedOffsetScale }) => paddingOuter(scalePadding, channel, scaleType2, scalePaddingInner, config.scale, hasNestedOffsetScale),
  reverse: ({ fieldOrDatumDef, scaleType: scaleType2, channel, config }) => {
    const sort4 = isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : void 0;
    return reverse4(scaleType2, sort4, channel, config.scale);
  },
  zero: ({ channel, fieldOrDatumDef, domain: domain4, markDef, scaleType: scaleType2, config, hasSecondaryRangeChannel }) => zero5(channel, fieldOrDatumDef, domain4, markDef, scaleType2, config.scale, hasSecondaryRangeChannel)
};
function parseScaleRange2(model) {
  if (isUnitModel(model)) {
    parseUnitScaleRange(model);
  } else {
    parseNonUnitScaleProperty(model, "range");
  }
}
function parseNonUnitScaleProperty(model, property2) {
  const localScaleComponents = model.component.scales;
  for (const child of model.children) {
    if (property2 === "range") {
      parseScaleRange2(child);
    } else {
      parseScaleProperty(child, property2);
    }
  }
  for (const channel of keys3(localScaleComponents)) {
    let valueWithExplicit;
    for (const child of model.children) {
      const childComponent = child.component.scales[channel];
      if (childComponent) {
        const childValueWithExplicit = childComponent.getWithExplicit(property2);
        valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property2, "scale", tieBreakByComparing((v1, v2) => {
          switch (property2) {
            case "range":
              if (v1.step && v2.step) {
                return v1.step - v2.step;
              }
              return 0;
          }
          return 0;
        }));
      }
    }
    localScaleComponents[channel].setWithExplicit(property2, valueWithExplicit);
  }
}
function bins(model, fieldDef) {
  const bin5 = fieldDef.bin;
  if (isBinning(bin5)) {
    const binSignal = getBinSignalName(model, fieldDef.field, bin5);
    return new SignalRefWrapper(() => {
      return model.getSignalName(binSignal);
    });
  } else if (isBinned(bin5) && isBinParams(bin5) && bin5.step !== void 0) {
    return {
      step: bin5.step
    };
  }
  return void 0;
}
function interpolate2(channel, type3) {
  if (contains2([COLOR, FILL, STROKE], channel) && type3 !== "nominal") {
    return "hcl";
  }
  return void 0;
}
function nice4(scaleType2, channel, specifiedDomain, domainMin, domainMax, fieldOrDatumDef) {
  var _a;
  if (((_a = getFieldDef(fieldOrDatumDef)) === null || _a === void 0 ? void 0 : _a.bin) || isArray(specifiedDomain) || domainMax != null || domainMin != null || contains2([ScaleType.TIME, ScaleType.UTC], scaleType2)) {
    return void 0;
  }
  return isXorY(channel) ? true : void 0;
}
function padding2(channel, scaleType2, scaleConfig, fieldOrDatumDef, markDef, barConfig) {
  if (isXorY(channel)) {
    if (isContinuousToContinuous(scaleType2)) {
      if (scaleConfig.continuousPadding !== void 0) {
        return scaleConfig.continuousPadding;
      }
      const { type: type3, orient: orient2 } = markDef;
      if (type3 === "bar" && !(isFieldDef(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {
        if (orient2 === "vertical" && channel === "x" || orient2 === "horizontal" && channel === "y") {
          return barConfig.continuousBandSize;
        }
      }
    }
    if (scaleType2 === ScaleType.POINT) {
      return scaleConfig.pointPadding;
    }
  }
  return void 0;
}
function paddingInner(paddingValue, channel, mark2, scaleType2, scaleConfig, hasNestedOffsetScale = false) {
  if (paddingValue !== void 0) {
    return void 0;
  }
  if (isXorY(channel)) {
    const { bandPaddingInner, barBandPaddingInner, rectBandPaddingInner, bandWithNestedOffsetPaddingInner } = scaleConfig;
    if (hasNestedOffsetScale) {
      return bandWithNestedOffsetPaddingInner;
    }
    return getFirstDefined(bandPaddingInner, mark2 === "bar" ? barBandPaddingInner : rectBandPaddingInner);
  } else if (isXorYOffset(channel)) {
    if (scaleType2 === ScaleType.BAND) {
      return scaleConfig.offsetBandPaddingInner;
    }
  }
  return void 0;
}
function paddingOuter(paddingValue, channel, scaleType2, paddingInnerValue, scaleConfig, hasNestedOffsetScale = false) {
  if (paddingValue !== void 0) {
    return void 0;
  }
  if (isXorY(channel)) {
    const { bandPaddingOuter, bandWithNestedOffsetPaddingOuter } = scaleConfig;
    if (hasNestedOffsetScale) {
      return bandWithNestedOffsetPaddingOuter;
    }
    if (scaleType2 === ScaleType.BAND) {
      return getFirstDefined(
        bandPaddingOuter,
        isSignalRef(paddingInnerValue) ? { signal: `${paddingInnerValue.signal}/2` } : paddingInnerValue / 2
      );
    }
  } else if (isXorYOffset(channel)) {
    if (scaleType2 === ScaleType.POINT) {
      return 0.5;
    } else if (scaleType2 === ScaleType.BAND) {
      return scaleConfig.offsetBandPaddingOuter;
    }
  }
  return void 0;
}
function reverse4(scaleType2, sort4, channel, scaleConfig) {
  if (channel === "x" && scaleConfig.xReverse !== void 0) {
    if (hasContinuousDomain(scaleType2) && sort4 === "descending") {
      if (isSignalRef(scaleConfig.xReverse)) {
        return { signal: `!${scaleConfig.xReverse.signal}` };
      } else {
        return !scaleConfig.xReverse;
      }
    }
    return scaleConfig.xReverse;
  }
  if (hasContinuousDomain(scaleType2) && sort4 === "descending") {
    return true;
  }
  return void 0;
}
function zero5(channel, fieldDef, specifiedDomain, markDef, scaleType2, scaleConfig, hasSecondaryRangeChannel) {
  const hasCustomDomain = !!specifiedDomain && specifiedDomain !== "unaggregated";
  if (hasCustomDomain) {
    if (hasContinuousDomain(scaleType2)) {
      if (isArray(specifiedDomain)) {
        const first = specifiedDomain[0];
        const last = specifiedDomain[specifiedDomain.length - 1];
        if (first <= 0 && last >= 0) {
          return true;
        }
      }
      return false;
    }
  }
  if (channel === "size" && fieldDef.type === "quantitative" && !isContinuousToDiscrete(scaleType2)) {
    return true;
  }
  if (!(isFieldDef(fieldDef) && fieldDef.bin) && contains2([...POSITION_SCALE_CHANNELS, ...POLAR_POSITION_SCALE_CHANNELS], channel)) {
    const { orient: orient2, type: type3 } = markDef;
    if (contains2(["bar", "area", "line", "trail"], type3)) {
      if (orient2 === "horizontal" && channel === "y" || orient2 === "vertical" && channel === "x") {
        return false;
      }
    }
    if (contains2(["bar", "area"], type3) && !hasSecondaryRangeChannel) {
      return true;
    }
    return scaleConfig === null || scaleConfig === void 0 ? void 0 : scaleConfig.zero;
  }
  return false;
}

// node_modules/vega-lite/build/src/compile/scale/type.js
function scaleType(specifiedScale, channel, fieldDef, mark2, hasNestedOffsetScale = false) {
  const defaultScaleType = defaultType3(channel, fieldDef, mark2, hasNestedOffsetScale);
  const { type: type3 } = specifiedScale;
  if (!isScaleChannel(channel)) {
    return null;
  }
  if (type3 !== void 0) {
    if (!channelSupportScaleType(channel, type3)) {
      warn2(message_exports.scaleTypeNotWorkWithChannel(channel, type3, defaultScaleType));
      return defaultScaleType;
    }
    if (isFieldDef(fieldDef) && !scaleTypeSupportDataType(type3, fieldDef.type)) {
      warn2(message_exports.scaleTypeNotWorkWithFieldDef(type3, defaultScaleType));
      return defaultScaleType;
    }
    return type3;
  }
  return defaultScaleType;
}
function defaultType3(channel, fieldDef, mark2, hasNestedOffsetScale) {
  var _a;
  switch (fieldDef.type) {
    case "nominal":
    case "ordinal": {
      if (isColorChannel(channel) || rangeType(channel) === "discrete") {
        if (channel === "shape" && fieldDef.type === "ordinal") {
          warn2(message_exports.discreteChannelCannotEncode(channel, "ordinal"));
        }
        return "ordinal";
      }
      if (isXorY(channel) || isXorYOffset(channel)) {
        if (contains2(["rect", "bar", "image", "rule"], mark2.type)) {
          return "band";
        }
        if (hasNestedOffsetScale) {
          return "band";
        }
      } else if (mark2.type === "arc" && channel in POLAR_POSITION_SCALE_CHANNEL_INDEX) {
        return "band";
      }
      const dimensionSize = mark2[getSizeChannel(channel)];
      if (isRelativeBandSize(dimensionSize)) {
        return "band";
      }
      if (isPositionFieldOrDatumDef(fieldDef) && ((_a = fieldDef.axis) === null || _a === void 0 ? void 0 : _a.tickBand)) {
        return "band";
      }
      return "point";
    }
    case "temporal":
      if (isColorChannel(channel)) {
        return "time";
      } else if (rangeType(channel) === "discrete") {
        warn2(message_exports.discreteChannelCannotEncode(channel, "temporal"));
        return "ordinal";
      } else if (isFieldDef(fieldDef) && fieldDef.timeUnit && normalizeTimeUnit(fieldDef.timeUnit).utc) {
        return "utc";
      }
      return "time";
    case "quantitative":
      if (isColorChannel(channel)) {
        if (isFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
          return "bin-ordinal";
        }
        return "linear";
      } else if (rangeType(channel) === "discrete") {
        warn2(message_exports.discreteChannelCannotEncode(channel, "quantitative"));
        return "ordinal";
      }
      return "linear";
    case "geojson":
      return void 0;
  }
  throw new Error(message_exports.invalidFieldType(fieldDef.type));
}

// node_modules/vega-lite/build/src/compile/scale/parse.js
function parseScales(model, { ignoreRange } = {}) {
  parseScaleCore(model);
  parseScaleDomain2(model);
  for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {
    parseScaleProperty(model, prop);
  }
  if (!ignoreRange) {
    parseScaleRange2(model);
  }
}
function parseScaleCore(model) {
  if (isUnitModel(model)) {
    model.component.scales = parseUnitScaleCore(model);
  } else {
    model.component.scales = parseNonUnitScaleCore(model);
  }
}
function parseUnitScaleCore(model) {
  const { encoding, mark: mark2, markDef } = model;
  const scaleComponents = {};
  for (const channel of SCALE_CHANNELS) {
    const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
    if (fieldOrDatumDef && mark2 === GEOSHAPE && channel === SHAPE && fieldOrDatumDef.type === GEOJSON) {
      continue;
    }
    let specifiedScale = fieldOrDatumDef && fieldOrDatumDef["scale"];
    if (isXorYOffset(channel)) {
      const mainChannel = getMainChannelFromOffsetChannel(channel);
      if (!channelHasNestedOffsetScale(encoding, mainChannel)) {
        if (specifiedScale) {
          warn2(message_exports.offsetEncodingScaleIgnored(channel));
        }
        continue;
      }
    }
    if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {
      specifiedScale !== null && specifiedScale !== void 0 ? specifiedScale : specifiedScale = {};
      const hasNestedOffsetScale = channelHasNestedOffsetScale(encoding, channel);
      const sType = scaleType(specifiedScale, channel, fieldOrDatumDef, markDef, hasNestedOffsetScale);
      scaleComponents[channel] = new ScaleComponent(model.scaleName(`${channel}`, true), {
        value: sType,
        explicit: specifiedScale.type === sType
      });
    }
  }
  return scaleComponents;
}
var scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));
function parseNonUnitScaleCore(model) {
  var _a;
  var _b;
  const scaleComponents = model.component.scales = {};
  const scaleTypeWithExplicitIndex = {};
  const resolve2 = model.component.resolve;
  for (const child of model.children) {
    parseScaleCore(child);
    for (const channel of keys3(child.component.scales)) {
      (_a = (_b = resolve2.scale)[channel]) !== null && _a !== void 0 ? _a : _b[channel] = defaultScaleResolve(channel, model);
      if (resolve2.scale[channel] === "shared") {
        const explicitScaleType = scaleTypeWithExplicitIndex[channel];
        const childScaleType = child.component.scales[channel].getWithExplicit("type");
        if (explicitScaleType) {
          if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {
            scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, "type", "scale", scaleTypeTieBreaker);
          } else {
            resolve2.scale[channel] = "independent";
            delete scaleTypeWithExplicitIndex[channel];
          }
        } else {
          scaleTypeWithExplicitIndex[channel] = childScaleType;
        }
      }
    }
  }
  for (const channel of keys3(scaleTypeWithExplicitIndex)) {
    const name4 = model.scaleName(channel, true);
    const typeWithExplicit = scaleTypeWithExplicitIndex[channel];
    scaleComponents[channel] = new ScaleComponent(name4, typeWithExplicit);
    for (const child of model.children) {
      const childScale = child.component.scales[channel];
      if (childScale) {
        child.renameScale(childScale.get("name"), name4);
        childScale.merged = true;
      }
    }
  }
  return scaleComponents;
}

// node_modules/vega-lite/build/src/compile/model.js
var __rest27 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var NameMap = class {
  constructor() {
    this.nameMap = {};
  }
  rename(oldName, newName) {
    this.nameMap[oldName] = newName;
  }
  has(name4) {
    return this.nameMap[name4] !== void 0;
  }
  get(name4) {
    while (this.nameMap[name4] && name4 !== this.nameMap[name4]) {
      name4 = this.nameMap[name4];
    }
    return name4;
  }
};
function isUnitModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === "unit";
}
function isFacetModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === "facet";
}
function isConcatModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === "concat";
}
function isLayerModel(model) {
  return (model === null || model === void 0 ? void 0 : model.type) === "layer";
}
var Model = class {
  constructor(spec, type3, parent, parentGivenName, config, resolve2, view) {
    var _a, _b;
    this.type = type3;
    this.parent = parent;
    this.config = config;
    this.correctDataNames = (mark2) => {
      var _a2, _b2, _c2;
      if ((_a2 = mark2.from) === null || _a2 === void 0 ? void 0 : _a2.data) {
        mark2.from.data = this.lookupDataSource(mark2.from.data);
      }
      if ((_c2 = (_b2 = mark2.from) === null || _b2 === void 0 ? void 0 : _b2.facet) === null || _c2 === void 0 ? void 0 : _c2.data) {
        mark2.from.facet.data = this.lookupDataSource(mark2.from.facet.data);
      }
      return mark2;
    };
    this.parent = parent;
    this.config = config;
    this.view = replaceExprRef(view);
    this.name = (_a = spec.name) !== null && _a !== void 0 ? _a : parentGivenName;
    this.title = isText(spec.title) ? { text: spec.title } : spec.title ? replaceExprRef(spec.title) : void 0;
    this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
    this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
    this.signalNameMap = parent ? parent.signalNameMap : new NameMap();
    this.data = spec.data;
    this.description = spec.description;
    this.transforms = normalizeTransform((_b = spec.transform) !== null && _b !== void 0 ? _b : []);
    this.layout = type3 === "layer" || type3 === "unit" ? {} : extractCompositionLayout(spec, type3, config);
    this.component = {
      data: {
        sources: parent ? parent.component.data.sources : [],
        outputNodes: parent ? parent.component.data.outputNodes : {},
        outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
        isFaceted: isFacetSpec(spec) || (parent === null || parent === void 0 ? void 0 : parent.component.data.isFaceted) && spec.data === void 0
      },
      layoutSize: new Split(),
      layoutHeaders: { row: {}, column: {}, facet: {} },
      mark: null,
      resolve: Object.assign({ scale: {}, axis: {}, legend: {} }, resolve2 ? duplicate(resolve2) : {}),
      selection: null,
      scales: null,
      projection: null,
      axes: {},
      legends: {}
    };
  }
  get width() {
    return this.getSizeSignalRef("width");
  }
  get height() {
    return this.getSizeSignalRef("height");
  }
  parse() {
    this.parseScale();
    this.parseLayoutSize();
    this.renameTopLevelLayoutSizeSignal();
    this.parseSelections();
    this.parseProjection();
    this.parseData();
    this.parseAxesAndHeaders();
    this.parseLegends();
    this.parseMarkGroup();
  }
  parseScale() {
    parseScales(this);
  }
  parseProjection() {
    parseProjection2(this);
  }
  renameTopLevelLayoutSizeSignal() {
    if (this.getName("width") !== "width") {
      this.renameSignal(this.getName("width"), "width");
    }
    if (this.getName("height") !== "height") {
      this.renameSignal(this.getName("height"), "height");
    }
  }
  parseLegends() {
    parseLegend2(this);
  }
  assembleEncodeFromView(view) {
    const { style: _ } = view, baseView = __rest27(view, ["style"]);
    const e3 = {};
    for (const property2 of keys3(baseView)) {
      const value3 = baseView[property2];
      if (value3 !== void 0) {
        e3[property2] = signalOrValueRef(value3);
      }
    }
    return e3;
  }
  assembleGroupEncodeEntry(isTopLevel) {
    let encodeEntry2 = {};
    if (this.view) {
      encodeEntry2 = this.assembleEncodeFromView(this.view);
    }
    if (!isTopLevel) {
      if (this.description) {
        encodeEntry2["description"] = signalOrValueRef(this.description);
      }
      if (this.type === "unit" || this.type === "layer") {
        return Object.assign({ width: this.getSizeSignalRef("width"), height: this.getSizeSignalRef("height") }, encodeEntry2 !== null && encodeEntry2 !== void 0 ? encodeEntry2 : {});
      }
    }
    return isEmpty(encodeEntry2) ? void 0 : encodeEntry2;
  }
  assembleLayout() {
    if (!this.layout) {
      return void 0;
    }
    const _a = this.layout, { spacing } = _a, layout = __rest27(_a, ["spacing"]);
    const { component, config } = this;
    const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);
    return Object.assign(Object.assign(Object.assign({ padding: spacing }, this.assembleDefaultLayout()), layout), titleBand ? { titleBand } : {});
  }
  assembleDefaultLayout() {
    return {};
  }
  assembleHeaderMarks() {
    const { layoutHeaders: layoutHeaders2 } = this.component;
    let headerMarks = [];
    for (const channel of FACET_CHANNELS) {
      if (layoutHeaders2[channel].title) {
        headerMarks.push(assembleTitleGroup(this, channel));
      }
    }
    for (const channel of HEADER_CHANNELS) {
      headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));
    }
    return headerMarks;
  }
  assembleAxes() {
    return assembleAxes(this.component.axes, this.config);
  }
  assembleLegends() {
    return assembleLegends(this);
  }
  assembleProjections() {
    return assembleProjections(this);
  }
  assembleTitle() {
    var _a, _b, _c2;
    const _d2 = (_a = this.title) !== null && _a !== void 0 ? _a : {}, { encoding } = _d2, titleNoEncoding = __rest27(_d2, ["encoding"]);
    const title2 = Object.assign(Object.assign(Object.assign({}, extractTitleConfig(this.config.title).nonMarkTitleProperties), titleNoEncoding), encoding ? { encode: { update: encoding } } : {});
    if (title2.text) {
      if (contains2(["unit", "layer"], this.type)) {
        if (contains2(["middle", void 0], title2.anchor)) {
          (_b = title2.frame) !== null && _b !== void 0 ? _b : title2.frame = "group";
        }
      } else {
        (_c2 = title2.anchor) !== null && _c2 !== void 0 ? _c2 : title2.anchor = "start";
      }
      return isEmpty(title2) ? void 0 : title2;
    }
    return void 0;
  }
  assembleGroup(signals = []) {
    const group4 = {};
    signals = signals.concat(this.assembleSignals());
    if (signals.length > 0) {
      group4.signals = signals;
    }
    const layout = this.assembleLayout();
    if (layout) {
      group4.layout = layout;
    }
    group4.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());
    const scales2 = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];
    if (scales2.length > 0) {
      group4.scales = scales2;
    }
    const axes = this.assembleAxes();
    if (axes.length > 0) {
      group4.axes = axes;
    }
    const legends = this.assembleLegends();
    if (legends.length > 0) {
      group4.legends = legends;
    }
    return group4;
  }
  getName(text4) {
    return varName((this.name ? `${this.name}_` : "") + text4);
  }
  getDataName(type3) {
    return this.getName(DataSourceType[type3].toLowerCase());
  }
  requestDataName(name4) {
    const fullName = this.getDataName(name4);
    const refCounts = this.component.data.outputNodeRefCounts;
    refCounts[fullName] = (refCounts[fullName] || 0) + 1;
    return fullName;
  }
  getSizeSignalRef(layoutSizeType) {
    if (isFacetModel(this.parent)) {
      const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
      const channel = getPositionScaleChannel(sizeType);
      const scaleComponent = this.component.scales[channel];
      if (scaleComponent && !scaleComponent.merged) {
        const type3 = scaleComponent.get("type");
        const range8 = scaleComponent.get("range");
        if (hasDiscreteDomain(type3) && isVgRangeStep(range8)) {
          const scaleName = scaleComponent.get("name");
          const domain4 = assembleDomain(this, channel);
          const field3 = getFieldFromDomain(domain4);
          if (field3) {
            const fieldRef2 = vgField({ aggregate: "distinct", field: field3 }, { expr: "datum" });
            return {
              signal: sizeExpr(scaleName, scaleComponent, fieldRef2)
            };
          } else {
            warn2(message_exports.unknownField(channel));
            return null;
          }
        }
      }
    }
    return {
      signal: this.signalNameMap.get(this.getName(layoutSizeType))
    };
  }
  lookupDataSource(name4) {
    const node = this.component.data.outputNodes[name4];
    if (!node) {
      return name4;
    }
    return node.getSource();
  }
  getSignalName(oldSignalName) {
    return this.signalNameMap.get(oldSignalName);
  }
  renameSignal(oldName, newName) {
    this.signalNameMap.rename(oldName, newName);
  }
  renameScale(oldName, newName) {
    this.scaleNameMap.rename(oldName, newName);
  }
  renameProjection(oldName, newName) {
    this.projectionNameMap.rename(oldName, newName);
  }
  scaleName(originalScaleName, parse7) {
    if (parse7) {
      return this.getName(originalScaleName);
    }
    if (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || this.scaleNameMap.has(this.getName(originalScaleName))) {
      return this.scaleNameMap.get(this.getName(originalScaleName));
    }
    return void 0;
  }
  projectionName(parse7) {
    if (parse7) {
      return this.getName("projection");
    }
    if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName("projection"))) {
      return this.projectionNameMap.get(this.getName("projection"));
    }
    return void 0;
  }
  getScaleComponent(channel) {
    if (!this.component.scales) {
      throw new Error("getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().");
    }
    const localScaleComponent = this.component.scales[channel];
    if (localScaleComponent && !localScaleComponent.merged) {
      return localScaleComponent;
    }
    return this.parent ? this.parent.getScaleComponent(channel) : void 0;
  }
  getSelectionComponent(variableName, origName) {
    let sel = this.component.selection[variableName];
    if (!sel && this.parent) {
      sel = this.parent.getSelectionComponent(variableName, origName);
    }
    if (!sel) {
      throw new Error(message_exports.selectionNotFound(origName));
    }
    return sel;
  }
  hasAxisOrientSignalRef() {
    var _a, _b;
    return ((_a = this.component.axes.x) === null || _a === void 0 ? void 0 : _a.some((a4) => a4.hasOrientSignalRef())) || ((_b = this.component.axes.y) === null || _b === void 0 ? void 0 : _b.some((a4) => a4.hasOrientSignalRef()));
  }
};
var ModelWithField = class extends Model {
  vgField(channel, opt = {}) {
    const fieldDef = this.fieldDef(channel);
    if (!fieldDef) {
      return void 0;
    }
    return vgField(fieldDef, opt);
  }
  reduceFieldDef(f, init2) {
    return reduce3(this.getMapping(), (acc, cd2, c3) => {
      const fieldDef = getFieldDef(cd2);
      if (fieldDef) {
        return f(acc, fieldDef, c3);
      }
      return acc;
    }, init2);
  }
  forEachFieldDef(f, t4) {
    forEach(this.getMapping(), (cd2, c3) => {
      const fieldDef = getFieldDef(cd2);
      if (fieldDef) {
        f(fieldDef, c3);
      }
    }, t4);
  }
};

// node_modules/vega-lite/build/src/compile/data/density.js
var __rest28 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var DensityTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    var _a, _b, _c2;
    super(parent);
    this.transform = transform4;
    this.transform = duplicate(transform4);
    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [void 0, void 0];
    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : "value", (_c2 = specifiedAs[1]) !== null && _c2 !== void 0 ? _c2 : "density"];
    if (transform4.groupby && transform4.minsteps == null && transform4.maxsteps == null && transform4.steps == null) {
      this.transform.steps = 200;
    }
  }
  clone() {
    return new DensityTransformNode(null, duplicate(this.transform));
  }
  dependentFields() {
    var _a;
    return /* @__PURE__ */ new Set([this.transform.density, ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []]);
  }
  producedFields() {
    return new Set(this.transform.as);
  }
  hash() {
    return `DensityTransform ${hash(this.transform)}`;
  }
  assemble() {
    const _a = this.transform, { density } = _a, rest = __rest28(_a, ["density"]);
    const result = Object.assign({ type: "kde", field: density }, rest);
    return result;
  }
};

// node_modules/vega-lite/build/src/compile/data/filterinvalid.js
var FilterInvalidNode = class extends DataFlowNode {
  constructor(parent, filter5) {
    super(parent);
    this.filter = filter5;
  }
  clone() {
    return new FilterInvalidNode(null, Object.assign({}, this.filter));
  }
  static make(parent, model) {
    const { config, mark: mark2, markDef } = model;
    const invalid = getMarkPropOrConfig("invalid", markDef, config);
    if (invalid !== "filter") {
      return null;
    }
    const filter5 = model.reduceFieldDef((aggregator, fieldDef, channel) => {
      const scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);
      if (scaleComponent) {
        const scaleType2 = scaleComponent.get("type");
        if (hasContinuousDomain(scaleType2) && fieldDef.aggregate !== "count" && !isPathMark(mark2)) {
          aggregator[fieldDef.field] = fieldDef;
        }
      }
      return aggregator;
    }, {});
    if (!keys3(filter5).length) {
      return null;
    }
    return new FilterInvalidNode(parent, filter5);
  }
  dependentFields() {
    return new Set(keys3(this.filter));
  }
  producedFields() {
    return /* @__PURE__ */ new Set();
  }
  hash() {
    return `FilterInvalid ${hash(this.filter)}`;
  }
  assemble() {
    const filters2 = keys3(this.filter).reduce((vegaFilters, field3) => {
      const fieldDef = this.filter[field3];
      const ref2 = vgField(fieldDef, { expr: "datum" });
      if (fieldDef !== null) {
        if (fieldDef.type === "temporal") {
          vegaFilters.push(`(isDate(${ref2}) || (isValid(${ref2}) && isFinite(+${ref2})))`);
        } else if (fieldDef.type === "quantitative") {
          vegaFilters.push(`isValid(${ref2})`);
          vegaFilters.push(`isFinite(+${ref2})`);
        } else {
        }
      }
      return vegaFilters;
    }, []);
    return filters2.length > 0 ? {
      type: "filter",
      expr: filters2.join(" && ")
    } : null;
  }
};

// node_modules/vega-lite/build/src/compile/data/flatten.js
var FlattenTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    super(parent);
    this.transform = transform4;
    this.transform = duplicate(transform4);
    const { flatten: flatten2, as = [] } = this.transform;
    this.transform.as = flatten2.map((f, i) => {
      var _a;
      return (_a = as[i]) !== null && _a !== void 0 ? _a : f;
    });
  }
  clone() {
    return new FlattenTransformNode(this.parent, duplicate(this.transform));
  }
  dependentFields() {
    return new Set(this.transform.flatten);
  }
  producedFields() {
    return new Set(this.transform.as);
  }
  hash() {
    return `FlattenTransform ${hash(this.transform)}`;
  }
  assemble() {
    const { flatten: fields, as } = this.transform;
    const result = {
      type: "flatten",
      fields,
      as
    };
    return result;
  }
};

// node_modules/vega-lite/build/src/compile/data/fold.js
var FoldTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    var _a, _b, _c2;
    super(parent);
    this.transform = transform4;
    this.transform = duplicate(transform4);
    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [void 0, void 0];
    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : "key", (_c2 = specifiedAs[1]) !== null && _c2 !== void 0 ? _c2 : "value"];
  }
  clone() {
    return new FoldTransformNode(null, duplicate(this.transform));
  }
  dependentFields() {
    return new Set(this.transform.fold);
  }
  producedFields() {
    return new Set(this.transform.as);
  }
  hash() {
    return `FoldTransform ${hash(this.transform)}`;
  }
  assemble() {
    const { fold, as } = this.transform;
    const result = {
      type: "fold",
      fields: fold,
      as
    };
    return result;
  }
};

// node_modules/vega-lite/build/src/compile/data/geojson.js
var GeoJSONNode = class extends DataFlowNode {
  constructor(parent, fields, geojson, signal) {
    super(parent);
    this.fields = fields;
    this.geojson = geojson;
    this.signal = signal;
  }
  clone() {
    return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);
  }
  static parseAll(parent, model) {
    if (model.component.projection && !model.component.projection.isFit) {
      return parent;
    }
    let geoJsonCounter = 0;
    for (const coordinates of [
      [LONGITUDE, LATITUDE],
      [LONGITUDE2, LATITUDE2]
    ]) {
      const pair = coordinates.map((channel) => {
        const def2 = getFieldOrDatumDef(model.encoding[channel]);
        return isFieldDef(def2) ? def2.field : isDatumDef(def2) ? { expr: `${def2.datum}` } : isValueDef(def2) ? { expr: `${def2["value"]}` } : void 0;
      });
      if (pair[0] || pair[1]) {
        parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));
      }
    }
    if (model.channelHasField(SHAPE)) {
      const fieldDef = model.typedFieldDef(SHAPE);
      if (fieldDef.type === GEOJSON) {
        parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));
      }
    }
    return parent;
  }
  dependentFields() {
    var _a;
    const fields = ((_a = this.fields) !== null && _a !== void 0 ? _a : []).filter(isString);
    return /* @__PURE__ */ new Set([...this.geojson ? [this.geojson] : [], ...fields]);
  }
  producedFields() {
    return /* @__PURE__ */ new Set();
  }
  hash() {
    return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;
  }
  assemble() {
    return [
      ...this.geojson ? [
        {
          type: "filter",
          expr: `isValid(datum["${this.geojson}"])`
        }
      ] : [],
      Object.assign(Object.assign(Object.assign({ type: "geojson" }, this.fields ? { fields: this.fields } : {}), this.geojson ? { geojson: this.geojson } : {}), { signal: this.signal })
    ];
  }
};

// node_modules/vega-lite/build/src/compile/data/geopoint.js
var GeoPointNode = class extends DataFlowNode {
  constructor(parent, projection3, fields, as) {
    super(parent);
    this.projection = projection3;
    this.fields = fields;
    this.as = as;
  }
  clone() {
    return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));
  }
  static parseAll(parent, model) {
    if (!model.projectionName()) {
      return parent;
    }
    for (const coordinates of [
      [LONGITUDE, LATITUDE],
      [LONGITUDE2, LATITUDE2]
    ]) {
      const pair = coordinates.map((channel) => {
        const def2 = getFieldOrDatumDef(model.encoding[channel]);
        return isFieldDef(def2) ? def2.field : isDatumDef(def2) ? { expr: `${def2.datum}` } : isValueDef(def2) ? { expr: `${def2["value"]}` } : void 0;
      });
      const suffix = coordinates[0] === LONGITUDE2 ? "2" : "";
      if (pair[0] || pair[1]) {
        parent = new GeoPointNode(parent, model.projectionName(), pair, [
          model.getName(`x${suffix}`),
          model.getName(`y${suffix}`)
        ]);
      }
    }
    return parent;
  }
  dependentFields() {
    return new Set(this.fields.filter(isString));
  }
  producedFields() {
    return new Set(this.as);
  }
  hash() {
    return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;
  }
  assemble() {
    return {
      type: "geopoint",
      projection: this.projection,
      fields: this.fields,
      as: this.as
    };
  }
};

// node_modules/vega-lite/build/src/compile/data/impute.js
var ImputeNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    super(parent);
    this.transform = transform4;
  }
  clone() {
    return new ImputeNode(null, duplicate(this.transform));
  }
  dependentFields() {
    var _a;
    return /* @__PURE__ */ new Set([this.transform.impute, this.transform.key, ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []]);
  }
  producedFields() {
    return /* @__PURE__ */ new Set([this.transform.impute]);
  }
  processSequence(keyvals) {
    const { start = 0, stop: stop3, step } = keyvals;
    const result = [start, stop3, ...step ? [step] : []].join(",");
    return { signal: `sequence(${result})` };
  }
  static makeFromTransform(parent, imputeTransform) {
    return new ImputeNode(parent, imputeTransform);
  }
  static makeFromEncoding(parent, model) {
    const encoding = model.encoding;
    const xDef = encoding.x;
    const yDef = encoding.y;
    if (isFieldDef(xDef) && isFieldDef(yDef)) {
      const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : void 0;
      if (imputedChannel === void 0) {
        return void 0;
      }
      const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : void 0;
      const { method: method2, value: value3, frame: frame2, keyvals } = imputedChannel.impute;
      const groupbyFields = pathGroupingFields(model.mark, encoding);
      return new ImputeNode(parent, Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ impute: imputedChannel.field, key: keyChannel.field }, method2 ? { method: method2 } : {}), value3 !== void 0 ? { value: value3 } : {}), frame2 ? { frame: frame2 } : {}), keyvals !== void 0 ? { keyvals } : {}), groupbyFields.length ? { groupby: groupbyFields } : {}));
    }
    return null;
  }
  hash() {
    return `Impute ${hash(this.transform)}`;
  }
  assemble() {
    const { impute, key: key2, keyvals, method: method2, groupby, value: value3, frame: frame2 = [null, null] } = this.transform;
    const imputeTransform = Object.assign(Object.assign(Object.assign(Object.assign({ type: "impute", field: impute, key: key2 }, keyvals ? { keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals } : {}), { method: "value" }), groupby ? { groupby } : {}), { value: !method2 || method2 === "value" ? value3 : null });
    if (method2 && method2 !== "value") {
      const deriveNewField = Object.assign({ type: "window", as: [`imputed_${impute}_value`], ops: [method2], fields: [impute], frame: frame2, ignorePeers: false }, groupby ? { groupby } : {});
      const replaceOriginal = {
        type: "formula",
        expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,
        as: impute
      };
      return [imputeTransform, deriveNewField, replaceOriginal];
    } else {
      return [imputeTransform];
    }
  }
};

// node_modules/vega-lite/build/src/compile/data/loess.js
var __rest29 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var LoessTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    var _a, _b, _c2;
    super(parent);
    this.transform = transform4;
    this.transform = duplicate(transform4);
    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [void 0, void 0];
    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform4.on, (_c2 = specifiedAs[1]) !== null && _c2 !== void 0 ? _c2 : transform4.loess];
  }
  clone() {
    return new LoessTransformNode(null, duplicate(this.transform));
  }
  dependentFields() {
    var _a;
    return /* @__PURE__ */ new Set([this.transform.loess, this.transform.on, ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []]);
  }
  producedFields() {
    return new Set(this.transform.as);
  }
  hash() {
    return `LoessTransform ${hash(this.transform)}`;
  }
  assemble() {
    const _a = this.transform, { loess: loess2, on: on2 } = _a, rest = __rest29(_a, ["loess", "on"]);
    const result = Object.assign({ type: "loess", x: on2, y: loess2 }, rest);
    return result;
  }
};

// node_modules/vega-lite/build/src/compile/data/lookup.js
var LookupNode = class extends DataFlowNode {
  constructor(parent, transform4, secondary) {
    super(parent);
    this.transform = transform4;
    this.secondary = secondary;
  }
  clone() {
    return new LookupNode(null, duplicate(this.transform), this.secondary);
  }
  static make(parent, model, transform4, counter) {
    const sources = model.component.data.sources;
    const { from } = transform4;
    let fromOutputNode = null;
    if (isLookupData(from)) {
      let fromSource = findSource(from.data, sources);
      if (!fromSource) {
        fromSource = new SourceNode(from.data);
        sources.push(fromSource);
      }
      const fromOutputName = model.getName(`lookup_${counter}`);
      fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);
      model.component.data.outputNodes[fromOutputName] = fromOutputNode;
    } else if (isLookupSelection(from)) {
      const selName = from.param;
      transform4 = Object.assign({ as: selName }, transform4);
      let selCmpt;
      try {
        selCmpt = model.getSelectionComponent(varName(selName), selName);
      } catch (e3) {
        throw new Error(message_exports.cannotLookupVariableParameter(selName));
      }
      fromOutputNode = selCmpt.materialized;
      if (!fromOutputNode) {
        throw new Error(message_exports.noSameUnitLookup(selName));
      }
    }
    return new LookupNode(parent, transform4, fromOutputNode.getSource());
  }
  dependentFields() {
    return /* @__PURE__ */ new Set([this.transform.lookup]);
  }
  producedFields() {
    return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);
  }
  hash() {
    return `Lookup ${hash({ transform: this.transform, secondary: this.secondary })}`;
  }
  assemble() {
    let foreign;
    if (this.transform.from.fields) {
      foreign = Object.assign({ values: this.transform.from.fields }, this.transform.as ? { as: array(this.transform.as) } : {});
    } else {
      let asName = this.transform.as;
      if (!isString(asName)) {
        warn2(message_exports.NO_FIELDS_NEEDS_AS);
        asName = "_lookup";
      }
      foreign = {
        as: [asName]
      };
    }
    return Object.assign(Object.assign({ type: "lookup", from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign), this.transform.default ? { default: this.transform.default } : {});
  }
};

// node_modules/vega-lite/build/src/compile/data/quantile.js
var __rest30 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var QuantileTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    var _a, _b, _c2;
    super(parent);
    this.transform = transform4;
    this.transform = duplicate(transform4);
    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [void 0, void 0];
    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : "prob", (_c2 = specifiedAs[1]) !== null && _c2 !== void 0 ? _c2 : "value"];
  }
  clone() {
    return new QuantileTransformNode(null, duplicate(this.transform));
  }
  dependentFields() {
    var _a;
    return /* @__PURE__ */ new Set([this.transform.quantile, ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []]);
  }
  producedFields() {
    return new Set(this.transform.as);
  }
  hash() {
    return `QuantileTransform ${hash(this.transform)}`;
  }
  assemble() {
    const _a = this.transform, { quantile: quantile4 } = _a, rest = __rest30(_a, ["quantile"]);
    const result = Object.assign({ type: "quantile", field: quantile4 }, rest);
    return result;
  }
};

// node_modules/vega-lite/build/src/compile/data/regression.js
var __rest31 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
var RegressionTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    var _a, _b, _c2;
    super(parent);
    this.transform = transform4;
    this.transform = duplicate(transform4);
    const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [void 0, void 0];
    this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform4.on, (_c2 = specifiedAs[1]) !== null && _c2 !== void 0 ? _c2 : transform4.regression];
  }
  clone() {
    return new RegressionTransformNode(null, duplicate(this.transform));
  }
  dependentFields() {
    var _a;
    return /* @__PURE__ */ new Set([this.transform.regression, this.transform.on, ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []]);
  }
  producedFields() {
    return new Set(this.transform.as);
  }
  hash() {
    return `RegressionTransform ${hash(this.transform)}`;
  }
  assemble() {
    const _a = this.transform, { regression, on: on2 } = _a, rest = __rest31(_a, ["regression", "on"]);
    const result = Object.assign({ type: "regression", x: on2, y: regression }, rest);
    return result;
  }
};

// node_modules/vega-lite/build/src/compile/data/pivot.js
var PivotTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    super(parent);
    this.transform = transform4;
  }
  clone() {
    return new PivotTransformNode(null, duplicate(this.transform));
  }
  addDimensions(fields) {
    var _a;
    this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), (d) => d);
  }
  producedFields() {
    return void 0;
  }
  dependentFields() {
    var _a;
    return /* @__PURE__ */ new Set([this.transform.pivot, this.transform.value, ...(_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []]);
  }
  hash() {
    return `PivotTransform ${hash(this.transform)}`;
  }
  assemble() {
    const { pivot, value: value3, groupby, limit, op } = this.transform;
    return Object.assign(Object.assign(Object.assign({ type: "pivot", field: pivot, value: value3 }, limit !== void 0 ? { limit } : {}), op !== void 0 ? { op } : {}), groupby !== void 0 ? { groupby } : {});
  }
};

// node_modules/vega-lite/build/src/compile/data/sample.js
var SampleTransformNode = class extends DataFlowNode {
  constructor(parent, transform4) {
    super(parent);
    this.transform = transform4;
  }
  clone() {
    return new SampleTransformNode(null, duplicate(this.transform));
  }
  dependentFields() {
    return /* @__PURE__ */ new Set();
  }
  producedFields() {
    return /* @__PURE__ */ new Set();
  }
  hash() {
    return `SampleTransform ${hash(this.transform)}`;
  }
  assemble() {
    return {
      type: "sample",
      size: this.transform.sample
    };
  }
};

// node_modules/vega-lite/build/src/compile/data/assemble.js
function makeWalkTree(data3) {
  let datasetIndex = 0;
  function walkTree(node, dataSource) {
    var _a;
    if (node instanceof SourceNode) {
      if (!node.isGenerator && !isUrlData(node.data)) {
        data3.push(dataSource);
        const newData = {
          name: null,
          source: dataSource.name,
          transform: []
        };
        dataSource = newData;
      }
    }
    if (node instanceof ParseNode) {
      if (node.parent instanceof SourceNode && !dataSource.source) {
        dataSource.format = Object.assign(Object.assign({}, (_a = dataSource.format) !== null && _a !== void 0 ? _a : {}), { parse: node.assembleFormatParse() });
        dataSource.transform.push(...node.assembleTransforms(true));
      } else {
        dataSource.transform.push(...node.assembleTransforms());
      }
    }
    if (node instanceof FacetNode) {
      if (!dataSource.name) {
        dataSource.name = `data_${datasetIndex++}`;
      }
      if (!dataSource.source || dataSource.transform.length > 0) {
        data3.push(dataSource);
        node.data = dataSource.name;
      } else {
        node.data = dataSource.source;
      }
      data3.push(...node.assemble());
      return;
    }
    if (node instanceof GraticuleNode || node instanceof SequenceNode || node instanceof FilterInvalidNode || node instanceof FilterNode || node instanceof CalculateNode || node instanceof GeoPointNode || node instanceof AggregateNode || node instanceof LookupNode || node instanceof WindowTransformNode || node instanceof JoinAggregateTransformNode || node instanceof FoldTransformNode || node instanceof FlattenTransformNode || node instanceof DensityTransformNode || node instanceof LoessTransformNode || node instanceof QuantileTransformNode || node instanceof RegressionTransformNode || node instanceof IdentifierNode || node instanceof SampleTransformNode || node instanceof PivotTransformNode) {
      dataSource.transform.push(node.assemble());
    }
    if (node instanceof BinNode || node instanceof TimeUnitNode || node instanceof ImputeNode || node instanceof StackNode || node instanceof GeoJSONNode) {
      dataSource.transform.push(...node.assemble());
    }
    if (node instanceof OutputNode) {
      if (dataSource.source && dataSource.transform.length === 0) {
        node.setSource(dataSource.source);
      } else if (node.parent instanceof OutputNode) {
        node.setSource(dataSource.name);
      } else {
        if (!dataSource.name) {
          dataSource.name = `data_${datasetIndex++}`;
        }
        node.setSource(dataSource.name);
        if (node.numChildren() === 1) {
          data3.push(dataSource);
          const newData = {
            name: null,
            source: dataSource.name,
            transform: []
          };
          dataSource = newData;
        }
      }
    }
    switch (node.numChildren()) {
      case 0:
        if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
          data3.push(dataSource);
        }
        break;
      case 1:
        walkTree(node.children[0], dataSource);
        break;
      default: {
        if (!dataSource.name) {
          dataSource.name = `data_${datasetIndex++}`;
        }
        let source3 = dataSource.name;
        if (!dataSource.source || dataSource.transform.length > 0) {
          data3.push(dataSource);
        } else {
          source3 = dataSource.source;
        }
        for (const child of node.children) {
          const newData = {
            name: null,
            source: source3,
            transform: []
          };
          walkTree(child, newData);
        }
        break;
      }
    }
  }
  return walkTree;
}
function assembleFacetData(root) {
  const data3 = [];
  const walkTree = makeWalkTree(data3);
  for (const child of root.children) {
    walkTree(child, {
      source: root.name,
      name: null,
      transform: []
    });
  }
  return data3;
}
function assembleRootData(dataComponent, datasets) {
  var _a, _b;
  const data3 = [];
  const walkTree = makeWalkTree(data3);
  let sourceIndex = 0;
  for (const root of dataComponent.sources) {
    if (!root.hasName()) {
      root.dataName = `source_${sourceIndex++}`;
    }
    const newData = root.assemble();
    walkTree(root, newData);
  }
  for (const d of data3) {
    if (d.transform.length === 0) {
      delete d.transform;
    }
  }
  let whereTo = 0;
  for (const [i, d] of data3.entries()) {
    if (((_a = d.transform) !== null && _a !== void 0 ? _a : []).length === 0 && !d.source) {
      data3.splice(whereTo++, 0, data3.splice(i, 1)[0]);
    }
  }
  for (const d of data3) {
    for (const t4 of (_b = d.transform) !== null && _b !== void 0 ? _b : []) {
      if (t4.type === "lookup") {
        t4.from = dataComponent.outputNodes[t4.from].getSource();
      }
    }
  }
  for (const d of data3) {
    if (d.name in datasets) {
      d.values = datasets[d.name];
    }
  }
  return data3;
}

// node_modules/vega-lite/build/src/compile/header/parse.js
function getHeaderType(orient2) {
  if (orient2 === "top" || orient2 === "left" || isSignalRef(orient2)) {
    return "header";
  }
  return "footer";
}
function parseFacetHeaders(model) {
  for (const channel of FACET_CHANNELS) {
    parseFacetHeader(model, channel);
  }
  mergeChildAxis(model, "x");
  mergeChildAxis(model, "y");
}
function parseFacetHeader(model, channel) {
  var _a;
  const { facet, config, child, component } = model;
  if (model.channelHasField(channel)) {
    const fieldDef = facet[channel];
    const titleConfig = getHeaderProperty("title", null, config, channel);
    let title2 = title(fieldDef, config, {
      allowDisabling: true,
      includeDefault: titleConfig === void 0 || !!titleConfig
    });
    if (child.component.layoutHeaders[channel].title) {
      title2 = isArray(title2) ? title2.join(", ") : title2;
      title2 += ` / ${child.component.layoutHeaders[channel].title}`;
      child.component.layoutHeaders[channel].title = null;
    }
    const labelOrient = getHeaderProperty("labelOrient", fieldDef.header, config, channel);
    const labels3 = fieldDef.header !== null ? getFirstDefined((_a = fieldDef.header) === null || _a === void 0 ? void 0 : _a.labels, config.header.labels, true) : false;
    const headerType = contains2(["bottom", "right"], labelOrient) ? "footer" : "header";
    component.layoutHeaders[channel] = {
      title: fieldDef.header !== null ? title2 : null,
      facetFieldDef: fieldDef,
      [headerType]: channel === "facet" ? [] : [makeHeaderComponent(model, channel, labels3)]
    };
  }
}
function makeHeaderComponent(model, channel, labels3) {
  const sizeType = channel === "row" ? "height" : "width";
  return {
    labels: labels3,
    sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : void 0,
    axes: []
  };
}
function mergeChildAxis(model, channel) {
  var _a;
  const { child } = model;
  if (child.component.axes[channel]) {
    const { layoutHeaders: layoutHeaders2, resolve: resolve2 } = model.component;
    resolve2.axis[channel] = parseGuideResolve(resolve2, channel);
    if (resolve2.axis[channel] === "shared") {
      const headerChannel = channel === "x" ? "column" : "row";
      const layoutHeader = layoutHeaders2[headerChannel];
      for (const axisComponent of child.component.axes[channel]) {
        const headerType = getHeaderType(axisComponent.get("orient"));
        (_a = layoutHeader[headerType]) !== null && _a !== void 0 ? _a : layoutHeader[headerType] = [makeHeaderComponent(model, headerChannel, false)];
        const mainAxis = assembleAxis(axisComponent, "main", model.config, { header: true });
        if (mainAxis) {
          layoutHeader[headerType][0].axes.push(mainAxis);
        }
        axisComponent.mainExtracted = true;
      }
    } else {
    }
  }
}

// node_modules/vega-lite/build/src/compile/layoutsize/parse.js
function parseLayerLayoutSize(model) {
  parseChildrenLayoutSize(model);
  parseNonUnitLayoutSizeForChannel(model, "width");
  parseNonUnitLayoutSizeForChannel(model, "height");
}
function parseConcatLayoutSize(model) {
  parseChildrenLayoutSize(model);
  const widthType = model.layout.columns === 1 ? "width" : "childWidth";
  const heightType = model.layout.columns === void 0 ? "height" : "childHeight";
  parseNonUnitLayoutSizeForChannel(model, widthType);
  parseNonUnitLayoutSizeForChannel(model, heightType);
}
function parseChildrenLayoutSize(model) {
  for (const child of model.children) {
    child.parseLayoutSize();
  }
}
function parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {
  var _a;
  const sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
  const channel = getPositionScaleChannel(sizeType);
  const resolve2 = model.component.resolve;
  const layoutSizeCmpt = model.component.layoutSize;
  let mergedSize;
  for (const child of model.children) {
    const childSize = child.component.layoutSize.getWithExplicit(sizeType);
    const scaleResolve = (_a = resolve2.scale[channel]) !== null && _a !== void 0 ? _a : defaultScaleResolve(channel, model);
    if (scaleResolve === "independent" && childSize.value === "step") {
      mergedSize = void 0;
      break;
    }
    if (mergedSize) {
      if (scaleResolve === "independent" && mergedSize.value !== childSize.value) {
        mergedSize = void 0;
        break;
      }
      mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, "");
    } else {
      mergedSize = childSize;
    }
  }
  if (mergedSize) {
    for (const child of model.children) {
      model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));
      child.component.layoutSize.set(sizeType, "merged", false);
    }
    layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);
  } else {
    layoutSizeCmpt.setWithExplicit(layoutSizeType, {
      explicit: false,
      value: void 0
    });
  }
}
function parseUnitLayoutSize(model) {
  const { size, component } = model;
  for (const channel of POSITION_SCALE_CHANNELS) {
    const sizeType = getSizeChannel(channel);
    if (size[sizeType]) {
      const specifiedSize = size[sizeType];
      component.layoutSize.set(sizeType, isStep(specifiedSize) ? "step" : specifiedSize, true);
    } else {
      const defaultSize2 = defaultUnitSize(model, sizeType);
      component.layoutSize.set(sizeType, defaultSize2, false);
    }
  }
}
function defaultUnitSize(model, sizeType) {
  const channel = sizeType === "width" ? "x" : "y";
  const config = model.config;
  const scaleComponent = model.getScaleComponent(channel);
  if (scaleComponent) {
    const scaleType2 = scaleComponent.get("type");
    const range8 = scaleComponent.get("range");
    if (hasDiscreteDomain(scaleType2)) {
      const size = getViewConfigDiscreteSize(config.view, sizeType);
      if (isVgRangeStep(range8) || isStep(size)) {
        return "step";
      } else {
        return size;
      }
    } else {
      return getViewConfigContinuousSize(config.view, sizeType);
    }
  } else if (model.hasProjection || model.mark === "arc") {
    return getViewConfigContinuousSize(config.view, sizeType);
  } else {
    const size = getViewConfigDiscreteSize(config.view, sizeType);
    return isStep(size) ? size.step : size;
  }
}

// node_modules/vega-lite/build/src/compile/facet.js
function facetSortFieldName(fieldDef, sort4, opt) {
  return vgField(sort4, Object.assign({ suffix: `by_${vgField(fieldDef)}` }, opt !== null && opt !== void 0 ? opt : {}));
}
var FacetModel = class extends ModelWithField {
  constructor(spec, parent, parentGivenName, config) {
    super(spec, "facet", parent, parentGivenName, config, spec.resolve);
    this.child = buildModel(spec.spec, this, this.getName("child"), void 0, config);
    this.children = [this.child];
    this.facet = this.initFacet(spec.facet);
  }
  initFacet(facet) {
    if (!isFacetMapping(facet)) {
      return { facet: this.initFacetFieldDef(facet, "facet") };
    }
    const channels = keys3(facet);
    const normalizedFacet = {};
    for (const channel of channels) {
      if (![ROW, COLUMN].includes(channel)) {
        warn2(message_exports.incompatibleChannel(channel, "facet"));
        break;
      }
      const fieldDef = facet[channel];
      if (fieldDef.field === void 0) {
        warn2(message_exports.emptyFieldDef(fieldDef, channel));
        break;
      }
      normalizedFacet[channel] = this.initFacetFieldDef(fieldDef, channel);
    }
    return normalizedFacet;
  }
  initFacetFieldDef(fieldDef, channel) {
    const facetFieldDef = initFieldDef(fieldDef, channel);
    if (facetFieldDef.header) {
      facetFieldDef.header = replaceExprRef(facetFieldDef.header);
    } else if (facetFieldDef.header === null) {
      facetFieldDef.header = null;
    }
    return facetFieldDef;
  }
  channelHasField(channel) {
    return !!this.facet[channel];
  }
  fieldDef(channel) {
    return this.facet[channel];
  }
  parseData() {
    this.component.data = parseData2(this);
    this.child.parseData();
  }
  parseLayoutSize() {
    parseChildrenLayoutSize(this);
  }
  parseSelections() {
    this.child.parseSelections();
    this.component.selection = this.child.component.selection;
  }
  parseMarkGroup() {
    this.child.parseMarkGroup();
  }
  parseAxesAndHeaders() {
    this.child.parseAxesAndHeaders();
    parseFacetHeaders(this);
  }
  assembleSelectionTopLevelSignals(signals) {
    return this.child.assembleSelectionTopLevelSignals(signals);
  }
  assembleSignals() {
    this.child.assembleSignals();
    return [];
  }
  assembleSelectionData(data3) {
    return this.child.assembleSelectionData(data3);
  }
  getHeaderLayoutMixins() {
    var _a, _b, _c2;
    const layoutMixins = {};
    for (const channel of FACET_CHANNELS) {
      for (const headerType of HEADER_TYPES) {
        const layoutHeaderComponent = this.component.layoutHeaders[channel];
        const headerComponent = layoutHeaderComponent[headerType];
        const { facetFieldDef } = layoutHeaderComponent;
        if (facetFieldDef) {
          const titleOrient = getHeaderProperty("titleOrient", facetFieldDef.header, this.config, channel);
          if (["right", "bottom"].includes(titleOrient)) {
            const headerChannel = getHeaderChannel(channel, titleOrient);
            (_a = layoutMixins.titleAnchor) !== null && _a !== void 0 ? _a : layoutMixins.titleAnchor = {};
            layoutMixins.titleAnchor[headerChannel] = "end";
          }
        }
        if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent[0]) {
          const sizeType = channel === "row" ? "height" : "width";
          const bandType = headerType === "header" ? "headerBand" : "footerBand";
          if (channel !== "facet" && !this.child.component.layoutSize.get(sizeType)) {
            (_b = layoutMixins[bandType]) !== null && _b !== void 0 ? _b : layoutMixins[bandType] = {};
            layoutMixins[bandType][channel] = 0.5;
          }
          if (layoutHeaderComponent.title) {
            (_c2 = layoutMixins.offset) !== null && _c2 !== void 0 ? _c2 : layoutMixins.offset = {};
            layoutMixins.offset[channel === "row" ? "rowTitle" : "columnTitle"] = 10;
          }
        }
      }
    }
    return layoutMixins;
  }
  assembleDefaultLayout() {
    const { column, row } = this.facet;
    const columns = column ? this.columnDistinctSignal() : row ? 1 : void 0;
    let align2 = "all";
    if (!row && this.component.resolve.scale.x === "independent") {
      align2 = "none";
    } else if (!column && this.component.resolve.scale.y === "independent") {
      align2 = "none";
    }
    return Object.assign(Object.assign(Object.assign({}, this.getHeaderLayoutMixins()), columns ? { columns } : {}), { bounds: "full", align: align2 });
  }
  assembleLayoutSignals() {
    return this.child.assembleLayoutSignals();
  }
  columnDistinctSignal() {
    if (this.parent && this.parent instanceof FacetModel) {
      return void 0;
    } else {
      const facetLayoutDataName = this.getName("column_domain");
      return { signal: `length(data('${facetLayoutDataName}'))` };
    }
  }
  assembleGroupStyle() {
    return void 0;
  }
  assembleGroup(signals) {
    if (this.parent && this.parent instanceof FacetModel) {
      return Object.assign(Object.assign({}, this.channelHasField("column") ? {
        encode: {
          update: {
            columns: { field: vgField(this.facet.column, { prefix: "distinct" }) }
          }
        }
      } : {}), super.assembleGroup(signals));
    }
    return super.assembleGroup(signals);
  }
  getCardinalityAggregateForChild() {
    const fields = [];
    const ops2 = [];
    const as = [];
    if (this.child instanceof FacetModel) {
      if (this.child.channelHasField("column")) {
        const field3 = vgField(this.child.facet.column);
        fields.push(field3);
        ops2.push("distinct");
        as.push(`distinct_${field3}`);
      }
    } else {
      for (const channel of POSITION_SCALE_CHANNELS) {
        const childScaleComponent = this.child.component.scales[channel];
        if (childScaleComponent && !childScaleComponent.merged) {
          const type3 = childScaleComponent.get("type");
          const range8 = childScaleComponent.get("range");
          if (hasDiscreteDomain(type3) && isVgRangeStep(range8)) {
            const domain4 = assembleDomain(this.child, channel);
            const field3 = getFieldFromDomain(domain4);
            if (field3) {
              fields.push(field3);
              ops2.push("distinct");
              as.push(`distinct_${field3}`);
            } else {
              warn2(message_exports.unknownField(channel));
            }
          }
        }
      }
    }
    return { fields, ops: ops2, as };
  }
  assembleFacet() {
    const { name: name4, data: data3 } = this.component.data.facetRoot;
    const { row, column } = this.facet;
    const { fields, ops: ops2, as } = this.getCardinalityAggregateForChild();
    const groupby = [];
    for (const channel of FACET_CHANNELS) {
      const fieldDef = this.facet[channel];
      if (fieldDef) {
        groupby.push(vgField(fieldDef));
        const { bin: bin5, sort: sort4 } = fieldDef;
        if (isBinning(bin5)) {
          groupby.push(vgField(fieldDef, { binSuffix: "end" }));
        }
        if (isSortField(sort4)) {
          const { field: field3, op = DEFAULT_SORT_OP } = sort4;
          const outputName = facetSortFieldName(fieldDef, sort4);
          if (row && column) {
            fields.push(outputName);
            ops2.push("max");
            as.push(outputName);
          } else {
            fields.push(field3);
            ops2.push(op);
            as.push(outputName);
          }
        } else if (isArray(sort4)) {
          const outputName = sortArrayIndexField(fieldDef, channel);
          fields.push(outputName);
          ops2.push("max");
          as.push(outputName);
        }
      }
    }
    const cross4 = !!row && !!column;
    return Object.assign({
      name: name4,
      data: data3,
      groupby
    }, cross4 || fields.length > 0 ? {
      aggregate: Object.assign(Object.assign({}, cross4 ? { cross: cross4 } : {}), fields.length ? { fields, ops: ops2, as } : {})
    } : {});
  }
  facetSortFields(channel) {
    const { facet } = this;
    const fieldDef = facet[channel];
    if (fieldDef) {
      if (isSortField(fieldDef.sort)) {
        return [facetSortFieldName(fieldDef, fieldDef.sort, { expr: "datum" })];
      } else if (isArray(fieldDef.sort)) {
        return [sortArrayIndexField(fieldDef, channel, { expr: "datum" })];
      }
      return [vgField(fieldDef, { expr: "datum" })];
    }
    return [];
  }
  facetSortOrder(channel) {
    const { facet } = this;
    const fieldDef = facet[channel];
    if (fieldDef) {
      const { sort: sort4 } = fieldDef;
      const order = (isSortField(sort4) ? sort4.order : !isArray(sort4) && sort4) || "ascending";
      return [order];
    }
    return [];
  }
  assembleLabelTitle() {
    var _a;
    const { facet, config } = this;
    if (facet.facet) {
      return assembleLabelTitle(facet.facet, "facet", config);
    }
    const ORTHOGONAL_ORIENT = {
      row: ["top", "bottom"],
      column: ["left", "right"]
    };
    for (const channel of HEADER_CHANNELS) {
      if (facet[channel]) {
        const labelOrient = getHeaderProperty("labelOrient", (_a = facet[channel]) === null || _a === void 0 ? void 0 : _a.header, config, channel);
        if (ORTHOGONAL_ORIENT[channel].includes(labelOrient)) {
          return assembleLabelTitle(facet[channel], channel, config);
        }
      }
    }
    return void 0;
  }
  assembleMarks() {
    const { child } = this;
    const facetRoot = this.component.data.facetRoot;
    const data3 = assembleFacetData(facetRoot);
    const encodeEntry2 = child.assembleGroupEncodeEntry(false);
    const title2 = this.assembleLabelTitle() || child.assembleTitle();
    const style2 = child.assembleGroupStyle();
    const markGroup = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: this.getName("cell"), type: "group" }, title2 ? { title: title2 } : {}), style2 ? { style: style2 } : {}), {
      from: {
        facet: this.assembleFacet()
      },
      sort: {
        field: FACET_CHANNELS.map((c3) => this.facetSortFields(c3)).flat(),
        order: FACET_CHANNELS.map((c3) => this.facetSortOrder(c3)).flat()
      }
    }), data3.length > 0 ? { data: data3 } : {}), encodeEntry2 ? { encode: { update: encodeEntry2 } } : {}), child.assembleGroup(assembleFacetSignals(this, [])));
    return [markGroup];
  }
  getMapping() {
    return this.facet;
  }
};

// node_modules/vega-lite/build/src/compile/data/joinaggregatefacet.js
function makeJoinAggregateFromFacet(parent, facet) {
  const { row, column } = facet;
  if (row && column) {
    let newParent = null;
    for (const fieldDef of [row, column]) {
      if (isSortField(fieldDef.sort)) {
        const { field: field3, op = DEFAULT_SORT_OP } = fieldDef.sort;
        parent = newParent = new JoinAggregateTransformNode(parent, {
          joinaggregate: [
            {
              op,
              field: field3,
              as: facetSortFieldName(fieldDef, fieldDef.sort, { forAs: true })
            }
          ],
          groupby: [vgField(fieldDef)]
        });
      }
    }
    return newParent;
  }
  return null;
}

// node_modules/vega-lite/build/src/compile/data/parse.js
function findSource(data3, sources) {
  var _a, _b, _c2, _d2;
  for (const other of sources) {
    const otherData = other.data;
    if (data3.name && other.hasName() && data3.name !== other.dataName) {
      continue;
    }
    const formatMesh = (_a = data3["format"]) === null || _a === void 0 ? void 0 : _a.mesh;
    const otherFeature = (_b = otherData.format) === null || _b === void 0 ? void 0 : _b.feature;
    if (formatMesh && otherFeature) {
      continue;
    }
    const formatFeature = (_c2 = data3["format"]) === null || _c2 === void 0 ? void 0 : _c2.feature;
    if ((formatFeature || otherFeature) && formatFeature !== otherFeature) {
      continue;
    }
    const otherMesh = (_d2 = otherData.format) === null || _d2 === void 0 ? void 0 : _d2.mesh;
    if ((formatMesh || otherMesh) && formatMesh !== otherMesh) {
      continue;
    }
    if (isInlineData(data3) && isInlineData(otherData)) {
      if (deepEqual(data3.values, otherData.values)) {
        return other;
      }
    } else if (isUrlData(data3) && isUrlData(otherData)) {
      if (data3.url === otherData.url) {
        return other;
      }
    } else if (isNamedData(data3)) {
      if (data3.name === other.dataName) {
        return other;
      }
    }
  }
  return null;
}
function parseRoot(model, sources) {
  if (model.data || !model.parent) {
    if (model.data === null) {
      const source3 = new SourceNode({ values: [] });
      sources.push(source3);
      return source3;
    }
    const existingSource = findSource(model.data, sources);
    if (existingSource) {
      if (!isGenerator(model.data)) {
        existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);
      }
      if (!existingSource.hasName() && model.data.name) {
        existingSource.dataName = model.data.name;
      }
      return existingSource;
    } else {
      const source3 = new SourceNode(model.data);
      sources.push(source3);
      return source3;
    }
  } else {
    return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;
  }
}
function parseTransformArray(head, model, ancestorParse) {
  var _a, _b;
  let lookupCounter = 0;
  for (const t4 of model.transforms) {
    let derivedType = void 0;
    let transformNode;
    if (isCalculate(t4)) {
      transformNode = head = new CalculateNode(head, t4);
      derivedType = "derived";
    } else if (isFilter(t4)) {
      const implicit2 = getImplicitFromFilterTransform(t4);
      transformNode = head = (_a = ParseNode.makeWithAncestors(head, {}, implicit2, ancestorParse)) !== null && _a !== void 0 ? _a : head;
      head = new FilterNode(head, model, t4.filter);
    } else if (isBin(t4)) {
      transformNode = head = BinNode.makeFromTransform(head, t4, model);
      derivedType = "number";
    } else if (isTimeUnit(t4)) {
      derivedType = "date";
      const parsedAs = ancestorParse.getWithExplicit(t4.field);
      if (parsedAs.value === void 0) {
        head = new ParseNode(head, { [t4.field]: derivedType });
        ancestorParse.set(t4.field, derivedType, false);
      }
      transformNode = head = TimeUnitNode.makeFromTransform(head, t4);
    } else if (isAggregate2(t4)) {
      transformNode = head = AggregateNode.makeFromTransform(head, t4);
      derivedType = "number";
      if (requiresSelectionId(model)) {
        head = new IdentifierNode(head);
      }
    } else if (isLookup(t4)) {
      transformNode = head = LookupNode.make(head, model, t4, lookupCounter++);
      derivedType = "derived";
    } else if (isWindow(t4)) {
      transformNode = head = new WindowTransformNode(head, t4);
      derivedType = "number";
    } else if (isJoinAggregate(t4)) {
      transformNode = head = new JoinAggregateTransformNode(head, t4);
      derivedType = "number";
    } else if (isStack(t4)) {
      transformNode = head = StackNode.makeFromTransform(head, t4);
      derivedType = "derived";
    } else if (isFold(t4)) {
      transformNode = head = new FoldTransformNode(head, t4);
      derivedType = "derived";
    } else if (isFlatten(t4)) {
      transformNode = head = new FlattenTransformNode(head, t4);
      derivedType = "derived";
    } else if (isPivot(t4)) {
      transformNode = head = new PivotTransformNode(head, t4);
      derivedType = "derived";
    } else if (isSample(t4)) {
      head = new SampleTransformNode(head, t4);
    } else if (isImpute(t4)) {
      transformNode = head = ImputeNode.makeFromTransform(head, t4);
      derivedType = "derived";
    } else if (isDensity(t4)) {
      transformNode = head = new DensityTransformNode(head, t4);
      derivedType = "derived";
    } else if (isQuantile2(t4)) {
      transformNode = head = new QuantileTransformNode(head, t4);
      derivedType = "derived";
    } else if (isRegression(t4)) {
      transformNode = head = new RegressionTransformNode(head, t4);
      derivedType = "derived";
    } else if (isLoess(t4)) {
      transformNode = head = new LoessTransformNode(head, t4);
      derivedType = "derived";
    } else {
      warn2(message_exports.invalidTransformIgnored(t4));
      continue;
    }
    if (transformNode && derivedType !== void 0) {
      for (const field3 of (_b = transformNode.producedFields()) !== null && _b !== void 0 ? _b : []) {
        ancestorParse.set(field3, derivedType, false);
      }
    }
  }
  return head;
}
function parseData2(model) {
  var _a, _b, _c2, _d2, _e, _f2, _g2, _h, _j, _k2;
  let head = parseRoot(model, model.component.data.sources);
  const { outputNodes, outputNodeRefCounts } = model.component.data;
  const data3 = model.data;
  const newData = data3 && (isGenerator(data3) || isUrlData(data3) || isInlineData(data3));
  const ancestorParse = !newData && model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();
  if (isGenerator(data3)) {
    if (isSequenceGenerator(data3)) {
      head = new SequenceNode(head, data3.sequence);
    } else if (isGraticuleGenerator(data3)) {
      head = new GraticuleNode(head, data3.graticule);
    }
    ancestorParse.parseNothing = true;
  } else if (((_a = data3 === null || data3 === void 0 ? void 0 : data3.format) === null || _a === void 0 ? void 0 : _a.parse) === null) {
    ancestorParse.parseNothing = true;
  }
  head = (_b = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _b !== void 0 ? _b : head;
  head = new IdentifierNode(head);
  const parentIsLayer = model.parent && isLayerModel(model.parent);
  if (isUnitModel(model) || isFacetModel(model)) {
    if (parentIsLayer) {
      head = (_c2 = BinNode.makeFromEncoding(head, model)) !== null && _c2 !== void 0 ? _c2 : head;
    }
  }
  if (model.transforms.length > 0) {
    head = parseTransformArray(head, model, ancestorParse);
  }
  const implicitSelection = getImplicitFromSelection(model);
  const implicitEncoding = getImplicitFromEncoding(model);
  head = (_d2 = ParseNode.makeWithAncestors(head, {}, Object.assign(Object.assign({}, implicitSelection), implicitEncoding), ancestorParse)) !== null && _d2 !== void 0 ? _d2 : head;
  if (isUnitModel(model)) {
    head = GeoJSONNode.parseAll(head, model);
    head = GeoPointNode.parseAll(head, model);
  }
  if (isUnitModel(model) || isFacetModel(model)) {
    if (!parentIsLayer) {
      head = (_e = BinNode.makeFromEncoding(head, model)) !== null && _e !== void 0 ? _e : head;
    }
    head = (_f2 = TimeUnitNode.makeFromEncoding(head, model)) !== null && _f2 !== void 0 ? _f2 : head;
    head = CalculateNode.parseAllForSortIndex(head, model);
  }
  const rawName = model.getDataName(DataSourceType.Raw);
  const raw = new OutputNode(head, rawName, DataSourceType.Raw, outputNodeRefCounts);
  outputNodes[rawName] = raw;
  head = raw;
  if (isUnitModel(model)) {
    const agg = AggregateNode.makeFromEncoding(head, model);
    if (agg) {
      head = agg;
      if (requiresSelectionId(model)) {
        head = new IdentifierNode(head);
      }
    }
    head = (_g2 = ImputeNode.makeFromEncoding(head, model)) !== null && _g2 !== void 0 ? _g2 : head;
    head = (_h = StackNode.makeFromEncoding(head, model)) !== null && _h !== void 0 ? _h : head;
  }
  if (isUnitModel(model)) {
    head = (_j = FilterInvalidNode.make(head, model)) !== null && _j !== void 0 ? _j : head;
  }
  const mainName = model.getDataName(DataSourceType.Main);
  const main5 = new OutputNode(head, mainName, DataSourceType.Main, outputNodeRefCounts);
  outputNodes[mainName] = main5;
  head = main5;
  if (isUnitModel(model)) {
    materializeSelections(model, main5);
  }
  let facetRoot = null;
  if (isFacetModel(model)) {
    const facetName = model.getName("facet");
    head = (_k2 = makeJoinAggregateFromFacet(head, model.facet)) !== null && _k2 !== void 0 ? _k2 : head;
    facetRoot = new FacetNode(head, model, facetName, main5.getSource());
    outputNodes[facetName] = facetRoot;
  }
  return Object.assign(Object.assign({}, model.component.data), {
    outputNodes,
    outputNodeRefCounts,
    raw,
    main: main5,
    facetRoot,
    ancestorParse
  });
}

// node_modules/vega-lite/build/src/compile/concat.js
var ConcatModel = class extends Model {
  constructor(spec, parent, parentGivenName, config) {
    var _a, _b, _c2, _d2;
    super(spec, "concat", parent, parentGivenName, config, spec.resolve);
    if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === "shared" || ((_d2 = (_c2 = spec.resolve) === null || _c2 === void 0 ? void 0 : _c2.axis) === null || _d2 === void 0 ? void 0 : _d2.y) === "shared") {
      warn2(message_exports.CONCAT_CANNOT_SHARE_AXIS);
    }
    this.children = this.getChildren(spec).map((child, i) => {
      return buildModel(child, this, this.getName(`concat_${i}`), void 0, config);
    });
  }
  parseData() {
    this.component.data = parseData2(this);
    for (const child of this.children) {
      child.parseData();
    }
  }
  parseSelections() {
    this.component.selection = {};
    for (const child of this.children) {
      child.parseSelections();
      for (const key2 of keys3(child.component.selection)) {
        this.component.selection[key2] = child.component.selection[key2];
      }
    }
  }
  parseMarkGroup() {
    for (const child of this.children) {
      child.parseMarkGroup();
    }
  }
  parseAxesAndHeaders() {
    for (const child of this.children) {
      child.parseAxesAndHeaders();
    }
  }
  getChildren(spec) {
    if (isVConcatSpec(spec)) {
      return spec.vconcat;
    } else if (isHConcatSpec(spec)) {
      return spec.hconcat;
    }
    return spec.concat;
  }
  parseLayoutSize() {
    parseConcatLayoutSize(this);
  }
  parseAxisGroup() {
    return null;
  }
  assembleSelectionTopLevelSignals(signals) {
    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
  }
  assembleSignals() {
    this.children.forEach((child) => child.assembleSignals());
    return [];
  }
  assembleLayoutSignals() {
    const layoutSignals = assembleLayoutSignals(this);
    for (const child of this.children) {
      layoutSignals.push(...child.assembleLayoutSignals());
    }
    return layoutSignals;
  }
  assembleSelectionData(data3) {
    return this.children.reduce((db, child) => child.assembleSelectionData(db), data3);
  }
  assembleMarks() {
    return this.children.map((child) => {
      const title2 = child.assembleTitle();
      const style2 = child.assembleGroupStyle();
      const encodeEntry2 = child.assembleGroupEncodeEntry(false);
      return Object.assign(Object.assign(Object.assign(Object.assign({ type: "group", name: child.getName("group") }, title2 ? { title: title2 } : {}), style2 ? { style: style2 } : {}), encodeEntry2 ? { encode: { update: encodeEntry2 } } : {}), child.assembleGroup());
    });
  }
  assembleGroupStyle() {
    return void 0;
  }
  assembleDefaultLayout() {
    const columns = this.layout.columns;
    return Object.assign(Object.assign({}, columns != null ? { columns } : {}), {
      bounds: "full",
      align: "each"
    });
  }
};

// node_modules/vega-lite/build/src/compile/axis/component.js
function isFalseOrNull(v2) {
  return v2 === false || v2 === null;
}
var AXIS_COMPONENT_PROPERTIES_INDEX = Object.assign(Object.assign({ disable: 1, gridScale: 1, scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX), { labelExpr: 1, encode: 1 });
var AXIS_COMPONENT_PROPERTIES = keys3(AXIS_COMPONENT_PROPERTIES_INDEX);
var AxisComponent = class extends Split {
  constructor(explicit = {}, implicit2 = {}, mainExtracted = false) {
    super();
    this.explicit = explicit;
    this.implicit = implicit2;
    this.mainExtracted = mainExtracted;
  }
  clone() {
    return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);
  }
  hasAxisPart(part) {
    if (part === "axis") {
      return true;
    }
    if (part === "grid" || part === "title") {
      return !!this.get(part);
    }
    return !isFalseOrNull(this.get(part));
  }
  hasOrientSignalRef() {
    return isSignalRef(this.explicit.orient);
  }
};

// node_modules/vega-lite/build/src/compile/axis/encode.js
function labels2(model, channel, specifiedLabelsSpec) {
  var _a;
  const { encoding, config } = model;
  const fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);
  const axis = model.axis(channel) || {};
  const { format: format5, formatType } = axis;
  if (isCustomFormatType(formatType)) {
    return Object.assign({ text: formatCustomType({
      fieldOrDatumDef,
      field: "datum.value",
      format: format5,
      formatType,
      config
    }) }, specifiedLabelsSpec);
  } else if (format5 === void 0 && formatType === void 0 && config.customFormatTypes) {
    if (channelDefType(fieldOrDatumDef) === "quantitative") {
      if (isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === "normalize" && config.normalizedNumberFormatType) {
        return Object.assign({ text: formatCustomType({
          fieldOrDatumDef,
          field: "datum.value",
          format: config.normalizedNumberFormat,
          formatType: config.normalizedNumberFormatType,
          config
        }) }, specifiedLabelsSpec);
      } else if (config.numberFormatType) {
        return Object.assign({ text: formatCustomType({
          fieldOrDatumDef,
          field: "datum.value",
          format: config.numberFormat,
          formatType: config.numberFormatType,
          config
        }) }, specifiedLabelsSpec);
      }
    }
    if (channelDefType(fieldOrDatumDef) === "temporal" && config.timeFormatType && isFieldDef(fieldOrDatumDef) && !fieldOrDatumDef.timeUnit) {
      return Object.assign({ text: formatCustomType({
        fieldOrDatumDef,
        field: "datum.value",
        format: config.timeFormat,
        formatType: config.timeFormatType,
        config
      }) }, specifiedLabelsSpec);
    }
  }
  return specifiedLabelsSpec;
}

// node_modules/vega-lite/build/src/compile/axis/parse.js
function parseUnitAxes(model) {
  return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {
    if (model.component.scales[channel]) {
      axis[channel] = [parseAxis2(channel, model)];
    }
    return axis;
  }, {});
}
var OPPOSITE_ORIENT = {
  bottom: "top",
  top: "bottom",
  left: "right",
  right: "left"
};
function parseLayerAxes(model) {
  var _a;
  const { axes, resolve: resolve2 } = model.component;
  const axisCount = { top: 0, bottom: 0, right: 0, left: 0 };
  for (const child of model.children) {
    child.parseAxesAndHeaders();
    for (const channel of keys3(child.component.axes)) {
      resolve2.axis[channel] = parseGuideResolve(model.component.resolve, channel);
      if (resolve2.axis[channel] === "shared") {
        axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);
        if (!axes[channel]) {
          resolve2.axis[channel] = "independent";
          delete axes[channel];
        }
      }
    }
  }
  for (const channel of POSITION_SCALE_CHANNELS) {
    for (const child of model.children) {
      if (!child.component.axes[channel]) {
        continue;
      }
      if (resolve2.axis[channel] === "independent") {
        axes[channel] = ((_a = axes[channel]) !== null && _a !== void 0 ? _a : []).concat(child.component.axes[channel]);
        for (const axisComponent of child.component.axes[channel]) {
          const { value: orient2, explicit } = axisComponent.getWithExplicit("orient");
          if (isSignalRef(orient2)) {
            continue;
          }
          if (axisCount[orient2] > 0 && !explicit) {
            const oppositeOrient = OPPOSITE_ORIENT[orient2];
            if (axisCount[orient2] > axisCount[oppositeOrient]) {
              axisComponent.set("orient", oppositeOrient, false);
            }
          }
          axisCount[orient2]++;
        }
      }
      delete child.component.axes[channel];
    }
    if (resolve2.axis[channel] === "independent" && axes[channel] && axes[channel].length > 1) {
      for (const axisCmpt of axes[channel]) {
        if (!!axisCmpt.get("grid") && !axisCmpt.explicit.grid) {
          axisCmpt.implicit.grid = false;
        }
      }
    }
  }
}
function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
  if (mergedAxisCmpts) {
    if (mergedAxisCmpts.length !== childAxisCmpts.length) {
      return void 0;
    }
    const length2 = mergedAxisCmpts.length;
    for (let i = 0; i < length2; i++) {
      const merged = mergedAxisCmpts[i];
      const child = childAxisCmpts[i];
      if (!!merged !== !!child) {
        return void 0;
      } else if (merged && child) {
        const mergedOrient = merged.getWithExplicit("orient");
        const childOrient = child.getWithExplicit("orient");
        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
          return void 0;
        } else {
          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);
        }
      }
    }
  } else {
    return childAxisCmpts.map((axisComponent) => axisComponent.clone());
  }
  return mergedAxisCmpts;
}
function mergeAxisComponent(merged, child) {
  for (const prop of AXIS_COMPONENT_PROPERTIES) {
    const mergedValueWithExplicit = mergeValuesWithExplicit(
      merged.getWithExplicit(prop),
      child.getWithExplicit(prop),
      prop,
      "axis",
      (v1, v2) => {
        switch (prop) {
          case "title":
            return mergeTitleComponent(v1, v2);
          case "gridScale":
            return {
              explicit: v1.explicit,
              value: getFirstDefined(v1.value, v2.value)
            };
        }
        return defaultTieBreaker(v1, v2, prop, "axis");
      }
    );
    merged.setWithExplicit(prop, mergedValueWithExplicit);
  }
  return merged;
}
function isExplicit2(value3, property2, axis, model, channel) {
  if (property2 === "disable") {
    return axis !== void 0;
  }
  axis = axis || {};
  switch (property2) {
    case "titleAngle":
    case "labelAngle":
      return value3 === (isSignalRef(axis.labelAngle) ? axis.labelAngle : normalizeAngle(axis.labelAngle));
    case "values":
      return !!axis.values;
    case "encode":
      return !!axis.encoding || !!axis.labelAngle;
    case "title":
      if (value3 === getFieldDefTitle(model, channel)) {
        return true;
      }
  }
  return value3 === axis[property2];
}
var propsToAlwaysIncludeConfig = /* @__PURE__ */ new Set([
  "grid",
  "translate",
  "format",
  "formatType",
  "orient",
  "labelExpr",
  "tickCount",
  "position",
  "tickMinStep"
]);
function parseAxis2(channel, model) {
  var _a, _b, _c2;
  let axis = model.axis(channel);
  const axisComponent = new AxisComponent();
  const fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);
  const { mark: mark2, config } = model;
  const orient2 = (axis === null || axis === void 0 ? void 0 : axis.orient) || ((_a = config[channel === "x" ? "axisX" : "axisY"]) === null || _a === void 0 ? void 0 : _a.orient) || ((_b = config.axis) === null || _b === void 0 ? void 0 : _b.orient) || defaultOrient(channel);
  const scaleType2 = model.getScaleComponent(channel).get("type");
  const axisConfigs = getAxisConfigs(channel, scaleType2, orient2, model.config);
  const disable = axis !== void 0 ? !axis : getAxisConfig("disable", config.style, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs).configValue;
  axisComponent.set("disable", disable, axis !== void 0);
  if (disable) {
    return axisComponent;
  }
  axis = axis || {};
  const labelAngle = getLabelAngle(fieldOrDatumDef, axis, channel, config.style, axisConfigs);
  const ruleParams = {
    fieldOrDatumDef,
    axis,
    channel,
    model,
    scaleType: scaleType2,
    orient: orient2,
    labelAngle,
    mark: mark2,
    config
  };
  for (const property2 of AXIS_COMPONENT_PROPERTIES) {
    const value3 = property2 in axisRules ? axisRules[property2](ruleParams) : isAxisProperty(property2) ? axis[property2] : void 0;
    const hasValue = value3 !== void 0;
    const explicit = isExplicit2(value3, property2, axis, model, channel);
    if (hasValue && explicit) {
      axisComponent.set(property2, value3, explicit);
    } else {
      const { configValue = void 0, configFrom = void 0 } = isAxisProperty(property2) && property2 !== "values" ? getAxisConfig(property2, config.style, axis.style, axisConfigs) : {};
      const hasConfigValue = configValue !== void 0;
      if (hasValue && !hasConfigValue) {
        axisComponent.set(property2, value3, explicit);
      } else if (!(configFrom === "vgAxisConfig") || propsToAlwaysIncludeConfig.has(property2) && hasConfigValue || isConditionalAxisValue(configValue) || isSignalRef(configValue)) {
        axisComponent.set(property2, configValue, false);
      }
    }
  }
  const axisEncoding = (_c2 = axis.encoding) !== null && _c2 !== void 0 ? _c2 : {};
  const axisEncode = AXIS_PARTS.reduce((e3, part) => {
    var _a2;
    if (!axisComponent.hasAxisPart(part)) {
      return e3;
    }
    const axisEncodingPart = guideEncodeEntry((_a2 = axisEncoding[part]) !== null && _a2 !== void 0 ? _a2 : {}, model);
    const value3 = part === "labels" ? labels2(model, channel, axisEncodingPart) : axisEncodingPart;
    if (value3 !== void 0 && !isEmpty(value3)) {
      e3[part] = { update: value3 };
    }
    return e3;
  }, {});
  if (!isEmpty(axisEncode)) {
    axisComponent.set("encode", axisEncode, !!axis.encoding || axis.labelAngle !== void 0);
  }
  return axisComponent;
}

// node_modules/vega-lite/build/src/compile/layoutsize/init.js
function initLayoutSize({ encoding, size }) {
  for (const channel of POSITION_SCALE_CHANNELS) {
    const sizeType = getSizeChannel(channel);
    if (isStep(size[sizeType])) {
      if (isContinuousFieldOrDatumDef(encoding[channel])) {
        delete size[sizeType];
        warn2(message_exports.stepDropped(sizeType));
      }
    }
  }
  return size;
}

// node_modules/vega-lite/build/src/compile/mark/init.js
function initMarkdef(originalMarkDef, encoding, config) {
  const markDef = replaceExprRef(originalMarkDef);
  const specifiedOrient = getMarkPropOrConfig("orient", markDef, config);
  markDef.orient = orient(markDef.type, encoding, specifiedOrient);
  if (specifiedOrient !== void 0 && specifiedOrient !== markDef.orient) {
    warn2(message_exports.orientOverridden(markDef.orient, specifiedOrient));
  }
  if (markDef.type === "bar" && markDef.orient) {
    const cornerRadiusEnd = getMarkPropOrConfig("cornerRadiusEnd", markDef, config);
    if (cornerRadiusEnd !== void 0) {
      const newProps = markDef.orient === "horizontal" && encoding.x2 || markDef.orient === "vertical" && encoding.y2 ? ["cornerRadius"] : BAR_CORNER_RADIUS_INDEX[markDef.orient];
      for (const newProp of newProps) {
        markDef[newProp] = cornerRadiusEnd;
      }
      if (markDef.cornerRadiusEnd !== void 0) {
        delete markDef.cornerRadiusEnd;
      }
    }
  }
  const specifiedOpacity = getMarkPropOrConfig("opacity", markDef, config);
  if (specifiedOpacity === void 0) {
    markDef.opacity = opacity(markDef.type, encoding);
  }
  const specifiedCursor = getMarkPropOrConfig("cursor", markDef, config);
  if (specifiedCursor === void 0) {
    markDef.cursor = cursor2(markDef, encoding, config);
  }
  return markDef;
}
function cursor2(markDef, encoding, config) {
  if (encoding.href || markDef.href || getMarkPropOrConfig("href", markDef, config)) {
    return "pointer";
  }
  return markDef.cursor;
}
function opacity(mark2, encoding) {
  if (contains2([POINT, TICK, CIRCLE, SQUARE], mark2)) {
    if (!isAggregate(encoding)) {
      return 0.7;
    }
  }
  return void 0;
}
function defaultFilled(markDef, config, { graticule: graticule2 }) {
  if (graticule2) {
    return false;
  }
  const filledConfig = getMarkConfig("filled", markDef, config);
  const mark2 = markDef.type;
  return getFirstDefined(filledConfig, mark2 !== POINT && mark2 !== LINE && mark2 !== RULE);
}
function orient(mark2, encoding, specifiedOrient) {
  switch (mark2) {
    case POINT:
    case CIRCLE:
    case SQUARE:
    case TEXT2:
    case RECT:
    case IMAGE:
      return void 0;
  }
  const { x: x5, y: y5, x2: x22, y2: y22 } = encoding;
  switch (mark2) {
    case BAR:
      if (isFieldDef(x5) && (isBinned(x5.bin) || isFieldDef(y5) && y5.aggregate && !x5.aggregate)) {
        return "vertical";
      }
      if (isFieldDef(y5) && (isBinned(y5.bin) || isFieldDef(x5) && x5.aggregate && !y5.aggregate)) {
        return "horizontal";
      }
      if (y22 || x22) {
        if (specifiedOrient) {
          return specifiedOrient;
        }
        if (!x22) {
          if (isFieldDef(x5) && x5.type === QUANTITATIVE && !isBinning(x5.bin) || isNumericDataDef(x5)) {
            if (isFieldDef(y5) && isBinned(y5.bin)) {
              return "horizontal";
            }
          }
          return "vertical";
        }
        if (!y22) {
          if (isFieldDef(y5) && y5.type === QUANTITATIVE && !isBinning(y5.bin) || isNumericDataDef(y5)) {
            if (isFieldDef(x5) && isBinned(x5.bin)) {
              return "vertical";
            }
          }
          return "horizontal";
        }
      }
    case RULE:
      if (x22 && !(isFieldDef(x5) && isBinned(x5.bin)) && y22 && !(isFieldDef(y5) && isBinned(y5.bin))) {
        return void 0;
      }
    case AREA:
      if (y22) {
        if (isFieldDef(y5) && isBinned(y5.bin)) {
          return "horizontal";
        } else {
          return "vertical";
        }
      } else if (x22) {
        if (isFieldDef(x5) && isBinned(x5.bin)) {
          return "vertical";
        } else {
          return "horizontal";
        }
      } else if (mark2 === RULE) {
        if (x5 && !y5) {
          return "vertical";
        } else if (y5 && !x5) {
          return "horizontal";
        }
      }
    case LINE:
    case TICK: {
      const xIsContinuous = isContinuousFieldOrDatumDef(x5);
      const yIsContinuous = isContinuousFieldOrDatumDef(y5);
      if (specifiedOrient) {
        return specifiedOrient;
      } else if (xIsContinuous && !yIsContinuous) {
        return mark2 !== "tick" ? "horizontal" : "vertical";
      } else if (!xIsContinuous && yIsContinuous) {
        return mark2 !== "tick" ? "vertical" : "horizontal";
      } else if (xIsContinuous && yIsContinuous) {
        const xDef = x5;
        const yDef = y5;
        const xIsTemporal = xDef.type === TEMPORAL;
        const yIsTemporal = yDef.type === TEMPORAL;
        if (xIsTemporal && !yIsTemporal) {
          return mark2 !== "tick" ? "vertical" : "horizontal";
        } else if (!xIsTemporal && yIsTemporal) {
          return mark2 !== "tick" ? "horizontal" : "vertical";
        }
        if (!xDef.aggregate && yDef.aggregate) {
          return mark2 !== "tick" ? "vertical" : "horizontal";
        } else if (xDef.aggregate && !yDef.aggregate) {
          return mark2 !== "tick" ? "horizontal" : "vertical";
        }
        return "vertical";
      } else {
        return void 0;
      }
    }
  }
  return "vertical";
}

// node_modules/vega-lite/build/src/compile/mark/arc.js
var arc3 = {
  vgMark: "arc",
  encodeEntry: (model) => {
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      size: "ignore",
      orient: "ignore",
      theta: "ignore"
    })), pointPosition("x", model, { defaultPos: "mid" })), pointPosition("y", model, { defaultPos: "mid" })), rectPosition(model, "radius")), rectPosition(model, "theta"));
  }
};

// node_modules/vega-lite/build/src/compile/mark/area.js
var area3 = {
  vgMark: "area",
  encodeEntry: (model) => {
    return Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      orient: "include",
      size: "ignore",
      theta: "ignore"
    })), pointOrRangePosition("x", model, {
      defaultPos: "zeroOrMin",
      defaultPos2: "zeroOrMin",
      range: model.markDef.orient === "horizontal"
    })), pointOrRangePosition("y", model, {
      defaultPos: "zeroOrMin",
      defaultPos2: "zeroOrMin",
      range: model.markDef.orient === "vertical"
    })), defined(model));
  }
};

// node_modules/vega-lite/build/src/compile/mark/bar.js
var bar = {
  vgMark: "rect",
  encodeEntry: (model) => {
    return Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      orient: "ignore",
      size: "ignore",
      theta: "ignore"
    })), rectPosition(model, "x")), rectPosition(model, "y"));
  }
};

// node_modules/vega-lite/build/src/compile/mark/geoshape.js
var geoshape = {
  vgMark: "shape",
  encodeEntry: (model) => {
    return Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      size: "ignore",
      orient: "ignore",
      theta: "ignore"
    }));
  },
  postEncodingTransform: (model) => {
    const { encoding } = model;
    const shapeDef = encoding.shape;
    const transform4 = Object.assign({ type: "geoshape", projection: model.projectionName() }, shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? { field: vgField(shapeDef, { expr: "datum" }) } : {});
    return [transform4];
  }
};

// node_modules/vega-lite/build/src/compile/mark/image.js
var image2 = {
  vgMark: "image",
  encodeEntry: (model) => {
    return Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "ignore",
      orient: "ignore",
      size: "ignore",
      theta: "ignore"
    })), rectPosition(model, "x")), rectPosition(model, "y")), text2(model, "url"));
  }
};

// node_modules/vega-lite/build/src/compile/mark/line.js
var line3 = {
  vgMark: "line",
  encodeEntry: (model) => {
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      size: "ignore",
      orient: "ignore",
      theta: "ignore"
    })), pointPosition("x", model, { defaultPos: "mid" })), pointPosition("y", model, { defaultPos: "mid" })), nonPosition("size", model, {
      vgChannel: "strokeWidth"
    })), defined(model));
  }
};
var trail2 = {
  vgMark: "trail",
  encodeEntry: (model) => {
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      size: "include",
      orient: "ignore",
      theta: "ignore"
    })), pointPosition("x", model, { defaultPos: "mid" })), pointPosition("y", model, { defaultPos: "mid" })), nonPosition("size", model)), defined(model));
  }
};

// node_modules/vega-lite/build/src/compile/mark/point.js
function encodeEntry(model, fixedShape) {
  const { config } = model;
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
    align: "ignore",
    baseline: "ignore",
    color: "include",
    size: "include",
    orient: "ignore",
    theta: "ignore"
  })), pointPosition("x", model, { defaultPos: "mid" })), pointPosition("y", model, { defaultPos: "mid" })), nonPosition("size", model)), nonPosition("angle", model)), shapeMixins(model, config, fixedShape));
}
function shapeMixins(model, config, fixedShape) {
  if (fixedShape) {
    return { shape: { value: fixedShape } };
  }
  return nonPosition("shape", model);
}
var point9 = {
  vgMark: "symbol",
  encodeEntry: (model) => {
    return encodeEntry(model);
  }
};
var circle2 = {
  vgMark: "symbol",
  encodeEntry: (model) => {
    return encodeEntry(model, "circle");
  }
};
var square = {
  vgMark: "symbol",
  encodeEntry: (model) => {
    return encodeEntry(model, "square");
  }
};

// node_modules/vega-lite/build/src/compile/mark/rect.js
var rect2 = {
  vgMark: "rect",
  encodeEntry: (model) => {
    return Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      orient: "ignore",
      size: "ignore",
      theta: "ignore"
    })), rectPosition(model, "x")), rectPosition(model, "y"));
  }
};

// node_modules/vega-lite/build/src/compile/mark/rule.js
var rule3 = {
  vgMark: "rule",
  encodeEntry: (model) => {
    const { markDef } = model;
    const orient2 = markDef.orient;
    if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {
      return {};
    }
    return Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      orient: "ignore",
      size: "ignore",
      theta: "ignore"
    })), pointOrRangePosition("x", model, {
      defaultPos: orient2 === "horizontal" ? "zeroOrMax" : "mid",
      defaultPos2: "zeroOrMin",
      range: orient2 !== "vertical"
    })), pointOrRangePosition("y", model, {
      defaultPos: orient2 === "vertical" ? "zeroOrMax" : "mid",
      defaultPos2: "zeroOrMin",
      range: orient2 !== "horizontal"
    })), nonPosition("size", model, {
      vgChannel: "strokeWidth"
    }));
  }
};

// node_modules/vega-lite/build/src/compile/mark/text.js
var text3 = {
  vgMark: "text",
  encodeEntry: (model) => {
    const { config, encoding } = model;
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "include",
      baseline: "include",
      color: "include",
      size: "ignore",
      orient: "ignore",
      theta: "include"
    })), pointPosition("x", model, { defaultPos: "mid" })), pointPosition("y", model, { defaultPos: "mid" })), text2(model)), nonPosition("size", model, {
      vgChannel: "fontSize"
    })), nonPosition("angle", model)), valueIfDefined("align", align(model.markDef, encoding, config))), valueIfDefined("baseline", baseline2(model.markDef, encoding, config))), pointPosition("radius", model, { defaultPos: null })), pointPosition("theta", model, { defaultPos: null }));
  }
};
function align(markDef, encoding, config) {
  const a4 = getMarkPropOrConfig("align", markDef, config);
  if (a4 === void 0) {
    return "center";
  }
  return void 0;
}
function baseline2(markDef, encoding, config) {
  const b2 = getMarkPropOrConfig("baseline", markDef, config);
  if (b2 === void 0) {
    return "middle";
  }
  return void 0;
}

// node_modules/vega-lite/build/src/compile/mark/tick.js
var tick = {
  vgMark: "rect",
  encodeEntry: (model) => {
    const { config, markDef } = model;
    const orient2 = markDef.orient;
    const vgSizeChannel = orient2 === "horizontal" ? "width" : "height";
    const vgThicknessChannel = orient2 === "horizontal" ? "height" : "width";
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, baseEncodeEntry(model, {
      align: "ignore",
      baseline: "ignore",
      color: "include",
      orient: "ignore",
      size: "ignore",
      theta: "ignore"
    })), pointPosition("x", model, { defaultPos: "mid", vgChannel: "xc" })), pointPosition("y", model, { defaultPos: "mid", vgChannel: "yc" })), nonPosition("size", model, {
      defaultValue: defaultSize(model),
      vgChannel: vgSizeChannel
    })), { [vgThicknessChannel]: signalOrValueRef(getMarkPropOrConfig("thickness", markDef, config)) });
  }
};
function defaultSize(model) {
  var _a;
  const { config, markDef } = model;
  const { orient: orient2 } = markDef;
  const vgSizeChannel = orient2 === "horizontal" ? "width" : "height";
  const scale7 = model.getScaleComponent(orient2 === "horizontal" ? "x" : "y");
  const markPropOrConfig = (_a = getMarkPropOrConfig("size", markDef, config, { vgChannel: vgSizeChannel })) !== null && _a !== void 0 ? _a : config.tick.bandSize;
  if (markPropOrConfig !== void 0) {
    return markPropOrConfig;
  } else {
    const scaleRange = scale7 ? scale7.get("range") : void 0;
    if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {
      return scaleRange.step * 3 / 4;
    }
    const defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);
    return defaultViewStep * 3 / 4;
  }
}

// node_modules/vega-lite/build/src/compile/mark/mark.js
var markCompiler = {
  arc: arc3,
  area: area3,
  bar,
  circle: circle2,
  geoshape,
  image: image2,
  line: line3,
  point: point9,
  rect: rect2,
  rule: rule3,
  square,
  text: text3,
  tick,
  trail: trail2
};
function parseMarkGroups(model) {
  if (contains2([LINE, AREA, TRAIL], model.mark)) {
    const details = pathGroupingFields(model.mark, model.encoding);
    if (details.length > 0) {
      return getPathGroups(model, details);
    }
  } else if (model.mark === BAR) {
    const hasCornerRadius2 = VG_CORNERRADIUS_CHANNELS.some((prop) => getMarkPropOrConfig(prop, model.markDef, model.config));
    if (model.stack && !model.fieldDef("size") && hasCornerRadius2) {
      return getGroupsForStackedBarWithCornerRadius(model);
    }
  }
  return getMarkGroup(model);
}
var FACETED_PATH_PREFIX = "faceted_path_";
function getPathGroups(model, details) {
  return [
    {
      name: model.getName("pathgroup"),
      type: "group",
      from: {
        facet: {
          name: FACETED_PATH_PREFIX + model.requestDataName(DataSourceType.Main),
          data: model.requestDataName(DataSourceType.Main),
          groupby: details
        }
      },
      encode: {
        update: {
          width: { field: { group: "width" } },
          height: { field: { group: "height" } }
        }
      },
      marks: getMarkGroup(model, { fromPrefix: FACETED_PATH_PREFIX })
    }
  ];
}
var STACK_GROUP_PREFIX = "stack_group_";
function getGroupsForStackedBarWithCornerRadius(model) {
  var _a;
  const [mark2] = getMarkGroup(model, { fromPrefix: STACK_GROUP_PREFIX });
  const fieldScale = model.scaleName(model.stack.fieldChannel);
  const stackField = (opt = {}) => model.vgField(model.stack.fieldChannel, opt);
  const stackFieldGroup = (func, expr2) => {
    const vgFieldMinMax = [
      stackField({ prefix: "min", suffix: "start", expr: expr2 }),
      stackField({ prefix: "max", suffix: "start", expr: expr2 }),
      stackField({ prefix: "min", suffix: "end", expr: expr2 }),
      stackField({ prefix: "max", suffix: "end", expr: expr2 })
    ];
    return `${func}(${vgFieldMinMax.map((field3) => `scale('${fieldScale}',${field3})`).join(",")})`;
  };
  let groupUpdate;
  let innerGroupUpdate;
  if (model.stack.fieldChannel === "x") {
    groupUpdate = Object.assign(Object.assign({}, pick2(mark2.encode.update, ["y", "yc", "y2", "height", ...VG_CORNERRADIUS_CHANNELS])), { x: { signal: stackFieldGroup("min", "datum") }, x2: { signal: stackFieldGroup("max", "datum") }, clip: { value: true } });
    innerGroupUpdate = {
      x: { field: { group: "x" }, mult: -1 },
      height: { field: { group: "height" } }
    };
    mark2.encode.update = Object.assign(Object.assign({}, omit(mark2.encode.update, ["y", "yc", "y2"])), { height: { field: { group: "height" } } });
  } else {
    groupUpdate = Object.assign(Object.assign({}, pick2(mark2.encode.update, ["x", "xc", "x2", "width"])), { y: { signal: stackFieldGroup("min", "datum") }, y2: { signal: stackFieldGroup("max", "datum") }, clip: { value: true } });
    innerGroupUpdate = {
      y: { field: { group: "y" }, mult: -1 },
      width: { field: { group: "width" } }
    };
    mark2.encode.update = Object.assign(Object.assign({}, omit(mark2.encode.update, ["x", "xc", "x2"])), { width: { field: { group: "width" } } });
  }
  for (const key2 of VG_CORNERRADIUS_CHANNELS) {
    const configValue = getMarkConfig(key2, model.markDef, model.config);
    if (mark2.encode.update[key2]) {
      groupUpdate[key2] = mark2.encode.update[key2];
      delete mark2.encode.update[key2];
    } else if (configValue) {
      groupUpdate[key2] = signalOrValueRef(configValue);
    }
    if (configValue) {
      mark2.encode.update[key2] = { value: 0 };
    }
  }
  const groupby = [];
  if (((_a = model.stack.groupbyChannels) === null || _a === void 0 ? void 0 : _a.length) > 0) {
    for (const groupbyChannel of model.stack.groupbyChannels) {
      const groupByField = model.fieldDef(groupbyChannel);
      const field3 = vgField(groupByField);
      if (field3) {
        groupby.push(field3);
      }
      if ((groupByField === null || groupByField === void 0 ? void 0 : groupByField.bin) || (groupByField === null || groupByField === void 0 ? void 0 : groupByField.timeUnit)) {
        groupby.push(vgField(groupByField, { binSuffix: "end" }));
      }
    }
  }
  const strokeProperties = [
    "stroke",
    "strokeWidth",
    "strokeJoin",
    "strokeCap",
    "strokeDash",
    "strokeDashOffset",
    "strokeMiterLimit",
    "strokeOpacity"
  ];
  groupUpdate = strokeProperties.reduce((encode2, prop) => {
    if (mark2.encode.update[prop]) {
      return Object.assign(Object.assign({}, encode2), { [prop]: mark2.encode.update[prop] });
    } else {
      const configValue = getMarkConfig(prop, model.markDef, model.config);
      if (configValue !== void 0) {
        return Object.assign(Object.assign({}, encode2), { [prop]: signalOrValueRef(configValue) });
      } else {
        return encode2;
      }
    }
  }, groupUpdate);
  if (groupUpdate.stroke) {
    groupUpdate.strokeForeground = { value: true };
    groupUpdate.strokeOffset = { value: 0 };
  }
  return [
    {
      type: "group",
      from: {
        facet: {
          data: model.requestDataName(DataSourceType.Main),
          name: STACK_GROUP_PREFIX + model.requestDataName(DataSourceType.Main),
          groupby,
          aggregate: {
            fields: [
              stackField({ suffix: "start" }),
              stackField({ suffix: "start" }),
              stackField({ suffix: "end" }),
              stackField({ suffix: "end" })
            ],
            ops: ["min", "max", "min", "max"]
          }
        }
      },
      encode: {
        update: groupUpdate
      },
      marks: [
        {
          type: "group",
          encode: { update: innerGroupUpdate },
          marks: [mark2]
        }
      ]
    }
  ];
}
function getSort2(model) {
  var _a;
  const { encoding, stack: stack2, mark: mark2, markDef, config } = model;
  const order = encoding.order;
  if (!isArray(order) && isValueDef(order) && isNullOrFalse(order.value) || !order && isNullOrFalse(getMarkPropOrConfig("order", markDef, config))) {
    return void 0;
  } else if ((isArray(order) || isFieldDef(order)) && !stack2) {
    return sortParams(order, { expr: "datum" });
  } else if (isPathMark(mark2)) {
    const dimensionChannel = markDef.orient === "horizontal" ? "y" : "x";
    const dimensionChannelDef = encoding[dimensionChannel];
    if (isFieldDef(dimensionChannelDef)) {
      const s2 = dimensionChannelDef.sort;
      if (isArray(s2)) {
        return {
          field: vgField(dimensionChannelDef, { prefix: dimensionChannel, suffix: "sort_index", expr: "datum" })
        };
      } else if (isSortField(s2)) {
        return {
          field: vgField({
            aggregate: isAggregate(model.encoding) ? s2.op : void 0,
            field: s2.field
          }, { expr: "datum" })
        };
      } else if (isSortByEncoding(s2)) {
        const fieldDefToSort = model.fieldDef(s2.encoding);
        return {
          field: vgField(fieldDefToSort, { expr: "datum" }),
          order: s2.order
        };
      } else if (s2 === null) {
        return void 0;
      } else {
        return {
          field: vgField(dimensionChannelDef, {
            binSuffix: ((_a = model.stack) === null || _a === void 0 ? void 0 : _a.impute) ? "mid" : void 0,
            expr: "datum"
          })
        };
      }
    }
    return void 0;
  }
  return void 0;
}
function getMarkGroup(model, opt = { fromPrefix: "" }) {
  const { mark: mark2, markDef, encoding, config } = model;
  const clip3 = getFirstDefined(markDef.clip, scaleClip(model), projectionClip(model));
  const style2 = getStyles(markDef);
  const key2 = encoding.key;
  const sort4 = getSort2(model);
  const interactive2 = interactiveFlag(model);
  const aria2 = getMarkPropOrConfig("aria", markDef, config);
  const postEncodingTransform = markCompiler[mark2].postEncodingTransform ? markCompiler[mark2].postEncodingTransform(model) : null;
  return [
    Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: model.getName("marks"), type: markCompiler[mark2].vgMark }, clip3 ? { clip: true } : {}), style2 ? { style: style2 } : {}), key2 ? { key: key2.field } : {}), sort4 ? { sort: sort4 } : {}), interactive2 ? interactive2 : {}), aria2 === false ? { aria: aria2 } : {}), { from: { data: opt.fromPrefix + model.requestDataName(DataSourceType.Main) }, encode: {
      update: markCompiler[mark2].encodeEntry(model)
    } }), postEncodingTransform ? {
      transform: postEncodingTransform
    } : {})
  ];
}
function scaleClip(model) {
  const xScale = model.getScaleComponent("x");
  const yScale = model.getScaleComponent("y");
  return (xScale === null || xScale === void 0 ? void 0 : xScale.get("selectionExtent")) || (yScale === null || yScale === void 0 ? void 0 : yScale.get("selectionExtent")) ? true : void 0;
}
function projectionClip(model) {
  const projection3 = model.component.projection;
  return projection3 && !projection3.isFit ? true : void 0;
}
function interactiveFlag(model) {
  if (!model.component.selection)
    return null;
  const unitCount = keys3(model.component.selection).length;
  let parentCount = unitCount;
  let parent = model.parent;
  while (parent && parentCount === 0) {
    parentCount = keys3(parent.component.selection).length;
    parent = parent.parent;
  }
  return parentCount ? {
    interactive: unitCount > 0 || !!model.encoding.tooltip
  } : null;
}

// node_modules/vega-lite/build/src/compile/unit.js
var UnitModel = class extends ModelWithField {
  constructor(spec, parent, parentGivenName, parentGivenSize = {}, config) {
    var _a;
    super(spec, "unit", parent, parentGivenName, config, void 0, isFrameMixins(spec) ? spec.view : void 0);
    this.specifiedScales = {};
    this.specifiedAxes = {};
    this.specifiedLegends = {};
    this.specifiedProjection = {};
    this.selection = [];
    this.children = [];
    const markDef = isMarkDef(spec.mark) ? Object.assign({}, spec.mark) : { type: spec.mark };
    const mark2 = markDef.type;
    if (markDef.filled === void 0) {
      markDef.filled = defaultFilled(markDef, config, {
        graticule: spec.data && isGraticuleGenerator(spec.data)
      });
    }
    const encoding = this.encoding = initEncoding(spec.encoding || {}, mark2, markDef.filled, config);
    this.markDef = initMarkdef(markDef, encoding, config);
    this.size = initLayoutSize({
      encoding,
      size: isFrameMixins(spec) ? Object.assign(Object.assign(Object.assign({}, parentGivenSize), spec.width ? { width: spec.width } : {}), spec.height ? { height: spec.height } : {}) : parentGivenSize
    });
    this.stack = stack(mark2, encoding);
    this.specifiedScales = this.initScales(mark2, encoding);
    this.specifiedAxes = this.initAxes(encoding);
    this.specifiedLegends = this.initLegends(encoding);
    this.specifiedProjection = spec.projection;
    this.selection = ((_a = spec.params) !== null && _a !== void 0 ? _a : []).filter((p) => isSelectionParameter(p));
  }
  get hasProjection() {
    const { encoding } = this;
    const isGeoShapeMark = this.mark === GEOSHAPE;
    const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some((channel) => isFieldOrDatumDef(encoding[channel]));
    return isGeoShapeMark || hasGeoPosition;
  }
  scaleDomain(channel) {
    const scale7 = this.specifiedScales[channel];
    return scale7 ? scale7.domain : void 0;
  }
  axis(channel) {
    return this.specifiedAxes[channel];
  }
  legend(channel) {
    return this.specifiedLegends[channel];
  }
  initScales(mark2, encoding) {
    return SCALE_CHANNELS.reduce((scales2, channel) => {
      var _a;
      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
      if (fieldOrDatumDef) {
        scales2[channel] = this.initScale((_a = fieldOrDatumDef.scale) !== null && _a !== void 0 ? _a : {});
      }
      return scales2;
    }, {});
  }
  initScale(scale7) {
    const { domain: domain4, range: range8 } = scale7;
    const scaleInternal = replaceExprRef(scale7);
    if (isArray(domain4)) {
      scaleInternal.domain = domain4.map(signalRefOrValue);
    }
    if (isArray(range8)) {
      scaleInternal.range = range8.map(signalRefOrValue);
    }
    return scaleInternal;
  }
  initAxes(encoding) {
    return POSITION_SCALE_CHANNELS.reduce((_axis, channel) => {
      const channelDef = encoding[channel];
      if (isFieldOrDatumDef(channelDef) || channel === X3 && isFieldOrDatumDef(encoding.x2) || channel === Y3 && isFieldOrDatumDef(encoding.y2)) {
        const axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : void 0;
        _axis[channel] = axisSpec ? this.initAxis(Object.assign({}, axisSpec)) : axisSpec;
      }
      return _axis;
    }, {});
  }
  initAxis(axis) {
    const props = keys3(axis);
    const axisInternal = {};
    for (const prop of props) {
      const val = axis[prop];
      axisInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);
    }
    return axisInternal;
  }
  initLegends(encoding) {
    return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {
      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
      if (fieldOrDatumDef && supportLegend(channel)) {
        const legend = fieldOrDatumDef.legend;
        _legend[channel] = legend ? replaceExprRef(legend) : legend;
      }
      return _legend;
    }, {});
  }
  parseData() {
    this.component.data = parseData2(this);
  }
  parseLayoutSize() {
    parseUnitLayoutSize(this);
  }
  parseSelections() {
    this.component.selection = parseUnitSelection(this, this.selection);
  }
  parseMarkGroup() {
    this.component.mark = parseMarkGroups(this);
  }
  parseAxesAndHeaders() {
    this.component.axes = parseUnitAxes(this);
  }
  assembleSelectionTopLevelSignals(signals) {
    return assembleTopLevelSignals(this, signals);
  }
  assembleSignals() {
    return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];
  }
  assembleSelectionData(data3) {
    return assembleUnitSelectionData(this, data3);
  }
  assembleLayout() {
    return null;
  }
  assembleLayoutSignals() {
    return assembleLayoutSignals(this);
  }
  assembleMarks() {
    var _a;
    let marks = (_a = this.component.mark) !== null && _a !== void 0 ? _a : [];
    if (!this.parent || !isLayerModel(this.parent)) {
      marks = assembleUnitSelectionMarks(this, marks);
    }
    return marks.map(this.correctDataNames);
  }
  assembleGroupStyle() {
    const { style: style2 } = this.view || {};
    if (style2 !== void 0) {
      return style2;
    }
    if (this.encoding.x || this.encoding.y) {
      return "cell";
    } else {
      return void 0;
    }
  }
  getMapping() {
    return this.encoding;
  }
  get mark() {
    return this.markDef.type;
  }
  channelHasField(channel) {
    return channelHasField(this.encoding, channel);
  }
  fieldDef(channel) {
    const channelDef = this.encoding[channel];
    return getFieldDef(channelDef);
  }
  typedFieldDef(channel) {
    const fieldDef = this.fieldDef(channel);
    if (isTypedFieldDef(fieldDef)) {
      return fieldDef;
    }
    return null;
  }
};

// node_modules/vega-lite/build/src/compile/layer.js
var LayerModel = class extends Model {
  constructor(spec, parent, parentGivenName, parentGivenSize, config) {
    super(spec, "layer", parent, parentGivenName, config, spec.resolve, spec.view);
    const layoutSize = Object.assign(Object.assign(Object.assign({}, parentGivenSize), spec.width ? { width: spec.width } : {}), spec.height ? { height: spec.height } : {});
    this.children = spec.layer.map((layer, i) => {
      if (isLayerSpec(layer)) {
        return new LayerModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);
      } else if (isUnitSpec(layer)) {
        return new UnitModel(layer, this, this.getName(`layer_${i}`), layoutSize, config);
      }
      throw new Error(message_exports.invalidSpec(layer));
    });
  }
  parseData() {
    this.component.data = parseData2(this);
    for (const child of this.children) {
      child.parseData();
    }
  }
  parseLayoutSize() {
    parseLayerLayoutSize(this);
  }
  parseSelections() {
    this.component.selection = {};
    for (const child of this.children) {
      child.parseSelections();
      for (const key2 of keys3(child.component.selection)) {
        this.component.selection[key2] = child.component.selection[key2];
      }
    }
  }
  parseMarkGroup() {
    for (const child of this.children) {
      child.parseMarkGroup();
    }
  }
  parseAxesAndHeaders() {
    parseLayerAxes(this);
  }
  assembleSelectionTopLevelSignals(signals) {
    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
  }
  assembleSignals() {
    return this.children.reduce((signals, child) => {
      return signals.concat(child.assembleSignals());
    }, assembleAxisSignals(this));
  }
  assembleLayoutSignals() {
    return this.children.reduce((signals, child) => {
      return signals.concat(child.assembleLayoutSignals());
    }, assembleLayoutSignals(this));
  }
  assembleSelectionData(data3) {
    return this.children.reduce((db, child) => child.assembleSelectionData(db), data3);
  }
  assembleGroupStyle() {
    const uniqueStyles = /* @__PURE__ */ new Set();
    for (const child of this.children) {
      for (const style2 of array(child.assembleGroupStyle())) {
        uniqueStyles.add(style2);
      }
    }
    const styles = Array.from(uniqueStyles);
    return styles.length > 1 ? styles : styles.length === 1 ? styles[0] : void 0;
  }
  assembleTitle() {
    let title2 = super.assembleTitle();
    if (title2) {
      return title2;
    }
    for (const child of this.children) {
      title2 = child.assembleTitle();
      if (title2) {
        return title2;
      }
    }
    return void 0;
  }
  assembleLayout() {
    return null;
  }
  assembleMarks() {
    return assembleLayerSelectionMarks(this, this.children.flatMap((child) => {
      return child.assembleMarks();
    }));
  }
  assembleLegends() {
    return this.children.reduce((legends, child) => {
      return legends.concat(child.assembleLegends());
    }, assembleLegends(this));
  }
};

// node_modules/vega-lite/build/src/compile/buildmodel.js
function buildModel(spec, parent, parentGivenName, unitSize, config) {
  if (isFacetSpec(spec)) {
    return new FacetModel(spec, parent, parentGivenName, config);
  } else if (isLayerSpec(spec)) {
    return new LayerModel(spec, parent, parentGivenName, unitSize, config);
  } else if (isUnitSpec(spec)) {
    return new UnitModel(spec, parent, parentGivenName, unitSize, config);
  } else if (isAnyConcatSpec(spec)) {
    return new ConcatModel(spec, parent, parentGivenName, config);
  }
  throw new Error(message_exports.invalidSpec(spec));
}

// node_modules/vega-lite/build/src/compile/compile.js
var __rest32 = function(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
};
function compile(inputSpec, opt = {}) {
  if (opt.logger) {
    set6(opt.logger);
  }
  if (opt.fieldTitle) {
    setTitleFormatter(opt.fieldTitle);
  }
  try {
    const config = initConfig(mergeConfig(opt.config, inputSpec.config));
    const spec = normalize3(inputSpec, config);
    const model = buildModel(spec, null, "", void 0, config);
    model.parse();
    optimizeDataflow(model.component.data, model);
    const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);
    return {
      spec: vgSpec,
      normalized: spec
    };
  } finally {
    if (opt.logger) {
      reset2();
    }
    if (opt.fieldTitle) {
      resetTitleFormatter();
    }
  }
}
function getTopLevelProperties(inputSpec, autosize, config, model) {
  const width2 = model.component.layoutSize.get("width");
  const height2 = model.component.layoutSize.get("height");
  if (autosize === void 0) {
    autosize = { type: "pad" };
    if (model.hasAxisOrientSignalRef()) {
      autosize.resize = true;
    }
  } else if (isString(autosize)) {
    autosize = { type: autosize };
  }
  if (width2 && height2 && isFitType(autosize.type)) {
    if (width2 === "step" && height2 === "step") {
      warn2(message_exports.droppingFit());
      autosize.type = "pad";
    } else if (width2 === "step" || height2 === "step") {
      const sizeType = width2 === "step" ? "width" : "height";
      warn2(message_exports.droppingFit(getPositionScaleChannel(sizeType)));
      const inverseSizeType = sizeType === "width" ? "height" : "width";
      autosize.type = getFitType(inverseSizeType);
    }
  }
  return Object.assign(Object.assign(Object.assign({}, keys3(autosize).length === 1 && autosize.type ? autosize.type === "pad" ? {} : { autosize: autosize.type } : { autosize }), extractTopLevelProperties(config, false)), extractTopLevelProperties(inputSpec, true));
}
function assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {
  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : void 0;
  const data3 = [].concat(
    model.assembleSelectionData([]),
    assembleRootData(model.component.data, datasets)
  );
  const projections2 = model.assembleProjections();
  const title2 = model.assembleTitle();
  const style2 = model.assembleGroupStyle();
  const encodeEntry2 = model.assembleGroupEncodeEntry(true);
  let layoutSignals = model.assembleLayoutSignals();
  layoutSignals = layoutSignals.filter((signal) => {
    if ((signal.name === "width" || signal.name === "height") && signal.value !== void 0) {
      topLevelProperties[signal.name] = +signal.value;
      return false;
    }
    return true;
  });
  const { params: params2 } = topLevelProperties, otherTopLevelProps = __rest32(topLevelProperties, ["params"]);
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ $schema: "https://vega.github.io/schema/vega/v5.json" }, model.description ? { description: model.description } : {}), otherTopLevelProps), title2 ? { title: title2 } : {}), style2 ? { style: style2 } : {}), encodeEntry2 ? { encode: { update: encodeEntry2 } } : {}), { data: data3 }), projections2.length > 0 ? { projections: projections2 } : {}), model.assembleGroup([
    ...layoutSignals,
    ...model.assembleSelectionTopLevelSignals([]),
    ...assembleParameterSignals(params2)
  ])), vgConfig ? { config: vgConfig } : {}), usermeta ? { usermeta } : {});
}

// node_modules/vega-lite/build/src/index.js
var version2 = package_default.version;

// node_modules/vega-schema-url-parser/dist/parser.module.js
function e(e3) {
  const [n, r] = /schema\/([\w-]+)\/([\w\.\-]+)\.json$/g.exec(e3).slice(1, 3);
  return { library: n, version: r };
}
var parser_module_default = e;

// node_modules/vega-themes/build/vega-themes.module.js
var vega_themes_module_exports = {};
__export(vega_themes_module_exports, {
  dark: () => darkTheme,
  excel: () => excelTheme,
  fivethirtyeight: () => fiveThirtyEightTheme,
  ggplot2: () => ggplot2Theme,
  googlecharts: () => googlechartsTheme,
  latimes: () => latimesTheme,
  powerbi: () => powerbiTheme,
  quartz: () => quartzTheme,
  urbaninstitute: () => urbanInstituteTheme,
  version: () => version3,
  vox: () => voxTheme
});
var name = "vega-themes";
var version$1 = "2.10.0";
var description2 = "Themes for stylized Vega and Vega-Lite visualizations.";
var keywords2 = [
  "vega",
  "vega-lite",
  "themes",
  "style"
];
var license = "BSD-3-Clause";
var author = {
  name: "UW Interactive Data Lab",
  url: "https://idl.cs.washington.edu"
};
var contributors = [
  {
    name: "Emily Gu",
    url: "https://github.com/emilygu"
  },
  {
    name: "Arvind Satyanarayan",
    url: "http://arvindsatya.com"
  },
  {
    name: "Jeffrey Heer",
    url: "https://idl.cs.washington.edu"
  },
  {
    name: "Dominik Moritz",
    url: "https://www.domoritz.de"
  }
];
var main2 = "build/vega-themes.js";
var module = "build/vega-themes.module.js";
var unpkg = "build/vega-themes.min.js";
var jsdelivr = "build/vega-themes.min.js";
var types = "build/vega-themes.module.d.ts";
var repository = {
  type: "git",
  url: "https://github.com/vega/vega-themes.git"
};
var files = [
  "src",
  "build"
];
var scripts = {
  prebuild: "yarn clean",
  build: "rollup -c",
  clean: "rimraf build && rimraf examples/build",
  "copy:data": "rsync -r node_modules/vega-datasets/data/* examples/data",
  "copy:build": "rsync -r build/* examples/build",
  "deploy:gh": "yarn build && mkdir -p examples/build && rsync -r build/* examples/build && gh-pages -d examples",
  preversion: "yarn lint",
  serve: "browser-sync start -s -f build examples --serveStatic examples",
  start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
  prepare: "beemo create-config",
  eslintbase: "beemo eslint .",
  format: "yarn eslintbase --fix",
  lint: "yarn eslintbase",
  release: "auto shipit"
};
var devDependencies = {
  "@auto-it/conventional-commits": "^10.32.2",
  "@auto-it/first-time-contributor": "^10.32.2",
  "@rollup/plugin-json": "^4.1.0",
  "@rollup/plugin-node-resolve": "^13.0.6",
  "rollup-plugin-ts": "^1.4.7",
  auto: "^10.32.2",
  "browser-sync": "^2.27.7",
  concurrently: "^6.4.0",
  "gh-pages": "^3.2.3",
  rollup: "^2.60.0",
  "rollup-plugin-bundle-size": "^1.0.3",
  "rollup-plugin-terser": "^7.0.2",
  typescript: "^4.4.4",
  vega: "^5.19.1",
  "vega-lite": "^5.0.0",
  "vega-lite-dev-config": "^0.20.0"
};
var peerDependencies = {
  vega: "*",
  "vega-lite": "*"
};
var pkg = {
  name,
  version: version$1,
  description: description2,
  keywords: keywords2,
  license,
  author,
  contributors,
  main: main2,
  module,
  unpkg,
  jsdelivr,
  types,
  repository,
  files,
  scripts,
  devDependencies,
  peerDependencies
};
var lightColor = "#fff";
var medColor = "#888";
var darkTheme = {
  background: "#333",
  title: {
    color: lightColor,
    subtitleColor: lightColor
  },
  style: {
    "guide-label": {
      fill: lightColor
    },
    "guide-title": {
      fill: lightColor
    }
  },
  axis: {
    domainColor: lightColor,
    gridColor: medColor,
    tickColor: lightColor
  }
};
var markColor$7 = "#4572a7";
var excelTheme = {
  background: "#fff",
  arc: { fill: markColor$7 },
  area: { fill: markColor$7 },
  line: { stroke: markColor$7, strokeWidth: 2 },
  path: { stroke: markColor$7 },
  rect: { fill: markColor$7 },
  shape: { stroke: markColor$7 },
  symbol: { fill: markColor$7, strokeWidth: 1.5, size: 50 },
  axis: {
    bandPosition: 0.5,
    grid: true,
    gridColor: "#000000",
    gridOpacity: 1,
    gridWidth: 0.5,
    labelPadding: 10,
    tickSize: 5,
    tickWidth: 0.5
  },
  axisBand: {
    grid: false,
    tickExtra: true
  },
  legend: {
    labelBaseline: "middle",
    labelFontSize: 11,
    symbolSize: 50,
    symbolType: "square"
  },
  range: {
    category: [
      "#4572a7",
      "#aa4643",
      "#8aa453",
      "#71598e",
      "#4598ae",
      "#d98445",
      "#94aace",
      "#d09393",
      "#b9cc98",
      "#a99cbc"
    ]
  }
};
var markColor$6 = "#30a2da";
var axisColor$2 = "#cbcbcb";
var guideLabelColor = "#999";
var guideTitleColor = "#333";
var backgroundColor$2 = "#f0f0f0";
var blackTitle = "#333";
var fiveThirtyEightTheme = {
  arc: { fill: markColor$6 },
  area: { fill: markColor$6 },
  axis: {
    domainColor: axisColor$2,
    grid: true,
    gridColor: axisColor$2,
    gridWidth: 1,
    labelColor: guideLabelColor,
    labelFontSize: 10,
    titleColor: guideTitleColor,
    tickColor: axisColor$2,
    tickSize: 10,
    titleFontSize: 14,
    titlePadding: 10,
    labelPadding: 4
  },
  axisBand: {
    grid: false
  },
  background: backgroundColor$2,
  group: {
    fill: backgroundColor$2
  },
  legend: {
    labelColor: blackTitle,
    labelFontSize: 11,
    padding: 1,
    symbolSize: 30,
    symbolType: "square",
    titleColor: blackTitle,
    titleFontSize: 14,
    titlePadding: 10
  },
  line: {
    stroke: markColor$6,
    strokeWidth: 2
  },
  path: { stroke: markColor$6, strokeWidth: 0.5 },
  rect: { fill: markColor$6 },
  range: {
    category: [
      "#30a2da",
      "#fc4f30",
      "#e5ae38",
      "#6d904f",
      "#8b8b8b",
      "#b96db8",
      "#ff9e27",
      "#56cc60",
      "#52d2ca",
      "#52689e",
      "#545454",
      "#9fe4f8"
    ],
    diverging: ["#cc0020", "#e77866", "#f6e7e1", "#d6e8ed", "#91bfd9", "#1d78b5"],
    heatmap: ["#d6e8ed", "#cee0e5", "#91bfd9", "#549cc6", "#1d78b5"]
  },
  point: {
    filled: true,
    shape: "circle"
  },
  shape: { stroke: markColor$6 },
  bar: {
    binSpacing: 2,
    fill: markColor$6,
    stroke: null
  },
  title: {
    anchor: "start",
    fontSize: 24,
    fontWeight: 600,
    offset: 20
  }
};
var markColor$5 = "#000";
var ggplot2Theme = {
  group: {
    fill: "#e5e5e5"
  },
  arc: { fill: markColor$5 },
  area: { fill: markColor$5 },
  line: { stroke: markColor$5 },
  path: { stroke: markColor$5 },
  rect: { fill: markColor$5 },
  shape: { stroke: markColor$5 },
  symbol: { fill: markColor$5, size: 40 },
  axis: {
    domain: false,
    grid: true,
    gridColor: "#FFFFFF",
    gridOpacity: 1,
    labelColor: "#7F7F7F",
    labelPadding: 4,
    tickColor: "#7F7F7F",
    tickSize: 5.67,
    titleFontSize: 16,
    titleFontWeight: "normal"
  },
  legend: {
    labelBaseline: "middle",
    labelFontSize: 11,
    symbolSize: 40
  },
  range: {
    category: [
      "#000000",
      "#7F7F7F",
      "#1A1A1A",
      "#999999",
      "#333333",
      "#B0B0B0",
      "#4D4D4D",
      "#C9C9C9",
      "#666666",
      "#DCDCDC"
    ]
  }
};
var headlineFontSize = 22;
var headlineFontWeight = "normal";
var labelFont$1 = "Benton Gothic, sans-serif";
var labelFontSize = 11.5;
var labelFontWeight = "normal";
var markColor$4 = "#82c6df";
var titleFont = "Benton Gothic Bold, sans-serif";
var titleFontWeight = "normal";
var titleFontSize$1 = 13;
var colorSchemes$1 = {
  "category-6": ["#ec8431", "#829eb1", "#c89d29", "#3580b1", "#adc839", "#ab7fb4"],
  "fire-7": ["#fbf2c7", "#f9e39c", "#f8d36e", "#f4bb6a", "#e68a4f", "#d15a40", "#ab4232"],
  "fireandice-6": ["#e68a4f", "#f4bb6a", "#f9e39c", "#dadfe2", "#a6b7c6", "#849eae"],
  "ice-7": ["#edefee", "#dadfe2", "#c4ccd2", "#a6b7c6", "#849eae", "#607785", "#47525d"]
};
var latimesTheme = {
  background: "#ffffff",
  title: {
    anchor: "start",
    color: "#000000",
    font: titleFont,
    fontSize: headlineFontSize,
    fontWeight: headlineFontWeight
  },
  arc: { fill: markColor$4 },
  area: { fill: markColor$4 },
  line: { stroke: markColor$4, strokeWidth: 2 },
  path: { stroke: markColor$4 },
  rect: { fill: markColor$4 },
  shape: { stroke: markColor$4 },
  symbol: { fill: markColor$4, size: 30 },
  axis: {
    labelFont: labelFont$1,
    labelFontSize,
    labelFontWeight,
    titleFont,
    titleFontSize: titleFontSize$1,
    titleFontWeight
  },
  axisX: {
    labelAngle: 0,
    labelPadding: 4,
    tickSize: 3
  },
  axisY: {
    labelBaseline: "middle",
    maxExtent: 45,
    minExtent: 45,
    tickSize: 2,
    titleAlign: "left",
    titleAngle: 0,
    titleX: -45,
    titleY: -11
  },
  legend: {
    labelFont: labelFont$1,
    labelFontSize,
    symbolType: "square",
    titleFont,
    titleFontSize: titleFontSize$1,
    titleFontWeight
  },
  range: {
    category: colorSchemes$1["category-6"],
    diverging: colorSchemes$1["fireandice-6"],
    heatmap: colorSchemes$1["fire-7"],
    ordinal: colorSchemes$1["fire-7"],
    ramp: colorSchemes$1["fire-7"]
  }
};
var markColor$3 = "#ab5787";
var axisColor$1 = "#979797";
var quartzTheme = {
  background: "#f9f9f9",
  arc: { fill: markColor$3 },
  area: { fill: markColor$3 },
  line: { stroke: markColor$3 },
  path: { stroke: markColor$3 },
  rect: { fill: markColor$3 },
  shape: { stroke: markColor$3 },
  symbol: { fill: markColor$3, size: 30 },
  axis: {
    domainColor: axisColor$1,
    domainWidth: 0.5,
    gridWidth: 0.2,
    labelColor: axisColor$1,
    tickColor: axisColor$1,
    tickWidth: 0.2,
    titleColor: axisColor$1
  },
  axisBand: {
    grid: false
  },
  axisX: {
    grid: true,
    tickSize: 10
  },
  axisY: {
    domain: false,
    grid: true,
    tickSize: 0
  },
  legend: {
    labelFontSize: 11,
    padding: 1,
    symbolSize: 30,
    symbolType: "square"
  },
  range: {
    category: [
      "#ab5787",
      "#51b2e5",
      "#703c5c",
      "#168dd9",
      "#d190b6",
      "#00609f",
      "#d365ba",
      "#154866",
      "#666666",
      "#c4c4c4"
    ]
  }
};
var markColor$2 = "#3e5c69";
var voxTheme = {
  background: "#fff",
  arc: { fill: markColor$2 },
  area: { fill: markColor$2 },
  line: { stroke: markColor$2 },
  path: { stroke: markColor$2 },
  rect: { fill: markColor$2 },
  shape: { stroke: markColor$2 },
  symbol: { fill: markColor$2 },
  axis: {
    domainWidth: 0.5,
    grid: true,
    labelPadding: 2,
    tickSize: 5,
    tickWidth: 0.5,
    titleFontWeight: "normal"
  },
  axisBand: {
    grid: false
  },
  axisX: {
    gridWidth: 0.2
  },
  axisY: {
    gridDash: [3],
    gridWidth: 0.4
  },
  legend: {
    labelFontSize: 11,
    padding: 1,
    symbolType: "square"
  },
  range: {
    category: ["#3e5c69", "#6793a6", "#182429", "#0570b0", "#3690c0", "#74a9cf", "#a6bddb", "#e2ddf2"]
  }
};
var markColor$1 = "#1696d2";
var axisColor = "#000000";
var backgroundColor$1 = "#FFFFFF";
var font2 = "Lato";
var labelFont = "Lato";
var sourceFont = "Lato";
var gridColor$1 = "#DEDDDD";
var titleFontSize = 18;
var colorSchemes = {
  "main-colors": ["#1696d2", "#d2d2d2", "#000000", "#fdbf11", "#ec008b", "#55b748", "#5c5859", "#db2b27"],
  "shades-blue": ["#CFE8F3", "#A2D4EC", "#73BFE2", "#46ABDB", "#1696D2", "#12719E", "#0A4C6A", "#062635"],
  "shades-gray": ["#F5F5F5", "#ECECEC", "#E3E3E3", "#DCDBDB", "#D2D2D2", "#9D9D9D", "#696969", "#353535"],
  "shades-yellow": ["#FFF2CF", "#FCE39E", "#FDD870", "#FCCB41", "#FDBF11", "#E88E2D", "#CA5800", "#843215"],
  "shades-magenta": ["#F5CBDF", "#EB99C2", "#E46AA7", "#E54096", "#EC008B", "#AF1F6B", "#761548", "#351123"],
  "shades-green": ["#DCEDD9", "#BCDEB4", "#98CF90", "#78C26D", "#55B748", "#408941", "#2C5C2D", "#1A2E19"],
  "shades-black": ["#D5D5D4", "#ADABAC", "#848081", "#5C5859", "#332D2F", "#262223", "#1A1717", "#0E0C0D"],
  "shades-red": ["#F8D5D4", "#F1AAA9", "#E9807D", "#E25552", "#DB2B27", "#A4201D", "#6E1614", "#370B0A"],
  "one-group": ["#1696d2", "#000000"],
  "two-groups-cat-1": ["#1696d2", "#000000"],
  "two-groups-cat-2": ["#1696d2", "#fdbf11"],
  "two-groups-cat-3": ["#1696d2", "#db2b27"],
  "two-groups-seq": ["#a2d4ec", "#1696d2"],
  "three-groups-cat": ["#1696d2", "#fdbf11", "#000000"],
  "three-groups-seq": ["#a2d4ec", "#1696d2", "#0a4c6a"],
  "four-groups-cat-1": ["#000000", "#d2d2d2", "#fdbf11", "#1696d2"],
  "four-groups-cat-2": ["#1696d2", "#ec0008b", "#fdbf11", "#5c5859"],
  "four-groups-seq": ["#cfe8f3", "#73bf42", "#1696d2", "#0a4c6a"],
  "five-groups-cat-1": ["#1696d2", "#fdbf11", "#d2d2d2", "#ec008b", "#000000"],
  "five-groups-cat-2": ["#1696d2", "#0a4c6a", "#d2d2d2", "#fdbf11", "#332d2f"],
  "five-groups-seq": ["#cfe8f3", "#73bf42", "#1696d2", "#0a4c6a", "#000000"],
  "six-groups-cat-1": ["#1696d2", "#ec008b", "#fdbf11", "#000000", "#d2d2d2", "#55b748"],
  "six-groups-cat-2": ["#1696d2", "#d2d2d2", "#ec008b", "#fdbf11", "#332d2f", "#0a4c6a"],
  "six-groups-seq": ["#cfe8f3", "#a2d4ec", "#73bfe2", "#46abdb", "#1696d2", "#12719e"],
  "diverging-colors": ["#ca5800", "#fdbf11", "#fdd870", "#fff2cf", "#cfe8f3", "#73bfe2", "#1696d2", "#0a4c6a"]
};
var urbanInstituteTheme = {
  background: backgroundColor$1,
  title: {
    anchor: "start",
    fontSize: titleFontSize,
    font: font2
  },
  axisX: {
    domain: true,
    domainColor: axisColor,
    domainWidth: 1,
    grid: false,
    labelFontSize: 12,
    labelFont,
    labelAngle: 0,
    tickColor: axisColor,
    tickSize: 5,
    titleFontSize: 12,
    titlePadding: 10,
    titleFont: font2
  },
  axisY: {
    domain: false,
    domainWidth: 1,
    grid: true,
    gridColor: gridColor$1,
    gridWidth: 1,
    labelFontSize: 12,
    labelFont,
    labelPadding: 8,
    ticks: false,
    titleFontSize: 12,
    titlePadding: 10,
    titleFont: font2,
    titleAngle: 0,
    titleY: -10,
    titleX: 18
  },
  legend: {
    labelFontSize: 12,
    labelFont,
    symbolSize: 100,
    titleFontSize: 12,
    titlePadding: 10,
    titleFont: font2,
    orient: "right",
    offset: 10
  },
  view: {
    stroke: "transparent"
  },
  range: {
    category: colorSchemes["six-groups-cat-1"],
    diverging: colorSchemes["diverging-colors"],
    heatmap: colorSchemes["diverging-colors"],
    ordinal: colorSchemes["six-groups-seq"],
    ramp: colorSchemes["shades-blue"]
  },
  area: {
    fill: markColor$1
  },
  rect: {
    fill: markColor$1
  },
  line: {
    color: markColor$1,
    stroke: markColor$1,
    strokeWidth: 5
  },
  trail: {
    color: markColor$1,
    stroke: markColor$1,
    strokeWidth: 0,
    size: 1
  },
  path: {
    stroke: markColor$1,
    strokeWidth: 0.5
  },
  point: {
    filled: true
  },
  text: {
    font: sourceFont,
    color: markColor$1,
    fontSize: 11,
    align: "center",
    fontWeight: 400,
    size: 11
  },
  style: {
    bar: {
      fill: markColor$1,
      stroke: null
    }
  },
  arc: { fill: markColor$1 },
  shape: { stroke: markColor$1 },
  symbol: { fill: markColor$1, size: 30 }
};
var markColor = "#3366CC";
var gridColor = "#ccc";
var defaultFont = "Arial, sans-serif";
var googlechartsTheme = {
  arc: { fill: markColor },
  area: { fill: markColor },
  path: { stroke: markColor },
  rect: { fill: markColor },
  shape: { stroke: markColor },
  symbol: { stroke: markColor },
  circle: { fill: markColor },
  background: "#fff",
  padding: {
    top: 10,
    right: 10,
    bottom: 10,
    left: 10
  },
  style: {
    "guide-label": {
      font: defaultFont,
      fontSize: 12
    },
    "guide-title": {
      font: defaultFont,
      fontSize: 12
    },
    "group-title": {
      font: defaultFont,
      fontSize: 12
    }
  },
  title: {
    font: defaultFont,
    fontSize: 14,
    fontWeight: "bold",
    dy: -3,
    anchor: "start"
  },
  axis: {
    gridColor,
    tickColor: gridColor,
    domain: false,
    grid: true
  },
  range: {
    category: [
      "#4285F4",
      "#DB4437",
      "#F4B400",
      "#0F9D58",
      "#AB47BC",
      "#00ACC1",
      "#FF7043",
      "#9E9D24",
      "#5C6BC0",
      "#F06292",
      "#00796B",
      "#C2185B"
    ],
    heatmap: ["#c6dafc", "#5e97f6", "#2a56c6"]
  }
};
var ptToPx = (value3) => value3 * (1 / 3 + 1);
var fontSmallPx = ptToPx(9);
var legendFontPx = ptToPx(10);
var fontLargePx = ptToPx(12);
var fontStandard = "Segoe UI";
var fontTitle = "wf_standard-font, helvetica, arial, sans-serif";
var firstLevelElementColor = "#252423";
var secondLevelElementColor = "#605E5C";
var backgroundColor = "transparent";
var backgroundSecondaryColor = "#C8C6C4";
var paletteColor1 = "#118DFF";
var paletteColor2 = "#12239E";
var paletteColor3 = "#E66C37";
var paletteColor4 = "#6B007B";
var paletteColor5 = "#E044A7";
var paletteColor6 = "#744EC2";
var paletteColor7 = "#D9B300";
var paletteColor8 = "#D64550";
var divergentColorMax = paletteColor1;
var divergentColorMin = "#DEEFFF";
var divergentPalette = [divergentColorMin, divergentColorMax];
var ordinalPalette = [
  divergentColorMin,
  "#c7e4ff",
  "#b0d9ff",
  "#9aceff",
  "#83c3ff",
  "#6cb9ff",
  "#55aeff",
  "#3fa3ff",
  "#2898ff",
  divergentColorMax
];
var powerbiTheme = {
  view: { stroke: backgroundColor },
  background: backgroundColor,
  font: fontStandard,
  header: {
    titleFont: fontTitle,
    titleFontSize: fontLargePx,
    titleColor: firstLevelElementColor,
    labelFont: fontStandard,
    labelFontSize: legendFontPx,
    labelColor: secondLevelElementColor
  },
  axis: {
    ticks: false,
    grid: false,
    domain: false,
    labelColor: secondLevelElementColor,
    labelFontSize: fontSmallPx,
    titleFont: fontTitle,
    titleColor: firstLevelElementColor,
    titleFontSize: fontLargePx,
    titleFontWeight: "normal"
  },
  axisQuantitative: {
    tickCount: 3,
    grid: true,
    gridColor: backgroundSecondaryColor,
    gridDash: [1, 5],
    labelFlush: false
  },
  axisBand: { tickExtra: true },
  axisX: { labelPadding: 5 },
  axisY: { labelPadding: 10 },
  bar: { fill: paletteColor1 },
  line: {
    stroke: paletteColor1,
    strokeWidth: 3,
    strokeCap: "round",
    strokeJoin: "round"
  },
  text: { font: fontStandard, fontSize: fontSmallPx, fill: secondLevelElementColor },
  arc: { fill: paletteColor1 },
  area: { fill: paletteColor1, line: true, opacity: 0.6 },
  path: { stroke: paletteColor1 },
  rect: { fill: paletteColor1 },
  point: { fill: paletteColor1, filled: true, size: 75 },
  shape: { stroke: paletteColor1 },
  symbol: { fill: paletteColor1, strokeWidth: 1.5, size: 50 },
  legend: {
    titleFont: fontStandard,
    titleFontWeight: "bold",
    titleColor: secondLevelElementColor,
    labelFont: fontStandard,
    labelFontSize: legendFontPx,
    labelColor: secondLevelElementColor,
    symbolType: "circle",
    symbolSize: 75
  },
  range: {
    category: [
      paletteColor1,
      paletteColor2,
      paletteColor3,
      paletteColor4,
      paletteColor5,
      paletteColor6,
      paletteColor7,
      paletteColor8
    ],
    diverging: divergentPalette,
    heatmap: divergentPalette,
    ordinal: ordinalPalette
  }
};
var version3 = pkg.version;

// node_modules/vega-tooltip/build/vega-tooltip.module.js
var name2 = "vega-tooltip";
var version$12 = "0.28.0";
var description3 = "A tooltip plugin for Vega-Lite and Vega visualizations.";
var keywords3 = [
  "vega-lite",
  "vega",
  "tooltip"
];
var repository2 = {
  type: "git",
  url: "https://github.com/vega/vega-tooltip.git"
};
var author2 = {
  name: "UW Interactive Data Lab",
  url: "https://idl.cs.washington.edu"
};
var collaborators = [
  "Dominik Moritz",
  "Sira Horradarn",
  "Zening Qu",
  "Kanit Wongsuphasawat",
  "Yuri Astrakhan",
  "Jeffrey Heer"
];
var license2 = "BSD-3-Clause";
var bugs = {
  url: "https://github.com/vega/vega-tooltip/issues"
};
var homepage = "https://github.com/vega/vega-tooltip#readme";
var main3 = "build/vega-tooltip.js";
var module2 = "build/vega-tooltip.module.js";
var unpkg2 = "build/vega-tooltip.min.js";
var jsdelivr2 = "build/vega-tooltip.min.js";
var types2 = "build/vega-tooltip.module.d.ts";
var files2 = [
  "src",
  "build",
  "types"
];
var scripts2 = {
  prebuild: "yarn clean && yarn build:style",
  build: "rollup -c",
  "build:style": "./build-style.sh",
  clean: "rimraf build && rimraf src/style.ts",
  "copy:data": "rsync -r node_modules/vega-datasets/data/* examples/data",
  "copy:build": "rsync -r build/* examples/build",
  "deploy:gh": "yarn build && yarn copy:build && gh-pages -d examples && yarn clean",
  prepublishOnly: "yarn clean && yarn build",
  preversion: "yarn lint && yarn test",
  serve: "browser-sync start -s -f build examples --serveStatic examples",
  start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
  pretest: "yarn build:style",
  test: "beemo jest",
  "test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand",
  prepare: "beemo create-config && yarn copy:data",
  prettierbase: "beemo prettier '*.{css,scss,html}'",
  eslintbase: "beemo eslint .",
  format: "yarn eslintbase --fix && yarn prettierbase --write",
  lint: "yarn eslintbase && yarn prettierbase --check",
  release: "yarn run prebuild && yarn build && auto shipit"
};
var devDependencies2 = {
  "@auto-it/conventional-commits": "^10.32.3",
  "@auto-it/first-time-contributor": "^10.32.3",
  "@rollup/plugin-json": "^4.1.0",
  "@rollup/plugin-node-resolve": "^13.0.6",
  "rollup-plugin-ts": "^2.0.4",
  auto: "^10.32.3",
  "browser-sync": "^2.27.7",
  concurrently: "^6.4.0",
  "gh-pages": "^3.2.3",
  sass: "^1.44.0",
  path: "^0.12.7",
  rollup: "^2.60.2",
  "rollup-plugin-bundle-size": "^1.0.3",
  "rollup-plugin-terser": "^7.0.2",
  typescript: "~4.5.2",
  "vega-datasets": "^2.2.0",
  "vega-lite-dev-config": "^0.20.0",
  "vega-typings": "^0.22.1"
};
var dependencies = {
  "vega-util": "^1.17.0"
};
var pkg2 = {
  name: name2,
  version: version$12,
  description: description3,
  keywords: keywords3,
  repository: repository2,
  author: author2,
  collaborators,
  license: license2,
  bugs,
  homepage,
  main: main3,
  module: module2,
  unpkg: unpkg2,
  jsdelivr: jsdelivr2,
  types: types2,
  files: files2,
  scripts: scripts2,
  devDependencies: devDependencies2,
  dependencies
};
function __rest33(s2, e3) {
  var t4 = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e3.indexOf(p) < 0)
      t4[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e3.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t4[p[i]] = s2[p[i]];
    }
  return t4;
}
function formatValue3(value3, valueToHtml, maxDepth2) {
  if (isArray(value3)) {
    return `[${value3.map((v2) => valueToHtml(isString(v2) ? v2 : stringify2(v2, maxDepth2))).join(", ")}]`;
  }
  if (isObject(value3)) {
    let content2 = "";
    const _a = value3, { title: title2, image: image3 } = _a, rest = __rest33(_a, ["title", "image"]);
    if (title2) {
      content2 += `<h2>${valueToHtml(title2)}</h2>`;
    }
    if (image3) {
      content2 += `<img src="${valueToHtml(image3)}">`;
    }
    const keys5 = Object.keys(rest);
    if (keys5.length > 0) {
      content2 += "<table>";
      for (const key2 of keys5) {
        let val = rest[key2];
        if (val === void 0) {
          continue;
        }
        if (isObject(val)) {
          val = stringify2(val, maxDepth2);
        }
        content2 += `<tr><td class="key">${valueToHtml(key2)}:</td><td class="value">${valueToHtml(val)}</td></tr>`;
      }
      content2 += `</table>`;
    }
    return content2 || "{}";
  }
  return valueToHtml(value3);
}
function replacer(maxDepth2) {
  const stack2 = [];
  return function(key2, value3) {
    if (typeof value3 !== "object" || value3 === null) {
      return value3;
    }
    const pos = stack2.indexOf(this) + 1;
    stack2.length = pos;
    if (stack2.length > maxDepth2) {
      return "[Object]";
    }
    if (stack2.indexOf(value3) >= 0) {
      return "[Circular]";
    }
    stack2.push(value3);
    return value3;
  };
}
function stringify2(obj, maxDepth2) {
  return JSON.stringify(obj, replacer(maxDepth2));
}
var defaultStyle = `#vg-tooltip-element {
  visibility: hidden;
  padding: 8px;
  position: fixed;
  z-index: 1000;
  font-family: sans-serif;
  font-size: 11px;
  border-radius: 3px;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  /* The default theme is the light theme. */
  background-color: rgba(255, 255, 255, 0.95);
  border: 1px solid #d9d9d9;
  color: black;
}
#vg-tooltip-element.visible {
  visibility: visible;
}
#vg-tooltip-element h2 {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: 13px;
}
#vg-tooltip-element img {
  max-width: 200px;
  max-height: 200px;
}
#vg-tooltip-element table {
  border-spacing: 0;
}
#vg-tooltip-element table tr {
  border: none;
}
#vg-tooltip-element table tr td {
  overflow: hidden;
  text-overflow: ellipsis;
  padding-top: 2px;
  padding-bottom: 2px;
}
#vg-tooltip-element table tr td.key {
  color: #808080;
  max-width: 150px;
  text-align: right;
  padding-right: 4px;
}
#vg-tooltip-element table tr td.value {
  display: block;
  max-width: 300px;
  max-height: 7em;
  text-align: left;
}
#vg-tooltip-element.dark-theme {
  background-color: rgba(32, 32, 32, 0.9);
  border: 1px solid #f5f5f5;
  color: white;
}
#vg-tooltip-element.dark-theme td.key {
  color: #bfbfbf;
}
`;
var EL_ID = "vg-tooltip-element";
var DEFAULT_OPTIONS = {
  offsetX: 10,
  offsetY: 10,
  id: EL_ID,
  styleId: "vega-tooltip-style",
  theme: "light",
  disableDefaultStyle: false,
  sanitize: escapeHTML,
  maxDepth: 2,
  formatTooltip: formatValue3
};
function escapeHTML(value3) {
  return String(value3).replace(/&/g, "&amp;").replace(/</g, "&lt;");
}
function createDefaultStyle(id2) {
  if (!/^[A-Za-z]+[-:.\w]*$/.test(id2)) {
    throw new Error("Invalid HTML ID");
  }
  return defaultStyle.toString().replace(EL_ID, id2);
}
function calculatePosition(event2, tooltipBox, offsetX, offsetY) {
  let x5 = event2.clientX + offsetX;
  if (x5 + tooltipBox.width > window.innerWidth) {
    x5 = +event2.clientX - offsetX - tooltipBox.width;
  }
  let y5 = event2.clientY + offsetY;
  if (y5 + tooltipBox.height > window.innerHeight) {
    y5 = +event2.clientY - offsetY - tooltipBox.height;
  }
  return { x: x5, y: y5 };
}
var Handler2 = class {
  constructor(options) {
    this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
    const elementId = this.options.id;
    this.el = null;
    this.call = this.tooltipHandler.bind(this);
    if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {
      const style2 = document.createElement("style");
      style2.setAttribute("id", this.options.styleId);
      style2.innerHTML = createDefaultStyle(elementId);
      const head = document.head;
      if (head.childNodes.length > 0) {
        head.insertBefore(style2, head.childNodes[0]);
      } else {
        head.appendChild(style2);
      }
    }
  }
  tooltipHandler(handler, event2, item, value3) {
    var _a;
    this.el = document.getElementById(this.options.id);
    if (!this.el) {
      this.el = document.createElement("div");
      this.el.setAttribute("id", this.options.id);
      this.el.classList.add("vg-tooltip");
      const tooltipContainer = (_a = document.fullscreenElement) !== null && _a !== void 0 ? _a : document.body;
      tooltipContainer.appendChild(this.el);
    }
    if (value3 == null || value3 === "") {
      this.el.classList.remove("visible", `${this.options.theme}-theme`);
      return;
    }
    this.el.innerHTML = this.options.formatTooltip(value3, this.options.sanitize, this.options.maxDepth);
    this.el.classList.add("visible", `${this.options.theme}-theme`);
    const { x: x5, y: y5 } = calculatePosition(event2, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY);
    this.el.setAttribute("style", `top: ${y5}px; left: ${x5}px`);
  }
};
var version4 = pkg2.version;

// node_modules/vega-embed/build/vega-embed.module.js
function _defineProperty(obj, key2, value3) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value: value3,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value3;
  }
  return obj;
}
function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key2, arg) {
  try {
    var info2 = gen[key2](arg);
    var value3 = info2.value;
  } catch (error2) {
    reject(error2);
    return;
  }
  if (info2.done) {
    resolve2(value3);
  } else {
    Promise.resolve(value3).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve2, reject) {
      var gen = fn.apply(self, args);
      function _next(value3) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value3);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
var Op = Object.prototype;
var hasOwn = Op.hasOwnProperty;
var undefined$1;
var $Symbol = typeof Symbol === "function" ? Symbol : {};
var iteratorSymbol = $Symbol.iterator || "@@iterator";
var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
function wrap2(innerFn, outerFn, self, tryLocsList) {
  var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
  var generator = Object.create(protoGenerator.prototype);
  var context3 = new Context2(tryLocsList || []);
  generator._invoke = makeInvokeMethod(innerFn, self, context3);
  return generator;
}
function tryCatch(fn, obj, arg) {
  try {
    return {
      type: "normal",
      arg: fn.call(obj, arg)
    };
  } catch (err) {
    return {
      type: "throw",
      arg: err
    };
  }
}
var GenStateSuspendedStart = "suspendedStart";
var GenStateSuspendedYield = "suspendedYield";
var GenStateExecuting = "executing";
var GenStateCompleted = "completed";
var ContinueSentinel = {};
function Generator() {
}
function GeneratorFunction() {
}
function GeneratorFunctionPrototype() {
}
var IteratorPrototype = {};
IteratorPrototype[iteratorSymbol] = function() {
  return this;
};
var getProto = Object.getPrototypeOf;
var NativeIteratorPrototype = getProto && getProto(getProto(values4([])));
if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
  IteratorPrototype = NativeIteratorPrototype;
}
var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
GeneratorFunctionPrototype.constructor = GeneratorFunction;
GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
function defineIteratorMethods(prototype2) {
  ["next", "throw", "return"].forEach(function(method2) {
    prototype2[method2] = function(arg) {
      return this._invoke(method2, arg);
    };
  });
}
function isGeneratorFunction(genFun) {
  var ctor = typeof genFun === "function" && genFun.constructor;
  return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
}
function mark(genFun) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
  } else {
    genFun.__proto__ = GeneratorFunctionPrototype;
    if (!(toStringTagSymbol in genFun)) {
      genFun[toStringTagSymbol] = "GeneratorFunction";
    }
  }
  genFun.prototype = Object.create(Gp);
  return genFun;
}
function awrap(arg) {
  return {
    __await: arg
  };
}
function AsyncIterator(generator, PromiseImpl) {
  function invoke2(method2, arg, resolve2, reject) {
    var record = tryCatch(generator[method2], generator, arg);
    if (record.type === "throw") {
      reject(record.arg);
    } else {
      var result = record.arg;
      var value3 = result.value;
      if (value3 && typeof value3 === "object" && hasOwn.call(value3, "__await")) {
        return PromiseImpl.resolve(value3.__await).then(function(value4) {
          invoke2("next", value4, resolve2, reject);
        }, function(err) {
          invoke2("throw", err, resolve2, reject);
        });
      }
      return PromiseImpl.resolve(value3).then(function(unwrapped) {
        result.value = unwrapped;
        resolve2(result);
      }, function(error2) {
        return invoke2("throw", error2, resolve2, reject);
      });
    }
  }
  var previousPromise;
  function enqueue2(method2, arg) {
    function callInvokeWithMethodAndArg() {
      return new PromiseImpl(function(resolve2, reject) {
        invoke2(method2, arg, resolve2, reject);
      });
    }
    return previousPromise = previousPromise ? previousPromise.then(
      callInvokeWithMethodAndArg,
      callInvokeWithMethodAndArg
    ) : callInvokeWithMethodAndArg();
  }
  this._invoke = enqueue2;
}
defineIteratorMethods(AsyncIterator.prototype);
AsyncIterator.prototype[asyncIteratorSymbol] = function() {
  return this;
};
function async(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
  if (PromiseImpl === void 0)
    PromiseImpl = Promise;
  var iter = new AsyncIterator(wrap2(innerFn, outerFn, self, tryLocsList), PromiseImpl);
  return isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
    return result.done ? result.value : iter.next();
  });
}
function makeInvokeMethod(innerFn, self, context3) {
  var state = GenStateSuspendedStart;
  return function invoke2(method2, arg) {
    if (state === GenStateExecuting) {
      throw new Error("Generator is already running");
    }
    if (state === GenStateCompleted) {
      if (method2 === "throw") {
        throw arg;
      }
      return doneResult();
    }
    context3.method = method2;
    context3.arg = arg;
    while (true) {
      var delegate = context3.delegate;
      if (delegate) {
        var delegateResult = maybeInvokeDelegate(delegate, context3);
        if (delegateResult) {
          if (delegateResult === ContinueSentinel)
            continue;
          return delegateResult;
        }
      }
      if (context3.method === "next") {
        context3.sent = context3._sent = context3.arg;
      } else if (context3.method === "throw") {
        if (state === GenStateSuspendedStart) {
          state = GenStateCompleted;
          throw context3.arg;
        }
        context3.dispatchException(context3.arg);
      } else if (context3.method === "return") {
        context3.abrupt("return", context3.arg);
      }
      state = GenStateExecuting;
      var record = tryCatch(innerFn, self, context3);
      if (record.type === "normal") {
        state = context3.done ? GenStateCompleted : GenStateSuspendedYield;
        if (record.arg === ContinueSentinel) {
          continue;
        }
        return {
          value: record.arg,
          done: context3.done
        };
      } else if (record.type === "throw") {
        state = GenStateCompleted;
        context3.method = "throw";
        context3.arg = record.arg;
      }
    }
  };
}
function maybeInvokeDelegate(delegate, context3) {
  var method2 = delegate.iterator[context3.method];
  if (method2 === undefined$1) {
    context3.delegate = null;
    if (context3.method === "throw") {
      if (delegate.iterator["return"]) {
        context3.method = "return";
        context3.arg = undefined$1;
        maybeInvokeDelegate(delegate, context3);
        if (context3.method === "throw") {
          return ContinueSentinel;
        }
      }
      context3.method = "throw";
      context3.arg = new TypeError("The iterator does not provide a 'throw' method");
    }
    return ContinueSentinel;
  }
  var record = tryCatch(method2, delegate.iterator, context3.arg);
  if (record.type === "throw") {
    context3.method = "throw";
    context3.arg = record.arg;
    context3.delegate = null;
    return ContinueSentinel;
  }
  var info2 = record.arg;
  if (!info2) {
    context3.method = "throw";
    context3.arg = new TypeError("iterator result is not an object");
    context3.delegate = null;
    return ContinueSentinel;
  }
  if (info2.done) {
    context3[delegate.resultName] = info2.value;
    context3.next = delegate.nextLoc;
    if (context3.method !== "return") {
      context3.method = "next";
      context3.arg = undefined$1;
    }
  } else {
    return info2;
  }
  context3.delegate = null;
  return ContinueSentinel;
}
defineIteratorMethods(Gp);
Gp[toStringTagSymbol] = "Generator";
Gp[iteratorSymbol] = function() {
  return this;
};
Gp.toString = function() {
  return "[object Generator]";
};
function pushTryEntry(locs) {
  var entry2 = {
    tryLoc: locs[0]
  };
  if (1 in locs) {
    entry2.catchLoc = locs[1];
  }
  if (2 in locs) {
    entry2.finallyLoc = locs[2];
    entry2.afterLoc = locs[3];
  }
  this.tryEntries.push(entry2);
}
function resetTryEntry(entry2) {
  var record = entry2.completion || {};
  record.type = "normal";
  delete record.arg;
  entry2.completion = record;
}
function Context2(tryLocsList) {
  this.tryEntries = [{
    tryLoc: "root"
  }];
  tryLocsList.forEach(pushTryEntry, this);
  this.reset(true);
}
function keys4(object2) {
  var keys5 = [];
  for (var key2 in object2) {
    keys5.push(key2);
  }
  keys5.reverse();
  return function next() {
    while (keys5.length) {
      var key3 = keys5.pop();
      if (key3 in object2) {
        next.value = key3;
        next.done = false;
        return next;
      }
    }
    next.done = true;
    return next;
  };
}
function values4(iterable) {
  if (iterable) {
    var iteratorMethod = iterable[iteratorSymbol];
    if (iteratorMethod) {
      return iteratorMethod.call(iterable);
    }
    if (typeof iterable.next === "function") {
      return iterable;
    }
    if (!isNaN(iterable.length)) {
      var i = -1, next = function next2() {
        while (++i < iterable.length) {
          if (hasOwn.call(iterable, i)) {
            next2.value = iterable[i];
            next2.done = false;
            return next2;
          }
        }
        next2.value = undefined$1;
        next2.done = true;
        return next2;
      };
      return next.next = next;
    }
  }
  return {
    next: doneResult
  };
}
function doneResult() {
  return {
    value: undefined$1,
    done: true
  };
}
Context2.prototype = {
  constructor: Context2,
  reset: function reset3(skipTempReset) {
    this.prev = 0;
    this.next = 0;
    this.sent = this._sent = undefined$1;
    this.done = false;
    this.delegate = null;
    this.method = "next";
    this.arg = undefined$1;
    this.tryEntries.forEach(resetTryEntry);
    if (!skipTempReset) {
      for (var name4 in this) {
        if (name4.charAt(0) === "t" && hasOwn.call(this, name4) && !isNaN(+name4.slice(1))) {
          this[name4] = undefined$1;
        }
      }
    }
  },
  stop: function stop2() {
    this.done = true;
    var rootEntry = this.tryEntries[0];
    var rootRecord = rootEntry.completion;
    if (rootRecord.type === "throw") {
      throw rootRecord.arg;
    }
    return this.rval;
  },
  dispatchException: function dispatchException(exception) {
    if (this.done) {
      throw exception;
    }
    var context3 = this;
    function handle(loc, caught) {
      record.type = "throw";
      record.arg = exception;
      context3.next = loc;
      if (caught) {
        context3.method = "next";
        context3.arg = undefined$1;
      }
      return !!caught;
    }
    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry2 = this.tryEntries[i];
      var record = entry2.completion;
      if (entry2.tryLoc === "root") {
        return handle("end");
      }
      if (entry2.tryLoc <= this.prev) {
        var hasCatch = hasOwn.call(entry2, "catchLoc");
        var hasFinally = hasOwn.call(entry2, "finallyLoc");
        if (hasCatch && hasFinally) {
          if (this.prev < entry2.catchLoc) {
            return handle(entry2.catchLoc, true);
          } else if (this.prev < entry2.finallyLoc) {
            return handle(entry2.finallyLoc);
          }
        } else if (hasCatch) {
          if (this.prev < entry2.catchLoc) {
            return handle(entry2.catchLoc, true);
          }
        } else if (hasFinally) {
          if (this.prev < entry2.finallyLoc) {
            return handle(entry2.finallyLoc);
          }
        } else {
          throw new Error("try statement without catch or finally");
        }
      }
    }
  },
  abrupt: function abrupt(type3, arg) {
    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry2 = this.tryEntries[i];
      if (entry2.tryLoc <= this.prev && hasOwn.call(entry2, "finallyLoc") && this.prev < entry2.finallyLoc) {
        var finallyEntry = entry2;
        break;
      }
    }
    if (finallyEntry && (type3 === "break" || type3 === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
      finallyEntry = null;
    }
    var record = finallyEntry ? finallyEntry.completion : {};
    record.type = type3;
    record.arg = arg;
    if (finallyEntry) {
      this.method = "next";
      this.next = finallyEntry.finallyLoc;
      return ContinueSentinel;
    }
    return this.complete(record);
  },
  complete: function complete(record, afterLoc) {
    if (record.type === "throw") {
      throw record.arg;
    }
    if (record.type === "break" || record.type === "continue") {
      this.next = record.arg;
    } else if (record.type === "return") {
      this.rval = this.arg = record.arg;
      this.method = "return";
      this.next = "end";
    } else if (record.type === "normal" && afterLoc) {
      this.next = afterLoc;
    }
    return ContinueSentinel;
  },
  finish: function finish(finallyLoc) {
    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry2 = this.tryEntries[i];
      if (entry2.finallyLoc === finallyLoc) {
        this.complete(entry2.completion, entry2.afterLoc);
        resetTryEntry(entry2);
        return ContinueSentinel;
      }
    }
  },
  "catch": function _catch(tryLoc) {
    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
      var entry2 = this.tryEntries[i];
      if (entry2.tryLoc === tryLoc) {
        var record = entry2.completion;
        if (record.type === "throw") {
          var thrown = record.arg;
          resetTryEntry(entry2);
        }
        return thrown;
      }
    }
    throw new Error("illegal catch attempt");
  },
  delegateYield: function delegateYield(iterable, resultName, nextLoc) {
    this.delegate = {
      iterator: values4(iterable),
      resultName,
      nextLoc
    };
    if (this.method === "next") {
      this.arg = undefined$1;
    }
    return ContinueSentinel;
  }
};
var _regeneratorRuntime = {
  wrap: wrap2,
  isGeneratorFunction,
  AsyncIterator,
  mark,
  awrap,
  async,
  keys: keys4,
  values: values4
};
var yallist = Yallist$1;
Yallist$1.Node = Node3;
Yallist$1.create = Yallist$1;
function Yallist$1(list) {
  var self = this;
  if (!(self instanceof Yallist$1)) {
    self = new Yallist$1();
  }
  self.tail = null;
  self.head = null;
  self.length = 0;
  if (list && typeof list.forEach === "function") {
    list.forEach(function(item) {
      self.push(item);
    });
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i]);
    }
  }
  return self;
}
Yallist$1.prototype.removeNode = function(node) {
  if (node.list !== this) {
    throw new Error("removing node which does not belong to this list");
  }
  var next = node.next;
  var prev = node.prev;
  if (next) {
    next.prev = prev;
  }
  if (prev) {
    prev.next = next;
  }
  if (node === this.head) {
    this.head = next;
  }
  if (node === this.tail) {
    this.tail = prev;
  }
  node.list.length--;
  node.next = null;
  node.prev = null;
  node.list = null;
  return next;
};
Yallist$1.prototype.unshiftNode = function(node) {
  if (node === this.head) {
    return;
  }
  if (node.list) {
    node.list.removeNode(node);
  }
  var head = this.head;
  node.list = this;
  node.next = head;
  if (head) {
    head.prev = node;
  }
  this.head = node;
  if (!this.tail) {
    this.tail = node;
  }
  this.length++;
};
Yallist$1.prototype.pushNode = function(node) {
  if (node === this.tail) {
    return;
  }
  if (node.list) {
    node.list.removeNode(node);
  }
  var tail = this.tail;
  node.list = this;
  node.prev = tail;
  if (tail) {
    tail.next = node;
  }
  this.tail = node;
  if (!this.head) {
    this.head = node;
  }
  this.length++;
};
Yallist$1.prototype.push = function() {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i]);
  }
  return this.length;
};
Yallist$1.prototype.unshift = function() {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i]);
  }
  return this.length;
};
Yallist$1.prototype.pop = function() {
  if (!this.tail) {
    return void 0;
  }
  var res = this.tail.value;
  this.tail = this.tail.prev;
  if (this.tail) {
    this.tail.next = null;
  } else {
    this.head = null;
  }
  this.length--;
  return res;
};
Yallist$1.prototype.shift = function() {
  if (!this.head) {
    return void 0;
  }
  var res = this.head.value;
  this.head = this.head.next;
  if (this.head) {
    this.head.prev = null;
  } else {
    this.tail = null;
  }
  this.length--;
  return res;
};
Yallist$1.prototype.forEach = function(fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.next;
  }
};
Yallist$1.prototype.forEachReverse = function(fn, thisp) {
  thisp = thisp || this;
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this);
    walker = walker.prev;
  }
};
Yallist$1.prototype.get = function(n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    walker = walker.next;
  }
  if (i === n && walker !== null) {
    return walker.value;
  }
};
Yallist$1.prototype.getReverse = function(n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    walker = walker.prev;
  }
  if (i === n && walker !== null) {
    return walker.value;
  }
};
Yallist$1.prototype.map = function(fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.head; walker !== null; ) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.next;
  }
  return res;
};
Yallist$1.prototype.mapReverse = function(fn, thisp) {
  thisp = thisp || this;
  var res = new Yallist$1();
  for (var walker = this.tail; walker !== null; ) {
    res.push(fn.call(thisp, walker.value, this));
    walker = walker.prev;
  }
  return res;
};
Yallist$1.prototype.reduce = function(fn, initial) {
  var acc;
  var walker = this.head;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.head) {
    walker = this.head.next;
    acc = this.head.value;
  } else {
    throw new TypeError("Reduce of empty list with no initial value");
  }
  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i);
    walker = walker.next;
  }
  return acc;
};
Yallist$1.prototype.reduceReverse = function(fn, initial) {
  var acc;
  var walker = this.tail;
  if (arguments.length > 1) {
    acc = initial;
  } else if (this.tail) {
    walker = this.tail.prev;
    acc = this.tail.value;
  } else {
    throw new TypeError("Reduce of empty list with no initial value");
  }
  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i);
    walker = walker.prev;
  }
  return acc;
};
Yallist$1.prototype.toArray = function() {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.next;
  }
  return arr;
};
Yallist$1.prototype.toArrayReverse = function() {
  var arr = new Array(this.length);
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value;
    walker = walker.prev;
  }
  return arr;
};
Yallist$1.prototype.slice = function(from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret;
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next;
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value);
  }
  return ret;
};
Yallist$1.prototype.sliceReverse = function(from, to) {
  to = to || this.length;
  if (to < 0) {
    to += this.length;
  }
  from = from || 0;
  if (from < 0) {
    from += this.length;
  }
  var ret = new Yallist$1();
  if (to < from || to < 0) {
    return ret;
  }
  if (from < 0) {
    from = 0;
  }
  if (to > this.length) {
    to = this.length;
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev;
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value);
  }
  return ret;
};
Yallist$1.prototype.splice = function(start, deleteCount) {
  if (start > this.length) {
    start = this.length - 1;
  }
  if (start < 0) {
    start = this.length + start;
  }
  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next;
  }
  var ret = [];
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value);
    walker = this.removeNode(walker);
  }
  if (walker === null) {
    walker = this.tail;
  }
  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev;
  }
  for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
    walker = insert2(this, walker, i + 2 < 2 || arguments.length <= i + 2 ? void 0 : arguments[i + 2]);
  }
  return ret;
};
Yallist$1.prototype.reverse = function() {
  var head = this.head;
  var tail = this.tail;
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev;
    walker.prev = walker.next;
    walker.next = p;
  }
  this.head = tail;
  this.tail = head;
  return this;
};
function insert2(self, node, value3) {
  var inserted = node === self.head ? new Node3(value3, null, node, self) : new Node3(value3, node, node.next, self);
  if (inserted.next === null) {
    self.tail = inserted;
  }
  if (inserted.prev === null) {
    self.head = inserted;
  }
  self.length++;
  return inserted;
}
function push(self, item) {
  self.tail = new Node3(item, self.tail, null, self);
  if (!self.head) {
    self.head = self.tail;
  }
  self.length++;
}
function unshift(self, item) {
  self.head = new Node3(item, null, self.head, self);
  if (!self.tail) {
    self.tail = self.head;
  }
  self.length++;
}
function Node3(value3, prev, next, list) {
  if (!(this instanceof Node3)) {
    return new Node3(value3, prev, next, list);
  }
  this.list = list;
  this.value = value3;
  if (prev) {
    prev.next = this;
    this.prev = prev;
  } else {
    this.prev = null;
  }
  if (next) {
    next.prev = this;
    this.next = next;
  } else {
    this.next = null;
  }
}
try {
  Yallist$1.prototype[Symbol.iterator] = _regeneratorRuntime.mark(function _callee() {
    var walker;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            walker = this.head;
          case 1:
            if (!walker) {
              _context.next = 7;
              break;
            }
            _context.next = 4;
            return walker.value;
          case 4:
            walker = walker.next;
            _context.next = 1;
            break;
          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  });
} catch (er) {
}
var Yallist = yallist;
var MAX = Symbol("max");
var LENGTH = Symbol("length");
var LENGTH_CALCULATOR = Symbol("lengthCalculator");
var ALLOW_STALE = Symbol("allowStale");
var MAX_AGE = Symbol("maxAge");
var DISPOSE = Symbol("dispose");
var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
var LRU_LIST = Symbol("lruList");
var CACHE2 = Symbol("cache");
var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
var naiveLength = () => 1;
var LRUCache = class {
  constructor(options) {
    if (typeof options === "number")
      options = {
        max: options
      };
    if (!options)
      options = {};
    if (options.max && (typeof options.max !== "number" || options.max < 0))
      throw new TypeError("max must be a non-negative number");
    this[MAX] = options.max || Infinity;
    var lc = options.length || naiveLength;
    this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
    this[ALLOW_STALE] = options.stale || false;
    if (options.maxAge && typeof options.maxAge !== "number")
      throw new TypeError("maxAge must be a number");
    this[MAX_AGE] = options.maxAge || 0;
    this[DISPOSE] = options.dispose;
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
    this.reset();
  }
  set max(mL) {
    if (typeof mL !== "number" || mL < 0)
      throw new TypeError("max must be a non-negative number");
    this[MAX] = mL || Infinity;
    trim(this);
  }
  get max() {
    return this[MAX];
  }
  set allowStale(allowStale) {
    this[ALLOW_STALE] = !!allowStale;
  }
  get allowStale() {
    return this[ALLOW_STALE];
  }
  set maxAge(mA) {
    if (typeof mA !== "number")
      throw new TypeError("maxAge must be a non-negative number");
    this[MAX_AGE] = mA;
    trim(this);
  }
  get maxAge() {
    return this[MAX_AGE];
  }
  set lengthCalculator(lC) {
    if (typeof lC !== "function")
      lC = naiveLength;
    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC;
      this[LENGTH] = 0;
      this[LRU_LIST].forEach((hit2) => {
        hit2.length = this[LENGTH_CALCULATOR](hit2.value, hit2.key);
        this[LENGTH] += hit2.length;
      });
    }
    trim(this);
  }
  get lengthCalculator() {
    return this[LENGTH_CALCULATOR];
  }
  get length() {
    return this[LENGTH];
  }
  get itemCount() {
    return this[LRU_LIST].length;
  }
  rforEach(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this[LRU_LIST].tail; walker !== null; ) {
      var prev = walker.prev;
      forEachStep(this, fn, walker, thisp);
      walker = prev;
    }
  }
  forEach(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this[LRU_LIST].head; walker !== null; ) {
      var next = walker.next;
      forEachStep(this, fn, walker, thisp);
      walker = next;
    }
  }
  keys() {
    return this[LRU_LIST].toArray().map((k3) => k3.key);
  }
  values() {
    return this[LRU_LIST].toArray().map((k3) => k3.value);
  }
  reset() {
    if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
      this[LRU_LIST].forEach((hit2) => this[DISPOSE](hit2.key, hit2.value));
    }
    this[CACHE2] = /* @__PURE__ */ new Map();
    this[LRU_LIST] = new Yallist();
    this[LENGTH] = 0;
  }
  dump() {
    return this[LRU_LIST].map((hit2) => isStale(this, hit2) ? false : {
      k: hit2.key,
      v: hit2.value,
      e: hit2.now + (hit2.maxAge || 0)
    }).toArray().filter((h2) => h2);
  }
  dumpLru() {
    return this[LRU_LIST];
  }
  set(key2, value3, maxAge) {
    maxAge = maxAge || this[MAX_AGE];
    if (maxAge && typeof maxAge !== "number")
      throw new TypeError("maxAge must be a number");
    var now2 = maxAge ? Date.now() : 0;
    var len = this[LENGTH_CALCULATOR](value3, key2);
    if (this[CACHE2].has(key2)) {
      if (len > this[MAX]) {
        del(this, this[CACHE2].get(key2));
        return false;
      }
      var node = this[CACHE2].get(key2);
      var item = node.value;
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET])
          this[DISPOSE](key2, item.value);
      }
      item.now = now2;
      item.maxAge = maxAge;
      item.value = value3;
      this[LENGTH] += len - item.length;
      item.length = len;
      this.get(key2);
      trim(this);
      return true;
    }
    var hit2 = new Entry2(key2, value3, len, now2, maxAge);
    if (hit2.length > this[MAX]) {
      if (this[DISPOSE])
        this[DISPOSE](key2, value3);
      return false;
    }
    this[LENGTH] += hit2.length;
    this[LRU_LIST].unshift(hit2);
    this[CACHE2].set(key2, this[LRU_LIST].head);
    trim(this);
    return true;
  }
  has(key2) {
    if (!this[CACHE2].has(key2))
      return false;
    var hit2 = this[CACHE2].get(key2).value;
    return !isStale(this, hit2);
  }
  get(key2) {
    return get6(this, key2, true);
  }
  peek(key2) {
    return get6(this, key2, false);
  }
  pop() {
    var node = this[LRU_LIST].tail;
    if (!node)
      return null;
    del(this, node);
    return node.value;
  }
  del(key2) {
    del(this, this[CACHE2].get(key2));
  }
  load(arr) {
    this.reset();
    var now2 = Date.now();
    for (var l = arr.length - 1; l >= 0; l--) {
      var hit2 = arr[l];
      var expiresAt = hit2.e || 0;
      if (expiresAt === 0)
        this.set(hit2.k, hit2.v);
      else {
        var maxAge = expiresAt - now2;
        if (maxAge > 0) {
          this.set(hit2.k, hit2.v, maxAge);
        }
      }
    }
  }
  prune() {
    this[CACHE2].forEach((value3, key2) => get6(this, key2, false));
  }
};
var get6 = (self, key2, doUse) => {
  var node = self[CACHE2].get(key2);
  if (node) {
    var hit2 = node.value;
    if (isStale(self, hit2)) {
      del(self, node);
      if (!self[ALLOW_STALE])
        return void 0;
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET])
          node.value.now = Date.now();
        self[LRU_LIST].unshiftNode(node);
      }
    }
    return hit2.value;
  }
};
var isStale = (self, hit2) => {
  if (!hit2 || !hit2.maxAge && !self[MAX_AGE])
    return false;
  var diff = Date.now() - hit2.now;
  return hit2.maxAge ? diff > hit2.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
};
var trim = (self) => {
  if (self[LENGTH] > self[MAX]) {
    for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null; ) {
      var prev = walker.prev;
      del(self, walker);
      walker = prev;
    }
  }
};
var del = (self, node) => {
  if (node) {
    var hit2 = node.value;
    if (self[DISPOSE])
      self[DISPOSE](hit2.key, hit2.value);
    self[LENGTH] -= hit2.length;
    self[CACHE2].delete(hit2.key);
    self[LRU_LIST].removeNode(node);
  }
};
var Entry2 = class {
  constructor(key2, value3, length2, now2, maxAge) {
    this.key = key2;
    this.value = value3;
    this.length = length2;
    this.now = now2;
    this.maxAge = maxAge || 0;
  }
};
var forEachStep = (self, fn, node, thisp) => {
  var hit2 = node.value;
  if (isStale(self, hit2)) {
    del(self, node);
    if (!self[ALLOW_STALE])
      hit2 = void 0;
  }
  if (hit2)
    fn.call(thisp, hit2.value, hit2.key, self);
};
var lruCache2 = LRUCache;
var opts = ["includePrerelease", "loose", "rtl"];
var parseOptions$1 = (options) => !options ? {} : typeof options !== "object" ? {
  loose: true
} : opts.filter((k3) => options[k3]).reduce((o, k3) => {
  o[k3] = true;
  return o;
}, {});
var parseOptions_1 = parseOptions$1;
var re$1 = { exports: {} };
var SEMVER_SPEC_VERSION = "2.0.0";
var MAX_LENGTH$1 = 256;
var MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || 9007199254740991;
var MAX_SAFE_COMPONENT_LENGTH = 16;
var constants2 = {
  SEMVER_SPEC_VERSION,
  MAX_LENGTH: MAX_LENGTH$1,
  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
  MAX_SAFE_COMPONENT_LENGTH
};
var debug$1 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return console.error("SEMVER", ...args);
} : () => {
};
var debug_1 = debug$1;
(function(module4, exports) {
  var MAX_SAFE_COMPONENT_LENGTH2 = constants2.MAX_SAFE_COMPONENT_LENGTH;
  var debug4 = debug_1;
  exports = module4.exports = {};
  var re3 = exports.re = [];
  var src = exports.src = [];
  var t4 = exports.t = {};
  var R = 0;
  var createToken = (name4, value3, isGlobal) => {
    var index5 = R++;
    debug4(name4, index5, value3);
    t4[name4] = index5;
    src[index5] = value3;
    re3[index5] = new RegExp(value3, isGlobal ? "g" : void 0);
  };
  createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
  createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
  createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
  createToken("MAINVERSION", "(".concat(src[t4.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t4.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t4.NUMERICIDENTIFIER], ")"));
  createToken("MAINVERSIONLOOSE", "(".concat(src[t4.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t4.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t4.NUMERICIDENTIFIERLOOSE], ")"));
  createToken("PRERELEASEIDENTIFIER", "(?:".concat(src[t4.NUMERICIDENTIFIER], "|").concat(src[t4.NONNUMERICIDENTIFIER], ")"));
  createToken("PRERELEASEIDENTIFIERLOOSE", "(?:".concat(src[t4.NUMERICIDENTIFIERLOOSE], "|").concat(src[t4.NONNUMERICIDENTIFIER], ")"));
  createToken("PRERELEASE", "(?:-(".concat(src[t4.PRERELEASEIDENTIFIER], "(?:\\.").concat(src[t4.PRERELEASEIDENTIFIER], ")*))"));
  createToken("PRERELEASELOOSE", "(?:-?(".concat(src[t4.PRERELEASEIDENTIFIERLOOSE], "(?:\\.").concat(src[t4.PRERELEASEIDENTIFIERLOOSE], ")*))"));
  createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
  createToken("BUILD", "(?:\\+(".concat(src[t4.BUILDIDENTIFIER], "(?:\\.").concat(src[t4.BUILDIDENTIFIER], ")*))"));
  createToken("FULLPLAIN", "v?".concat(src[t4.MAINVERSION]).concat(src[t4.PRERELEASE], "?").concat(src[t4.BUILD], "?"));
  createToken("FULL", "^".concat(src[t4.FULLPLAIN], "$"));
  createToken("LOOSEPLAIN", "[v=\\s]*".concat(src[t4.MAINVERSIONLOOSE]).concat(src[t4.PRERELEASELOOSE], "?").concat(src[t4.BUILD], "?"));
  createToken("LOOSE", "^".concat(src[t4.LOOSEPLAIN], "$"));
  createToken("GTLT", "((?:<|>)?=?)");
  createToken("XRANGEIDENTIFIERLOOSE", "".concat(src[t4.NUMERICIDENTIFIERLOOSE], "|x|X|\\*"));
  createToken("XRANGEIDENTIFIER", "".concat(src[t4.NUMERICIDENTIFIER], "|x|X|\\*"));
  createToken("XRANGEPLAIN", "[v=\\s]*(".concat(src[t4.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t4.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t4.XRANGEIDENTIFIER], ")") + "(?:".concat(src[t4.PRERELEASE], ")?").concat(src[t4.BUILD], "?") + ")?)?");
  createToken("XRANGEPLAINLOOSE", "[v=\\s]*(".concat(src[t4.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t4.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t4.XRANGEIDENTIFIERLOOSE], ")") + "(?:".concat(src[t4.PRERELEASELOOSE], ")?").concat(src[t4.BUILD], "?") + ")?)?");
  createToken("XRANGE", "^".concat(src[t4.GTLT], "\\s*").concat(src[t4.XRANGEPLAIN], "$"));
  createToken("XRANGELOOSE", "^".concat(src[t4.GTLT], "\\s*").concat(src[t4.XRANGEPLAINLOOSE], "$"));
  createToken("COERCE", "".concat("(^|[^\\d])(\\d{1,").concat(MAX_SAFE_COMPONENT_LENGTH2, "})") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH2, "}))?") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH2, "}))?") + "(?:$|[^\\d])");
  createToken("COERCERTL", src[t4.COERCE], true);
  createToken("LONETILDE", "(?:~>?)");
  createToken("TILDETRIM", "(\\s*)".concat(src[t4.LONETILDE], "\\s+"), true);
  exports.tildeTrimReplace = "$1~";
  createToken("TILDE", "^".concat(src[t4.LONETILDE]).concat(src[t4.XRANGEPLAIN], "$"));
  createToken("TILDELOOSE", "^".concat(src[t4.LONETILDE]).concat(src[t4.XRANGEPLAINLOOSE], "$"));
  createToken("LONECARET", "(?:\\^)");
  createToken("CARETTRIM", "(\\s*)".concat(src[t4.LONECARET], "\\s+"), true);
  exports.caretTrimReplace = "$1^";
  createToken("CARET", "^".concat(src[t4.LONECARET]).concat(src[t4.XRANGEPLAIN], "$"));
  createToken("CARETLOOSE", "^".concat(src[t4.LONECARET]).concat(src[t4.XRANGEPLAINLOOSE], "$"));
  createToken("COMPARATORLOOSE", "^".concat(src[t4.GTLT], "\\s*(").concat(src[t4.LOOSEPLAIN], ")$|^$"));
  createToken("COMPARATOR", "^".concat(src[t4.GTLT], "\\s*(").concat(src[t4.FULLPLAIN], ")$|^$"));
  createToken("COMPARATORTRIM", "(\\s*)".concat(src[t4.GTLT], "\\s*(").concat(src[t4.LOOSEPLAIN], "|").concat(src[t4.XRANGEPLAIN], ")"), true);
  exports.comparatorTrimReplace = "$1$2$3";
  createToken("HYPHENRANGE", "^\\s*(".concat(src[t4.XRANGEPLAIN], ")") + "\\s+-\\s+" + "(".concat(src[t4.XRANGEPLAIN], ")") + "\\s*$");
  createToken("HYPHENRANGELOOSE", "^\\s*(".concat(src[t4.XRANGEPLAINLOOSE], ")") + "\\s+-\\s+" + "(".concat(src[t4.XRANGEPLAINLOOSE], ")") + "\\s*$");
  createToken("STAR", "(<|>)?=?\\s*\\*");
  createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
  createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
})(re$1, re$1.exports);
var numeric = /^[0-9]+$/;
var compareIdentifiers$1 = (a4, b2) => {
  var anum = numeric.test(a4);
  var bnum = numeric.test(b2);
  if (anum && bnum) {
    a4 = +a4;
    b2 = +b2;
  }
  return a4 === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a4 < b2 ? -1 : 1;
};
var rcompareIdentifiers = (a4, b2) => compareIdentifiers$1(b2, a4);
var identifiers = {
  compareIdentifiers: compareIdentifiers$1,
  rcompareIdentifiers
};
var debug3 = debug_1;
var MAX_LENGTH = constants2.MAX_LENGTH;
var MAX_SAFE_INTEGER = constants2.MAX_SAFE_INTEGER;
var re2 = re$1.exports.re;
var t = re$1.exports.t;
var parseOptions = parseOptions_1;
var compareIdentifiers = identifiers.compareIdentifiers;
var SemVer$1 = class {
  constructor(version6, options) {
    options = parseOptions(options);
    if (version6 instanceof SemVer$1) {
      if (version6.loose === !!options.loose && version6.includePrerelease === !!options.includePrerelease) {
        return version6;
      } else {
        version6 = version6.version;
      }
    } else if (typeof version6 !== "string") {
      throw new TypeError("Invalid Version: ".concat(version6));
    }
    if (version6.length > MAX_LENGTH) {
      throw new TypeError("version is longer than ".concat(MAX_LENGTH, " characters"));
    }
    debug3("SemVer", version6, options);
    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease;
    var m3 = version6.trim().match(options.loose ? re2[t.LOOSE] : re2[t.FULL]);
    if (!m3) {
      throw new TypeError("Invalid Version: ".concat(version6));
    }
    this.raw = version6;
    this.major = +m3[1];
    this.minor = +m3[2];
    this.patch = +m3[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError("Invalid major version");
    }
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError("Invalid minor version");
    }
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError("Invalid patch version");
    }
    if (!m3[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m3[4].split(".").map((id2) => {
        if (/^[0-9]+$/.test(id2)) {
          var num = +id2;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id2;
      });
    }
    this.build = m3[5] ? m3[5].split(".") : [];
    this.format();
  }
  format() {
    this.version = "".concat(this.major, ".").concat(this.minor, ".").concat(this.patch);
    if (this.prerelease.length) {
      this.version += "-".concat(this.prerelease.join("."));
    }
    return this.version;
  }
  toString() {
    return this.version;
  }
  compare(other) {
    debug3("SemVer.compare", this.version, this.options, other);
    if (!(other instanceof SemVer$1)) {
      if (typeof other === "string" && other === this.version) {
        return 0;
      }
      other = new SemVer$1(other, this.options);
    }
    if (other.version === this.version) {
      return 0;
    }
    return this.compareMain(other) || this.comparePre(other);
  }
  compareMain(other) {
    if (!(other instanceof SemVer$1)) {
      other = new SemVer$1(other, this.options);
    }
    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
  }
  comparePre(other) {
    if (!(other instanceof SemVer$1)) {
      other = new SemVer$1(other, this.options);
    }
    if (this.prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0;
    }
    var i = 0;
    do {
      var a4 = this.prerelease[i];
      var b2 = other.prerelease[i];
      debug3("prerelease compare", i, a4, b2);
      if (a4 === void 0 && b2 === void 0) {
        return 0;
      } else if (b2 === void 0) {
        return 1;
      } else if (a4 === void 0) {
        return -1;
      } else if (a4 === b2) {
        continue;
      } else {
        return compareIdentifiers(a4, b2);
      }
    } while (++i);
  }
  compareBuild(other) {
    if (!(other instanceof SemVer$1)) {
      other = new SemVer$1(other, this.options);
    }
    var i = 0;
    do {
      var a4 = this.build[i];
      var b2 = other.build[i];
      debug3("prerelease compare", i, a4, b2);
      if (a4 === void 0 && b2 === void 0) {
        return 0;
      } else if (b2 === void 0) {
        return 1;
      } else if (a4 === void 0) {
        return -1;
      } else if (a4 === b2) {
        continue;
      } else {
        return compareIdentifiers(a4, b2);
      }
    } while (++i);
  }
  inc(release, identifier) {
    switch (release) {
      case "premajor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc("pre", identifier);
        break;
      case "preminor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc("pre", identifier);
        break;
      case "prepatch":
        this.prerelease.length = 0;
        this.inc("patch", identifier);
        this.inc("pre", identifier);
        break;
      case "prerelease":
        if (this.prerelease.length === 0) {
          this.inc("patch", identifier);
        }
        this.inc("pre", identifier);
        break;
      case "major":
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case "minor":
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break;
      case "patch":
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break;
      case "pre":
        if (this.prerelease.length === 0) {
          this.prerelease = [0];
        } else {
          var i = this.prerelease.length;
          while (--i >= 0) {
            if (typeof this.prerelease[i] === "number") {
              this.prerelease[i]++;
              i = -2;
            }
          }
          if (i === -1) {
            this.prerelease.push(0);
          }
        }
        if (identifier) {
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0];
            }
          } else {
            this.prerelease = [identifier, 0];
          }
        }
        break;
      default:
        throw new Error("invalid increment argument: ".concat(release));
    }
    this.format();
    this.raw = this.version;
    return this;
  }
};
var semver = SemVer$1;
var SemVer = semver;
var compare$6 = (a4, b2, loose) => new SemVer(a4, loose).compare(new SemVer(b2, loose));
var compare_1 = compare$6;
var compare$5 = compare_1;
var eq$1 = (a4, b2, loose) => compare$5(a4, b2, loose) === 0;
var eq_1 = eq$1;
var compare$4 = compare_1;
var neq$1 = (a4, b2, loose) => compare$4(a4, b2, loose) !== 0;
var neq_1 = neq$1;
var compare$3 = compare_1;
var gt$1 = (a4, b2, loose) => compare$3(a4, b2, loose) > 0;
var gt_1 = gt$1;
var compare$2 = compare_1;
var gte$1 = (a4, b2, loose) => compare$2(a4, b2, loose) >= 0;
var gte_1 = gte$1;
var compare$1 = compare_1;
var lt$1 = (a4, b2, loose) => compare$1(a4, b2, loose) < 0;
var lt_1 = lt$1;
var compare4 = compare_1;
var lte$1 = (a4, b2, loose) => compare4(a4, b2, loose) <= 0;
var lte_1 = lte$1;
var eq = eq_1;
var neq = neq_1;
var gt = gt_1;
var gte = gte_1;
var lt = lt_1;
var lte = lte_1;
var cmp = (a4, op, b2, loose) => {
  switch (op) {
    case "===":
      if (typeof a4 === "object") {
        a4 = a4.version;
      }
      if (typeof b2 === "object") {
        b2 = b2.version;
      }
      return a4 === b2;
    case "!==":
      if (typeof a4 === "object") {
        a4 = a4.version;
      }
      if (typeof b2 === "object") {
        b2 = b2.version;
      }
      return a4 !== b2;
    case "":
    case "=":
    case "==":
      return eq(a4, b2, loose);
    case "!=":
      return neq(a4, b2, loose);
    case ">":
      return gt(a4, b2, loose);
    case ">=":
      return gte(a4, b2, loose);
    case "<":
      return lt(a4, b2, loose);
    case "<=":
      return lte(a4, b2, loose);
    default:
      throw new TypeError("Invalid operator: ".concat(op));
  }
};
var cmp_1 = cmp;
var comparator2;
var hasRequiredComparator;
function requireComparator() {
  if (hasRequiredComparator)
    return comparator2;
  hasRequiredComparator = 1;
  var ANY = Symbol("SemVer ANY");
  class Comparator {
    static get ANY() {
      return ANY;
    }
    constructor(comp, options) {
      options = parseOptions2(options);
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      debug4("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug4("comp", this);
    }
    parse(comp) {
      var r = this.options.loose ? re3[t4.COMPARATORLOOSE] : re3[t4.COMPARATOR];
      var m3 = comp.match(r);
      if (!m3) {
        throw new TypeError("Invalid comparator: ".concat(comp));
      }
      this.operator = m3[1] !== void 0 ? m3[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m3[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer2(m3[2], this.options.loose);
      }
    }
    toString() {
      return this.value;
    }
    test(version6) {
      debug4("Comparator.test", version6, this.options.loose);
      if (this.semver === ANY || version6 === ANY) {
        return true;
      }
      if (typeof version6 === "string") {
        try {
          version6 = new SemVer2(version6, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp2(version6, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        return new Range2(comp.value, options).test(this.value);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        return new Range2(this.value, options).test(comp.semver);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp2(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
      var oppositeDirectionsGreaterThan = cmp2(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    }
  }
  comparator2 = Comparator;
  var parseOptions2 = parseOptions_1;
  var re3 = re$1.exports.re, t4 = re$1.exports.t;
  var cmp2 = cmp_1;
  var debug4 = debug_1;
  var SemVer2 = semver;
  var Range2 = requireRange();
  return comparator2;
}
function _createForOfIteratorHelper$1(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e3(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it = it.call(o);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e3(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var range7;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange)
    return range7;
  hasRequiredRange = 1;
  class Range2 {
    constructor(range8, options) {
      options = parseOptions2(options);
      if (range8 instanceof Range2) {
        if (range8.loose === !!options.loose && range8.includePrerelease === !!options.includePrerelease) {
          return range8;
        } else {
          return new Range2(range8.raw, options);
        }
      }
      if (range8 instanceof Comparator) {
        this.raw = range8.value;
        this.set = [[range8]];
        this.format();
        return this;
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range8;
      this.set = range8.split("||").map((r) => this.parseRange(r.trim())).filter((c4) => c4.length);
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: ".concat(range8));
      }
      if (this.set.length > 1) {
        var first = this.set[0];
        this.set = this.set.filter((c4) => !isNullSet(c4[0]));
        if (this.set.length === 0) {
          this.set = [first];
        } else if (this.set.length > 1) {
          var _iterator = _createForOfIteratorHelper$1(this.set), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var c3 = _step.value;
              if (c3.length === 1 && isAny(c3[0])) {
                this.set = [c3];
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
      this.format();
    }
    format() {
      this.range = this.set.map((comps) => {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    }
    toString() {
      return this.range;
    }
    parseRange(range8) {
      range8 = range8.trim();
      var memoOpts = Object.keys(this.options).join(",");
      var memoKey = "parseRange:".concat(memoOpts, ":").concat(range8);
      var cached = cache2.get(memoKey);
      if (cached) {
        return cached;
      }
      var loose = this.options.loose;
      var hr = loose ? re3[t4.HYPHENRANGELOOSE] : re3[t4.HYPHENRANGE];
      range8 = range8.replace(hr, hyphenReplace(this.options.includePrerelease));
      debug4("hyphen replace", range8);
      range8 = range8.replace(re3[t4.COMPARATORTRIM], comparatorTrimReplace);
      debug4("comparator trim", range8);
      range8 = range8.replace(re3[t4.TILDETRIM], tildeTrimReplace);
      range8 = range8.replace(re3[t4.CARETTRIM], caretTrimReplace);
      range8 = range8.split(/\s+/).join(" ");
      var rangeList = range8.split(" ").map((comp2) => parseComparator(comp2, this.options)).join(" ").split(/\s+/).map((comp2) => replaceGTE0(comp2, this.options));
      if (loose) {
        rangeList = rangeList.filter((comp2) => {
          debug4("loose invalid filter", comp2, this.options);
          return !!comp2.match(re3[t4.COMPARATORLOOSE]);
        });
      }
      debug4("range list", rangeList);
      var rangeMap = /* @__PURE__ */ new Map();
      var comparators = rangeList.map((comp2) => new Comparator(comp2, this.options));
      var _iterator2 = _createForOfIteratorHelper$1(comparators), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var comp = _step2.value;
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (rangeMap.size > 1 && rangeMap.has("")) {
        rangeMap.delete("");
      }
      var result = [...rangeMap.values()];
      cache2.set(memoKey, result);
      return result;
    }
    intersects(range8, options) {
      if (!(range8 instanceof Range2)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some((thisComparators) => {
        return isSatisfiable(thisComparators, options) && range8.set.some((rangeComparators) => {
          return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
            return rangeComparators.every((rangeComparator) => {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    }
    test(version6) {
      if (!version6) {
        return false;
      }
      if (typeof version6 === "string") {
        try {
          version6 = new SemVer2(version6, this.options);
        } catch (er) {
          return false;
        }
      }
      for (var i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version6, this.options)) {
          return true;
        }
      }
      return false;
    }
  }
  range7 = Range2;
  var LRU = lruCache2;
  var cache2 = new LRU({
    max: 1e3
  });
  var parseOptions2 = parseOptions_1;
  var Comparator = requireComparator();
  var debug4 = debug_1;
  var SemVer2 = semver;
  var re3 = re$1.exports.re, t4 = re$1.exports.t, comparatorTrimReplace = re$1.exports.comparatorTrimReplace, tildeTrimReplace = re$1.exports.tildeTrimReplace, caretTrimReplace = re$1.exports.caretTrimReplace;
  var isNullSet = (c3) => c3.value === "<0.0.0-0";
  var isAny = (c3) => c3.value === "";
  var isSatisfiable = (comparators, options) => {
    var result = true;
    var remainingComparators = comparators.slice();
    var testComparator = remainingComparators.pop();
    while (result && remainingComparators.length) {
      result = remainingComparators.every((otherComparator) => {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }
    return result;
  };
  var parseComparator = (comp, options) => {
    debug4("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug4("caret", comp);
    comp = replaceTildes(comp, options);
    debug4("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug4("xrange", comp);
    comp = replaceStars(comp, options);
    debug4("stars", comp);
    return comp;
  };
  var isX2 = (id2) => !id2 || id2.toLowerCase() === "x" || id2 === "*";
  var replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c3) => {
    return replaceTilde(c3, options);
  }).join(" ");
  var replaceTilde = (comp, options) => {
    var r = options.loose ? re3[t4.TILDELOOSE] : re3[t4.TILDE];
    return comp.replace(r, (_, M2, m3, p, pr) => {
      debug4("tilde", comp, _, M2, m3, p, pr);
      var ret;
      if (isX2(M2)) {
        ret = "";
      } else if (isX2(m3)) {
        ret = ">=".concat(M2, ".0.0 <").concat(+M2 + 1, ".0.0-0");
      } else if (isX2(p)) {
        ret = ">=".concat(M2, ".").concat(m3, ".0 <").concat(M2, ".").concat(+m3 + 1, ".0-0");
      } else if (pr) {
        debug4("replaceTilde pr", pr);
        ret = ">=".concat(M2, ".").concat(m3, ".").concat(p, "-").concat(pr, " <").concat(M2, ".").concat(+m3 + 1, ".0-0");
      } else {
        ret = ">=".concat(M2, ".").concat(m3, ".").concat(p, " <").concat(M2, ".").concat(+m3 + 1, ".0-0");
      }
      debug4("tilde return", ret);
      return ret;
    });
  };
  var replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c3) => {
    return replaceCaret(c3, options);
  }).join(" ");
  var replaceCaret = (comp, options) => {
    debug4("caret", comp, options);
    var r = options.loose ? re3[t4.CARETLOOSE] : re3[t4.CARET];
    var z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M2, m3, p, pr) => {
      debug4("caret", comp, _, M2, m3, p, pr);
      var ret;
      if (isX2(M2)) {
        ret = "";
      } else if (isX2(m3)) {
        ret = ">=".concat(M2, ".0.0").concat(z, " <").concat(+M2 + 1, ".0.0-0");
      } else if (isX2(p)) {
        if (M2 === "0") {
          ret = ">=".concat(M2, ".").concat(m3, ".0").concat(z, " <").concat(M2, ".").concat(+m3 + 1, ".0-0");
        } else {
          ret = ">=".concat(M2, ".").concat(m3, ".0").concat(z, " <").concat(+M2 + 1, ".0.0-0");
        }
      } else if (pr) {
        debug4("replaceCaret pr", pr);
        if (M2 === "0") {
          if (m3 === "0") {
            ret = ">=".concat(M2, ".").concat(m3, ".").concat(p, "-").concat(pr, " <").concat(M2, ".").concat(m3, ".").concat(+p + 1, "-0");
          } else {
            ret = ">=".concat(M2, ".").concat(m3, ".").concat(p, "-").concat(pr, " <").concat(M2, ".").concat(+m3 + 1, ".0-0");
          }
        } else {
          ret = ">=".concat(M2, ".").concat(m3, ".").concat(p, "-").concat(pr, " <").concat(+M2 + 1, ".0.0-0");
        }
      } else {
        debug4("no pr");
        if (M2 === "0") {
          if (m3 === "0") {
            ret = ">=".concat(M2, ".").concat(m3, ".").concat(p).concat(z, " <").concat(M2, ".").concat(m3, ".").concat(+p + 1, "-0");
          } else {
            ret = ">=".concat(M2, ".").concat(m3, ".").concat(p).concat(z, " <").concat(M2, ".").concat(+m3 + 1, ".0-0");
          }
        } else {
          ret = ">=".concat(M2, ".").concat(m3, ".").concat(p, " <").concat(+M2 + 1, ".0.0-0");
        }
      }
      debug4("caret return", ret);
      return ret;
    });
  };
  var replaceXRanges = (comp, options) => {
    debug4("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((c3) => {
      return replaceXRange(c3, options);
    }).join(" ");
  };
  var replaceXRange = (comp, options) => {
    comp = comp.trim();
    var r = options.loose ? re3[t4.XRANGELOOSE] : re3[t4.XRANGE];
    return comp.replace(r, (ret, gtlt, M2, m3, p, pr) => {
      debug4("xRange", comp, ret, gtlt, M2, m3, p, pr);
      var xM = isX2(M2);
      var xm = xM || isX2(m3);
      var xp = xm || isX2(p);
      var anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }
      pr = options.includePrerelease ? "-0" : "";
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          ret = "<0.0.0-0";
        } else {
          ret = "*";
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m3 = 0;
        }
        p = 0;
        if (gtlt === ">") {
          gtlt = ">=";
          if (xm) {
            M2 = +M2 + 1;
            m3 = 0;
            p = 0;
          } else {
            m3 = +m3 + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          gtlt = "<";
          if (xm) {
            M2 = +M2 + 1;
          } else {
            m3 = +m3 + 1;
          }
        }
        if (gtlt === "<") {
          pr = "-0";
        }
        ret = "".concat(gtlt + M2, ".").concat(m3, ".").concat(p).concat(pr);
      } else if (xm) {
        ret = ">=".concat(M2, ".0.0").concat(pr, " <").concat(+M2 + 1, ".0.0-0");
      } else if (xp) {
        ret = ">=".concat(M2, ".").concat(m3, ".0").concat(pr, " <").concat(M2, ".").concat(+m3 + 1, ".0-0");
      }
      debug4("xRange return", ret);
      return ret;
    });
  };
  var replaceStars = (comp, options) => {
    debug4("replaceStars", comp, options);
    return comp.trim().replace(re3[t4.STAR], "");
  };
  var replaceGTE0 = (comp, options) => {
    debug4("replaceGTE0", comp, options);
    return comp.trim().replace(re3[options.includePrerelease ? t4.GTE0PRE : t4.GTE0], "");
  };
  var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
    if (isX2(fM)) {
      from = "";
    } else if (isX2(fm)) {
      from = ">=".concat(fM, ".0.0").concat(incPr ? "-0" : "");
    } else if (isX2(fp)) {
      from = ">=".concat(fM, ".").concat(fm, ".0").concat(incPr ? "-0" : "");
    } else if (fpr) {
      from = ">=".concat(from);
    } else {
      from = ">=".concat(from).concat(incPr ? "-0" : "");
    }
    if (isX2(tM)) {
      to = "";
    } else if (isX2(tm)) {
      to = "<".concat(+tM + 1, ".0.0-0");
    } else if (isX2(tp)) {
      to = "<".concat(tM, ".").concat(+tm + 1, ".0-0");
    } else if (tpr) {
      to = "<=".concat(tM, ".").concat(tm, ".").concat(tp, "-").concat(tpr);
    } else if (incPr) {
      to = "<".concat(tM, ".").concat(tm, ".").concat(+tp + 1, "-0");
    } else {
      to = "<=".concat(to);
    }
    return "".concat(from, " ").concat(to).trim();
  };
  var testSet = (set7, version6, options) => {
    for (var i = 0; i < set7.length; i++) {
      if (!set7[i].test(version6)) {
        return false;
      }
    }
    if (version6.prerelease.length && !options.includePrerelease) {
      for (var _i = 0; _i < set7.length; _i++) {
        debug4(set7[_i].semver);
        if (set7[_i].semver === Comparator.ANY) {
          continue;
        }
        if (set7[_i].semver.prerelease.length > 0) {
          var allowed = set7[_i].semver;
          if (allowed.major === version6.major && allowed.minor === version6.minor && allowed.patch === version6.patch) {
            return true;
          }
        }
      }
      return false;
    }
    return true;
  };
  return range7;
}
var Range = requireRange();
var satisfies = (version6, range8, options) => {
  try {
    range8 = new Range(range8, options);
  } catch (er) {
    return false;
  }
  return range8.test(version6);
};
var satisfies_1 = satisfies;
function post(window2, url, data3) {
  var editor = window2.open(url);
  var wait = 1e4;
  var step = 250;
  var _URL = new URL(url), origin = _URL.origin;
  var count4 = ~~(wait / step);
  function listen(evt) {
    if (evt.source === editor) {
      count4 = 0;
      window2.removeEventListener("message", listen, false);
    }
  }
  window2.addEventListener("message", listen, false);
  function send() {
    if (count4 <= 0) {
      return;
    }
    editor.postMessage(data3, origin);
    setTimeout(send, step);
    count4 -= 1;
  }
  setTimeout(send, step);
}
var embedStyle = '.vega-embed {\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box;\n}\n.vega-embed.has-actions {\n  padding-right: 38px;\n}\n.vega-embed details:not([open]) > :not(summary) {\n  display: none !important;\n}\n.vega-embed summary {\n  list-style: none;\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 6px;\n  z-index: 1000;\n  background: white;\n  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);\n  color: #1b1e23;\n  border: 1px solid #aaa;\n  border-radius: 999px;\n  opacity: 0.2;\n  transition: opacity 0.4s ease-in;\n  cursor: pointer;\n  line-height: 0px;\n}\n.vega-embed summary::-webkit-details-marker {\n  display: none;\n}\n.vega-embed summary:active {\n  box-shadow: #aaa 0px 0px 0px 1px inset;\n}\n.vega-embed summary svg {\n  width: 14px;\n  height: 14px;\n}\n.vega-embed details[open] summary {\n  opacity: 0.7;\n}\n.vega-embed:hover summary, .vega-embed:focus-within summary {\n  opacity: 1 !important;\n  transition: opacity 0.2s ease;\n}\n.vega-embed .vega-actions {\n  position: absolute;\n  z-index: 1001;\n  top: 35px;\n  right: -9px;\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 8px;\n  padding-top: 8px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);\n  border: 1px solid #d9d9d9;\n  background: white;\n  animation-duration: 0.15s;\n  animation-name: scale-in;\n  animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);\n  text-align: left;\n}\n.vega-embed .vega-actions a {\n  padding: 8px 16px;\n  font-family: sans-serif;\n  font-size: 14px;\n  font-weight: 600;\n  white-space: nowrap;\n  color: #434a56;\n  text-decoration: none;\n}\n.vega-embed .vega-actions a:hover, .vega-embed .vega-actions a:focus {\n  background-color: #f7f7f9;\n  color: black;\n}\n.vega-embed .vega-actions::before, .vega-embed .vega-actions::after {\n  content: "";\n  display: inline-block;\n  position: absolute;\n}\n.vega-embed .vega-actions::before {\n  left: auto;\n  right: 14px;\n  top: -16px;\n  border: 8px solid rgba(0, 0, 0, 0);\n  border-bottom-color: #d9d9d9;\n}\n.vega-embed .vega-actions::after {\n  left: auto;\n  right: 15px;\n  top: -14px;\n  border: 7px solid rgba(0, 0, 0, 0);\n  border-bottom-color: #fff;\n}\n.vega-embed .chart-wrapper.fit-x {\n  width: 100%;\n}\n.vega-embed .chart-wrapper.fit-y {\n  height: 100%;\n}\n\n.vega-embed-wrapper {\n  max-width: 100%;\n  overflow: auto;\n  padding-right: 14px;\n}\n\n@keyframes scale-in {\n  from {\n    opacity: 0;\n    transform: scale(0.6);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n';
if (!String.prototype.startsWith) {
  String.prototype.startsWith = function(search, pos) {
    return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  };
}
function mergeDeep2(dest) {
  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    src[_key - 1] = arguments[_key];
  }
  for (var _i = 0, _src = src; _i < _src.length; _i++) {
    var s2 = _src[_i];
    deepMerge_2(dest, s2);
  }
  return dest;
}
function deepMerge_2(dest, src) {
  for (var _i2 = 0, _Object$keys = Object.keys(src); _i2 < _Object$keys.length; _i2++) {
    var property2 = _Object$keys[_i2];
    writeConfig(dest, property2, src[property2], true);
  }
}
var name3 = "vega-embed";
var version$13 = "6.21.0";
var description4 = "Publish Vega visualizations as embedded web components.";
var keywords4 = ["vega", "data", "visualization", "component", "embed"];
var repository3 = {
  type: "git",
  url: "http://github.com/vega/vega-embed.git"
};
var author3 = {
  name: "UW Interactive Data Lab",
  url: "http://idl.cs.washington.edu"
};
var contributors2 = [{
  name: "Dominik Moritz",
  url: "https://www.domoritz.de"
}];
var bugs2 = {
  url: "https://github.com/vega/vega-embed/issues"
};
var homepage2 = "https://github.com/vega/vega-embed#readme";
var license3 = "BSD-3-Clause";
var main4 = "build/vega-embed.js";
var module3 = "build/vega-embed.module.js";
var unpkg3 = "build/vega-embed.min.js";
var jsdelivr3 = "build/vega-embed.min.js";
var types3 = "build/vega-embed.module.d.ts";
var files3 = ["src", "build", "build-es5", "patches"];
var devDependencies3 = {
  "@auto-it/conventional-commits": "^10.37.1",
  "@auto-it/first-time-contributor": "^10.37.1",
  "@babel/plugin-transform-runtime": "^7.18.2",
  "@rollup/plugin-commonjs": "22.0.0",
  "@rollup/plugin-json": "^4.1.0",
  "@rollup/plugin-node-resolve": "^13.3.0",
  "@types/semver": "^7.3.9",
  auto: "^10.37.1",
  "browser-sync": "^2.27.10",
  concurrently: "^7.2.1",
  "del-cli": "^4.0.1",
  "jest-canvas-mock": "^2.4.0",
  "patch-package": "^6.4.7",
  "postinstall-postinstall": "^2.1.0",
  rollup: "2.75.6",
  "rollup-plugin-bundle-size": "^1.0.3",
  "rollup-plugin-terser": "^7.0.2",
  "rollup-plugin-ts": "^3.0.0",
  sass: "^1.52.1",
  typescript: "^4.7.2",
  vega: "^5.22.1",
  "vega-lite": "^5.2.0",
  "vega-lite-dev-config": "^0.20.0"
};
var peerDependencies2 = {
  vega: "^5.21.0",
  "vega-lite": "*"
};
var dependencies2 = {
  "fast-json-patch": "^3.1.1",
  "json-stringify-pretty-compact": "^3.0.0",
  semver: "^7.3.7",
  tslib: "^2.4.0",
  "vega-interpreter": "^1.0.4",
  "vega-schema-url-parser": "^2.2.0",
  "vega-themes": "^2.10.0",
  "vega-tooltip": "^0.28.0"
};
var bundledDependencies = ["yallist"];
var scripts3 = {
  prebuild: "yarn clean && yarn build:style",
  build: "rollup -c",
  "build:style": "./build-style.sh",
  clean: "del-cli build build-es5 src/style.ts",
  prepublishOnly: "yarn clean && yarn build",
  preversion: "yarn lint && yarn test",
  serve: "browser-sync start --directory -s -f build *.html",
  start: "yarn build && concurrently --kill-others -n Server,Rollup 'yarn serve' 'rollup -c -w'",
  pretest: "yarn build:style",
  test: "beemo jest --stdio stream",
  "test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand",
  prepare: "beemo create-config && npx patch-package",
  prettierbase: "beemo prettier '*.{css,scss,html}'",
  eslintbase: "beemo eslint .",
  format: "yarn eslintbase --fix && yarn prettierbase --write",
  lint: "yarn eslintbase && yarn prettierbase --check",
  release: "yarn build && auto shipit"
};
var pkg3 = {
  name: name3,
  version: version$13,
  description: description4,
  keywords: keywords4,
  repository: repository3,
  author: author3,
  contributors: contributors2,
  bugs: bugs2,
  homepage: homepage2,
  license: license3,
  main: main4,
  module: module3,
  unpkg: unpkg3,
  jsdelivr: jsdelivr3,
  types: types3,
  files: files3,
  devDependencies: devDependencies3,
  peerDependencies: peerDependencies2,
  dependencies: dependencies2,
  bundledDependencies,
  scripts: scripts3
};
var _w$vl;
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e3(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it = it.call(o);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e3(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys(object2, enumerableOnly) {
  var keys5 = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols4 = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols4 = symbols4.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys5.push.apply(keys5, symbols4);
  }
  return keys5;
}
function _objectSpread(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source3 = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source3), true).forEach(function(key2) {
      _defineProperty(target2, key2, source3[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key2) {
      Object.defineProperty(target2, key2, Object.getOwnPropertyDescriptor(source3, key2));
    });
  }
  return target2;
}
var version5 = pkg3.version;
var vega = vega_module_exports;
var _vegaLite = src_exports3;
var w3 = typeof window !== "undefined" ? window : void 0;
if (_vegaLite === void 0 && w3 !== null && w3 !== void 0 && (_w$vl = w3.vl) !== null && _w$vl !== void 0 && _w$vl.compile) {
  _vegaLite = w3.vl;
}
var DEFAULT_ACTIONS = {
  export: {
    svg: true,
    png: true
  },
  source: true,
  compiled: true,
  editor: true
};
var I18N = {
  CLICK_TO_VIEW_ACTIONS: "Click to view actions",
  COMPILED_ACTION: "View Compiled Vega",
  EDITOR_ACTION: "Open in Vega Editor",
  PNG_ACTION: "Save as PNG",
  SOURCE_ACTION: "View Source",
  SVG_ACTION: "Save as SVG"
};
var NAMES = {
  vega: "Vega",
  "vega-lite": "Vega-Lite"
};
var VERSION = {
  vega: vega.version,
  "vega-lite": _vegaLite ? _vegaLite.version : "not available"
};
var PREPROCESSOR = {
  vega: (vgSpec) => vgSpec,
  "vega-lite": (vlSpec, config) => _vegaLite.compile(vlSpec, {
    config
  }).spec
};
var SVG_CIRCLES = '\n<svg viewBox="0 0 16 16" fill="currentColor" stroke="none" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">\n  <circle r="2" cy="8" cx="2"></circle>\n  <circle r="2" cy="8" cx="8"></circle>\n  <circle r="2" cy="8" cx="14"></circle>\n</svg>';
var CHART_WRAPPER_CLASS = "chart-wrapper";
function isTooltipHandler(h2) {
  return typeof h2 === "function";
}
function viewSource(source3, sourceHeader, sourceFooter, mode3) {
  var header = "<html><head>".concat(sourceHeader, '</head><body><pre><code class="json">');
  var footer = "</code></pre>".concat(sourceFooter, "</body></html>");
  var win = window.open("");
  win.document.write(header + source3 + footer);
  win.document.title = "".concat(NAMES[mode3], " JSON Source");
}
function guessMode(spec, providedMode) {
  if (spec.$schema) {
    var parsed = parser_module_default(spec.$schema);
    if (providedMode && providedMode !== parsed.library) {
      var _NAMES$providedMode;
      console.warn("The given visualization spec is written in ".concat(NAMES[parsed.library], ", but mode argument sets ").concat((_NAMES$providedMode = NAMES[providedMode]) !== null && _NAMES$providedMode !== void 0 ? _NAMES$providedMode : providedMode, "."));
    }
    var mode3 = parsed.library;
    if (!satisfies_1(VERSION[mode3], "^".concat(parsed.version.slice(1)))) {
      console.warn("The input spec uses ".concat(NAMES[mode3], " ").concat(parsed.version, ", but the current version of ").concat(NAMES[mode3], " is v").concat(VERSION[mode3], "."));
    }
    return mode3;
  }
  if ("mark" in spec || "encoding" in spec || "layer" in spec || "hconcat" in spec || "vconcat" in spec || "facet" in spec || "repeat" in spec) {
    return "vega-lite";
  }
  if ("marks" in spec || "signals" in spec || "scales" in spec || "axes" in spec) {
    return "vega";
  }
  return providedMode !== null && providedMode !== void 0 ? providedMode : "vega";
}
function isLoader(o) {
  return !!(o && "load" in o);
}
function createLoader(opts2) {
  return isLoader(opts2) ? opts2 : vega.loader(opts2);
}
function embedOptionsFromUsermeta(parsedSpec) {
  var _embedOptions, _parsedSpec$usermeta;
  var opts2 = (_embedOptions = (_parsedSpec$usermeta = parsedSpec.usermeta) === null || _parsedSpec$usermeta === void 0 ? void 0 : _parsedSpec$usermeta.embedOptions) !== null && _embedOptions !== void 0 ? _embedOptions : {};
  if (isString(opts2.defaultStyle)) {
    opts2.defaultStyle = false;
  }
  return opts2;
}
function embed(_x3, _x22) {
  return _embed2.apply(this, arguments);
}
function _embed2() {
  _embed2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(el, spec) {
    var _parsedOpts$config, _usermetaOpts$config;
    var opts2, parsedSpec, loader2, loadedEmbedOptions, usermetaLoader, _opts$loader, usermetaOpts, parsedOpts, mergedOpts, _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            opts2 = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};
            if (!isString(spec)) {
              _context.next = 10;
              break;
            }
            loader2 = createLoader(opts2.loader);
            _context.t0 = JSON;
            _context.next = 6;
            return loader2.load(spec);
          case 6:
            _context.t1 = _context.sent;
            parsedSpec = _context.t0.parse.call(_context.t0, _context.t1);
            _context.next = 11;
            break;
          case 10:
            parsedSpec = spec;
          case 11:
            loadedEmbedOptions = embedOptionsFromUsermeta(parsedSpec);
            usermetaLoader = loadedEmbedOptions.loader;
            if (!loader2 || usermetaLoader) {
              loader2 = createLoader((_opts$loader = opts2.loader) !== null && _opts$loader !== void 0 ? _opts$loader : usermetaLoader);
            }
            _context.next = 16;
            return loadOpts(loadedEmbedOptions, loader2);
          case 16:
            usermetaOpts = _context.sent;
            _context.next = 19;
            return loadOpts(opts2, loader2);
          case 19:
            parsedOpts = _context.sent;
            mergedOpts = _objectSpread(_objectSpread({}, mergeDeep2(parsedOpts, usermetaOpts)), {}, {
              config: mergeConfig((_parsedOpts$config = parsedOpts.config) !== null && _parsedOpts$config !== void 0 ? _parsedOpts$config : {}, (_usermetaOpts$config = usermetaOpts.config) !== null && _usermetaOpts$config !== void 0 ? _usermetaOpts$config : {})
            });
            _context.next = 23;
            return _embed(el, parsedSpec, mergedOpts, loader2);
          case 23:
            return _context.abrupt("return", _context.sent);
          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _embed2.apply(this, arguments);
}
function loadOpts(_x3, _x4) {
  return _loadOpts.apply(this, arguments);
}
function _loadOpts() {
  _loadOpts = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(opt, loader2) {
    var _opt$config;
    var config, patch2;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!isString(opt.config)) {
              _context2.next = 8;
              break;
            }
            _context2.t1 = JSON;
            _context2.next = 4;
            return loader2.load(opt.config);
          case 4:
            _context2.t2 = _context2.sent;
            _context2.t0 = _context2.t1.parse.call(_context2.t1, _context2.t2);
            _context2.next = 9;
            break;
          case 8:
            _context2.t0 = (_opt$config = opt.config) !== null && _opt$config !== void 0 ? _opt$config : {};
          case 9:
            config = _context2.t0;
            if (!isString(opt.patch)) {
              _context2.next = 18;
              break;
            }
            _context2.t4 = JSON;
            _context2.next = 14;
            return loader2.load(opt.patch);
          case 14:
            _context2.t5 = _context2.sent;
            _context2.t3 = _context2.t4.parse.call(_context2.t4, _context2.t5);
            _context2.next = 19;
            break;
          case 18:
            _context2.t3 = opt.patch;
          case 19:
            patch2 = _context2.t3;
            return _context2.abrupt("return", _objectSpread(_objectSpread(_objectSpread({}, opt), patch2 ? {
              patch: patch2
            } : {}), config ? {
              config
            } : {}));
          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadOpts.apply(this, arguments);
}
function getRoot(el) {
  var _document$head;
  var possibleRoot = el.getRootNode ? el.getRootNode() : document;
  return possibleRoot instanceof ShadowRoot ? {
    root: possibleRoot,
    rootContainer: possibleRoot
  } : {
    root: document,
    rootContainer: (_document$head = document.head) !== null && _document$head !== void 0 ? _document$head : document.body
  };
}
function _embed(_x5, _x6) {
  return _embed3.apply(this, arguments);
}
function _embed3() {
  _embed3 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(el, spec) {
    var _opts$config, _opts$actions, _opts$renderer, _opts$logLevel, _opts$downloadFileNam, _ref, _expressionInterprete;
    var opts2, loader2, config, actions, i18n, renderer, logLevel, downloadFileName, element3, ID, _getRoot, root, rootContainer, style2, mode3, vgSpec, parsed, container, chartWrapper, patch2, name4, expressionFunction2, ast, runtime2, view, handler, hover2, _ref2, hoverSet, updateSet, documentClickHandler, wrapper, details, summary, ctrl, _iterator, _step, _loop, viewSourceLink, compileLink, _opts$editorUrl, editorUrl, editorLink, finalize2, _args4 = arguments;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            finalize2 = function _finalize() {
              if (documentClickHandler) {
                document.removeEventListener("click", documentClickHandler);
              }
              view.finalize();
            };
            opts2 = _args4.length > 2 && _args4[2] !== void 0 ? _args4[2] : {};
            loader2 = _args4.length > 3 ? _args4[3] : void 0;
            config = opts2.theme ? mergeConfig(vega_themes_module_exports[opts2.theme], (_opts$config = opts2.config) !== null && _opts$config !== void 0 ? _opts$config : {}) : opts2.config;
            actions = isBoolean(opts2.actions) ? opts2.actions : mergeDeep2({}, DEFAULT_ACTIONS, (_opts$actions = opts2.actions) !== null && _opts$actions !== void 0 ? _opts$actions : {});
            i18n = _objectSpread(_objectSpread({}, I18N), opts2.i18n);
            renderer = (_opts$renderer = opts2.renderer) !== null && _opts$renderer !== void 0 ? _opts$renderer : "canvas";
            logLevel = (_opts$logLevel = opts2.logLevel) !== null && _opts$logLevel !== void 0 ? _opts$logLevel : vega.Warn;
            downloadFileName = (_opts$downloadFileNam = opts2.downloadFileName) !== null && _opts$downloadFileNam !== void 0 ? _opts$downloadFileNam : "visualization";
            element3 = typeof el === "string" ? document.querySelector(el) : el;
            if (element3) {
              _context4.next = 12;
              break;
            }
            throw new Error("".concat(el, " does not exist"));
          case 12:
            if (opts2.defaultStyle !== false) {
              ID = "vega-embed-style";
              _getRoot = getRoot(element3), root = _getRoot.root, rootContainer = _getRoot.rootContainer;
              if (!root.getElementById(ID)) {
                style2 = document.createElement("style");
                style2.id = ID;
                style2.innerHTML = opts2.defaultStyle === void 0 || opts2.defaultStyle === true ? embedStyle.toString() : opts2.defaultStyle;
                rootContainer.appendChild(style2);
              }
            }
            mode3 = guessMode(spec, opts2.mode);
            vgSpec = PREPROCESSOR[mode3](spec, config);
            if (mode3 === "vega-lite") {
              if (vgSpec.$schema) {
                parsed = parser_module_default(vgSpec.$schema);
                if (!satisfies_1(VERSION.vega, "^".concat(parsed.version.slice(1)))) {
                  console.warn("The compiled spec uses Vega ".concat(parsed.version, ", but current version is v").concat(VERSION.vega, "."));
                }
              }
            }
            element3.classList.add("vega-embed");
            if (actions) {
              element3.classList.add("has-actions");
            }
            element3.innerHTML = "";
            container = element3;
            if (actions) {
              chartWrapper = document.createElement("div");
              chartWrapper.classList.add(CHART_WRAPPER_CLASS);
              element3.appendChild(chartWrapper);
              container = chartWrapper;
            }
            patch2 = opts2.patch;
            if (patch2) {
              vgSpec = patch2 instanceof Function ? patch2(vgSpec) : applyPatch(vgSpec, patch2, true, false).newDocument;
            }
            if (opts2.formatLocale) {
              vega.formatLocale(opts2.formatLocale);
            }
            if (opts2.timeFormatLocale) {
              vega.timeFormatLocale(opts2.timeFormatLocale);
            }
            if (opts2.expressionFunctions) {
              for (name4 in opts2.expressionFunctions) {
                expressionFunction2 = opts2.expressionFunctions[name4];
                if ("fn" in expressionFunction2) {
                  vega.expressionFunction(name4, expressionFunction2.fn, expressionFunction2["visitor"]);
                } else if (expressionFunction2 instanceof Function) {
                  vega.expressionFunction(name4, expressionFunction2);
                }
              }
            }
            ast = opts2.ast;
            runtime2 = vega.parse(vgSpec, mode3 === "vega-lite" ? {} : config, {
              ast
            });
            view = new (opts2.viewClass || vega.View)(runtime2, _objectSpread({
              loader: loader2,
              logLevel,
              renderer
            }, ast ? {
              expr: (_ref = (_expressionInterprete = vega.expressionInterpreter) !== null && _expressionInterprete !== void 0 ? _expressionInterprete : opts2.expr) !== null && _ref !== void 0 ? _ref : expression2
            } : {}));
            view.addSignalListener("autosize", (_, autosize) => {
              var type3 = autosize.type;
              if (type3 == "fit-x") {
                container.classList.add("fit-x");
                container.classList.remove("fit-y");
              } else if (type3 == "fit-y") {
                container.classList.remove("fit-x");
                container.classList.add("fit-y");
              } else if (type3 == "fit") {
                container.classList.add("fit-x", "fit-y");
              } else {
                container.classList.remove("fit-x", "fit-y");
              }
            });
            if (opts2.tooltip !== false) {
              handler = isTooltipHandler(opts2.tooltip) ? opts2.tooltip : new Handler2(opts2.tooltip === true ? {} : opts2.tooltip).call;
              view.tooltip(handler);
            }
            hover2 = opts2.hover;
            if (hover2 === void 0) {
              hover2 = mode3 === "vega";
            }
            if (hover2) {
              _ref2 = typeof hover2 === "boolean" ? {} : hover2, hoverSet = _ref2.hoverSet, updateSet = _ref2.updateSet;
              view.hover(hoverSet, updateSet);
            }
            if (opts2) {
              if (opts2.width != null) {
                view.width(opts2.width);
              }
              if (opts2.height != null) {
                view.height(opts2.height);
              }
              if (opts2.padding != null) {
                view.padding(opts2.padding);
              }
            }
            _context4.next = 37;
            return view.initialize(container, opts2.bind).runAsync();
          case 37:
            if (actions !== false) {
              wrapper = element3;
              if (opts2.defaultStyle !== false) {
                details = document.createElement("details");
                details.title = i18n.CLICK_TO_VIEW_ACTIONS;
                element3.append(details);
                wrapper = details;
                summary = document.createElement("summary");
                summary.innerHTML = SVG_CIRCLES;
                details.append(summary);
                documentClickHandler = (ev) => {
                  if (!details.contains(ev.target)) {
                    details.removeAttribute("open");
                  }
                };
                document.addEventListener("click", documentClickHandler);
              }
              ctrl = document.createElement("div");
              wrapper.append(ctrl);
              ctrl.classList.add("vega-actions");
              if (actions === true || actions.export !== false) {
                _iterator = _createForOfIteratorHelper(["svg", "png"]);
                try {
                  _loop = function _loop2() {
                    var ext = _step.value;
                    if (actions === true || actions.export === true || actions.export[ext]) {
                      var i18nExportAction = i18n["".concat(ext.toUpperCase(), "_ACTION")];
                      var exportLink = document.createElement("a");
                      exportLink.text = i18nExportAction;
                      exportLink.href = "#";
                      exportLink.target = "_blank";
                      exportLink.download = "".concat(downloadFileName, ".").concat(ext);
                      exportLink.addEventListener("mousedown", function() {
                        var _ref3 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(e3) {
                          var url;
                          return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                            while (1) {
                              switch (_context3.prev = _context3.next) {
                                case 0:
                                  e3.preventDefault();
                                  _context3.next = 3;
                                  return view.toImageURL(ext, opts2.scaleFactor);
                                case 3:
                                  url = _context3.sent;
                                  this.href = url;
                                case 5:
                                case "end":
                                  return _context3.stop();
                              }
                            }
                          }, _callee3, this);
                        }));
                        return function(_x7) {
                          return _ref3.apply(this, arguments);
                        };
                      }());
                      ctrl.append(exportLink);
                    }
                  };
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    _loop();
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              }
              if (actions === true || actions.source !== false) {
                viewSourceLink = document.createElement("a");
                viewSourceLink.text = i18n.SOURCE_ACTION;
                viewSourceLink.href = "#";
                viewSourceLink.addEventListener("click", function(e3) {
                  var _opts$sourceHeader, _opts$sourceFooter;
                  viewSource((0, import_json_stringify_pretty_compact.default)(spec), (_opts$sourceHeader = opts2.sourceHeader) !== null && _opts$sourceHeader !== void 0 ? _opts$sourceHeader : "", (_opts$sourceFooter = opts2.sourceFooter) !== null && _opts$sourceFooter !== void 0 ? _opts$sourceFooter : "", mode3);
                  e3.preventDefault();
                });
                ctrl.append(viewSourceLink);
              }
              if (mode3 === "vega-lite" && (actions === true || actions.compiled !== false)) {
                compileLink = document.createElement("a");
                compileLink.text = i18n.COMPILED_ACTION;
                compileLink.href = "#";
                compileLink.addEventListener("click", function(e3) {
                  var _opts$sourceHeader2, _opts$sourceFooter2;
                  viewSource((0, import_json_stringify_pretty_compact.default)(vgSpec), (_opts$sourceHeader2 = opts2.sourceHeader) !== null && _opts$sourceHeader2 !== void 0 ? _opts$sourceHeader2 : "", (_opts$sourceFooter2 = opts2.sourceFooter) !== null && _opts$sourceFooter2 !== void 0 ? _opts$sourceFooter2 : "", "vega");
                  e3.preventDefault();
                });
                ctrl.append(compileLink);
              }
              if (actions === true || actions.editor !== false) {
                editorUrl = (_opts$editorUrl = opts2.editorUrl) !== null && _opts$editorUrl !== void 0 ? _opts$editorUrl : "https://vega.github.io/editor/";
                editorLink = document.createElement("a");
                editorLink.text = i18n.EDITOR_ACTION;
                editorLink.href = "#";
                editorLink.addEventListener("click", function(e3) {
                  post(window, editorUrl, {
                    config,
                    mode: mode3,
                    renderer,
                    spec: (0, import_json_stringify_pretty_compact.default)(spec)
                  });
                  e3.preventDefault();
                });
                ctrl.append(editorLink);
              }
            }
            return _context4.abrupt("return", {
              view,
              spec,
              vgSpec,
              finalize: finalize2,
              embedOptions: opts2
            });
          case 39:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _embed3.apply(this, arguments);
}

// dep:vega-embed
var vega_embed_default = embed;
export {
  DEFAULT_ACTIONS,
  vega_embed_default as default,
  guessMode,
  vega,
  _vegaLite as vegaLite,
  version5 as version
};
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2021 Joachim Wester
 * MIT license
 */
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2022 Joachim Wester
 * MIT licensed
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=vega-embed.js.map
